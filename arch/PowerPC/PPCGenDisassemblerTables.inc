#include "../../MCInst.h"
#include "../../LEB128.h"


#define PPC_AIXOS 0ULL
#define PPC_DeprecatedDST 1ULL
#define PPC_Directive32 2ULL
#define PPC_Directive64 3ULL
#define PPC_Directive440 4ULL
#define PPC_Directive601 5ULL
#define PPC_Directive602 6ULL
#define PPC_Directive603 7ULL
#define PPC_Directive604 8ULL
#define PPC_Directive620 9ULL
#define PPC_Directive750 10ULL
#define PPC_Directive970 11ULL
#define PPC_Directive7400 12ULL
#define PPC_DirectiveA2 13ULL
#define PPC_DirectiveE500 14ULL
#define PPC_DirectiveE500mc 15ULL
#define PPC_DirectiveE5500 16ULL
#define PPC_DirectivePwr3 17ULL
#define PPC_DirectivePwr4 18ULL
#define PPC_DirectivePwr5 19ULL
#define PPC_DirectivePwr5x 20ULL
#define PPC_DirectivePwr6 21ULL
#define PPC_DirectivePwr6x 22ULL
#define PPC_DirectivePwr7 23ULL
#define PPC_DirectivePwr8 24ULL
#define PPC_DirectivePwr9 25ULL
#define PPC_DirectivePwr10 26ULL
#define PPC_DirectivePwrFuture 27ULL
#define PPC_Feature64Bit 28ULL
#define PPC_Feature64BitRegs 29ULL
#define PPC_FeatureAddLogicalFusion 30ULL
#define PPC_FeatureAddiLoadFusion 31ULL
#define PPC_FeatureAddisLoadFusion 32ULL
#define PPC_FeatureAltivec 33ULL
#define PPC_FeatureArithAddFusion 34ULL
#define PPC_FeatureBPERMD 35ULL
#define PPC_FeatureBookE 36ULL
#define PPC_FeatureCMPB 37ULL
#define PPC_FeatureCRBits 38ULL
#define PPC_FeatureDirectMove 39ULL
#define PPC_FeatureE500 40ULL
#define PPC_FeatureEFPU2 41ULL
#define PPC_FeatureExtDiv 42ULL
#define PPC_FeatureFCPSGN 43ULL
#define PPC_FeatureFPCVT 44ULL
#define PPC_FeatureFPRND 45ULL
#define PPC_FeatureFPU 46ULL
#define PPC_FeatureFRE 47ULL
#define PPC_FeatureFRES 48ULL
#define PPC_FeatureFRSQRTE 49ULL
#define PPC_FeatureFRSQRTES 50ULL
#define PPC_FeatureFSqrt 51ULL
#define PPC_FeatureFloat128 52ULL
#define PPC_FeatureFusion 53ULL
#define PPC_FeatureHTM 54ULL
#define PPC_FeatureHardFloat 55ULL
#define PPC_FeatureICBT 56ULL
#define PPC_FeatureISA2_06 57ULL
#define PPC_FeatureISA2_07 58ULL
#define PPC_FeatureISA3_0 59ULL
#define PPC_FeatureISA3_1 60ULL
#define PPC_FeatureISEL 61ULL
#define PPC_FeatureInvariantFunctionDescriptors 62ULL
#define PPC_FeatureLDBRX 63ULL
#define PPC_FeatureLFIWAX 64ULL
#define PPC_FeatureLogicalAddFusion 65ULL
#define PPC_FeatureLogicalFusion 66ULL
#define PPC_FeatureLongCall 67ULL
#define PPC_FeatureMFOCRF 68ULL
#define PPC_FeatureMFTB 69ULL
#define PPC_FeatureMMA 70ULL
#define PPC_FeatureMSYNC 71ULL
#define PPC_FeatureModernAIXAs 72ULL
#define PPC_FeatureP8Altivec 73ULL
#define PPC_FeatureP8Crypto 74ULL
#define PPC_FeatureP8Vector 75ULL
#define PPC_FeatureP9Altivec 76ULL
#define PPC_FeatureP9Vector 77ULL
#define PPC_FeatureP10Vector 78ULL
#define PPC_FeaturePCRelativeMemops 79ULL
#define PPC_FeaturePOPCNTD 80ULL
#define PPC_FeaturePPC4xx 81ULL
#define PPC_FeaturePPC6xx 82ULL
#define PPC_FeaturePPCPostRASched 83ULL
#define PPC_FeaturePPCPreRASched 84ULL
#define PPC_FeaturePairedVectorMemops 85ULL
#define PPC_FeaturePartwordAtomic 86ULL
#define PPC_FeaturePredictableSelectIsExpensive 87ULL
#define PPC_FeaturePrefixInstrs 88ULL
#define PPC_FeaturePrivileged 89ULL
#define PPC_FeatureQuadwordAtomic 90ULL
#define PPC_FeatureROPProtect 91ULL
#define PPC_FeatureRecipPrec 92ULL
#define PPC_FeatureSPE 93ULL
#define PPC_FeatureSTFIWX 94ULL
#define PPC_FeatureSecurePlt 95ULL
#define PPC_FeatureSlowPOPCNTD 96ULL
#define PPC_FeatureStoreFusion 97ULL
#define PPC_FeatureTwoConstNR 98ULL
#define PPC_FeatureUnalignedFloats 99ULL
#define PPC_FeatureVSX 100ULL
#define PPC_FeatureVectorsUseTwoUnits 101ULL
#ifdef MIPS_GET_DISASSEMBLER
#undef MIPS_GET_DISASSEMBLER

// Helper function for extracting fields from encoded instructions.
#define FieldFromInstruction(fname, InsnType) \
static InsnType fname(InsnType insn, unsigned startBit, unsigned numBits) \
{ \
  InsnType fieldMask; \
  if (numBits == sizeof(InsnType)*8) \
    fieldMask = (InsnType)(-1LL); \
  else \
    fieldMask = (((InsnType)1 << numBits) - 1) << startBit; \
  return (insn & fieldMask) >> startBit; \
}

static const uint8_t DecoderTable32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 20
/* 8 */       MCD_OPC_CheckField, 1, 10, 128, 2, 100, 84, 0, // Skip to: 21620
/* 16 */      MCD_OPC_Decode, 210, 3, 0, // Opcode: ATTN
/* 20 */      MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 29
/* 25 */      MCD_OPC_Decode, 245, 13, 1, // Opcode: TDI
/* 29 */      MCD_OPC_FilterValue, 3, 4, 0, 0, // Skip to: 38
/* 34 */      MCD_OPC_Decode, 140, 14, 2, // Opcode: TWI
/* 38 */      MCD_OPC_FilterValue, 4, 255, 23, 0, // Skip to: 6186
/* 43 */      MCD_OPC_ExtractField, 1, 5,  // Inst{5-1} ...
/* 46 */      MCD_OPC_FilterValue, 0, 217, 2, 0, // Skip to: 780
/* 51 */      MCD_OPC_ExtractField, 6, 3,  // Inst{8-6} ...
/* 54 */      MCD_OPC_FilterValue, 0, 101, 0, 0, // Skip to: 160
/* 59 */      MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 62 */      MCD_OPC_FilterValue, 0, 28, 0, 0, // Skip to: 95
/* 67 */      MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 70 */      MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 79
/* 75 */      MCD_OPC_Decode, 154, 14, 3, // Opcode: VADDUBM
/* 79 */      MCD_OPC_FilterValue, 1, 32, 84, 0, // Skip to: 21620
/* 84 */      MCD_OPC_CheckField, 11, 5, 0, 25, 84, 0, // Skip to: 21620
/* 91 */      MCD_OPC_Decode, 245, 15, 4, // Opcode: VMUL10CUQ
/* 95 */      MCD_OPC_FilterValue, 1, 28, 0, 0, // Skip to: 128
/* 100 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 103 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 112
/* 108 */     MCD_OPC_Decode, 155, 14, 3, // Opcode: VADDUBS
/* 112 */     MCD_OPC_FilterValue, 1, 255, 83, 0, // Skip to: 21620
/* 117 */     MCD_OPC_CheckField, 11, 5, 0, 248, 83, 0, // Skip to: 21620
/* 124 */     MCD_OPC_Decode, 248, 15, 4, // Opcode: VMUL10UQ
/* 128 */     MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 144
/* 133 */     MCD_OPC_CheckField, 0, 1, 0, 232, 83, 0, // Skip to: 21620
/* 140 */     MCD_OPC_Decode, 250, 16, 3, // Opcode: VSUBUBM
/* 144 */     MCD_OPC_FilterValue, 3, 223, 83, 0, // Skip to: 21620
/* 149 */     MCD_OPC_CheckField, 0, 1, 0, 216, 83, 0, // Skip to: 21620
/* 156 */     MCD_OPC_Decode, 251, 16, 3, // Opcode: VSUBUBS
/* 160 */     MCD_OPC_FilterValue, 1, 87, 0, 0, // Skip to: 252
/* 165 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 168 */     MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 194
/* 173 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 176 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 185
/* 181 */     MCD_OPC_Decode, 157, 14, 3, // Opcode: VADDUHM
/* 185 */     MCD_OPC_FilterValue, 1, 182, 83, 0, // Skip to: 21620
/* 190 */     MCD_OPC_Decode, 246, 15, 3, // Opcode: VMUL10ECUQ
/* 194 */     MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 220
/* 199 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 202 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 211
/* 207 */     MCD_OPC_Decode, 158, 14, 3, // Opcode: VADDUHS
/* 211 */     MCD_OPC_FilterValue, 1, 156, 83, 0, // Skip to: 21620
/* 216 */     MCD_OPC_Decode, 247, 15, 3, // Opcode: VMUL10EUQ
/* 220 */     MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 236
/* 225 */     MCD_OPC_CheckField, 0, 1, 0, 140, 83, 0, // Skip to: 21620
/* 232 */     MCD_OPC_Decode, 253, 16, 3, // Opcode: VSUBUHM
/* 236 */     MCD_OPC_FilterValue, 3, 131, 83, 0, // Skip to: 21620
/* 241 */     MCD_OPC_CheckField, 0, 1, 0, 124, 83, 0, // Skip to: 21620
/* 248 */     MCD_OPC_Decode, 254, 16, 3, // Opcode: VSUBUHS
/* 252 */     MCD_OPC_FilterValue, 2, 77, 0, 0, // Skip to: 334
/* 257 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 260 */     MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 276
/* 265 */     MCD_OPC_CheckField, 0, 1, 0, 100, 83, 0, // Skip to: 21620
/* 272 */     MCD_OPC_Decode, 160, 14, 3, // Opcode: VADDUWM
/* 276 */     MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 292
/* 281 */     MCD_OPC_CheckField, 0, 1, 0, 84, 83, 0, // Skip to: 21620
/* 288 */     MCD_OPC_Decode, 161, 14, 3, // Opcode: VADDUWS
/* 292 */     MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 318
/* 297 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 300 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 309
/* 305 */     MCD_OPC_Decode, 128, 17, 3, // Opcode: VSUBUWM
/* 309 */     MCD_OPC_FilterValue, 1, 58, 83, 0, // Skip to: 21620
/* 314 */     MCD_OPC_Decode, 243, 3, 3, // Opcode: BCDUS_rec
/* 318 */     MCD_OPC_FilterValue, 3, 49, 83, 0, // Skip to: 21620
/* 323 */     MCD_OPC_CheckField, 0, 1, 0, 42, 83, 0, // Skip to: 21620
/* 330 */     MCD_OPC_Decode, 129, 17, 3, // Opcode: VSUBUWS
/* 334 */     MCD_OPC_FilterValue, 3, 45, 0, 0, // Skip to: 384
/* 339 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 342 */     MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 368
/* 347 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 350 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 359
/* 355 */     MCD_OPC_Decode, 156, 14, 3, // Opcode: VADDUDM
/* 359 */     MCD_OPC_FilterValue, 2, 8, 83, 0, // Skip to: 21620
/* 364 */     MCD_OPC_Decode, 252, 16, 3, // Opcode: VSUBUDM
/* 368 */     MCD_OPC_FilterValue, 1, 255, 82, 0, // Skip to: 21620
/* 373 */     MCD_OPC_CheckField, 10, 1, 1, 248, 82, 0, // Skip to: 21620
/* 380 */     MCD_OPC_Decode, 241, 3, 5, // Opcode: BCDS_rec
/* 384 */     MCD_OPC_FilterValue, 4, 87, 0, 0, // Skip to: 476
/* 389 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 392 */     MCD_OPC_FilterValue, 0, 39, 0, 0, // Skip to: 436
/* 397 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 400 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 409
/* 405 */     MCD_OPC_Decode, 159, 14, 3, // Opcode: VADDUQM
/* 409 */     MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 418
/* 414 */     MCD_OPC_Decode, 151, 14, 3, // Opcode: VADDSBS
/* 418 */     MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 427
/* 423 */     MCD_OPC_Decode, 255, 16, 3, // Opcode: VSUBUQM
/* 427 */     MCD_OPC_FilterValue, 3, 196, 82, 0, // Skip to: 21620
/* 432 */     MCD_OPC_Decode, 247, 16, 3, // Opcode: VSUBSBS
/* 436 */     MCD_OPC_FilterValue, 1, 187, 82, 0, // Skip to: 21620
/* 441 */     MCD_OPC_ExtractField, 10, 1,  // Inst{10} ...
/* 444 */     MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 467
/* 449 */     MCD_OPC_CheckField, 21, 2, 0, 172, 82, 0, // Skip to: 21620
/* 456 */     MCD_OPC_CheckField, 9, 1, 0, 165, 82, 0, // Skip to: 21620
/* 463 */     MCD_OPC_Decode, 238, 14, 6, // Opcode: VCMPUQ
/* 467 */     MCD_OPC_FilterValue, 1, 156, 82, 0, // Skip to: 21620
/* 472 */     MCD_OPC_Decode, 242, 3, 5, // Opcode: BCDTRUNC_rec
/* 476 */     MCD_OPC_FilterValue, 5, 104, 0, 0, // Skip to: 585
/* 481 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 484 */     MCD_OPC_FilterValue, 0, 28, 0, 0, // Skip to: 517
/* 489 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 492 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 501
/* 497 */     MCD_OPC_Decode, 146, 14, 3, // Opcode: VADDCUQ
/* 501 */     MCD_OPC_FilterValue, 1, 122, 82, 0, // Skip to: 21620
/* 506 */     MCD_OPC_CheckField, 21, 2, 0, 115, 82, 0, // Skip to: 21620
/* 513 */     MCD_OPC_Decode, 237, 14, 6, // Opcode: VCMPSQ
/* 517 */     MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 543
/* 522 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 525 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 534
/* 530 */     MCD_OPC_Decode, 152, 14, 3, // Opcode: VADDSHS
/* 534 */     MCD_OPC_FilterValue, 1, 89, 82, 0, // Skip to: 21620
/* 539 */     MCD_OPC_Decode, 235, 3, 3, // Opcode: BCDCPSGN_rec
/* 543 */     MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 569
/* 548 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 551 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 560
/* 556 */     MCD_OPC_Decode, 242, 16, 3, // Opcode: VSUBCUQ
/* 560 */     MCD_OPC_FilterValue, 1, 63, 82, 0, // Skip to: 21620
/* 565 */     MCD_OPC_Decode, 244, 3, 3, // Opcode: BCDUTRUNC_rec
/* 569 */     MCD_OPC_FilterValue, 3, 54, 82, 0, // Skip to: 21620
/* 574 */     MCD_OPC_CheckField, 0, 1, 0, 47, 82, 0, // Skip to: 21620
/* 581 */     MCD_OPC_Decode, 248, 16, 3, // Opcode: VSUBSHS
/* 585 */     MCD_OPC_FilterValue, 6, 167, 0, 0, // Skip to: 757
/* 590 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 593 */     MCD_OPC_FilterValue, 0, 39, 0, 0, // Skip to: 637
/* 598 */     MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 601 */     MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 610
/* 606 */     MCD_OPC_Decode, 147, 14, 3, // Opcode: VADDCUW
/* 610 */     MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 619
/* 615 */     MCD_OPC_Decode, 153, 14, 3, // Opcode: VADDSWS
/* 619 */     MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 628
/* 624 */     MCD_OPC_Decode, 243, 16, 3, // Opcode: VSUBCUW
/* 628 */     MCD_OPC_FilterValue, 3, 251, 81, 0, // Skip to: 21620
/* 633 */     MCD_OPC_Decode, 249, 16, 3, // Opcode: VSUBSWS
/* 637 */     MCD_OPC_FilterValue, 1, 242, 81, 0, // Skip to: 21620
/* 642 */     MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 645 */     MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 661
/* 650 */     MCD_OPC_CheckField, 9, 2, 2, 227, 81, 0, // Skip to: 21620
/* 657 */     MCD_OPC_Decode, 237, 3, 7, // Opcode: BCDCTSQ_rec
/* 661 */     MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 677
/* 666 */     MCD_OPC_CheckField, 10, 1, 1, 211, 81, 0, // Skip to: 21620
/* 673 */     MCD_OPC_Decode, 233, 3, 8, // Opcode: BCDCFSQ_rec
/* 677 */     MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 693
/* 682 */     MCD_OPC_CheckField, 10, 1, 1, 195, 81, 0, // Skip to: 21620
/* 689 */     MCD_OPC_Decode, 238, 3, 8, // Opcode: BCDCTZ_rec
/* 693 */     MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 709
/* 698 */     MCD_OPC_CheckField, 9, 2, 2, 179, 81, 0, // Skip to: 21620
/* 705 */     MCD_OPC_Decode, 236, 3, 7, // Opcode: BCDCTN_rec
/* 709 */     MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 725
/* 714 */     MCD_OPC_CheckField, 10, 1, 1, 163, 81, 0, // Skip to: 21620
/* 721 */     MCD_OPC_Decode, 234, 3, 8, // Opcode: BCDCFZ_rec
/* 725 */     MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 741
/* 730 */     MCD_OPC_CheckField, 10, 1, 1, 147, 81, 0, // Skip to: 21620
/* 737 */     MCD_OPC_Decode, 232, 3, 8, // Opcode: BCDCFN_rec
/* 741 */     MCD_OPC_FilterValue, 31, 138, 81, 0, // Skip to: 21620
/* 746 */     MCD_OPC_CheckField, 10, 1, 1, 131, 81, 0, // Skip to: 21620
/* 753 */     MCD_OPC_Decode, 239, 3, 8, // Opcode: BCDSETSGN_rec
/* 757 */     MCD_OPC_FilterValue, 7, 122, 81, 0, // Skip to: 21620
/* 762 */     MCD_OPC_CheckField, 10, 1, 1, 115, 81, 0, // Skip to: 21620
/* 769 */     MCD_OPC_CheckField, 0, 1, 1, 108, 81, 0, // Skip to: 21620
/* 776 */     MCD_OPC_Decode, 240, 3, 5, // Opcode: BCDSR_rec
/* 780 */     MCD_OPC_FilterValue, 1, 214, 4, 0, // Skip to: 2023
/* 785 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 788 */     MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 804
/* 793 */     MCD_OPC_CheckField, 0, 1, 0, 84, 81, 0, // Skip to: 21620
/* 800 */     MCD_OPC_Decode, 207, 15, 3, // Opcode: VMAXUB
/* 804 */     MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 820
/* 809 */     MCD_OPC_CheckField, 0, 1, 0, 68, 81, 0, // Skip to: 21620
/* 816 */     MCD_OPC_Decode, 209, 15, 3, // Opcode: VMAXUH
/* 820 */     MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 836
/* 825 */     MCD_OPC_CheckField, 0, 1, 0, 52, 81, 0, // Skip to: 21620
/* 832 */     MCD_OPC_Decode, 210, 15, 3, // Opcode: VMAXUW
/* 836 */     MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 852
/* 841 */     MCD_OPC_CheckField, 0, 1, 0, 36, 81, 0, // Skip to: 21620
/* 848 */     MCD_OPC_Decode, 208, 15, 3, // Opcode: VMAXUD
/* 852 */     MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 868
/* 857 */     MCD_OPC_CheckField, 0, 1, 0, 20, 81, 0, // Skip to: 21620
/* 864 */     MCD_OPC_Decode, 203, 15, 3, // Opcode: VMAXSB
/* 868 */     MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 884
/* 873 */     MCD_OPC_CheckField, 0, 1, 0, 4, 81, 0, // Skip to: 21620
/* 880 */     MCD_OPC_Decode, 205, 15, 3, // Opcode: VMAXSH
/* 884 */     MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 900
/* 889 */     MCD_OPC_CheckField, 0, 1, 0, 244, 80, 0, // Skip to: 21620
/* 896 */     MCD_OPC_Decode, 206, 15, 3, // Opcode: VMAXSW
/* 900 */     MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 916
/* 905 */     MCD_OPC_CheckField, 0, 1, 0, 228, 80, 0, // Skip to: 21620
/* 912 */     MCD_OPC_Decode, 204, 15, 3, // Opcode: VMAXSD
/* 916 */     MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 932
/* 921 */     MCD_OPC_CheckField, 0, 1, 0, 212, 80, 0, // Skip to: 21620
/* 928 */     MCD_OPC_Decode, 218, 15, 3, // Opcode: VMINUB
/* 932 */     MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 948
/* 937 */     MCD_OPC_CheckField, 0, 1, 0, 196, 80, 0, // Skip to: 21620
/* 944 */     MCD_OPC_Decode, 220, 15, 3, // Opcode: VMINUH
/* 948 */     MCD_OPC_FilterValue, 10, 11, 0, 0, // Skip to: 964
/* 953 */     MCD_OPC_CheckField, 0, 1, 0, 180, 80, 0, // Skip to: 21620
/* 960 */     MCD_OPC_Decode, 221, 15, 3, // Opcode: VMINUW
/* 964 */     MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 980
/* 969 */     MCD_OPC_CheckField, 0, 1, 0, 164, 80, 0, // Skip to: 21620
/* 976 */     MCD_OPC_Decode, 219, 15, 3, // Opcode: VMINUD
/* 980 */     MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 996
/* 985 */     MCD_OPC_CheckField, 0, 1, 0, 148, 80, 0, // Skip to: 21620
/* 992 */     MCD_OPC_Decode, 214, 15, 3, // Opcode: VMINSB
/* 996 */     MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 1012
/* 1001 */    MCD_OPC_CheckField, 0, 1, 0, 132, 80, 0, // Skip to: 21620
/* 1008 */    MCD_OPC_Decode, 216, 15, 3, // Opcode: VMINSH
/* 1012 */    MCD_OPC_FilterValue, 14, 11, 0, 0, // Skip to: 1028
/* 1017 */    MCD_OPC_CheckField, 0, 1, 0, 116, 80, 0, // Skip to: 21620
/* 1024 */    MCD_OPC_Decode, 217, 15, 3, // Opcode: VMINSW
/* 1028 */    MCD_OPC_FilterValue, 15, 11, 0, 0, // Skip to: 1044
/* 1033 */    MCD_OPC_CheckField, 0, 1, 0, 100, 80, 0, // Skip to: 21620
/* 1040 */    MCD_OPC_Decode, 215, 15, 3, // Opcode: VMINSD
/* 1044 */    MCD_OPC_FilterValue, 16, 21, 0, 0, // Skip to: 1070
/* 1049 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1052 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 1061
/* 1057 */    MCD_OPC_Decode, 167, 14, 3, // Opcode: VAVGUB
/* 1061 */    MCD_OPC_FilterValue, 1, 74, 80, 0, // Skip to: 21620
/* 1066 */    MCD_OPC_Decode, 143, 14, 3, // Opcode: VABSDUB
/* 1070 */    MCD_OPC_FilterValue, 17, 21, 0, 0, // Skip to: 1096
/* 1075 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1078 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 1087
/* 1083 */    MCD_OPC_Decode, 168, 14, 3, // Opcode: VAVGUH
/* 1087 */    MCD_OPC_FilterValue, 1, 48, 80, 0, // Skip to: 21620
/* 1092 */    MCD_OPC_Decode, 144, 14, 3, // Opcode: VABSDUH
/* 1096 */    MCD_OPC_FilterValue, 18, 21, 0, 0, // Skip to: 1122
/* 1101 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1104 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 1113
/* 1109 */    MCD_OPC_Decode, 169, 14, 3, // Opcode: VAVGUW
/* 1113 */    MCD_OPC_FilterValue, 1, 22, 80, 0, // Skip to: 21620
/* 1118 */    MCD_OPC_Decode, 145, 14, 3, // Opcode: VABSDUW
/* 1122 */    MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 1138
/* 1127 */    MCD_OPC_CheckField, 0, 1, 0, 6, 80, 0, // Skip to: 21620
/* 1134 */    MCD_OPC_Decode, 164, 14, 3, // Opcode: VAVGSB
/* 1138 */    MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 1154
/* 1143 */    MCD_OPC_CheckField, 0, 1, 0, 246, 79, 0, // Skip to: 21620
/* 1150 */    MCD_OPC_Decode, 165, 14, 3, // Opcode: VAVGSH
/* 1154 */    MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 1170
/* 1159 */    MCD_OPC_CheckField, 0, 1, 0, 230, 79, 0, // Skip to: 21620
/* 1166 */    MCD_OPC_Decode, 166, 14, 3, // Opcode: VAVGSW
/* 1170 */    MCD_OPC_FilterValue, 24, 19, 1, 0, // Skip to: 1450
/* 1175 */    MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 1178 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1194
/* 1183 */    MCD_OPC_CheckField, 0, 1, 0, 206, 79, 0, // Skip to: 21620
/* 1190 */    MCD_OPC_Decode, 185, 14, 9, // Opcode: VCLZLSBB
/* 1194 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 1210
/* 1199 */    MCD_OPC_CheckField, 0, 1, 0, 190, 79, 0, // Skip to: 21620
/* 1206 */    MCD_OPC_Decode, 251, 14, 9, // Opcode: VCTZLSBB
/* 1210 */    MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 1226
/* 1215 */    MCD_OPC_CheckField, 0, 1, 0, 174, 79, 0, // Skip to: 21620
/* 1222 */    MCD_OPC_Decode, 147, 16, 7, // Opcode: VNEGW
/* 1226 */    MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 1242
/* 1231 */    MCD_OPC_CheckField, 0, 1, 0, 158, 79, 0, // Skip to: 21620
/* 1238 */    MCD_OPC_Decode, 146, 16, 7, // Opcode: VNEGD
/* 1242 */    MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 1258
/* 1247 */    MCD_OPC_CheckField, 0, 1, 0, 142, 79, 0, // Skip to: 21620
/* 1254 */    MCD_OPC_Decode, 180, 16, 7, // Opcode: VPRTYBW
/* 1258 */    MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 1274
/* 1263 */    MCD_OPC_CheckField, 0, 1, 0, 126, 79, 0, // Skip to: 21620
/* 1270 */    MCD_OPC_Decode, 178, 16, 7, // Opcode: VPRTYBD
/* 1274 */    MCD_OPC_FilterValue, 10, 11, 0, 0, // Skip to: 1290
/* 1279 */    MCD_OPC_CheckField, 0, 1, 0, 110, 79, 0, // Skip to: 21620
/* 1286 */    MCD_OPC_Decode, 179, 16, 7, // Opcode: VPRTYBQ
/* 1290 */    MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 1306
/* 1295 */    MCD_OPC_CheckField, 0, 1, 0, 94, 79, 0, // Skip to: 21620
/* 1302 */    MCD_OPC_Decode, 163, 15, 7, // Opcode: VEXTSB2W
/* 1306 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 1322
/* 1311 */    MCD_OPC_CheckField, 0, 1, 0, 78, 79, 0, // Skip to: 21620
/* 1318 */    MCD_OPC_Decode, 168, 15, 7, // Opcode: VEXTSH2W
/* 1322 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 1338
/* 1327 */    MCD_OPC_CheckField, 0, 1, 0, 62, 79, 0, // Skip to: 21620
/* 1334 */    MCD_OPC_Decode, 161, 15, 7, // Opcode: VEXTSB2D
/* 1338 */    MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 1354
/* 1343 */    MCD_OPC_CheckField, 0, 1, 0, 46, 79, 0, // Skip to: 21620
/* 1350 */    MCD_OPC_Decode, 166, 15, 7, // Opcode: VEXTSH2D
/* 1354 */    MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 1370
/* 1359 */    MCD_OPC_CheckField, 0, 1, 0, 30, 79, 0, // Skip to: 21620
/* 1366 */    MCD_OPC_Decode, 170, 15, 7, // Opcode: VEXTSW2D
/* 1370 */    MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 1386
/* 1375 */    MCD_OPC_CheckField, 0, 1, 0, 14, 79, 0, // Skip to: 21620
/* 1382 */    MCD_OPC_Decode, 165, 15, 7, // Opcode: VEXTSD2Q
/* 1386 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 1402
/* 1391 */    MCD_OPC_CheckField, 0, 1, 0, 254, 78, 0, // Skip to: 21620
/* 1398 */    MCD_OPC_Decode, 247, 14, 7, // Opcode: VCTZB
/* 1402 */    MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 1418
/* 1407 */    MCD_OPC_CheckField, 0, 1, 0, 238, 78, 0, // Skip to: 21620
/* 1414 */    MCD_OPC_Decode, 250, 14, 7, // Opcode: VCTZH
/* 1418 */    MCD_OPC_FilterValue, 30, 11, 0, 0, // Skip to: 1434
/* 1423 */    MCD_OPC_CheckField, 0, 1, 0, 222, 78, 0, // Skip to: 21620
/* 1430 */    MCD_OPC_Decode, 252, 14, 7, // Opcode: VCTZW
/* 1434 */    MCD_OPC_FilterValue, 31, 213, 78, 0, // Skip to: 21620
/* 1439 */    MCD_OPC_CheckField, 0, 1, 0, 206, 78, 0, // Skip to: 21620
/* 1446 */    MCD_OPC_Decode, 248, 14, 7, // Opcode: VCTZD
/* 1450 */    MCD_OPC_FilterValue, 25, 120, 1, 0, // Skip to: 1831
/* 1455 */    MCD_OPC_ExtractField, 17, 4,  // Inst{20-17} ...
/* 1458 */    MCD_OPC_FilterValue, 0, 35, 0, 0, // Skip to: 1498
/* 1463 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1466 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1482
/* 1471 */    MCD_OPC_CheckField, 0, 1, 0, 174, 78, 0, // Skip to: 21620
/* 1478 */    MCD_OPC_Decode, 138, 15, 7, // Opcode: VEXPANDBM
/* 1482 */    MCD_OPC_FilterValue, 1, 165, 78, 0, // Skip to: 21620
/* 1487 */    MCD_OPC_CheckField, 0, 1, 0, 158, 78, 0, // Skip to: 21620
/* 1494 */    MCD_OPC_Decode, 140, 15, 7, // Opcode: VEXPANDHM
/* 1498 */    MCD_OPC_FilterValue, 1, 35, 0, 0, // Skip to: 1538
/* 1503 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1506 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1522
/* 1511 */    MCD_OPC_CheckField, 0, 1, 0, 134, 78, 0, // Skip to: 21620
/* 1518 */    MCD_OPC_Decode, 142, 15, 7, // Opcode: VEXPANDWM
/* 1522 */    MCD_OPC_FilterValue, 1, 125, 78, 0, // Skip to: 21620
/* 1527 */    MCD_OPC_CheckField, 0, 1, 0, 118, 78, 0, // Skip to: 21620
/* 1534 */    MCD_OPC_Decode, 139, 15, 7, // Opcode: VEXPANDDM
/* 1538 */    MCD_OPC_FilterValue, 2, 18, 0, 0, // Skip to: 1561
/* 1543 */    MCD_OPC_CheckField, 16, 1, 0, 102, 78, 0, // Skip to: 21620
/* 1550 */    MCD_OPC_CheckField, 0, 1, 0, 95, 78, 0, // Skip to: 21620
/* 1557 */    MCD_OPC_Decode, 141, 15, 7, // Opcode: VEXPANDQM
/* 1561 */    MCD_OPC_FilterValue, 4, 35, 0, 0, // Skip to: 1601
/* 1566 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1569 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1585
/* 1574 */    MCD_OPC_CheckField, 0, 1, 0, 71, 78, 0, // Skip to: 21620
/* 1581 */    MCD_OPC_Decode, 152, 15, 9, // Opcode: VEXTRACTBM
/* 1585 */    MCD_OPC_FilterValue, 1, 62, 78, 0, // Skip to: 21620
/* 1590 */    MCD_OPC_CheckField, 0, 1, 0, 55, 78, 0, // Skip to: 21620
/* 1597 */    MCD_OPC_Decode, 155, 15, 9, // Opcode: VEXTRACTHM
/* 1601 */    MCD_OPC_FilterValue, 5, 35, 0, 0, // Skip to: 1641
/* 1606 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1609 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1625
/* 1614 */    MCD_OPC_CheckField, 0, 1, 0, 31, 78, 0, // Skip to: 21620
/* 1621 */    MCD_OPC_Decode, 160, 15, 9, // Opcode: VEXTRACTWM
/* 1625 */    MCD_OPC_FilterValue, 1, 22, 78, 0, // Skip to: 21620
/* 1630 */    MCD_OPC_CheckField, 0, 1, 0, 15, 78, 0, // Skip to: 21620
/* 1637 */    MCD_OPC_Decode, 154, 15, 9, // Opcode: VEXTRACTDM
/* 1641 */    MCD_OPC_FilterValue, 6, 18, 0, 0, // Skip to: 1664
/* 1646 */    MCD_OPC_CheckField, 16, 1, 0, 255, 77, 0, // Skip to: 21620
/* 1653 */    MCD_OPC_CheckField, 0, 1, 0, 248, 77, 0, // Skip to: 21620
/* 1660 */    MCD_OPC_Decode, 156, 15, 9, // Opcode: VEXTRACTQM
/* 1664 */    MCD_OPC_FilterValue, 8, 35, 0, 0, // Skip to: 1704
/* 1669 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1672 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1688
/* 1677 */    MCD_OPC_CheckField, 0, 1, 0, 224, 77, 0, // Skip to: 21620
/* 1684 */    MCD_OPC_Decode, 173, 10, 10, // Opcode: MTVSRBM
/* 1688 */    MCD_OPC_FilterValue, 1, 215, 77, 0, // Skip to: 21620
/* 1693 */    MCD_OPC_CheckField, 0, 1, 0, 208, 77, 0, // Skip to: 21620
/* 1700 */    MCD_OPC_Decode, 178, 10, 10, // Opcode: MTVSRHM
/* 1704 */    MCD_OPC_FilterValue, 9, 35, 0, 0, // Skip to: 1744
/* 1709 */    MCD_OPC_ExtractField, 16, 1,  // Inst{16} ...
/* 1712 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1728
/* 1717 */    MCD_OPC_CheckField, 0, 1, 0, 184, 77, 0, // Skip to: 21620
/* 1724 */    MCD_OPC_Decode, 181, 10, 10, // Opcode: MTVSRWM
/* 1728 */    MCD_OPC_FilterValue, 1, 175, 77, 0, // Skip to: 21620
/* 1733 */    MCD_OPC_CheckField, 0, 1, 0, 168, 77, 0, // Skip to: 21620
/* 1740 */    MCD_OPC_Decode, 177, 10, 10, // Opcode: MTVSRDM
/* 1744 */    MCD_OPC_FilterValue, 10, 18, 0, 0, // Skip to: 1767
/* 1749 */    MCD_OPC_CheckField, 16, 1, 0, 152, 77, 0, // Skip to: 21620
/* 1756 */    MCD_OPC_CheckField, 0, 1, 0, 145, 77, 0, // Skip to: 21620
/* 1763 */    MCD_OPC_Decode, 179, 10, 10, // Opcode: MTVSRQM
/* 1767 */    MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 1783
/* 1772 */    MCD_OPC_CheckField, 0, 1, 0, 129, 77, 0, // Skip to: 21620
/* 1779 */    MCD_OPC_Decode, 239, 14, 11, // Opcode: VCNTMBB
/* 1783 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 1799
/* 1788 */    MCD_OPC_CheckField, 0, 1, 0, 113, 77, 0, // Skip to: 21620
/* 1795 */    MCD_OPC_Decode, 241, 14, 11, // Opcode: VCNTMBH
/* 1799 */    MCD_OPC_FilterValue, 14, 11, 0, 0, // Skip to: 1815
/* 1804 */    MCD_OPC_CheckField, 0, 1, 0, 97, 77, 0, // Skip to: 21620
/* 1811 */    MCD_OPC_Decode, 242, 14, 11, // Opcode: VCNTMBW
/* 1815 */    MCD_OPC_FilterValue, 15, 88, 77, 0, // Skip to: 21620
/* 1820 */    MCD_OPC_CheckField, 0, 1, 0, 81, 77, 0, // Skip to: 21620
/* 1827 */    MCD_OPC_Decode, 240, 14, 11, // Opcode: VCNTMBD
/* 1831 */    MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 1847
/* 1836 */    MCD_OPC_CheckField, 0, 1, 0, 65, 77, 0, // Skip to: 21620
/* 1843 */    MCD_OPC_Decode, 201, 16, 12, // Opcode: VSHASIGMAW
/* 1847 */    MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 1863
/* 1852 */    MCD_OPC_CheckField, 0, 1, 0, 49, 77, 0, // Skip to: 21620
/* 1859 */    MCD_OPC_Decode, 200, 16, 12, // Opcode: VSHASIGMAD
/* 1863 */    MCD_OPC_FilterValue, 28, 35, 0, 0, // Skip to: 1903
/* 1868 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1871 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1887
/* 1876 */    MCD_OPC_CheckField, 16, 5, 0, 25, 77, 0, // Skip to: 21620
/* 1883 */    MCD_OPC_Decode, 181, 14, 7, // Opcode: VCLZB
/* 1887 */    MCD_OPC_FilterValue, 1, 16, 77, 0, // Skip to: 21620
/* 1892 */    MCD_OPC_CheckField, 16, 5, 0, 9, 77, 0, // Skip to: 21620
/* 1899 */    MCD_OPC_Decode, 174, 16, 7, // Opcode: VPOPCNTB
/* 1903 */    MCD_OPC_FilterValue, 29, 35, 0, 0, // Skip to: 1943
/* 1908 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1911 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1927
/* 1916 */    MCD_OPC_CheckField, 16, 5, 0, 241, 76, 0, // Skip to: 21620
/* 1923 */    MCD_OPC_Decode, 184, 14, 7, // Opcode: VCLZH
/* 1927 */    MCD_OPC_FilterValue, 1, 232, 76, 0, // Skip to: 21620
/* 1932 */    MCD_OPC_CheckField, 16, 5, 0, 225, 76, 0, // Skip to: 21620
/* 1939 */    MCD_OPC_Decode, 176, 16, 7, // Opcode: VPOPCNTH
/* 1943 */    MCD_OPC_FilterValue, 30, 35, 0, 0, // Skip to: 1983
/* 1948 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1951 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1967
/* 1956 */    MCD_OPC_CheckField, 16, 5, 0, 201, 76, 0, // Skip to: 21620
/* 1963 */    MCD_OPC_Decode, 186, 14, 7, // Opcode: VCLZW
/* 1967 */    MCD_OPC_FilterValue, 1, 192, 76, 0, // Skip to: 21620
/* 1972 */    MCD_OPC_CheckField, 16, 5, 0, 185, 76, 0, // Skip to: 21620
/* 1979 */    MCD_OPC_Decode, 177, 16, 7, // Opcode: VPOPCNTW
/* 1983 */    MCD_OPC_FilterValue, 31, 176, 76, 0, // Skip to: 21620
/* 1988 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 1991 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 2007
/* 1996 */    MCD_OPC_CheckField, 16, 5, 0, 161, 76, 0, // Skip to: 21620
/* 2003 */    MCD_OPC_Decode, 182, 14, 7, // Opcode: VCLZD
/* 2007 */    MCD_OPC_FilterValue, 1, 152, 76, 0, // Skip to: 21620
/* 2012 */    MCD_OPC_CheckField, 16, 5, 0, 145, 76, 0, // Skip to: 21620
/* 2019 */    MCD_OPC_Decode, 175, 16, 7, // Opcode: VPOPCNTD
/* 2023 */    MCD_OPC_FilterValue, 2, 117, 2, 0, // Skip to: 2657
/* 2028 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 2031 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 2057
/* 2036 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2039 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2048
/* 2044 */    MCD_OPC_Decode, 186, 16, 3, // Opcode: VRLB
/* 2048 */    MCD_OPC_FilterValue, 1, 111, 76, 0, // Skip to: 21620
/* 2053 */    MCD_OPC_Decode, 191, 16, 3, // Opcode: VRLQ
/* 2057 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 2083
/* 2062 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2065 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2074
/* 2070 */    MCD_OPC_Decode, 190, 16, 3, // Opcode: VRLH
/* 2074 */    MCD_OPC_FilterValue, 1, 85, 76, 0, // Skip to: 21620
/* 2079 */    MCD_OPC_Decode, 192, 16, 13, // Opcode: VRLQMI
/* 2083 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 2109
/* 2088 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2091 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2100
/* 2096 */    MCD_OPC_Decode, 194, 16, 3, // Opcode: VRLW
/* 2100 */    MCD_OPC_FilterValue, 1, 59, 76, 0, // Skip to: 21620
/* 2105 */    MCD_OPC_Decode, 195, 16, 13, // Opcode: VRLWMI
/* 2109 */    MCD_OPC_FilterValue, 3, 21, 0, 0, // Skip to: 2135
/* 2114 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2117 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2126
/* 2122 */    MCD_OPC_Decode, 187, 16, 3, // Opcode: VRLD
/* 2126 */    MCD_OPC_FilterValue, 1, 33, 76, 0, // Skip to: 21620
/* 2131 */    MCD_OPC_Decode, 188, 16, 13, // Opcode: VRLDMI
/* 2135 */    MCD_OPC_FilterValue, 4, 21, 0, 0, // Skip to: 2161
/* 2140 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2143 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2152
/* 2148 */    MCD_OPC_Decode, 203, 16, 3, // Opcode: VSLB
/* 2152 */    MCD_OPC_FilterValue, 1, 7, 76, 0, // Skip to: 21620
/* 2157 */    MCD_OPC_Decode, 209, 16, 3, // Opcode: VSLQ
/* 2161 */    MCD_OPC_FilterValue, 5, 21, 0, 0, // Skip to: 2187
/* 2166 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2169 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2178
/* 2174 */    MCD_OPC_Decode, 207, 16, 3, // Opcode: VSLH
/* 2178 */    MCD_OPC_FilterValue, 1, 237, 75, 0, // Skip to: 21620
/* 2183 */    MCD_OPC_Decode, 193, 16, 3, // Opcode: VRLQNM
/* 2187 */    MCD_OPC_FilterValue, 6, 21, 0, 0, // Skip to: 2213
/* 2192 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2195 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2204
/* 2200 */    MCD_OPC_Decode, 211, 16, 3, // Opcode: VSLW
/* 2204 */    MCD_OPC_FilterValue, 1, 211, 75, 0, // Skip to: 21620
/* 2209 */    MCD_OPC_Decode, 196, 16, 3, // Opcode: VRLWNM
/* 2213 */    MCD_OPC_FilterValue, 7, 21, 0, 0, // Skip to: 2239
/* 2218 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2221 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2230
/* 2226 */    MCD_OPC_Decode, 202, 16, 3, // Opcode: VSL
/* 2230 */    MCD_OPC_FilterValue, 1, 185, 75, 0, // Skip to: 21620
/* 2235 */    MCD_OPC_Decode, 189, 16, 3, // Opcode: VRLDNM
/* 2239 */    MCD_OPC_FilterValue, 8, 21, 0, 0, // Skip to: 2265
/* 2244 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2247 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2256
/* 2252 */    MCD_OPC_Decode, 226, 16, 3, // Opcode: VSRB
/* 2256 */    MCD_OPC_FilterValue, 1, 159, 75, 0, // Skip to: 21620
/* 2261 */    MCD_OPC_Decode, 231, 16, 3, // Opcode: VSRQ
/* 2265 */    MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 2281
/* 2270 */    MCD_OPC_CheckField, 0, 1, 0, 143, 75, 0, // Skip to: 21620
/* 2277 */    MCD_OPC_Decode, 229, 16, 3, // Opcode: VSRH
/* 2281 */    MCD_OPC_FilterValue, 10, 11, 0, 0, // Skip to: 2297
/* 2286 */    MCD_OPC_CheckField, 0, 1, 0, 127, 75, 0, // Skip to: 21620
/* 2293 */    MCD_OPC_Decode, 233, 16, 3, // Opcode: VSRW
/* 2297 */    MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 2313
/* 2302 */    MCD_OPC_CheckField, 0, 1, 0, 111, 75, 0, // Skip to: 21620
/* 2309 */    MCD_OPC_Decode, 220, 16, 3, // Opcode: VSR
/* 2313 */    MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 2339
/* 2318 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2321 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2330
/* 2326 */    MCD_OPC_Decode, 221, 16, 3, // Opcode: VSRAB
/* 2330 */    MCD_OPC_FilterValue, 1, 85, 75, 0, // Skip to: 21620
/* 2335 */    MCD_OPC_Decode, 224, 16, 3, // Opcode: VSRAQ
/* 2339 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 2355
/* 2344 */    MCD_OPC_CheckField, 0, 1, 0, 69, 75, 0, // Skip to: 21620
/* 2351 */    MCD_OPC_Decode, 223, 16, 3, // Opcode: VSRAH
/* 2355 */    MCD_OPC_FilterValue, 14, 11, 0, 0, // Skip to: 2371
/* 2360 */    MCD_OPC_CheckField, 0, 1, 0, 53, 75, 0, // Skip to: 21620
/* 2367 */    MCD_OPC_Decode, 225, 16, 3, // Opcode: VSRAW
/* 2371 */    MCD_OPC_FilterValue, 15, 11, 0, 0, // Skip to: 2387
/* 2376 */    MCD_OPC_CheckField, 0, 1, 0, 37, 75, 0, // Skip to: 21620
/* 2383 */    MCD_OPC_Decode, 222, 16, 3, // Opcode: VSRAD
/* 2387 */    MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 2403
/* 2392 */    MCD_OPC_CheckField, 0, 1, 0, 21, 75, 0, // Skip to: 21620
/* 2399 */    MCD_OPC_Decode, 162, 14, 3, // Opcode: VAND
/* 2403 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 2419
/* 2408 */    MCD_OPC_CheckField, 0, 1, 0, 5, 75, 0, // Skip to: 21620
/* 2415 */    MCD_OPC_Decode, 163, 14, 3, // Opcode: VANDC
/* 2419 */    MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 2435
/* 2424 */    MCD_OPC_CheckField, 0, 1, 0, 245, 74, 0, // Skip to: 21620
/* 2431 */    MCD_OPC_Decode, 150, 16, 3, // Opcode: VOR
/* 2435 */    MCD_OPC_FilterValue, 19, 11, 0, 0, // Skip to: 2451
/* 2440 */    MCD_OPC_CheckField, 0, 1, 0, 229, 74, 0, // Skip to: 21620
/* 2447 */    MCD_OPC_Decode, 143, 17, 3, // Opcode: VXOR
/* 2451 */    MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 2467
/* 2456 */    MCD_OPC_CheckField, 0, 1, 0, 213, 74, 0, // Skip to: 21620
/* 2463 */    MCD_OPC_Decode, 149, 16, 3, // Opcode: VNOR
/* 2467 */    MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 2483
/* 2472 */    MCD_OPC_CheckField, 0, 1, 0, 197, 74, 0, // Skip to: 21620
/* 2479 */    MCD_OPC_Decode, 151, 16, 3, // Opcode: VORC
/* 2483 */    MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 2499
/* 2488 */    MCD_OPC_CheckField, 0, 1, 0, 181, 74, 0, // Skip to: 21620
/* 2495 */    MCD_OPC_Decode, 143, 16, 3, // Opcode: VNAND
/* 2499 */    MCD_OPC_FilterValue, 23, 11, 0, 0, // Skip to: 2515
/* 2504 */    MCD_OPC_CheckField, 0, 1, 0, 165, 74, 0, // Skip to: 21620
/* 2511 */    MCD_OPC_Decode, 204, 16, 3, // Opcode: VSLD
/* 2515 */    MCD_OPC_FilterValue, 24, 18, 0, 0, // Skip to: 2538
/* 2520 */    MCD_OPC_CheckField, 11, 10, 0, 149, 74, 0, // Skip to: 21620
/* 2527 */    MCD_OPC_CheckField, 0, 1, 0, 142, 74, 0, // Skip to: 21620
/* 2534 */    MCD_OPC_Decode, 131, 10, 14, // Opcode: MFVSCR
/* 2538 */    MCD_OPC_FilterValue, 25, 18, 0, 0, // Skip to: 2561
/* 2543 */    MCD_OPC_CheckField, 16, 10, 0, 126, 74, 0, // Skip to: 21620
/* 2550 */    MCD_OPC_CheckField, 0, 1, 0, 119, 74, 0, // Skip to: 21620
/* 2557 */    MCD_OPC_Decode, 172, 10, 15, // Opcode: MTVSCR
/* 2561 */    MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 2577
/* 2566 */    MCD_OPC_CheckField, 0, 1, 0, 103, 74, 0, // Skip to: 21620
/* 2573 */    MCD_OPC_Decode, 137, 15, 3, // Opcode: VEQV
/* 2577 */    MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 2593
/* 2582 */    MCD_OPC_CheckField, 0, 1, 0, 87, 74, 0, // Skip to: 21620
/* 2589 */    MCD_OPC_Decode, 227, 16, 3, // Opcode: VSRD
/* 2593 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 2609
/* 2598 */    MCD_OPC_CheckField, 0, 1, 0, 71, 74, 0, // Skip to: 21620
/* 2605 */    MCD_OPC_Decode, 232, 16, 3, // Opcode: VSRV
/* 2609 */    MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 2625
/* 2614 */    MCD_OPC_CheckField, 0, 1, 0, 55, 74, 0, // Skip to: 21620
/* 2621 */    MCD_OPC_Decode, 210, 16, 3, // Opcode: VSLV
/* 2625 */    MCD_OPC_FilterValue, 30, 11, 0, 0, // Skip to: 2641
/* 2630 */    MCD_OPC_CheckField, 0, 1, 0, 39, 74, 0, // Skip to: 21620
/* 2637 */    MCD_OPC_Decode, 183, 14, 3, // Opcode: VCLZDM
/* 2641 */    MCD_OPC_FilterValue, 31, 30, 74, 0, // Skip to: 21620
/* 2646 */    MCD_OPC_CheckField, 0, 1, 0, 23, 74, 0, // Skip to: 21620
/* 2653 */    MCD_OPC_Decode, 249, 14, 3, // Opcode: VCTZDM
/* 2657 */    MCD_OPC_FilterValue, 3, 183, 2, 0, // Skip to: 3357
/* 2662 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 2665 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 2691
/* 2670 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2673 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2682
/* 2678 */    MCD_OPC_Decode, 191, 14, 3, // Opcode: VCMPEQUB
/* 2682 */    MCD_OPC_FilterValue, 1, 245, 73, 0, // Skip to: 21620
/* 2687 */    MCD_OPC_Decode, 225, 14, 3, // Opcode: VCMPNEB
/* 2691 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 2717
/* 2696 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2699 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2708
/* 2704 */    MCD_OPC_Decode, 195, 14, 3, // Opcode: VCMPEQUH
/* 2708 */    MCD_OPC_FilterValue, 1, 219, 73, 0, // Skip to: 21620
/* 2713 */    MCD_OPC_Decode, 227, 14, 3, // Opcode: VCMPNEH
/* 2717 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 2743
/* 2722 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2725 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2734
/* 2730 */    MCD_OPC_Decode, 199, 14, 3, // Opcode: VCMPEQUW
/* 2734 */    MCD_OPC_FilterValue, 1, 193, 73, 0, // Skip to: 21620
/* 2739 */    MCD_OPC_Decode, 229, 14, 3, // Opcode: VCMPNEW
/* 2743 */    MCD_OPC_FilterValue, 3, 21, 0, 0, // Skip to: 2769
/* 2748 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2751 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2760
/* 2756 */    MCD_OPC_Decode, 189, 14, 3, // Opcode: VCMPEQFP
/* 2760 */    MCD_OPC_FilterValue, 1, 167, 73, 0, // Skip to: 21620
/* 2765 */    MCD_OPC_Decode, 193, 14, 3, // Opcode: VCMPEQUD
/* 2769 */    MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 2785
/* 2774 */    MCD_OPC_CheckField, 0, 1, 1, 151, 73, 0, // Skip to: 21620
/* 2781 */    MCD_OPC_Decode, 231, 14, 3, // Opcode: VCMPNEZB
/* 2785 */    MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 2801
/* 2790 */    MCD_OPC_CheckField, 0, 1, 1, 135, 73, 0, // Skip to: 21620
/* 2797 */    MCD_OPC_Decode, 233, 14, 3, // Opcode: VCMPNEZH
/* 2801 */    MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 2817
/* 2806 */    MCD_OPC_CheckField, 0, 1, 1, 119, 73, 0, // Skip to: 21620
/* 2813 */    MCD_OPC_Decode, 235, 14, 3, // Opcode: VCMPNEZW
/* 2817 */    MCD_OPC_FilterValue, 7, 21, 0, 0, // Skip to: 2843
/* 2822 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2825 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2834
/* 2830 */    MCD_OPC_Decode, 201, 14, 3, // Opcode: VCMPGEFP
/* 2834 */    MCD_OPC_FilterValue, 1, 93, 73, 0, // Skip to: 21620
/* 2839 */    MCD_OPC_Decode, 197, 14, 3, // Opcode: VCMPEQUQ
/* 2843 */    MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 2859
/* 2848 */    MCD_OPC_CheckField, 0, 1, 0, 77, 73, 0, // Skip to: 21620
/* 2855 */    MCD_OPC_Decode, 215, 14, 3, // Opcode: VCMPGTUB
/* 2859 */    MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 2875
/* 2864 */    MCD_OPC_CheckField, 0, 1, 0, 61, 73, 0, // Skip to: 21620
/* 2871 */    MCD_OPC_Decode, 219, 14, 3, // Opcode: VCMPGTUH
/* 2875 */    MCD_OPC_FilterValue, 10, 21, 0, 0, // Skip to: 2901
/* 2880 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2883 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2892
/* 2888 */    MCD_OPC_Decode, 223, 14, 3, // Opcode: VCMPGTUW
/* 2892 */    MCD_OPC_FilterValue, 1, 35, 73, 0, // Skip to: 21620
/* 2897 */    MCD_OPC_Decode, 221, 14, 3, // Opcode: VCMPGTUQ
/* 2901 */    MCD_OPC_FilterValue, 11, 21, 0, 0, // Skip to: 2927
/* 2906 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2909 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2918
/* 2914 */    MCD_OPC_Decode, 203, 14, 3, // Opcode: VCMPGTFP
/* 2918 */    MCD_OPC_FilterValue, 1, 9, 73, 0, // Skip to: 21620
/* 2923 */    MCD_OPC_Decode, 217, 14, 3, // Opcode: VCMPGTUD
/* 2927 */    MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 2943
/* 2932 */    MCD_OPC_CheckField, 0, 1, 0, 249, 72, 0, // Skip to: 21620
/* 2939 */    MCD_OPC_Decode, 205, 14, 3, // Opcode: VCMPGTSB
/* 2943 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 2959
/* 2948 */    MCD_OPC_CheckField, 0, 1, 0, 233, 72, 0, // Skip to: 21620
/* 2955 */    MCD_OPC_Decode, 209, 14, 3, // Opcode: VCMPGTSH
/* 2959 */    MCD_OPC_FilterValue, 14, 21, 0, 0, // Skip to: 2985
/* 2964 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2967 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 2976
/* 2972 */    MCD_OPC_Decode, 213, 14, 3, // Opcode: VCMPGTSW
/* 2976 */    MCD_OPC_FilterValue, 1, 207, 72, 0, // Skip to: 21620
/* 2981 */    MCD_OPC_Decode, 211, 14, 3, // Opcode: VCMPGTSQ
/* 2985 */    MCD_OPC_FilterValue, 15, 21, 0, 0, // Skip to: 3011
/* 2990 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 2993 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3002
/* 2998 */    MCD_OPC_Decode, 187, 14, 3, // Opcode: VCMPBFP
/* 3002 */    MCD_OPC_FilterValue, 1, 181, 72, 0, // Skip to: 21620
/* 3007 */    MCD_OPC_Decode, 207, 14, 3, // Opcode: VCMPGTSD
/* 3011 */    MCD_OPC_FilterValue, 16, 21, 0, 0, // Skip to: 3037
/* 3016 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3019 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3028
/* 3024 */    MCD_OPC_Decode, 192, 14, 3, // Opcode: VCMPEQUB_rec
/* 3028 */    MCD_OPC_FilterValue, 1, 155, 72, 0, // Skip to: 21620
/* 3033 */    MCD_OPC_Decode, 226, 14, 3, // Opcode: VCMPNEB_rec
/* 3037 */    MCD_OPC_FilterValue, 17, 21, 0, 0, // Skip to: 3063
/* 3042 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3045 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3054
/* 3050 */    MCD_OPC_Decode, 196, 14, 3, // Opcode: VCMPEQUH_rec
/* 3054 */    MCD_OPC_FilterValue, 1, 129, 72, 0, // Skip to: 21620
/* 3059 */    MCD_OPC_Decode, 228, 14, 3, // Opcode: VCMPNEH_rec
/* 3063 */    MCD_OPC_FilterValue, 18, 21, 0, 0, // Skip to: 3089
/* 3068 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3071 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3080
/* 3076 */    MCD_OPC_Decode, 200, 14, 3, // Opcode: VCMPEQUW_rec
/* 3080 */    MCD_OPC_FilterValue, 1, 103, 72, 0, // Skip to: 21620
/* 3085 */    MCD_OPC_Decode, 230, 14, 3, // Opcode: VCMPNEW_rec
/* 3089 */    MCD_OPC_FilterValue, 19, 21, 0, 0, // Skip to: 3115
/* 3094 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3097 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3106
/* 3102 */    MCD_OPC_Decode, 190, 14, 3, // Opcode: VCMPEQFP_rec
/* 3106 */    MCD_OPC_FilterValue, 1, 77, 72, 0, // Skip to: 21620
/* 3111 */    MCD_OPC_Decode, 194, 14, 3, // Opcode: VCMPEQUD_rec
/* 3115 */    MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 3131
/* 3120 */    MCD_OPC_CheckField, 0, 1, 1, 61, 72, 0, // Skip to: 21620
/* 3127 */    MCD_OPC_Decode, 232, 14, 3, // Opcode: VCMPNEZB_rec
/* 3131 */    MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 3147
/* 3136 */    MCD_OPC_CheckField, 0, 1, 1, 45, 72, 0, // Skip to: 21620
/* 3143 */    MCD_OPC_Decode, 234, 14, 3, // Opcode: VCMPNEZH_rec
/* 3147 */    MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 3163
/* 3152 */    MCD_OPC_CheckField, 0, 1, 1, 29, 72, 0, // Skip to: 21620
/* 3159 */    MCD_OPC_Decode, 236, 14, 3, // Opcode: VCMPNEZW_rec
/* 3163 */    MCD_OPC_FilterValue, 23, 21, 0, 0, // Skip to: 3189
/* 3168 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3171 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3180
/* 3176 */    MCD_OPC_Decode, 202, 14, 3, // Opcode: VCMPGEFP_rec
/* 3180 */    MCD_OPC_FilterValue, 1, 3, 72, 0, // Skip to: 21620
/* 3185 */    MCD_OPC_Decode, 198, 14, 3, // Opcode: VCMPEQUQ_rec
/* 3189 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 3205
/* 3194 */    MCD_OPC_CheckField, 0, 1, 0, 243, 71, 0, // Skip to: 21620
/* 3201 */    MCD_OPC_Decode, 216, 14, 3, // Opcode: VCMPGTUB_rec
/* 3205 */    MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 3221
/* 3210 */    MCD_OPC_CheckField, 0, 1, 0, 227, 71, 0, // Skip to: 21620
/* 3217 */    MCD_OPC_Decode, 220, 14, 3, // Opcode: VCMPGTUH_rec
/* 3221 */    MCD_OPC_FilterValue, 26, 21, 0, 0, // Skip to: 3247
/* 3226 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3229 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3238
/* 3234 */    MCD_OPC_Decode, 224, 14, 3, // Opcode: VCMPGTUW_rec
/* 3238 */    MCD_OPC_FilterValue, 1, 201, 71, 0, // Skip to: 21620
/* 3243 */    MCD_OPC_Decode, 222, 14, 3, // Opcode: VCMPGTUQ_rec
/* 3247 */    MCD_OPC_FilterValue, 27, 21, 0, 0, // Skip to: 3273
/* 3252 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3255 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3264
/* 3260 */    MCD_OPC_Decode, 204, 14, 3, // Opcode: VCMPGTFP_rec
/* 3264 */    MCD_OPC_FilterValue, 1, 175, 71, 0, // Skip to: 21620
/* 3269 */    MCD_OPC_Decode, 218, 14, 3, // Opcode: VCMPGTUD_rec
/* 3273 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 3289
/* 3278 */    MCD_OPC_CheckField, 0, 1, 0, 159, 71, 0, // Skip to: 21620
/* 3285 */    MCD_OPC_Decode, 206, 14, 3, // Opcode: VCMPGTSB_rec
/* 3289 */    MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 3305
/* 3294 */    MCD_OPC_CheckField, 0, 1, 0, 143, 71, 0, // Skip to: 21620
/* 3301 */    MCD_OPC_Decode, 210, 14, 3, // Opcode: VCMPGTSH_rec
/* 3305 */    MCD_OPC_FilterValue, 30, 21, 0, 0, // Skip to: 3331
/* 3310 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3313 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3322
/* 3318 */    MCD_OPC_Decode, 214, 14, 3, // Opcode: VCMPGTSW_rec
/* 3322 */    MCD_OPC_FilterValue, 1, 117, 71, 0, // Skip to: 21620
/* 3327 */    MCD_OPC_Decode, 212, 14, 3, // Opcode: VCMPGTSQ_rec
/* 3331 */    MCD_OPC_FilterValue, 31, 108, 71, 0, // Skip to: 21620
/* 3336 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3339 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3348
/* 3344 */    MCD_OPC_Decode, 188, 14, 3, // Opcode: VCMPBFP_rec
/* 3348 */    MCD_OPC_FilterValue, 1, 91, 71, 0, // Skip to: 21620
/* 3353 */    MCD_OPC_Decode, 208, 14, 3, // Opcode: VCMPGTSD_rec
/* 3357 */    MCD_OPC_FilterValue, 4, 26, 2, 0, // Skip to: 3900
/* 3362 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 3365 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 3381
/* 3370 */    MCD_OPC_CheckField, 0, 1, 0, 67, 71, 0, // Skip to: 21620
/* 3377 */    MCD_OPC_Decode, 138, 16, 3, // Opcode: VMULOUB
/* 3381 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 3397
/* 3386 */    MCD_OPC_CheckField, 0, 1, 0, 51, 71, 0, // Skip to: 21620
/* 3393 */    MCD_OPC_Decode, 140, 16, 3, // Opcode: VMULOUH
/* 3397 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 3423
/* 3402 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3405 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3414
/* 3410 */    MCD_OPC_Decode, 141, 16, 3, // Opcode: VMULOUW
/* 3414 */    MCD_OPC_FilterValue, 1, 25, 71, 0, // Skip to: 21620
/* 3419 */    MCD_OPC_Decode, 142, 16, 3, // Opcode: VMULUWM
/* 3423 */    MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 3439
/* 3428 */    MCD_OPC_CheckField, 0, 1, 0, 9, 71, 0, // Skip to: 21620
/* 3435 */    MCD_OPC_Decode, 139, 16, 3, // Opcode: VMULOUD
/* 3439 */    MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 3455
/* 3444 */    MCD_OPC_CheckField, 0, 1, 0, 249, 70, 0, // Skip to: 21620
/* 3451 */    MCD_OPC_Decode, 134, 16, 3, // Opcode: VMULOSB
/* 3455 */    MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 3471
/* 3460 */    MCD_OPC_CheckField, 0, 1, 0, 233, 70, 0, // Skip to: 21620
/* 3467 */    MCD_OPC_Decode, 136, 16, 3, // Opcode: VMULOSH
/* 3471 */    MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 3487
/* 3476 */    MCD_OPC_CheckField, 0, 1, 0, 217, 70, 0, // Skip to: 21620
/* 3483 */    MCD_OPC_Decode, 137, 16, 3, // Opcode: VMULOSW
/* 3487 */    MCD_OPC_FilterValue, 7, 21, 0, 0, // Skip to: 3513
/* 3492 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3495 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3504
/* 3500 */    MCD_OPC_Decode, 135, 16, 3, // Opcode: VMULOSD
/* 3504 */    MCD_OPC_FilterValue, 1, 191, 70, 0, // Skip to: 21620
/* 3509 */    MCD_OPC_Decode, 133, 16, 3, // Opcode: VMULLD
/* 3513 */    MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 3529
/* 3518 */    MCD_OPC_CheckField, 0, 1, 0, 175, 70, 0, // Skip to: 21620
/* 3525 */    MCD_OPC_Decode, 253, 15, 3, // Opcode: VMULEUB
/* 3529 */    MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 3545
/* 3534 */    MCD_OPC_CheckField, 0, 1, 0, 159, 70, 0, // Skip to: 21620
/* 3541 */    MCD_OPC_Decode, 255, 15, 3, // Opcode: VMULEUH
/* 3545 */    MCD_OPC_FilterValue, 10, 21, 0, 0, // Skip to: 3571
/* 3550 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3553 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3562
/* 3558 */    MCD_OPC_Decode, 128, 16, 3, // Opcode: VMULEUW
/* 3562 */    MCD_OPC_FilterValue, 1, 133, 70, 0, // Skip to: 21620
/* 3567 */    MCD_OPC_Decode, 132, 16, 3, // Opcode: VMULHUW
/* 3571 */    MCD_OPC_FilterValue, 11, 21, 0, 0, // Skip to: 3597
/* 3576 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3579 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3588
/* 3584 */    MCD_OPC_Decode, 254, 15, 3, // Opcode: VMULEUD
/* 3588 */    MCD_OPC_FilterValue, 1, 107, 70, 0, // Skip to: 21620
/* 3593 */    MCD_OPC_Decode, 131, 16, 3, // Opcode: VMULHUD
/* 3597 */    MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 3613
/* 3602 */    MCD_OPC_CheckField, 0, 1, 0, 91, 70, 0, // Skip to: 21620
/* 3609 */    MCD_OPC_Decode, 249, 15, 3, // Opcode: VMULESB
/* 3613 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 3629
/* 3618 */    MCD_OPC_CheckField, 0, 1, 0, 75, 70, 0, // Skip to: 21620
/* 3625 */    MCD_OPC_Decode, 251, 15, 3, // Opcode: VMULESH
/* 3629 */    MCD_OPC_FilterValue, 14, 21, 0, 0, // Skip to: 3655
/* 3634 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3637 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3646
/* 3642 */    MCD_OPC_Decode, 252, 15, 3, // Opcode: VMULESW
/* 3646 */    MCD_OPC_FilterValue, 1, 49, 70, 0, // Skip to: 21620
/* 3651 */    MCD_OPC_Decode, 130, 16, 3, // Opcode: VMULHSW
/* 3655 */    MCD_OPC_FilterValue, 15, 21, 0, 0, // Skip to: 3681
/* 3660 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3663 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3672
/* 3668 */    MCD_OPC_Decode, 250, 15, 3, // Opcode: VMULESD
/* 3672 */    MCD_OPC_FilterValue, 1, 23, 70, 0, // Skip to: 21620
/* 3677 */    MCD_OPC_Decode, 129, 16, 3, // Opcode: VMULHSD
/* 3681 */    MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 3697
/* 3686 */    MCD_OPC_CheckField, 0, 1, 0, 7, 70, 0, // Skip to: 21620
/* 3693 */    MCD_OPC_Decode, 170, 16, 3, // Opcode: VPMSUMB
/* 3697 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 3713
/* 3702 */    MCD_OPC_CheckField, 0, 1, 0, 247, 69, 0, // Skip to: 21620
/* 3709 */    MCD_OPC_Decode, 172, 16, 3, // Opcode: VPMSUMH
/* 3713 */    MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 3729
/* 3718 */    MCD_OPC_CheckField, 0, 1, 0, 231, 69, 0, // Skip to: 21620
/* 3725 */    MCD_OPC_Decode, 173, 16, 3, // Opcode: VPMSUMW
/* 3729 */    MCD_OPC_FilterValue, 19, 11, 0, 0, // Skip to: 3745
/* 3734 */    MCD_OPC_CheckField, 0, 1, 0, 215, 69, 0, // Skip to: 21620
/* 3741 */    MCD_OPC_Decode, 171, 16, 3, // Opcode: VPMSUMD
/* 3745 */    MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 3771
/* 3750 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3753 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3762
/* 3758 */    MCD_OPC_Decode, 177, 14, 3, // Opcode: VCIPHER
/* 3762 */    MCD_OPC_FilterValue, 1, 189, 69, 0, // Skip to: 21620
/* 3767 */    MCD_OPC_Decode, 178, 14, 3, // Opcode: VCIPHERLAST
/* 3771 */    MCD_OPC_FilterValue, 21, 21, 0, 0, // Skip to: 3797
/* 3776 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3779 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3788
/* 3784 */    MCD_OPC_Decode, 144, 16, 3, // Opcode: VNCIPHER
/* 3788 */    MCD_OPC_FilterValue, 1, 163, 69, 0, // Skip to: 21620
/* 3793 */    MCD_OPC_Decode, 145, 16, 3, // Opcode: VNCIPHERLAST
/* 3797 */    MCD_OPC_FilterValue, 23, 18, 0, 0, // Skip to: 3820
/* 3802 */    MCD_OPC_CheckField, 11, 5, 0, 147, 69, 0, // Skip to: 21620
/* 3809 */    MCD_OPC_CheckField, 0, 1, 0, 140, 69, 0, // Skip to: 21620
/* 3816 */    MCD_OPC_Decode, 198, 16, 4, // Opcode: VSBOX
/* 3820 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 3836
/* 3825 */    MCD_OPC_CheckField, 0, 1, 0, 124, 69, 0, // Skip to: 21620
/* 3832 */    MCD_OPC_Decode, 133, 17, 3, // Opcode: VSUM4UBS
/* 3836 */    MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 3852
/* 3841 */    MCD_OPC_CheckField, 0, 1, 0, 108, 69, 0, // Skip to: 21620
/* 3848 */    MCD_OPC_Decode, 132, 17, 3, // Opcode: VSUM4SHS
/* 3852 */    MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 3868
/* 3857 */    MCD_OPC_CheckField, 0, 1, 0, 92, 69, 0, // Skip to: 21620
/* 3864 */    MCD_OPC_Decode, 130, 17, 3, // Opcode: VSUM2SWS
/* 3868 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 3884
/* 3873 */    MCD_OPC_CheckField, 0, 1, 0, 76, 69, 0, // Skip to: 21620
/* 3880 */    MCD_OPC_Decode, 131, 17, 3, // Opcode: VSUM4SBS
/* 3884 */    MCD_OPC_FilterValue, 30, 67, 69, 0, // Skip to: 21620
/* 3889 */    MCD_OPC_CheckField, 0, 1, 0, 60, 69, 0, // Skip to: 21620
/* 3896 */    MCD_OPC_Decode, 134, 17, 3, // Opcode: VSUMSWS
/* 3900 */    MCD_OPC_FilterValue, 5, 31, 2, 0, // Skip to: 4448
/* 3905 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 3908 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 3934
/* 3913 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3916 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 3925
/* 3921 */    MCD_OPC_Decode, 150, 14, 3, // Opcode: VADDFP
/* 3925 */    MCD_OPC_FilterValue, 1, 26, 69, 0, // Skip to: 21620
/* 3930 */    MCD_OPC_Decode, 135, 15, 3, // Opcode: VDIVUQ
/* 3934 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 3950
/* 3939 */    MCD_OPC_CheckField, 0, 1, 0, 10, 69, 0, // Skip to: 21620
/* 3946 */    MCD_OPC_Decode, 246, 16, 3, // Opcode: VSUBFP
/* 3950 */    MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 3966
/* 3955 */    MCD_OPC_CheckField, 0, 1, 1, 250, 68, 0, // Skip to: 21620
/* 3962 */    MCD_OPC_Decode, 136, 15, 3, // Opcode: VDIVUW
/* 3966 */    MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 3982
/* 3971 */    MCD_OPC_CheckField, 0, 1, 1, 234, 68, 0, // Skip to: 21620
/* 3978 */    MCD_OPC_Decode, 134, 15, 3, // Opcode: VDIVUD
/* 3982 */    MCD_OPC_FilterValue, 4, 28, 0, 0, // Skip to: 4015
/* 3987 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 3990 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4006
/* 3995 */    MCD_OPC_CheckField, 16, 5, 0, 210, 68, 0, // Skip to: 21620
/* 4002 */    MCD_OPC_Decode, 181, 16, 7, // Opcode: VREFP
/* 4006 */    MCD_OPC_FilterValue, 1, 201, 68, 0, // Skip to: 21620
/* 4011 */    MCD_OPC_Decode, 132, 15, 3, // Opcode: VDIVSQ
/* 4015 */    MCD_OPC_FilterValue, 5, 18, 0, 0, // Skip to: 4038
/* 4020 */    MCD_OPC_CheckField, 16, 5, 0, 185, 68, 0, // Skip to: 21620
/* 4027 */    MCD_OPC_CheckField, 0, 1, 0, 178, 68, 0, // Skip to: 21620
/* 4034 */    MCD_OPC_Decode, 197, 16, 7, // Opcode: VRSQRTEFP
/* 4038 */    MCD_OPC_FilterValue, 6, 28, 0, 0, // Skip to: 4071
/* 4043 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4046 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4062
/* 4051 */    MCD_OPC_CheckField, 16, 5, 0, 154, 68, 0, // Skip to: 21620
/* 4058 */    MCD_OPC_Decode, 143, 15, 7, // Opcode: VEXPTEFP
/* 4062 */    MCD_OPC_FilterValue, 1, 145, 68, 0, // Skip to: 21620
/* 4067 */    MCD_OPC_Decode, 133, 15, 3, // Opcode: VDIVSW
/* 4071 */    MCD_OPC_FilterValue, 7, 28, 0, 0, // Skip to: 4104
/* 4076 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4079 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4095
/* 4084 */    MCD_OPC_CheckField, 16, 5, 0, 121, 68, 0, // Skip to: 21620
/* 4091 */    MCD_OPC_Decode, 200, 15, 7, // Opcode: VLOGEFP
/* 4095 */    MCD_OPC_FilterValue, 1, 112, 68, 0, // Skip to: 21620
/* 4100 */    MCD_OPC_Decode, 131, 15, 3, // Opcode: VDIVSD
/* 4104 */    MCD_OPC_FilterValue, 8, 28, 0, 0, // Skip to: 4137
/* 4109 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4112 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4128
/* 4117 */    MCD_OPC_CheckField, 16, 5, 0, 88, 68, 0, // Skip to: 21620
/* 4124 */    MCD_OPC_Decode, 183, 16, 7, // Opcode: VRFIN
/* 4128 */    MCD_OPC_FilterValue, 1, 79, 68, 0, // Skip to: 21620
/* 4133 */    MCD_OPC_Decode, 129, 15, 3, // Opcode: VDIVEUQ
/* 4137 */    MCD_OPC_FilterValue, 9, 18, 0, 0, // Skip to: 4160
/* 4142 */    MCD_OPC_CheckField, 16, 5, 0, 63, 68, 0, // Skip to: 21620
/* 4149 */    MCD_OPC_CheckField, 0, 1, 0, 56, 68, 0, // Skip to: 21620
/* 4156 */    MCD_OPC_Decode, 185, 16, 7, // Opcode: VRFIZ
/* 4160 */    MCD_OPC_FilterValue, 10, 28, 0, 0, // Skip to: 4193
/* 4165 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4168 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4184
/* 4173 */    MCD_OPC_CheckField, 16, 5, 0, 32, 68, 0, // Skip to: 21620
/* 4180 */    MCD_OPC_Decode, 184, 16, 7, // Opcode: VRFIP
/* 4184 */    MCD_OPC_FilterValue, 1, 23, 68, 0, // Skip to: 21620
/* 4189 */    MCD_OPC_Decode, 130, 15, 3, // Opcode: VDIVEUW
/* 4193 */    MCD_OPC_FilterValue, 11, 28, 0, 0, // Skip to: 4226
/* 4198 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4201 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4217
/* 4206 */    MCD_OPC_CheckField, 16, 5, 0, 255, 67, 0, // Skip to: 21620
/* 4213 */    MCD_OPC_Decode, 182, 16, 7, // Opcode: VRFIM
/* 4217 */    MCD_OPC_FilterValue, 1, 246, 67, 0, // Skip to: 21620
/* 4222 */    MCD_OPC_Decode, 128, 15, 3, // Opcode: VDIVEUD
/* 4226 */    MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 4252
/* 4231 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4234 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4243
/* 4239 */    MCD_OPC_Decode, 175, 14, 16, // Opcode: VCFUX
/* 4243 */    MCD_OPC_FilterValue, 1, 220, 67, 0, // Skip to: 21620
/* 4248 */    MCD_OPC_Decode, 254, 14, 3, // Opcode: VDIVESQ
/* 4252 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 4268
/* 4257 */    MCD_OPC_CheckField, 0, 1, 0, 204, 67, 0, // Skip to: 21620
/* 4264 */    MCD_OPC_Decode, 172, 14, 16, // Opcode: VCFSX
/* 4268 */    MCD_OPC_FilterValue, 14, 21, 0, 0, // Skip to: 4294
/* 4273 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4276 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4285
/* 4281 */    MCD_OPC_Decode, 245, 14, 16, // Opcode: VCTUXS
/* 4285 */    MCD_OPC_FilterValue, 1, 178, 67, 0, // Skip to: 21620
/* 4290 */    MCD_OPC_Decode, 255, 14, 3, // Opcode: VDIVESW
/* 4294 */    MCD_OPC_FilterValue, 15, 21, 0, 0, // Skip to: 4320
/* 4299 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4302 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4311
/* 4307 */    MCD_OPC_Decode, 243, 14, 16, // Opcode: VCTSXS
/* 4311 */    MCD_OPC_FilterValue, 1, 152, 67, 0, // Skip to: 21620
/* 4316 */    MCD_OPC_Decode, 253, 14, 3, // Opcode: VDIVESD
/* 4320 */    MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 4336
/* 4325 */    MCD_OPC_CheckField, 0, 1, 0, 136, 67, 0, // Skip to: 21620
/* 4332 */    MCD_OPC_Decode, 202, 15, 3, // Opcode: VMAXFP
/* 4336 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 4352
/* 4341 */    MCD_OPC_CheckField, 0, 1, 0, 120, 67, 0, // Skip to: 21620
/* 4348 */    MCD_OPC_Decode, 213, 15, 3, // Opcode: VMINFP
/* 4352 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 4368
/* 4357 */    MCD_OPC_CheckField, 0, 1, 1, 104, 67, 0, // Skip to: 21620
/* 4364 */    MCD_OPC_Decode, 227, 15, 3, // Opcode: VMODUQ
/* 4368 */    MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 4384
/* 4373 */    MCD_OPC_CheckField, 0, 1, 1, 88, 67, 0, // Skip to: 21620
/* 4380 */    MCD_OPC_Decode, 228, 15, 3, // Opcode: VMODUW
/* 4384 */    MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 4400
/* 4389 */    MCD_OPC_CheckField, 0, 1, 1, 72, 67, 0, // Skip to: 21620
/* 4396 */    MCD_OPC_Decode, 226, 15, 3, // Opcode: VMODUD
/* 4400 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 4416
/* 4405 */    MCD_OPC_CheckField, 0, 1, 1, 56, 67, 0, // Skip to: 21620
/* 4412 */    MCD_OPC_Decode, 224, 15, 3, // Opcode: VMODSQ
/* 4416 */    MCD_OPC_FilterValue, 30, 11, 0, 0, // Skip to: 4432
/* 4421 */    MCD_OPC_CheckField, 0, 1, 1, 40, 67, 0, // Skip to: 21620
/* 4428 */    MCD_OPC_Decode, 225, 15, 3, // Opcode: VMODSW
/* 4432 */    MCD_OPC_FilterValue, 31, 31, 67, 0, // Skip to: 21620
/* 4437 */    MCD_OPC_CheckField, 0, 1, 1, 24, 67, 0, // Skip to: 21620
/* 4444 */    MCD_OPC_Decode, 223, 15, 3, // Opcode: VMODSD
/* 4448 */    MCD_OPC_FilterValue, 6, 174, 2, 0, // Skip to: 5139
/* 4453 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4456 */    MCD_OPC_FilterValue, 0, 56, 0, 0, // Skip to: 4517
/* 4461 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4464 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4473
/* 4469 */    MCD_OPC_Decode, 230, 15, 3, // Opcode: VMRGHB
/* 4473 */    MCD_OPC_FilterValue, 1, 246, 66, 0, // Skip to: 21620
/* 4478 */    MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 4481 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4490
/* 4486 */    MCD_OPC_Decode, 234, 16, 7, // Opcode: VSTRIBL
/* 4490 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 4499
/* 4495 */    MCD_OPC_Decode, 236, 16, 7, // Opcode: VSTRIBR
/* 4499 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 4508
/* 4504 */    MCD_OPC_Decode, 238, 16, 7, // Opcode: VSTRIHL
/* 4508 */    MCD_OPC_FilterValue, 3, 211, 66, 0, // Skip to: 21620
/* 4513 */    MCD_OPC_Decode, 240, 16, 7, // Opcode: VSTRIHR
/* 4517 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 4533
/* 4522 */    MCD_OPC_CheckField, 0, 1, 0, 195, 66, 0, // Skip to: 21620
/* 4529 */    MCD_OPC_Decode, 231, 15, 3, // Opcode: VMRGHH
/* 4533 */    MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 4549
/* 4538 */    MCD_OPC_CheckField, 0, 1, 0, 179, 66, 0, // Skip to: 21620
/* 4545 */    MCD_OPC_Decode, 232, 15, 3, // Opcode: VMRGHW
/* 4549 */    MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 4565
/* 4554 */    MCD_OPC_CheckField, 0, 1, 0, 163, 66, 0, // Skip to: 21620
/* 4561 */    MCD_OPC_Decode, 233, 15, 3, // Opcode: VMRGLB
/* 4565 */    MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 4581
/* 4570 */    MCD_OPC_CheckField, 0, 1, 0, 147, 66, 0, // Skip to: 21620
/* 4577 */    MCD_OPC_Decode, 234, 15, 3, // Opcode: VMRGLH
/* 4581 */    MCD_OPC_FilterValue, 6, 21, 0, 0, // Skip to: 4607
/* 4586 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4589 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4598
/* 4594 */    MCD_OPC_Decode, 235, 15, 3, // Opcode: VMRGLW
/* 4598 */    MCD_OPC_FilterValue, 1, 121, 66, 0, // Skip to: 21620
/* 4603 */    MCD_OPC_Decode, 179, 14, 17, // Opcode: VCLRLB
/* 4607 */    MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 4623
/* 4612 */    MCD_OPC_CheckField, 0, 1, 1, 105, 66, 0, // Skip to: 21620
/* 4619 */    MCD_OPC_Decode, 180, 14, 17, // Opcode: VCLRRB
/* 4623 */    MCD_OPC_FilterValue, 8, 21, 0, 0, // Skip to: 4649
/* 4628 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4631 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4640
/* 4636 */    MCD_OPC_Decode, 212, 16, 16, // Opcode: VSPLTB
/* 4640 */    MCD_OPC_FilterValue, 1, 79, 66, 0, // Skip to: 21620
/* 4645 */    MCD_OPC_Decode, 157, 15, 18, // Opcode: VEXTRACTUB
/* 4649 */    MCD_OPC_FilterValue, 9, 21, 0, 0, // Skip to: 4675
/* 4654 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4657 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4666
/* 4662 */    MCD_OPC_Decode, 214, 16, 16, // Opcode: VSPLTH
/* 4666 */    MCD_OPC_FilterValue, 1, 53, 66, 0, // Skip to: 21620
/* 4671 */    MCD_OPC_Decode, 158, 15, 18, // Opcode: VEXTRACTUH
/* 4675 */    MCD_OPC_FilterValue, 10, 21, 0, 0, // Skip to: 4701
/* 4680 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4683 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4692
/* 4688 */    MCD_OPC_Decode, 219, 16, 16, // Opcode: VSPLTW
/* 4692 */    MCD_OPC_FilterValue, 1, 27, 66, 0, // Skip to: 21620
/* 4697 */    MCD_OPC_Decode, 159, 15, 18, // Opcode: VEXTRACTUW
/* 4701 */    MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 4717
/* 4706 */    MCD_OPC_CheckField, 0, 1, 1, 11, 66, 0, // Skip to: 21620
/* 4713 */    MCD_OPC_Decode, 153, 15, 18, // Opcode: VEXTRACTD
/* 4717 */    MCD_OPC_FilterValue, 12, 28, 0, 0, // Skip to: 4750
/* 4722 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4725 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4741
/* 4730 */    MCD_OPC_CheckField, 11, 5, 0, 243, 65, 0, // Skip to: 21620
/* 4737 */    MCD_OPC_Decode, 216, 16, 19, // Opcode: VSPLTISB
/* 4741 */    MCD_OPC_FilterValue, 1, 234, 65, 0, // Skip to: 21620
/* 4746 */    MCD_OPC_Decode, 187, 15, 20, // Opcode: VINSERTB
/* 4750 */    MCD_OPC_FilterValue, 13, 28, 0, 0, // Skip to: 4783
/* 4755 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4758 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4774
/* 4763 */    MCD_OPC_CheckField, 11, 5, 0, 210, 65, 0, // Skip to: 21620
/* 4770 */    MCD_OPC_Decode, 217, 16, 19, // Opcode: VSPLTISH
/* 4774 */    MCD_OPC_FilterValue, 1, 201, 65, 0, // Skip to: 21620
/* 4779 */    MCD_OPC_Decode, 189, 15, 20, // Opcode: VINSERTH
/* 4783 */    MCD_OPC_FilterValue, 14, 28, 0, 0, // Skip to: 4816
/* 4788 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4791 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 4807
/* 4796 */    MCD_OPC_CheckField, 11, 5, 0, 177, 65, 0, // Skip to: 21620
/* 4803 */    MCD_OPC_Decode, 218, 16, 19, // Opcode: VSPLTISW
/* 4807 */    MCD_OPC_FilterValue, 1, 168, 65, 0, // Skip to: 21620
/* 4812 */    MCD_OPC_Decode, 190, 15, 18, // Opcode: VINSERTW
/* 4816 */    MCD_OPC_FilterValue, 15, 11, 0, 0, // Skip to: 4832
/* 4821 */    MCD_OPC_CheckField, 0, 1, 1, 152, 65, 0, // Skip to: 21620
/* 4828 */    MCD_OPC_Decode, 188, 15, 18, // Opcode: VINSERTD
/* 4832 */    MCD_OPC_FilterValue, 16, 56, 0, 0, // Skip to: 4893
/* 4837 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4840 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4849
/* 4845 */    MCD_OPC_Decode, 208, 16, 3, // Opcode: VSLO
/* 4849 */    MCD_OPC_FilterValue, 1, 126, 65, 0, // Skip to: 21620
/* 4854 */    MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 4857 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4866
/* 4862 */    MCD_OPC_Decode, 235, 16, 7, // Opcode: VSTRIBL_rec
/* 4866 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 4875
/* 4871 */    MCD_OPC_Decode, 237, 16, 7, // Opcode: VSTRIBR_rec
/* 4875 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 4884
/* 4880 */    MCD_OPC_Decode, 239, 16, 7, // Opcode: VSTRIHL_rec
/* 4884 */    MCD_OPC_FilterValue, 3, 91, 65, 0, // Skip to: 21620
/* 4889 */    MCD_OPC_Decode, 241, 16, 7, // Opcode: VSTRIHR_rec
/* 4893 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 4909
/* 4898 */    MCD_OPC_CheckField, 0, 1, 0, 75, 65, 0, // Skip to: 21620
/* 4905 */    MCD_OPC_Decode, 230, 16, 3, // Opcode: VSRO
/* 4909 */    MCD_OPC_FilterValue, 19, 18, 0, 0, // Skip to: 4932
/* 4914 */    MCD_OPC_CheckField, 19, 2, 0, 59, 65, 0, // Skip to: 21620
/* 4921 */    MCD_OPC_CheckField, 0, 1, 0, 52, 65, 0, // Skip to: 21620
/* 4928 */    MCD_OPC_Decode, 179, 15, 21, // Opcode: VGNB
/* 4932 */    MCD_OPC_FilterValue, 20, 18, 0, 0, // Skip to: 4955
/* 4937 */    MCD_OPC_CheckField, 16, 5, 0, 36, 65, 0, // Skip to: 21620
/* 4944 */    MCD_OPC_CheckField, 0, 1, 0, 29, 65, 0, // Skip to: 21620
/* 4951 */    MCD_OPC_Decode, 178, 15, 7, // Opcode: VGBBD
/* 4955 */    MCD_OPC_FilterValue, 21, 21, 0, 0, // Skip to: 4981
/* 4960 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 4963 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 4972
/* 4968 */    MCD_OPC_Decode, 171, 14, 3, // Opcode: VBPERMQ
/* 4972 */    MCD_OPC_FilterValue, 1, 3, 65, 0, // Skip to: 21620
/* 4977 */    MCD_OPC_Decode, 174, 14, 3, // Opcode: VCFUGED
/* 4981 */    MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 4997
/* 4986 */    MCD_OPC_CheckField, 0, 1, 1, 243, 64, 0, // Skip to: 21620
/* 4993 */    MCD_OPC_Decode, 156, 16, 3, // Opcode: VPEXTD
/* 4997 */    MCD_OPC_FilterValue, 23, 21, 0, 0, // Skip to: 5023
/* 5002 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5005 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5014
/* 5010 */    MCD_OPC_Decode, 170, 14, 3, // Opcode: VBPERMD
/* 5014 */    MCD_OPC_FilterValue, 1, 217, 64, 0, // Skip to: 21620
/* 5019 */    MCD_OPC_Decode, 152, 16, 3, // Opcode: VPDEPD
/* 5023 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 5039
/* 5028 */    MCD_OPC_CheckField, 0, 1, 1, 201, 64, 0, // Skip to: 21620
/* 5035 */    MCD_OPC_Decode, 172, 15, 22, // Opcode: VEXTUBLX
/* 5039 */    MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 5055
/* 5044 */    MCD_OPC_CheckField, 0, 1, 1, 185, 64, 0, // Skip to: 21620
/* 5051 */    MCD_OPC_Decode, 174, 15, 22, // Opcode: VEXTUHLX
/* 5055 */    MCD_OPC_FilterValue, 26, 21, 0, 0, // Skip to: 5081
/* 5060 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5063 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5072
/* 5068 */    MCD_OPC_Decode, 236, 15, 3, // Opcode: VMRGOW
/* 5072 */    MCD_OPC_FilterValue, 1, 159, 64, 0, // Skip to: 21620
/* 5077 */    MCD_OPC_Decode, 176, 15, 22, // Opcode: VEXTUWLX
/* 5081 */    MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 5097
/* 5086 */    MCD_OPC_CheckField, 0, 1, 1, 143, 64, 0, // Skip to: 21620
/* 5093 */    MCD_OPC_Decode, 173, 15, 22, // Opcode: VEXTUBRX
/* 5097 */    MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 5113
/* 5102 */    MCD_OPC_CheckField, 0, 1, 1, 127, 64, 0, // Skip to: 21620
/* 5109 */    MCD_OPC_Decode, 175, 15, 22, // Opcode: VEXTUHRX
/* 5113 */    MCD_OPC_FilterValue, 30, 118, 64, 0, // Skip to: 21620
/* 5118 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5121 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5130
/* 5126 */    MCD_OPC_Decode, 229, 15, 3, // Opcode: VMRGEW
/* 5130 */    MCD_OPC_FilterValue, 1, 101, 64, 0, // Skip to: 21620
/* 5135 */    MCD_OPC_Decode, 177, 15, 22, // Opcode: VEXTUWRX
/* 5139 */    MCD_OPC_FilterValue, 7, 49, 2, 0, // Skip to: 5705
/* 5144 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 5147 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 5173
/* 5152 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5155 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5164
/* 5160 */    MCD_OPC_Decode, 166, 16, 3, // Opcode: VPKUHUM
/* 5164 */    MCD_OPC_FilterValue, 1, 67, 64, 0, // Skip to: 21620
/* 5169 */    MCD_OPC_Decode, 182, 15, 23, // Opcode: VINSBVLX
/* 5173 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 5199
/* 5178 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5181 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5190
/* 5186 */    MCD_OPC_Decode, 168, 16, 3, // Opcode: VPKUWUM
/* 5190 */    MCD_OPC_FilterValue, 1, 41, 64, 0, // Skip to: 21620
/* 5195 */    MCD_OPC_Decode, 193, 15, 23, // Opcode: VINSHVLX
/* 5199 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 5225
/* 5204 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5207 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5216
/* 5212 */    MCD_OPC_Decode, 167, 16, 3, // Opcode: VPKUHUS
/* 5216 */    MCD_OPC_FilterValue, 1, 15, 64, 0, // Skip to: 21620
/* 5221 */    MCD_OPC_Decode, 198, 15, 23, // Opcode: VINSWVLX
/* 5225 */    MCD_OPC_FilterValue, 3, 21, 0, 0, // Skip to: 5251
/* 5230 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5233 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5242
/* 5238 */    MCD_OPC_Decode, 169, 16, 3, // Opcode: VPKUWUS
/* 5242 */    MCD_OPC_FilterValue, 1, 245, 63, 0, // Skip to: 21620
/* 5247 */    MCD_OPC_Decode, 195, 15, 24, // Opcode: VINSW
/* 5251 */    MCD_OPC_FilterValue, 4, 21, 0, 0, // Skip to: 5277
/* 5256 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5259 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5268
/* 5264 */    MCD_OPC_Decode, 161, 16, 3, // Opcode: VPKSHUS
/* 5268 */    MCD_OPC_FilterValue, 1, 219, 63, 0, // Skip to: 21620
/* 5273 */    MCD_OPC_Decode, 183, 15, 23, // Opcode: VINSBVRX
/* 5277 */    MCD_OPC_FilterValue, 5, 21, 0, 0, // Skip to: 5303
/* 5282 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5285 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5294
/* 5290 */    MCD_OPC_Decode, 163, 16, 3, // Opcode: VPKSWUS
/* 5294 */    MCD_OPC_FilterValue, 1, 193, 63, 0, // Skip to: 21620
/* 5299 */    MCD_OPC_Decode, 194, 15, 23, // Opcode: VINSHVRX
/* 5303 */    MCD_OPC_FilterValue, 6, 21, 0, 0, // Skip to: 5329
/* 5308 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5311 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5320
/* 5316 */    MCD_OPC_Decode, 160, 16, 3, // Opcode: VPKSHSS
/* 5320 */    MCD_OPC_FilterValue, 1, 167, 63, 0, // Skip to: 21620
/* 5325 */    MCD_OPC_Decode, 199, 15, 23, // Opcode: VINSWVRX
/* 5329 */    MCD_OPC_FilterValue, 7, 21, 0, 0, // Skip to: 5355
/* 5334 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5337 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5346
/* 5342 */    MCD_OPC_Decode, 162, 16, 3, // Opcode: VPKSWSS
/* 5346 */    MCD_OPC_FilterValue, 1, 141, 63, 0, // Skip to: 21620
/* 5351 */    MCD_OPC_Decode, 184, 15, 25, // Opcode: VINSD
/* 5355 */    MCD_OPC_FilterValue, 8, 28, 0, 0, // Skip to: 5388
/* 5360 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5363 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5379
/* 5368 */    MCD_OPC_CheckField, 16, 5, 0, 117, 63, 0, // Skip to: 21620
/* 5375 */    MCD_OPC_Decode, 136, 17, 7, // Opcode: VUPKHSB
/* 5379 */    MCD_OPC_FilterValue, 1, 108, 63, 0, // Skip to: 21620
/* 5384 */    MCD_OPC_Decode, 180, 15, 26, // Opcode: VINSBLX
/* 5388 */    MCD_OPC_FilterValue, 9, 28, 0, 0, // Skip to: 5421
/* 5393 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5396 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5412
/* 5401 */    MCD_OPC_CheckField, 16, 5, 0, 84, 63, 0, // Skip to: 21620
/* 5408 */    MCD_OPC_Decode, 137, 17, 7, // Opcode: VUPKHSH
/* 5412 */    MCD_OPC_FilterValue, 1, 75, 63, 0, // Skip to: 21620
/* 5417 */    MCD_OPC_Decode, 191, 15, 26, // Opcode: VINSHLX
/* 5421 */    MCD_OPC_FilterValue, 10, 28, 0, 0, // Skip to: 5454
/* 5426 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5429 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5445
/* 5434 */    MCD_OPC_CheckField, 16, 5, 0, 51, 63, 0, // Skip to: 21620
/* 5441 */    MCD_OPC_Decode, 140, 17, 7, // Opcode: VUPKLSB
/* 5445 */    MCD_OPC_FilterValue, 1, 42, 63, 0, // Skip to: 21620
/* 5450 */    MCD_OPC_Decode, 196, 15, 26, // Opcode: VINSWLX
/* 5454 */    MCD_OPC_FilterValue, 11, 28, 0, 0, // Skip to: 5487
/* 5459 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5462 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5478
/* 5467 */    MCD_OPC_CheckField, 16, 5, 0, 18, 63, 0, // Skip to: 21620
/* 5474 */    MCD_OPC_Decode, 141, 17, 7, // Opcode: VUPKLSH
/* 5478 */    MCD_OPC_FilterValue, 1, 9, 63, 0, // Skip to: 21620
/* 5483 */    MCD_OPC_Decode, 185, 15, 27, // Opcode: VINSDLX
/* 5487 */    MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 5513
/* 5492 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5495 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5504
/* 5500 */    MCD_OPC_Decode, 157, 16, 3, // Opcode: VPKPX
/* 5504 */    MCD_OPC_FilterValue, 1, 239, 62, 0, // Skip to: 21620
/* 5509 */    MCD_OPC_Decode, 181, 15, 26, // Opcode: VINSBRX
/* 5513 */    MCD_OPC_FilterValue, 13, 28, 0, 0, // Skip to: 5546
/* 5518 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5521 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5537
/* 5526 */    MCD_OPC_CheckField, 16, 5, 0, 215, 62, 0, // Skip to: 21620
/* 5533 */    MCD_OPC_Decode, 135, 17, 7, // Opcode: VUPKHPX
/* 5537 */    MCD_OPC_FilterValue, 1, 206, 62, 0, // Skip to: 21620
/* 5542 */    MCD_OPC_Decode, 192, 15, 26, // Opcode: VINSHRX
/* 5546 */    MCD_OPC_FilterValue, 14, 11, 0, 0, // Skip to: 5562
/* 5551 */    MCD_OPC_CheckField, 0, 1, 1, 190, 62, 0, // Skip to: 21620
/* 5558 */    MCD_OPC_Decode, 197, 15, 26, // Opcode: VINSWRX
/* 5562 */    MCD_OPC_FilterValue, 15, 28, 0, 0, // Skip to: 5595
/* 5567 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5570 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 5586
/* 5575 */    MCD_OPC_CheckField, 16, 5, 0, 166, 62, 0, // Skip to: 21620
/* 5582 */    MCD_OPC_Decode, 139, 17, 7, // Opcode: VUPKLPX
/* 5586 */    MCD_OPC_FilterValue, 1, 157, 62, 0, // Skip to: 21620
/* 5591 */    MCD_OPC_Decode, 186, 15, 27, // Opcode: VINSDRX
/* 5595 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 5611
/* 5600 */    MCD_OPC_CheckField, 0, 1, 0, 141, 62, 0, // Skip to: 21620
/* 5607 */    MCD_OPC_Decode, 164, 16, 3, // Opcode: VPKUDUM
/* 5611 */    MCD_OPC_FilterValue, 19, 11, 0, 0, // Skip to: 5627
/* 5616 */    MCD_OPC_CheckField, 0, 1, 0, 125, 62, 0, // Skip to: 21620
/* 5623 */    MCD_OPC_Decode, 165, 16, 3, // Opcode: VPKUDUS
/* 5627 */    MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 5643
/* 5632 */    MCD_OPC_CheckField, 0, 1, 0, 109, 62, 0, // Skip to: 21620
/* 5639 */    MCD_OPC_Decode, 159, 16, 3, // Opcode: VPKSDUS
/* 5643 */    MCD_OPC_FilterValue, 23, 11, 0, 0, // Skip to: 5659
/* 5648 */    MCD_OPC_CheckField, 0, 1, 0, 93, 62, 0, // Skip to: 21620
/* 5655 */    MCD_OPC_Decode, 158, 16, 3, // Opcode: VPKSDSS
/* 5659 */    MCD_OPC_FilterValue, 25, 18, 0, 0, // Skip to: 5682
/* 5664 */    MCD_OPC_CheckField, 16, 5, 0, 77, 62, 0, // Skip to: 21620
/* 5671 */    MCD_OPC_CheckField, 0, 1, 0, 70, 62, 0, // Skip to: 21620
/* 5678 */    MCD_OPC_Decode, 138, 17, 7, // Opcode: VUPKHSW
/* 5682 */    MCD_OPC_FilterValue, 27, 61, 62, 0, // Skip to: 21620
/* 5687 */    MCD_OPC_CheckField, 16, 5, 0, 54, 62, 0, // Skip to: 21620
/* 5694 */    MCD_OPC_CheckField, 0, 1, 0, 47, 62, 0, // Skip to: 21620
/* 5701 */    MCD_OPC_Decode, 142, 17, 7, // Opcode: VUPKLSW
/* 5705 */    MCD_OPC_FilterValue, 10, 4, 0, 0, // Skip to: 5714
/* 5710 */    MCD_OPC_Decode, 174, 10, 28, // Opcode: MTVSRBMI
/* 5714 */    MCD_OPC_FilterValue, 11, 38, 0, 0, // Skip to: 5757
/* 5719 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5722 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 5748
/* 5727 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 5730 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5739
/* 5735 */    MCD_OPC_Decode, 205, 16, 29, // Opcode: VSLDBI
/* 5739 */    MCD_OPC_FilterValue, 1, 4, 62, 0, // Skip to: 21620
/* 5744 */    MCD_OPC_Decode, 228, 16, 29, // Opcode: VSRDBI
/* 5748 */    MCD_OPC_FilterValue, 1, 251, 61, 0, // Skip to: 21620
/* 5753 */    MCD_OPC_Decode, 237, 15, 30, // Opcode: VMSUMCUD
/* 5757 */    MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 5783
/* 5762 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5765 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5774
/* 5770 */    MCD_OPC_Decode, 146, 15, 31, // Opcode: VEXTDUBVLX
/* 5774 */    MCD_OPC_FilterValue, 1, 225, 61, 0, // Skip to: 21620
/* 5779 */    MCD_OPC_Decode, 147, 15, 31, // Opcode: VEXTDUBVRX
/* 5783 */    MCD_OPC_FilterValue, 13, 21, 0, 0, // Skip to: 5809
/* 5788 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5791 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5800
/* 5796 */    MCD_OPC_Decode, 148, 15, 31, // Opcode: VEXTDUHVLX
/* 5800 */    MCD_OPC_FilterValue, 1, 199, 61, 0, // Skip to: 21620
/* 5805 */    MCD_OPC_Decode, 149, 15, 31, // Opcode: VEXTDUHVRX
/* 5809 */    MCD_OPC_FilterValue, 14, 21, 0, 0, // Skip to: 5835
/* 5814 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5817 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5826
/* 5822 */    MCD_OPC_Decode, 150, 15, 31, // Opcode: VEXTDUWVLX
/* 5826 */    MCD_OPC_FilterValue, 1, 173, 61, 0, // Skip to: 21620
/* 5831 */    MCD_OPC_Decode, 151, 15, 31, // Opcode: VEXTDUWVRX
/* 5835 */    MCD_OPC_FilterValue, 15, 21, 0, 0, // Skip to: 5861
/* 5840 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5843 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5852
/* 5848 */    MCD_OPC_Decode, 144, 15, 31, // Opcode: VEXTDDVLX
/* 5852 */    MCD_OPC_FilterValue, 1, 147, 61, 0, // Skip to: 21620
/* 5857 */    MCD_OPC_Decode, 145, 15, 31, // Opcode: VEXTDDVRX
/* 5861 */    MCD_OPC_FilterValue, 16, 21, 0, 0, // Skip to: 5887
/* 5866 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5869 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5878
/* 5874 */    MCD_OPC_Decode, 211, 15, 30, // Opcode: VMHADDSHS
/* 5878 */    MCD_OPC_FilterValue, 1, 121, 61, 0, // Skip to: 21620
/* 5883 */    MCD_OPC_Decode, 212, 15, 30, // Opcode: VMHRADDSHS
/* 5887 */    MCD_OPC_FilterValue, 17, 21, 0, 0, // Skip to: 5913
/* 5892 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5895 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5904
/* 5900 */    MCD_OPC_Decode, 222, 15, 30, // Opcode: VMLADDUHM
/* 5904 */    MCD_OPC_FilterValue, 1, 95, 61, 0, // Skip to: 21620
/* 5909 */    MCD_OPC_Decode, 242, 15, 30, // Opcode: VMSUMUDM
/* 5913 */    MCD_OPC_FilterValue, 18, 21, 0, 0, // Skip to: 5939
/* 5918 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5921 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5930
/* 5926 */    MCD_OPC_Decode, 241, 15, 30, // Opcode: VMSUMUBM
/* 5930 */    MCD_OPC_FilterValue, 1, 69, 61, 0, // Skip to: 21620
/* 5935 */    MCD_OPC_Decode, 238, 15, 30, // Opcode: VMSUMMBM
/* 5939 */    MCD_OPC_FilterValue, 19, 21, 0, 0, // Skip to: 5965
/* 5944 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5947 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5956
/* 5952 */    MCD_OPC_Decode, 243, 15, 30, // Opcode: VMSUMUHM
/* 5956 */    MCD_OPC_FilterValue, 1, 43, 61, 0, // Skip to: 21620
/* 5961 */    MCD_OPC_Decode, 244, 15, 30, // Opcode: VMSUMUHS
/* 5965 */    MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 5991
/* 5970 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5973 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 5982
/* 5978 */    MCD_OPC_Decode, 239, 15, 30, // Opcode: VMSUMSHM
/* 5982 */    MCD_OPC_FilterValue, 1, 17, 61, 0, // Skip to: 21620
/* 5987 */    MCD_OPC_Decode, 240, 15, 30, // Opcode: VMSUMSHS
/* 5991 */    MCD_OPC_FilterValue, 21, 21, 0, 0, // Skip to: 6017
/* 5996 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 5999 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6008
/* 6004 */    MCD_OPC_Decode, 199, 16, 30, // Opcode: VSEL
/* 6008 */    MCD_OPC_FilterValue, 1, 247, 60, 0, // Skip to: 21620
/* 6013 */    MCD_OPC_Decode, 153, 16, 30, // Opcode: VPERM
/* 6017 */    MCD_OPC_FilterValue, 22, 28, 0, 0, // Skip to: 6050
/* 6022 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6025 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 6041
/* 6030 */    MCD_OPC_CheckField, 10, 1, 0, 223, 60, 0, // Skip to: 21620
/* 6037 */    MCD_OPC_Decode, 206, 16, 32, // Opcode: VSLDOI
/* 6041 */    MCD_OPC_FilterValue, 1, 214, 60, 0, // Skip to: 21620
/* 6046 */    MCD_OPC_Decode, 155, 16, 30, // Opcode: VPERMXOR
/* 6050 */    MCD_OPC_FilterValue, 23, 21, 0, 0, // Skip to: 6076
/* 6055 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6058 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6067
/* 6063 */    MCD_OPC_Decode, 201, 15, 33, // Opcode: VMADDFP
/* 6067 */    MCD_OPC_FilterValue, 1, 188, 60, 0, // Skip to: 21620
/* 6072 */    MCD_OPC_Decode, 148, 16, 33, // Opcode: VNMSUBFP
/* 6076 */    MCD_OPC_FilterValue, 24, 21, 0, 0, // Skip to: 6102
/* 6081 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6084 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6093
/* 6089 */    MCD_OPC_Decode, 221, 9, 34, // Opcode: MADDHD
/* 6093 */    MCD_OPC_FilterValue, 1, 162, 60, 0, // Skip to: 21620
/* 6098 */    MCD_OPC_Decode, 222, 9, 34, // Opcode: MADDHDU
/* 6102 */    MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 6118
/* 6107 */    MCD_OPC_CheckField, 0, 1, 1, 146, 60, 0, // Skip to: 21620
/* 6114 */    MCD_OPC_Decode, 223, 9, 35, // Opcode: MADDLD
/* 6118 */    MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 6134
/* 6123 */    MCD_OPC_CheckField, 0, 1, 1, 130, 60, 0, // Skip to: 21620
/* 6130 */    MCD_OPC_Decode, 154, 16, 30, // Opcode: VPERMR
/* 6134 */    MCD_OPC_FilterValue, 30, 21, 0, 0, // Skip to: 6160
/* 6139 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6142 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6151
/* 6147 */    MCD_OPC_Decode, 149, 14, 30, // Opcode: VADDEUQM
/* 6151 */    MCD_OPC_FilterValue, 1, 104, 60, 0, // Skip to: 21620
/* 6156 */    MCD_OPC_Decode, 148, 14, 30, // Opcode: VADDECUQ
/* 6160 */    MCD_OPC_FilterValue, 31, 95, 60, 0, // Skip to: 21620
/* 6165 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6168 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6177
/* 6173 */    MCD_OPC_Decode, 245, 16, 30, // Opcode: VSUBEUQM
/* 6177 */    MCD_OPC_FilterValue, 1, 78, 60, 0, // Skip to: 21620
/* 6182 */    MCD_OPC_Decode, 244, 16, 30, // Opcode: VSUBECUQ
/* 6186 */    MCD_OPC_FilterValue, 6, 21, 0, 0, // Skip to: 6212
/* 6191 */    MCD_OPC_ExtractField, 0, 4,  // Inst{3-0} ...
/* 6194 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6203
/* 6199 */    MCD_OPC_Decode, 212, 9, 36, // Opcode: LXVP
/* 6203 */    MCD_OPC_FilterValue, 1, 52, 60, 0, // Skip to: 21620
/* 6208 */    MCD_OPC_Decode, 172, 13, 36, // Opcode: STXVP
/* 6212 */    MCD_OPC_FilterValue, 7, 4, 0, 0, // Skip to: 6221
/* 6217 */    MCD_OPC_Decode, 196, 10, 37, // Opcode: MULLI
/* 6221 */    MCD_OPC_FilterValue, 8, 4, 0, 0, // Skip to: 6230
/* 6226 */    MCD_OPC_Decode, 201, 13, 37, // Opcode: SUBFIC
/* 6230 */    MCD_OPC_FilterValue, 10, 21, 0, 0, // Skip to: 6256
/* 6235 */    MCD_OPC_ExtractField, 21, 2,  // Inst{22-21} ...
/* 6238 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6247
/* 6243 */    MCD_OPC_Decode, 211, 4, 38, // Opcode: CMPLWI
/* 6247 */    MCD_OPC_FilterValue, 1, 8, 60, 0, // Skip to: 21620
/* 6252 */    MCD_OPC_Decode, 209, 4, 39, // Opcode: CMPLDI
/* 6256 */    MCD_OPC_FilterValue, 11, 21, 0, 0, // Skip to: 6282
/* 6261 */    MCD_OPC_ExtractField, 21, 2,  // Inst{22-21} ...
/* 6264 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6273
/* 6269 */    MCD_OPC_Decode, 215, 4, 40, // Opcode: CMPWI
/* 6273 */    MCD_OPC_FilterValue, 1, 238, 59, 0, // Skip to: 21620
/* 6278 */    MCD_OPC_Decode, 206, 4, 41, // Opcode: CMPDI
/* 6282 */    MCD_OPC_FilterValue, 12, 4, 0, 0, // Skip to: 6291
/* 6287 */    MCD_OPC_Decode, 231, 2, 37, // Opcode: ADDIC
/* 6291 */    MCD_OPC_FilterValue, 13, 4, 0, 0, // Skip to: 6300
/* 6296 */    MCD_OPC_Decode, 233, 2, 37, // Opcode: ADDIC_rec
/* 6300 */    MCD_OPC_FilterValue, 14, 15, 0, 0, // Skip to: 6320
/* 6305 */    MCD_OPC_CheckField, 16, 5, 0, 4, 0, 0, // Skip to: 6316
/* 6312 */    MCD_OPC_Decode, 155, 9, 42, // Opcode: LI
/* 6316 */    MCD_OPC_Decode, 229, 2, 43, // Opcode: ADDI
/* 6320 */    MCD_OPC_FilterValue, 15, 15, 0, 0, // Skip to: 6340
/* 6325 */    MCD_OPC_CheckField, 16, 5, 0, 4, 0, 0, // Skip to: 6336
/* 6332 */    MCD_OPC_Decode, 157, 9, 42, // Opcode: LIS
/* 6336 */    MCD_OPC_Decode, 234, 2, 43, // Opcode: ADDIS
/* 6340 */    MCD_OPC_FilterValue, 16, 35, 1, 0, // Skip to: 6636
/* 6345 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 6348 */    MCD_OPC_FilterValue, 0, 67, 0, 0, // Skip to: 6420
/* 6353 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 6356 */    MCD_OPC_FilterValue, 128, 4, 4, 0, 0, // Skip to: 6366
/* 6362 */    MCD_OPC_Decode, 135, 4, 44, // Opcode: BDNZ
/* 6366 */    MCD_OPC_FilterValue, 192, 4, 4, 0, 0, // Skip to: 6376
/* 6372 */    MCD_OPC_Decode, 155, 4, 44, // Opcode: BDZ
/* 6376 */    MCD_OPC_FilterValue, 128, 6, 4, 0, 0, // Skip to: 6386
/* 6382 */    MCD_OPC_Decode, 153, 4, 44, // Opcode: BDNZm
/* 6386 */    MCD_OPC_FilterValue, 160, 6, 4, 0, 0, // Skip to: 6396
/* 6392 */    MCD_OPC_Decode, 154, 4, 44, // Opcode: BDNZp
/* 6396 */    MCD_OPC_FilterValue, 192, 6, 4, 0, 0, // Skip to: 6406
/* 6402 */    MCD_OPC_Decode, 173, 4, 44, // Opcode: BDZm
/* 6406 */    MCD_OPC_FilterValue, 224, 6, 4, 0, 0, // Skip to: 6416
/* 6412 */    MCD_OPC_Decode, 174, 4, 44, // Opcode: BDZp
/* 6416 */    MCD_OPC_Decode, 202, 19, 45, // Opcode: gBC
/* 6420 */    MCD_OPC_FilterValue, 1, 67, 0, 0, // Skip to: 6492
/* 6425 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 6428 */    MCD_OPC_FilterValue, 128, 4, 4, 0, 0, // Skip to: 6438
/* 6434 */    MCD_OPC_Decode, 140, 4, 44, // Opcode: BDNZL
/* 6438 */    MCD_OPC_FilterValue, 192, 4, 4, 0, 0, // Skip to: 6448
/* 6444 */    MCD_OPC_Decode, 160, 4, 44, // Opcode: BDZL
/* 6448 */    MCD_OPC_FilterValue, 128, 6, 4, 0, 0, // Skip to: 6458
/* 6454 */    MCD_OPC_Decode, 151, 4, 44, // Opcode: BDNZLm
/* 6458 */    MCD_OPC_FilterValue, 160, 6, 4, 0, 0, // Skip to: 6468
/* 6464 */    MCD_OPC_Decode, 152, 4, 44, // Opcode: BDNZLp
/* 6468 */    MCD_OPC_FilterValue, 192, 6, 4, 0, 0, // Skip to: 6478
/* 6474 */    MCD_OPC_Decode, 171, 4, 44, // Opcode: BDZLm
/* 6478 */    MCD_OPC_FilterValue, 224, 6, 4, 0, 0, // Skip to: 6488
/* 6484 */    MCD_OPC_Decode, 172, 4, 44, // Opcode: BDZLp
/* 6488 */    MCD_OPC_Decode, 207, 19, 45, // Opcode: gBCL
/* 6492 */    MCD_OPC_FilterValue, 2, 67, 0, 0, // Skip to: 6564
/* 6497 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 6500 */    MCD_OPC_FilterValue, 128, 4, 4, 0, 0, // Skip to: 6510
/* 6506 */    MCD_OPC_Decode, 137, 4, 46, // Opcode: BDNZA
/* 6510 */    MCD_OPC_FilterValue, 192, 4, 4, 0, 0, // Skip to: 6520
/* 6516 */    MCD_OPC_Decode, 157, 4, 46, // Opcode: BDZA
/* 6520 */    MCD_OPC_FilterValue, 128, 6, 4, 0, 0, // Skip to: 6530
/* 6526 */    MCD_OPC_Decode, 138, 4, 46, // Opcode: BDNZAm
/* 6530 */    MCD_OPC_FilterValue, 160, 6, 4, 0, 0, // Skip to: 6540
/* 6536 */    MCD_OPC_Decode, 139, 4, 46, // Opcode: BDNZAp
/* 6540 */    MCD_OPC_FilterValue, 192, 6, 4, 0, 0, // Skip to: 6550
/* 6546 */    MCD_OPC_Decode, 158, 4, 46, // Opcode: BDZAm
/* 6550 */    MCD_OPC_FilterValue, 224, 6, 4, 0, 0, // Skip to: 6560
/* 6556 */    MCD_OPC_Decode, 159, 4, 46, // Opcode: BDZAp
/* 6560 */    MCD_OPC_Decode, 203, 19, 47, // Opcode: gBCA
/* 6564 */    MCD_OPC_FilterValue, 3, 203, 58, 0, // Skip to: 21620
/* 6569 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 6572 */    MCD_OPC_FilterValue, 128, 4, 4, 0, 0, // Skip to: 6582
/* 6578 */    MCD_OPC_Decode, 141, 4, 46, // Opcode: BDNZLA
/* 6582 */    MCD_OPC_FilterValue, 192, 4, 4, 0, 0, // Skip to: 6592
/* 6588 */    MCD_OPC_Decode, 161, 4, 46, // Opcode: BDZLA
/* 6592 */    MCD_OPC_FilterValue, 128, 6, 4, 0, 0, // Skip to: 6602
/* 6598 */    MCD_OPC_Decode, 142, 4, 46, // Opcode: BDNZLAm
/* 6602 */    MCD_OPC_FilterValue, 160, 6, 4, 0, 0, // Skip to: 6612
/* 6608 */    MCD_OPC_Decode, 143, 4, 46, // Opcode: BDNZLAp
/* 6612 */    MCD_OPC_FilterValue, 192, 6, 4, 0, 0, // Skip to: 6622
/* 6618 */    MCD_OPC_Decode, 162, 4, 46, // Opcode: BDZLAm
/* 6622 */    MCD_OPC_FilterValue, 224, 6, 4, 0, 0, // Skip to: 6632
/* 6628 */    MCD_OPC_Decode, 163, 4, 46, // Opcode: BDZLAp
/* 6632 */    MCD_OPC_Decode, 208, 19, 47, // Opcode: gBCLA
/* 6636 */    MCD_OPC_FilterValue, 17, 11, 0, 0, // Skip to: 6652
/* 6641 */    MCD_OPC_CheckField, 1, 1, 1, 124, 58, 0, // Skip to: 21620
/* 6648 */    MCD_OPC_Decode, 134, 12, 48, // Opcode: SC
/* 6652 */    MCD_OPC_FilterValue, 18, 39, 0, 0, // Skip to: 6696
/* 6657 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 6660 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 6669
/* 6665 */    MCD_OPC_Decode, 211, 3, 49, // Opcode: B
/* 6669 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 6678
/* 6674 */    MCD_OPC_Decode, 175, 4, 49, // Opcode: BL
/* 6678 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 6687
/* 6683 */    MCD_OPC_Decode, 212, 3, 50, // Opcode: BA
/* 6687 */    MCD_OPC_FilterValue, 3, 80, 58, 0, // Skip to: 21620
/* 6692 */    MCD_OPC_Decode, 186, 4, 50, // Opcode: BLA
/* 6696 */    MCD_OPC_FilterValue, 19, 22, 3, 0, // Skip to: 7491
/* 6701 */    MCD_OPC_ExtractField, 1, 5,  // Inst{5-1} ...
/* 6704 */    MCD_OPC_FilterValue, 0, 25, 0, 0, // Skip to: 6734
/* 6709 */    MCD_OPC_CheckField, 21, 2, 0, 56, 58, 0, // Skip to: 21620
/* 6716 */    MCD_OPC_CheckField, 6, 12, 0, 49, 58, 0, // Skip to: 21620
/* 6723 */    MCD_OPC_CheckField, 0, 1, 0, 42, 58, 0, // Skip to: 21620
/* 6730 */    MCD_OPC_Decode, 226, 9, 51, // Opcode: MCRF
/* 6734 */    MCD_OPC_FilterValue, 1, 131, 0, 0, // Skip to: 6870
/* 6739 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 6742 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 6758
/* 6747 */    MCD_OPC_CheckField, 0, 1, 0, 18, 58, 0, // Skip to: 21620
/* 6754 */    MCD_OPC_Decode, 241, 4, 52, // Opcode: CRNOR
/* 6758 */    MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 6774
/* 6763 */    MCD_OPC_CheckField, 0, 1, 0, 2, 58, 0, // Skip to: 21620
/* 6770 */    MCD_OPC_Decode, 238, 4, 52, // Opcode: CRANDC
/* 6774 */    MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 6790
/* 6779 */    MCD_OPC_CheckField, 0, 1, 0, 242, 57, 0, // Skip to: 21620
/* 6786 */    MCD_OPC_Decode, 246, 4, 52, // Opcode: CRXOR
/* 6790 */    MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 6806
/* 6795 */    MCD_OPC_CheckField, 0, 1, 0, 226, 57, 0, // Skip to: 21620
/* 6802 */    MCD_OPC_Decode, 240, 4, 52, // Opcode: CRNAND
/* 6806 */    MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 6822
/* 6811 */    MCD_OPC_CheckField, 0, 1, 0, 210, 57, 0, // Skip to: 21620
/* 6818 */    MCD_OPC_Decode, 237, 4, 52, // Opcode: CRAND
/* 6822 */    MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 6838
/* 6827 */    MCD_OPC_CheckField, 0, 1, 0, 194, 57, 0, // Skip to: 21620
/* 6834 */    MCD_OPC_Decode, 239, 4, 52, // Opcode: CREQV
/* 6838 */    MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 6854
/* 6843 */    MCD_OPC_CheckField, 0, 1, 0, 178, 57, 0, // Skip to: 21620
/* 6850 */    MCD_OPC_Decode, 243, 4, 52, // Opcode: CRORC
/* 6854 */    MCD_OPC_FilterValue, 14, 169, 57, 0, // Skip to: 21620
/* 6859 */    MCD_OPC_CheckField, 0, 1, 0, 162, 57, 0, // Skip to: 21620
/* 6866 */    MCD_OPC_Decode, 242, 4, 52, // Opcode: CROR
/* 6870 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 6879
/* 6875 */    MCD_OPC_Decode, 135, 3, 53, // Opcode: ADDPCIS
/* 6879 */    MCD_OPC_FilterValue, 6, 18, 0, 0, // Skip to: 6902
/* 6884 */    MCD_OPC_CheckField, 6, 20, 1, 137, 57, 0, // Skip to: 21620
/* 6891 */    MCD_OPC_CheckField, 0, 1, 0, 130, 57, 0, // Skip to: 21620
/* 6898 */    MCD_OPC_Decode, 232, 11, 0, // Opcode: RFMCI
/* 6902 */    MCD_OPC_FilterValue, 7, 18, 0, 0, // Skip to: 6925
/* 6907 */    MCD_OPC_CheckField, 6, 20, 1, 114, 57, 0, // Skip to: 21620
/* 6914 */    MCD_OPC_CheckField, 0, 1, 0, 107, 57, 0, // Skip to: 21620
/* 6921 */    MCD_OPC_Decode, 228, 11, 0, // Opcode: RFDI
/* 6925 */    MCD_OPC_FilterValue, 16, 113, 1, 0, // Skip to: 7299
/* 6930 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 6933 */    MCD_OPC_FilterValue, 0, 178, 0, 0, // Skip to: 7116
/* 6938 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 6941 */    MCD_OPC_FilterValue, 0, 134, 0, 0, // Skip to: 7080
/* 6946 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 6949 */    MCD_OPC_FilterValue, 0, 74, 57, 0, // Skip to: 21620
/* 6954 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 6957 */    MCD_OPC_FilterValue, 128, 4, 11, 0, 0, // Skip to: 6974
/* 6963 */    MCD_OPC_CheckField, 11, 2, 0, 106, 0, 0, // Skip to: 7076
/* 6970 */    MCD_OPC_Decode, 144, 4, 0, // Opcode: BDNZLR
/* 6974 */    MCD_OPC_FilterValue, 192, 4, 11, 0, 0, // Skip to: 6991
/* 6980 */    MCD_OPC_CheckField, 11, 2, 0, 89, 0, 0, // Skip to: 7076
/* 6987 */    MCD_OPC_Decode, 164, 4, 0, // Opcode: BDZLR
/* 6991 */    MCD_OPC_FilterValue, 128, 5, 11, 0, 0, // Skip to: 7008
/* 6997 */    MCD_OPC_CheckField, 11, 2, 0, 72, 0, 0, // Skip to: 7076
/* 7004 */    MCD_OPC_Decode, 192, 4, 0, // Opcode: BLR
/* 7008 */    MCD_OPC_FilterValue, 128, 6, 11, 0, 0, // Skip to: 7025
/* 7014 */    MCD_OPC_CheckField, 11, 2, 0, 55, 0, 0, // Skip to: 7076
/* 7021 */    MCD_OPC_Decode, 149, 4, 0, // Opcode: BDNZLRm
/* 7025 */    MCD_OPC_FilterValue, 160, 6, 11, 0, 0, // Skip to: 7042
/* 7031 */    MCD_OPC_CheckField, 11, 2, 0, 38, 0, 0, // Skip to: 7076
/* 7038 */    MCD_OPC_Decode, 150, 4, 0, // Opcode: BDNZLRp
/* 7042 */    MCD_OPC_FilterValue, 192, 6, 11, 0, 0, // Skip to: 7059
/* 7048 */    MCD_OPC_CheckField, 11, 2, 0, 21, 0, 0, // Skip to: 7076
/* 7055 */    MCD_OPC_Decode, 169, 4, 0, // Opcode: BDZLRm
/* 7059 */    MCD_OPC_FilterValue, 224, 6, 11, 0, 0, // Skip to: 7076
/* 7065 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 7076
/* 7072 */    MCD_OPC_Decode, 170, 4, 0, // Opcode: BDZLRp
/* 7076 */    MCD_OPC_Decode, 210, 19, 54, // Opcode: gBCLR
/* 7080 */    MCD_OPC_FilterValue, 16, 199, 56, 0, // Skip to: 21620
/* 7085 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 7088 */    MCD_OPC_FilterValue, 0, 191, 56, 0, // Skip to: 21620
/* 7093 */    MCD_OPC_CheckField, 16, 10, 128, 5, 11, 0, 0, // Skip to: 7112
/* 7101 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 7112
/* 7108 */    MCD_OPC_Decode, 252, 3, 0, // Opcode: BCTR
/* 7112 */    MCD_OPC_Decode, 205, 19, 54, // Opcode: gBCCTR
/* 7116 */    MCD_OPC_FilterValue, 1, 163, 56, 0, // Skip to: 21620
/* 7121 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 7124 */    MCD_OPC_FilterValue, 0, 134, 0, 0, // Skip to: 7263
/* 7129 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 7132 */    MCD_OPC_FilterValue, 0, 147, 56, 0, // Skip to: 21620
/* 7137 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 7140 */    MCD_OPC_FilterValue, 128, 4, 11, 0, 0, // Skip to: 7157
/* 7146 */    MCD_OPC_CheckField, 11, 2, 0, 106, 0, 0, // Skip to: 7259
/* 7153 */    MCD_OPC_Decode, 146, 4, 0, // Opcode: BDNZLRL
/* 7157 */    MCD_OPC_FilterValue, 192, 4, 11, 0, 0, // Skip to: 7174
/* 7163 */    MCD_OPC_CheckField, 11, 2, 0, 89, 0, 0, // Skip to: 7259
/* 7170 */    MCD_OPC_Decode, 166, 4, 0, // Opcode: BDZLRL
/* 7174 */    MCD_OPC_FilterValue, 128, 5, 11, 0, 0, // Skip to: 7191
/* 7180 */    MCD_OPC_CheckField, 11, 2, 0, 72, 0, 0, // Skip to: 7259
/* 7187 */    MCD_OPC_Decode, 194, 4, 0, // Opcode: BLRL
/* 7191 */    MCD_OPC_FilterValue, 128, 6, 11, 0, 0, // Skip to: 7208
/* 7197 */    MCD_OPC_CheckField, 11, 2, 0, 55, 0, 0, // Skip to: 7259
/* 7204 */    MCD_OPC_Decode, 147, 4, 0, // Opcode: BDNZLRLm
/* 7208 */    MCD_OPC_FilterValue, 160, 6, 11, 0, 0, // Skip to: 7225
/* 7214 */    MCD_OPC_CheckField, 11, 2, 0, 38, 0, 0, // Skip to: 7259
/* 7221 */    MCD_OPC_Decode, 148, 4, 0, // Opcode: BDNZLRLp
/* 7225 */    MCD_OPC_FilterValue, 192, 6, 11, 0, 0, // Skip to: 7242
/* 7231 */    MCD_OPC_CheckField, 11, 2, 0, 21, 0, 0, // Skip to: 7259
/* 7238 */    MCD_OPC_Decode, 167, 4, 0, // Opcode: BDZLRLm
/* 7242 */    MCD_OPC_FilterValue, 224, 6, 11, 0, 0, // Skip to: 7259
/* 7248 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 7259
/* 7255 */    MCD_OPC_Decode, 168, 4, 0, // Opcode: BDZLRLp
/* 7259 */    MCD_OPC_Decode, 211, 19, 54, // Opcode: gBCLRL
/* 7263 */    MCD_OPC_FilterValue, 16, 16, 56, 0, // Skip to: 21620
/* 7268 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 7271 */    MCD_OPC_FilterValue, 0, 8, 56, 0, // Skip to: 21620
/* 7276 */    MCD_OPC_CheckField, 16, 10, 128, 5, 11, 0, 0, // Skip to: 7295
/* 7284 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 7295
/* 7291 */    MCD_OPC_Decode, 254, 3, 0, // Opcode: BCTRL
/* 7295 */    MCD_OPC_Decode, 206, 19, 54, // Opcode: gBCCTRL
/* 7299 */    MCD_OPC_FilterValue, 18, 141, 0, 0, // Skip to: 7445
/* 7304 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 7307 */    MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 7330
/* 7312 */    MCD_OPC_CheckField, 11, 15, 0, 221, 55, 0, // Skip to: 21620
/* 7319 */    MCD_OPC_CheckField, 0, 1, 0, 214, 55, 0, // Skip to: 21620
/* 7326 */    MCD_OPC_Decode, 231, 11, 0, // Opcode: RFID
/* 7330 */    MCD_OPC_FilterValue, 1, 18, 0, 0, // Skip to: 7353
/* 7335 */    MCD_OPC_CheckField, 11, 15, 0, 198, 55, 0, // Skip to: 21620
/* 7342 */    MCD_OPC_CheckField, 0, 1, 0, 191, 55, 0, // Skip to: 21620
/* 7349 */    MCD_OPC_Decode, 230, 11, 0, // Opcode: RFI
/* 7353 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 7376
/* 7358 */    MCD_OPC_CheckField, 12, 14, 0, 175, 55, 0, // Skip to: 21620
/* 7365 */    MCD_OPC_CheckField, 0, 1, 0, 168, 55, 0, // Skip to: 21620
/* 7372 */    MCD_OPC_Decode, 229, 11, 55, // Opcode: RFEBB
/* 7376 */    MCD_OPC_FilterValue, 8, 18, 0, 0, // Skip to: 7399
/* 7381 */    MCD_OPC_CheckField, 11, 15, 0, 152, 55, 0, // Skip to: 21620
/* 7388 */    MCD_OPC_CheckField, 0, 1, 0, 145, 55, 0, // Skip to: 21620
/* 7395 */    MCD_OPC_Decode, 201, 8, 0, // Opcode: HRFID
/* 7399 */    MCD_OPC_FilterValue, 11, 18, 0, 0, // Skip to: 7422
/* 7404 */    MCD_OPC_CheckField, 11, 15, 0, 129, 55, 0, // Skip to: 21620
/* 7411 */    MCD_OPC_CheckField, 0, 1, 0, 122, 55, 0, // Skip to: 21620
/* 7418 */    MCD_OPC_Decode, 131, 13, 0, // Opcode: STOP
/* 7422 */    MCD_OPC_FilterValue, 13, 113, 55, 0, // Skip to: 21620
/* 7427 */    MCD_OPC_CheckField, 11, 15, 0, 106, 55, 0, // Skip to: 21620
/* 7434 */    MCD_OPC_CheckField, 0, 1, 0, 99, 55, 0, // Skip to: 21620
/* 7441 */    MCD_OPC_Decode, 209, 10, 0, // Opcode: NAP
/* 7445 */    MCD_OPC_FilterValue, 19, 18, 0, 0, // Skip to: 7468
/* 7450 */    MCD_OPC_CheckField, 6, 20, 1, 83, 55, 0, // Skip to: 21620
/* 7457 */    MCD_OPC_CheckField, 0, 1, 0, 76, 55, 0, // Skip to: 21620
/* 7464 */    MCD_OPC_Decode, 227, 11, 0, // Opcode: RFCI
/* 7468 */    MCD_OPC_FilterValue, 22, 67, 55, 0, // Skip to: 21620
/* 7473 */    MCD_OPC_CheckField, 6, 20, 4, 60, 55, 0, // Skip to: 21620
/* 7480 */    MCD_OPC_CheckField, 0, 1, 0, 53, 55, 0, // Skip to: 21620
/* 7487 */    MCD_OPC_Decode, 211, 8, 0, // Opcode: ISYNC
/* 7491 */    MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 7517
/* 7496 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7499 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7508
/* 7504 */    MCD_OPC_Decode, 249, 11, 56, // Opcode: RLWIMI
/* 7508 */    MCD_OPC_FilterValue, 1, 27, 55, 0, // Skip to: 21620
/* 7513 */    MCD_OPC_Decode, 252, 11, 56, // Opcode: RLWIMI_rec
/* 7517 */    MCD_OPC_FilterValue, 21, 21, 0, 0, // Skip to: 7543
/* 7522 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7525 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7534
/* 7530 */    MCD_OPC_Decode, 253, 11, 57, // Opcode: RLWINM
/* 7534 */    MCD_OPC_FilterValue, 1, 1, 55, 0, // Skip to: 21620
/* 7539 */    MCD_OPC_Decode, 128, 12, 57, // Opcode: RLWINM_rec
/* 7543 */    MCD_OPC_FilterValue, 23, 21, 0, 0, // Skip to: 7569
/* 7548 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7551 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7560
/* 7556 */    MCD_OPC_Decode, 129, 12, 58, // Opcode: RLWNM
/* 7560 */    MCD_OPC_FilterValue, 1, 231, 54, 0, // Skip to: 21620
/* 7565 */    MCD_OPC_Decode, 132, 12, 58, // Opcode: RLWNM_rec
/* 7569 */    MCD_OPC_FilterValue, 24, 15, 0, 0, // Skip to: 7589
/* 7574 */    MCD_OPC_CheckField, 0, 26, 0, 4, 0, 0, // Skip to: 7585
/* 7581 */    MCD_OPC_Decode, 218, 10, 0, // Opcode: NOP
/* 7585 */    MCD_OPC_Decode, 232, 10, 59, // Opcode: ORI
/* 7589 */    MCD_OPC_FilterValue, 25, 4, 0, 0, // Skip to: 7598
/* 7594 */    MCD_OPC_Decode, 234, 10, 59, // Opcode: ORIS
/* 7598 */    MCD_OPC_FilterValue, 26, 4, 0, 0, // Skip to: 7607
/* 7603 */    MCD_OPC_Decode, 156, 17, 59, // Opcode: XORI
/* 7607 */    MCD_OPC_FilterValue, 27, 4, 0, 0, // Skip to: 7616
/* 7612 */    MCD_OPC_Decode, 158, 17, 59, // Opcode: XORIS
/* 7616 */    MCD_OPC_FilterValue, 28, 4, 0, 0, // Skip to: 7625
/* 7621 */    MCD_OPC_Decode, 156, 3, 59, // Opcode: ANDI_rec
/* 7625 */    MCD_OPC_FilterValue, 29, 4, 0, 0, // Skip to: 7634
/* 7630 */    MCD_OPC_Decode, 155, 3, 59, // Opcode: ANDIS_rec
/* 7634 */    MCD_OPC_FilterValue, 30, 151, 0, 0, // Skip to: 7790
/* 7639 */    MCD_OPC_ExtractField, 2, 3,  // Inst{4-2} ...
/* 7642 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 7668
/* 7647 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7650 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7659
/* 7655 */    MCD_OPC_Decode, 238, 11, 60, // Opcode: RLDICL
/* 7659 */    MCD_OPC_FilterValue, 1, 132, 54, 0, // Skip to: 21620
/* 7664 */    MCD_OPC_Decode, 242, 11, 60, // Opcode: RLDICL_rec
/* 7668 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 7694
/* 7673 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7676 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7685
/* 7681 */    MCD_OPC_Decode, 243, 11, 60, // Opcode: RLDICR
/* 7685 */    MCD_OPC_FilterValue, 1, 106, 54, 0, // Skip to: 21620
/* 7690 */    MCD_OPC_Decode, 245, 11, 60, // Opcode: RLDICR_rec
/* 7694 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 7720
/* 7699 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7702 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7711
/* 7707 */    MCD_OPC_Decode, 237, 11, 60, // Opcode: RLDIC
/* 7711 */    MCD_OPC_FilterValue, 1, 80, 54, 0, // Skip to: 21620
/* 7716 */    MCD_OPC_Decode, 246, 11, 60, // Opcode: RLDIC_rec
/* 7720 */    MCD_OPC_FilterValue, 3, 21, 0, 0, // Skip to: 7746
/* 7725 */    MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 7728 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7737
/* 7733 */    MCD_OPC_Decode, 247, 11, 61, // Opcode: RLDIMI
/* 7737 */    MCD_OPC_FilterValue, 1, 54, 54, 0, // Skip to: 21620
/* 7742 */    MCD_OPC_Decode, 248, 11, 61, // Opcode: RLDIMI_rec
/* 7746 */    MCD_OPC_FilterValue, 4, 45, 54, 0, // Skip to: 21620
/* 7751 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 7754 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 7763
/* 7759 */    MCD_OPC_Decode, 233, 11, 62, // Opcode: RLDCL
/* 7763 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 7772
/* 7768 */    MCD_OPC_Decode, 234, 11, 62, // Opcode: RLDCL_rec
/* 7772 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 7781
/* 7777 */    MCD_OPC_Decode, 235, 11, 62, // Opcode: RLDCR
/* 7781 */    MCD_OPC_FilterValue, 3, 10, 54, 0, // Skip to: 21620
/* 7786 */    MCD_OPC_Decode, 236, 11, 62, // Opcode: RLDCR_rec
/* 7790 */    MCD_OPC_FilterValue, 31, 139, 25, 0, // Skip to: 14334
/* 7795 */    MCD_OPC_ExtractField, 2, 4,  // Inst{5-2} ...
/* 7798 */    MCD_OPC_FilterValue, 0, 11, 1, 0, // Skip to: 8070
/* 7803 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 7806 */    MCD_OPC_FilterValue, 0, 35, 0, 0, // Skip to: 7846
/* 7811 */    MCD_OPC_ExtractField, 21, 2,  // Inst{22-21} ...
/* 7814 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 7830
/* 7819 */    MCD_OPC_CheckField, 0, 2, 0, 226, 53, 0, // Skip to: 21620
/* 7826 */    MCD_OPC_Decode, 214, 4, 63, // Opcode: CMPW
/* 7830 */    MCD_OPC_FilterValue, 1, 217, 53, 0, // Skip to: 21620
/* 7835 */    MCD_OPC_CheckField, 0, 2, 0, 210, 53, 0, // Skip to: 21620
/* 7842 */    MCD_OPC_Decode, 205, 4, 64, // Opcode: CMPD
/* 7846 */    MCD_OPC_FilterValue, 1, 35, 0, 0, // Skip to: 7886
/* 7851 */    MCD_OPC_ExtractField, 21, 2,  // Inst{22-21} ...
/* 7854 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 7870
/* 7859 */    MCD_OPC_CheckField, 0, 2, 0, 186, 53, 0, // Skip to: 21620
/* 7866 */    MCD_OPC_Decode, 210, 4, 63, // Opcode: CMPLW
/* 7870 */    MCD_OPC_FilterValue, 1, 177, 53, 0, // Skip to: 21620
/* 7875 */    MCD_OPC_CheckField, 0, 2, 0, 170, 53, 0, // Skip to: 21620
/* 7882 */    MCD_OPC_Decode, 208, 4, 64, // Opcode: CMPLD
/* 7886 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 7909
/* 7891 */    MCD_OPC_CheckField, 11, 7, 0, 154, 53, 0, // Skip to: 21620
/* 7898 */    MCD_OPC_CheckField, 0, 2, 0, 147, 53, 0, // Skip to: 21620
/* 7905 */    MCD_OPC_Decode, 157, 12, 65, // Opcode: SETB
/* 7909 */    MCD_OPC_FilterValue, 6, 18, 0, 0, // Skip to: 7932
/* 7914 */    MCD_OPC_CheckField, 22, 1, 0, 131, 53, 0, // Skip to: 21620
/* 7921 */    MCD_OPC_CheckField, 0, 2, 0, 124, 53, 0, // Skip to: 21620
/* 7928 */    MCD_OPC_Decode, 212, 4, 66, // Opcode: CMPRB
/* 7932 */    MCD_OPC_FilterValue, 7, 18, 0, 0, // Skip to: 7955
/* 7937 */    MCD_OPC_CheckField, 21, 2, 0, 108, 53, 0, // Skip to: 21620
/* 7944 */    MCD_OPC_CheckField, 0, 2, 0, 101, 53, 0, // Skip to: 21620
/* 7951 */    MCD_OPC_Decode, 207, 4, 64, // Opcode: CMPEQB
/* 7955 */    MCD_OPC_FilterValue, 12, 18, 0, 0, // Skip to: 7978
/* 7960 */    MCD_OPC_CheckField, 11, 5, 0, 85, 53, 0, // Skip to: 21620
/* 7967 */    MCD_OPC_CheckField, 0, 2, 0, 78, 53, 0, // Skip to: 21620
/* 7974 */    MCD_OPC_Decode, 159, 12, 67, // Opcode: SETBC
/* 7978 */    MCD_OPC_FilterValue, 13, 18, 0, 0, // Skip to: 8001
/* 7983 */    MCD_OPC_CheckField, 11, 5, 0, 62, 53, 0, // Skip to: 21620
/* 7990 */    MCD_OPC_CheckField, 0, 2, 0, 55, 53, 0, // Skip to: 21620
/* 7997 */    MCD_OPC_Decode, 161, 12, 67, // Opcode: SETBCR
/* 8001 */    MCD_OPC_FilterValue, 14, 18, 0, 0, // Skip to: 8024
/* 8006 */    MCD_OPC_CheckField, 11, 5, 0, 39, 53, 0, // Skip to: 21620
/* 8013 */    MCD_OPC_CheckField, 0, 2, 0, 32, 53, 0, // Skip to: 21620
/* 8020 */    MCD_OPC_Decode, 164, 12, 67, // Opcode: SETNBC
/* 8024 */    MCD_OPC_FilterValue, 15, 18, 0, 0, // Skip to: 8047
/* 8029 */    MCD_OPC_CheckField, 11, 5, 0, 16, 53, 0, // Skip to: 21620
/* 8036 */    MCD_OPC_CheckField, 0, 2, 0, 9, 53, 0, // Skip to: 21620
/* 8043 */    MCD_OPC_Decode, 166, 12, 67, // Opcode: SETNBCR
/* 8047 */    MCD_OPC_FilterValue, 18, 0, 53, 0, // Skip to: 21620
/* 8052 */    MCD_OPC_CheckField, 11, 12, 0, 249, 52, 0, // Skip to: 21620
/* 8059 */    MCD_OPC_CheckField, 0, 2, 0, 242, 52, 0, // Skip to: 21620
/* 8066 */    MCD_OPC_Decode, 228, 9, 68, // Opcode: MCRXRX
/* 8070 */    MCD_OPC_FilterValue, 1, 74, 0, 0, // Skip to: 8149
/* 8075 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 8078 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 8101
/* 8083 */    MCD_OPC_CheckField, 16, 1, 0, 218, 52, 0, // Skip to: 21620
/* 8090 */    MCD_OPC_CheckField, 1, 1, 1, 211, 52, 0, // Skip to: 21620
/* 8097 */    MCD_OPC_Decode, 151, 17, 69, // Opcode: WRTEE
/* 8101 */    MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 8117
/* 8106 */    MCD_OPC_CheckField, 1, 1, 1, 195, 52, 0, // Skip to: 21620
/* 8113 */    MCD_OPC_Decode, 152, 17, 70, // Opcode: WRTEEI
/* 8117 */    MCD_OPC_FilterValue, 10, 11, 0, 0, // Skip to: 8133
/* 8122 */    MCD_OPC_CheckField, 0, 2, 2, 179, 52, 0, // Skip to: 21620
/* 8129 */    MCD_OPC_Decode, 234, 9, 71, // Opcode: MFDCR
/* 8133 */    MCD_OPC_FilterValue, 14, 170, 52, 0, // Skip to: 21620
/* 8138 */    MCD_OPC_CheckField, 0, 2, 2, 163, 52, 0, // Skip to: 21620
/* 8145 */    MCD_OPC_Decode, 147, 10, 71, // Opcode: MTDCR
/* 8149 */    MCD_OPC_FilterValue, 2, 49, 0, 0, // Skip to: 8203
/* 8154 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 8157 */    MCD_OPC_FilterValue, 0, 25, 0, 0, // Skip to: 8187
/* 8162 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8165 */    MCD_OPC_FilterValue, 0, 138, 52, 0, // Skip to: 21620
/* 8170 */    MCD_OPC_CheckField, 11, 15, 128, 248, 1, 4, 0, 0, // Skip to: 8183
/* 8179 */    MCD_OPC_Decode, 135, 14, 0, // Opcode: TRAP
/* 8183 */    MCD_OPC_Decode, 139, 14, 72, // Opcode: TW
/* 8187 */    MCD_OPC_FilterValue, 2, 116, 52, 0, // Skip to: 21620
/* 8192 */    MCD_OPC_CheckField, 0, 2, 0, 109, 52, 0, // Skip to: 21620
/* 8199 */    MCD_OPC_Decode, 244, 13, 73, // Opcode: TD
/* 8203 */    MCD_OPC_FilterValue, 3, 157, 1, 0, // Skip to: 8621
/* 8208 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 8211 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 8237
/* 8216 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8219 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 8228
/* 8224 */    MCD_OPC_Decode, 168, 9, 74, // Opcode: LVSL
/* 8228 */    MCD_OPC_FilterValue, 2, 75, 52, 0, // Skip to: 21620
/* 8233 */    MCD_OPC_Decode, 165, 9, 74, // Opcode: LVEBX
/* 8237 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 8263
/* 8242 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8245 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 8254
/* 8250 */    MCD_OPC_Decode, 169, 9, 74, // Opcode: LVSR
/* 8254 */    MCD_OPC_FilterValue, 2, 49, 52, 0, // Skip to: 21620
/* 8259 */    MCD_OPC_Decode, 166, 9, 74, // Opcode: LVEHX
/* 8263 */    MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 8279
/* 8268 */    MCD_OPC_CheckField, 0, 2, 2, 33, 52, 0, // Skip to: 21620
/* 8275 */    MCD_OPC_Decode, 167, 9, 74, // Opcode: LVEWX
/* 8279 */    MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 8295
/* 8284 */    MCD_OPC_CheckField, 0, 2, 2, 17, 52, 0, // Skip to: 21620
/* 8291 */    MCD_OPC_Decode, 170, 9, 74, // Opcode: LVX
/* 8295 */    MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 8311
/* 8300 */    MCD_OPC_CheckField, 0, 2, 2, 1, 52, 0, // Skip to: 21620
/* 8307 */    MCD_OPC_Decode, 136, 13, 74, // Opcode: STVEBX
/* 8311 */    MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 8327
/* 8316 */    MCD_OPC_CheckField, 0, 2, 2, 241, 51, 0, // Skip to: 21620
/* 8323 */    MCD_OPC_Decode, 137, 13, 74, // Opcode: STVEHX
/* 8327 */    MCD_OPC_FilterValue, 6, 28, 0, 0, // Skip to: 8360
/* 8332 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8335 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8351
/* 8340 */    MCD_OPC_CheckField, 25, 1, 0, 217, 51, 0, // Skip to: 21620
/* 8347 */    MCD_OPC_Decode, 205, 8, 75, // Opcode: ICBLQ
/* 8351 */    MCD_OPC_FilterValue, 2, 208, 51, 0, // Skip to: 21620
/* 8356 */    MCD_OPC_Decode, 138, 13, 74, // Opcode: STVEWX
/* 8360 */    MCD_OPC_FilterValue, 7, 28, 0, 0, // Skip to: 8393
/* 8365 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8368 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8384
/* 8373 */    MCD_OPC_CheckField, 25, 1, 0, 184, 51, 0, // Skip to: 21620
/* 8380 */    MCD_OPC_Decode, 204, 8, 75, // Opcode: ICBLC
/* 8384 */    MCD_OPC_FilterValue, 2, 175, 51, 0, // Skip to: 21620
/* 8389 */    MCD_OPC_Decode, 139, 13, 74, // Opcode: STVX
/* 8393 */    MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 8409
/* 8398 */    MCD_OPC_CheckField, 0, 2, 2, 159, 51, 0, // Skip to: 21620
/* 8405 */    MCD_OPC_Decode, 171, 9, 74, // Opcode: LVXL
/* 8409 */    MCD_OPC_FilterValue, 14, 18, 0, 0, // Skip to: 8432
/* 8414 */    MCD_OPC_CheckField, 21, 5, 0, 143, 51, 0, // Skip to: 21620
/* 8421 */    MCD_OPC_CheckField, 0, 2, 0, 136, 51, 0, // Skip to: 21620
/* 8428 */    MCD_OPC_Decode, 135, 5, 76, // Opcode: DCCCI
/* 8432 */    MCD_OPC_FilterValue, 15, 28, 0, 0, // Skip to: 8465
/* 8437 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8440 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8456
/* 8445 */    MCD_OPC_CheckField, 25, 1, 0, 112, 51, 0, // Skip to: 21620
/* 8452 */    MCD_OPC_Decode, 207, 8, 75, // Opcode: ICBTLS
/* 8456 */    MCD_OPC_FilterValue, 2, 103, 51, 0, // Skip to: 21620
/* 8461 */    MCD_OPC_Decode, 140, 13, 74, // Opcode: STVXL
/* 8465 */    MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 8481
/* 8470 */    MCD_OPC_CheckField, 0, 2, 0, 87, 51, 0, // Skip to: 21620
/* 8477 */    MCD_OPC_Decode, 175, 9, 77, // Opcode: LWAT
/* 8481 */    MCD_OPC_FilterValue, 19, 11, 0, 0, // Skip to: 8497
/* 8486 */    MCD_OPC_CheckField, 0, 2, 0, 71, 51, 0, // Skip to: 21620
/* 8493 */    MCD_OPC_Decode, 231, 8, 78, // Opcode: LDAT
/* 8497 */    MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 8513
/* 8502 */    MCD_OPC_CheckField, 0, 2, 0, 55, 51, 0, // Skip to: 21620
/* 8509 */    MCD_OPC_Decode, 143, 13, 77, // Opcode: STWAT
/* 8513 */    MCD_OPC_FilterValue, 23, 11, 0, 0, // Skip to: 8529
/* 8518 */    MCD_OPC_CheckField, 0, 2, 0, 39, 51, 0, // Skip to: 21620
/* 8525 */    MCD_OPC_Decode, 224, 12, 78, // Opcode: STDAT
/* 8529 */    MCD_OPC_FilterValue, 24, 18, 0, 0, // Skip to: 8552
/* 8534 */    MCD_OPC_CheckField, 21, 5, 1, 23, 51, 0, // Skip to: 21620
/* 8541 */    MCD_OPC_CheckField, 0, 2, 0, 16, 51, 0, // Skip to: 21620
/* 8548 */    MCD_OPC_Decode, 231, 4, 76, // Opcode: CP_COPY
/* 8552 */    MCD_OPC_FilterValue, 26, 18, 0, 0, // Skip to: 8575
/* 8557 */    MCD_OPC_CheckField, 11, 15, 0, 0, 51, 0, // Skip to: 21620
/* 8564 */    MCD_OPC_CheckField, 0, 2, 0, 249, 50, 0, // Skip to: 21620
/* 8571 */    MCD_OPC_Decode, 230, 4, 0, // Opcode: CP_ABORT
/* 8575 */    MCD_OPC_FilterValue, 28, 18, 0, 0, // Skip to: 8598
/* 8580 */    MCD_OPC_CheckField, 22, 4, 0, 233, 50, 0, // Skip to: 21620
/* 8587 */    MCD_OPC_CheckField, 0, 2, 1, 226, 50, 0, // Skip to: 21620
/* 8594 */    MCD_OPC_Decode, 234, 4, 79, // Opcode: CP_PASTE_rec
/* 8598 */    MCD_OPC_FilterValue, 30, 217, 50, 0, // Skip to: 21620
/* 8603 */    MCD_OPC_CheckField, 21, 5, 0, 210, 50, 0, // Skip to: 21620
/* 8610 */    MCD_OPC_CheckField, 0, 2, 0, 203, 50, 0, // Skip to: 21620
/* 8617 */    MCD_OPC_Decode, 208, 8, 76, // Opcode: ICCCI
/* 8621 */    MCD_OPC_FilterValue, 4, 207, 2, 0, // Skip to: 9345
/* 8626 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 8629 */    MCD_OPC_FilterValue, 0, 39, 0, 0, // Skip to: 8673
/* 8634 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8637 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 8646
/* 8642 */    MCD_OPC_Decode, 185, 13, 80, // Opcode: SUBFC
/* 8646 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 8655
/* 8651 */    MCD_OPC_Decode, 192, 13, 80, // Opcode: SUBFC_rec
/* 8655 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8664
/* 8660 */    MCD_OPC_Decode, 185, 10, 81, // Opcode: MULHDU
/* 8664 */    MCD_OPC_FilterValue, 3, 151, 50, 0, // Skip to: 21620
/* 8669 */    MCD_OPC_Decode, 186, 10, 81, // Opcode: MULHDU_rec
/* 8673 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 8699
/* 8678 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8681 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 8690
/* 8686 */    MCD_OPC_Decode, 180, 13, 80, // Opcode: SUBF
/* 8690 */    MCD_OPC_FilterValue, 1, 125, 50, 0, // Skip to: 21620
/* 8695 */    MCD_OPC_Decode, 221, 13, 80, // Opcode: SUBF_rec
/* 8699 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 8725
/* 8704 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8707 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8716
/* 8712 */    MCD_OPC_Decode, 184, 10, 81, // Opcode: MULHD
/* 8716 */    MCD_OPC_FilterValue, 3, 99, 50, 0, // Skip to: 21620
/* 8721 */    MCD_OPC_Decode, 187, 10, 81, // Opcode: MULHD_rec
/* 8725 */    MCD_OPC_FilterValue, 3, 35, 0, 0, // Skip to: 8765
/* 8730 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8733 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8749
/* 8738 */    MCD_OPC_CheckField, 11, 5, 0, 75, 50, 0, // Skip to: 21620
/* 8745 */    MCD_OPC_Decode, 210, 10, 82, // Opcode: NEG
/* 8749 */    MCD_OPC_FilterValue, 1, 66, 50, 0, // Skip to: 21620
/* 8754 */    MCD_OPC_CheckField, 11, 5, 0, 59, 50, 0, // Skip to: 21620
/* 8761 */    MCD_OPC_Decode, 217, 10, 82, // Opcode: NEG_rec
/* 8765 */    MCD_OPC_FilterValue, 4, 21, 0, 0, // Skip to: 8791
/* 8770 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8773 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 8782
/* 8778 */    MCD_OPC_Decode, 193, 13, 80, // Opcode: SUBFE
/* 8782 */    MCD_OPC_FilterValue, 1, 33, 50, 0, // Skip to: 21620
/* 8787 */    MCD_OPC_Decode, 200, 13, 80, // Opcode: SUBFE_rec
/* 8791 */    MCD_OPC_FilterValue, 6, 35, 0, 0, // Skip to: 8831
/* 8796 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8799 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8815
/* 8804 */    MCD_OPC_CheckField, 11, 5, 0, 9, 50, 0, // Skip to: 21620
/* 8811 */    MCD_OPC_Decode, 213, 13, 82, // Opcode: SUBFZE
/* 8815 */    MCD_OPC_FilterValue, 1, 0, 50, 0, // Skip to: 21620
/* 8820 */    MCD_OPC_CheckField, 11, 5, 0, 249, 49, 0, // Skip to: 21620
/* 8827 */    MCD_OPC_Decode, 220, 13, 82, // Opcode: SUBFZE_rec
/* 8831 */    MCD_OPC_FilterValue, 7, 53, 0, 0, // Skip to: 8889
/* 8836 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8839 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 8855
/* 8844 */    MCD_OPC_CheckField, 11, 5, 0, 225, 49, 0, // Skip to: 21620
/* 8851 */    MCD_OPC_Decode, 203, 13, 82, // Opcode: SUBFME
/* 8855 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 8871
/* 8860 */    MCD_OPC_CheckField, 11, 5, 0, 209, 49, 0, // Skip to: 21620
/* 8867 */    MCD_OPC_Decode, 210, 13, 82, // Opcode: SUBFME_rec
/* 8871 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8880
/* 8876 */    MCD_OPC_Decode, 192, 10, 81, // Opcode: MULLD
/* 8880 */    MCD_OPC_FilterValue, 3, 191, 49, 0, // Skip to: 21620
/* 8885 */    MCD_OPC_Decode, 195, 10, 81, // Opcode: MULLD_rec
/* 8889 */    MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 8905
/* 8894 */    MCD_OPC_CheckField, 0, 2, 2, 175, 49, 0, // Skip to: 21620
/* 8901 */    MCD_OPC_Decode, 137, 10, 81, // Opcode: MODUD
/* 8905 */    MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 8931
/* 8910 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8913 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8922
/* 8918 */    MCD_OPC_Decode, 140, 5, 81, // Opcode: DIVDEU
/* 8922 */    MCD_OPC_FilterValue, 3, 149, 49, 0, // Skip to: 21620
/* 8927 */    MCD_OPC_Decode, 143, 5, 81, // Opcode: DIVDEU_rec
/* 8931 */    MCD_OPC_FilterValue, 13, 21, 0, 0, // Skip to: 8957
/* 8936 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8939 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8948
/* 8944 */    MCD_OPC_Decode, 137, 5, 81, // Opcode: DIVDE
/* 8948 */    MCD_OPC_FilterValue, 3, 123, 49, 0, // Skip to: 21620
/* 8953 */    MCD_OPC_Decode, 144, 5, 81, // Opcode: DIVDE_rec
/* 8957 */    MCD_OPC_FilterValue, 14, 21, 0, 0, // Skip to: 8983
/* 8962 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8965 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 8974
/* 8970 */    MCD_OPC_Decode, 147, 5, 81, // Opcode: DIVDU
/* 8974 */    MCD_OPC_FilterValue, 3, 97, 49, 0, // Skip to: 21620
/* 8979 */    MCD_OPC_Decode, 150, 5, 81, // Opcode: DIVDU_rec
/* 8983 */    MCD_OPC_FilterValue, 15, 21, 0, 0, // Skip to: 9009
/* 8988 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 8991 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9000
/* 8996 */    MCD_OPC_Decode, 136, 5, 81, // Opcode: DIVD
/* 9000 */    MCD_OPC_FilterValue, 3, 71, 49, 0, // Skip to: 21620
/* 9005 */    MCD_OPC_Decode, 151, 5, 81, // Opcode: DIVD_rec
/* 9009 */    MCD_OPC_FilterValue, 16, 21, 0, 0, // Skip to: 9035
/* 9014 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9017 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9026
/* 9022 */    MCD_OPC_Decode, 190, 13, 80, // Opcode: SUBFCO
/* 9026 */    MCD_OPC_FilterValue, 1, 45, 49, 0, // Skip to: 21620
/* 9031 */    MCD_OPC_Decode, 191, 13, 80, // Opcode: SUBFCO_rec
/* 9035 */    MCD_OPC_FilterValue, 17, 21, 0, 0, // Skip to: 9061
/* 9040 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9043 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9052
/* 9048 */    MCD_OPC_Decode, 211, 13, 80, // Opcode: SUBFO
/* 9052 */    MCD_OPC_FilterValue, 1, 19, 49, 0, // Skip to: 21620
/* 9057 */    MCD_OPC_Decode, 212, 13, 80, // Opcode: SUBFO_rec
/* 9061 */    MCD_OPC_FilterValue, 19, 35, 0, 0, // Skip to: 9101
/* 9066 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9069 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 9085
/* 9074 */    MCD_OPC_CheckField, 11, 5, 0, 251, 48, 0, // Skip to: 21620
/* 9081 */    MCD_OPC_Decode, 215, 10, 82, // Opcode: NEGO
/* 9085 */    MCD_OPC_FilterValue, 1, 242, 48, 0, // Skip to: 21620
/* 9090 */    MCD_OPC_CheckField, 11, 5, 0, 235, 48, 0, // Skip to: 21620
/* 9097 */    MCD_OPC_Decode, 216, 10, 82, // Opcode: NEGO_rec
/* 9101 */    MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 9127
/* 9106 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9109 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9118
/* 9114 */    MCD_OPC_Decode, 198, 13, 80, // Opcode: SUBFEO
/* 9118 */    MCD_OPC_FilterValue, 1, 209, 48, 0, // Skip to: 21620
/* 9123 */    MCD_OPC_Decode, 199, 13, 80, // Opcode: SUBFEO_rec
/* 9127 */    MCD_OPC_FilterValue, 22, 35, 0, 0, // Skip to: 9167
/* 9132 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9135 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 9151
/* 9140 */    MCD_OPC_CheckField, 11, 5, 0, 185, 48, 0, // Skip to: 21620
/* 9147 */    MCD_OPC_Decode, 218, 13, 82, // Opcode: SUBFZEO
/* 9151 */    MCD_OPC_FilterValue, 1, 176, 48, 0, // Skip to: 21620
/* 9156 */    MCD_OPC_CheckField, 11, 5, 0, 169, 48, 0, // Skip to: 21620
/* 9163 */    MCD_OPC_Decode, 219, 13, 82, // Opcode: SUBFZEO_rec
/* 9167 */    MCD_OPC_FilterValue, 23, 53, 0, 0, // Skip to: 9225
/* 9172 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9175 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 9191
/* 9180 */    MCD_OPC_CheckField, 11, 5, 0, 145, 48, 0, // Skip to: 21620
/* 9187 */    MCD_OPC_Decode, 208, 13, 82, // Opcode: SUBFMEO
/* 9191 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 9207
/* 9196 */    MCD_OPC_CheckField, 11, 5, 0, 129, 48, 0, // Skip to: 21620
/* 9203 */    MCD_OPC_Decode, 209, 13, 82, // Opcode: SUBFMEO_rec
/* 9207 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9216
/* 9212 */    MCD_OPC_Decode, 193, 10, 81, // Opcode: MULLDO
/* 9216 */    MCD_OPC_FilterValue, 3, 111, 48, 0, // Skip to: 21620
/* 9221 */    MCD_OPC_Decode, 194, 10, 81, // Opcode: MULLDO_rec
/* 9225 */    MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 9241
/* 9230 */    MCD_OPC_CheckField, 0, 2, 2, 95, 48, 0, // Skip to: 21620
/* 9237 */    MCD_OPC_Decode, 135, 10, 81, // Opcode: MODSD
/* 9241 */    MCD_OPC_FilterValue, 28, 21, 0, 0, // Skip to: 9267
/* 9246 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9249 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9258
/* 9254 */    MCD_OPC_Decode, 141, 5, 81, // Opcode: DIVDEUO
/* 9258 */    MCD_OPC_FilterValue, 3, 69, 48, 0, // Skip to: 21620
/* 9263 */    MCD_OPC_Decode, 142, 5, 81, // Opcode: DIVDEUO_rec
/* 9267 */    MCD_OPC_FilterValue, 29, 21, 0, 0, // Skip to: 9293
/* 9272 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9275 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9284
/* 9280 */    MCD_OPC_Decode, 138, 5, 81, // Opcode: DIVDEO
/* 9284 */    MCD_OPC_FilterValue, 3, 43, 48, 0, // Skip to: 21620
/* 9289 */    MCD_OPC_Decode, 139, 5, 81, // Opcode: DIVDEO_rec
/* 9293 */    MCD_OPC_FilterValue, 30, 21, 0, 0, // Skip to: 9319
/* 9298 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9301 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9310
/* 9306 */    MCD_OPC_Decode, 148, 5, 81, // Opcode: DIVDUO
/* 9310 */    MCD_OPC_FilterValue, 3, 17, 48, 0, // Skip to: 21620
/* 9315 */    MCD_OPC_Decode, 149, 5, 81, // Opcode: DIVDUO_rec
/* 9319 */    MCD_OPC_FilterValue, 31, 8, 48, 0, // Skip to: 21620
/* 9324 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9327 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9336
/* 9332 */    MCD_OPC_Decode, 145, 5, 81, // Opcode: DIVDO
/* 9336 */    MCD_OPC_FilterValue, 3, 247, 47, 0, // Skip to: 21620
/* 9341 */    MCD_OPC_Decode, 146, 5, 81, // Opcode: DIVDO_rec
/* 9345 */    MCD_OPC_FilterValue, 5, 119, 2, 0, // Skip to: 9981
/* 9350 */    MCD_OPC_ExtractField, 6, 3,  // Inst{8-6} ...
/* 9353 */    MCD_OPC_FilterValue, 0, 142, 0, 0, // Skip to: 9500
/* 9358 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9361 */    MCD_OPC_FilterValue, 0, 39, 0, 0, // Skip to: 9405
/* 9366 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9369 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9378
/* 9374 */    MCD_OPC_Decode, 211, 2, 80, // Opcode: ADDC
/* 9378 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9387
/* 9383 */    MCD_OPC_Decode, 200, 2, 80, // Opcode: ADD4
/* 9387 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9396
/* 9392 */    MCD_OPC_Decode, 216, 2, 80, // Opcode: ADDCO
/* 9396 */    MCD_OPC_FilterValue, 3, 187, 47, 0, // Skip to: 21620
/* 9401 */    MCD_OPC_Decode, 201, 2, 80, // Opcode: ADD4O
/* 9405 */    MCD_OPC_FilterValue, 1, 39, 0, 0, // Skip to: 9449
/* 9410 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9413 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9422
/* 9418 */    MCD_OPC_Decode, 218, 2, 80, // Opcode: ADDC_rec
/* 9422 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9431
/* 9427 */    MCD_OPC_Decode, 204, 2, 80, // Opcode: ADD4_rec
/* 9431 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9440
/* 9436 */    MCD_OPC_Decode, 217, 2, 80, // Opcode: ADDCO_rec
/* 9440 */    MCD_OPC_FilterValue, 3, 143, 47, 0, // Skip to: 21620
/* 9445 */    MCD_OPC_Decode, 202, 2, 80, // Opcode: ADD4O_rec
/* 9449 */    MCD_OPC_FilterValue, 2, 30, 0, 0, // Skip to: 9484
/* 9454 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9457 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9466
/* 9462 */    MCD_OPC_Decode, 189, 10, 80, // Opcode: MULHWU
/* 9466 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9475
/* 9471 */    MCD_OPC_Decode, 138, 10, 80, // Opcode: MODUW
/* 9475 */    MCD_OPC_FilterValue, 3, 108, 47, 0, // Skip to: 21620
/* 9480 */    MCD_OPC_Decode, 136, 10, 80, // Opcode: MODSW
/* 9484 */    MCD_OPC_FilterValue, 3, 99, 47, 0, // Skip to: 21620
/* 9489 */    MCD_OPC_CheckField, 9, 2, 0, 92, 47, 0, // Skip to: 21620
/* 9496 */    MCD_OPC_Decode, 190, 10, 80, // Opcode: MULHWU_rec
/* 9500 */    MCD_OPC_FilterValue, 2, 35, 0, 0, // Skip to: 9540
/* 9505 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9508 */    MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 9524
/* 9513 */    MCD_OPC_CheckField, 9, 2, 0, 68, 47, 0, // Skip to: 21620
/* 9520 */    MCD_OPC_Decode, 188, 10, 80, // Opcode: MULHW
/* 9524 */    MCD_OPC_FilterValue, 3, 59, 47, 0, // Skip to: 21620
/* 9529 */    MCD_OPC_CheckField, 9, 2, 0, 52, 47, 0, // Skip to: 21620
/* 9536 */    MCD_OPC_Decode, 191, 10, 80, // Opcode: MULHW_rec
/* 9540 */    MCD_OPC_FilterValue, 4, 107, 0, 0, // Skip to: 9652
/* 9545 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9548 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 9574
/* 9553 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9556 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9565
/* 9561 */    MCD_OPC_Decode, 219, 2, 80, // Opcode: ADDE
/* 9565 */    MCD_OPC_FilterValue, 2, 18, 47, 0, // Skip to: 21620
/* 9570 */    MCD_OPC_Decode, 224, 2, 80, // Opcode: ADDEO
/* 9574 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 9600
/* 9579 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9582 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9591
/* 9587 */    MCD_OPC_Decode, 228, 2, 80, // Opcode: ADDE_rec
/* 9591 */    MCD_OPC_FilterValue, 2, 248, 46, 0, // Skip to: 21620
/* 9596 */    MCD_OPC_Decode, 225, 2, 80, // Opcode: ADDEO_rec
/* 9600 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 9626
/* 9605 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9608 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9617
/* 9613 */    MCD_OPC_Decode, 156, 5, 80, // Opcode: DIVWEU
/* 9617 */    MCD_OPC_FilterValue, 3, 222, 46, 0, // Skip to: 21620
/* 9622 */    MCD_OPC_Decode, 157, 5, 80, // Opcode: DIVWEUO
/* 9626 */    MCD_OPC_FilterValue, 3, 213, 46, 0, // Skip to: 21620
/* 9631 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9634 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9643
/* 9639 */    MCD_OPC_Decode, 159, 5, 80, // Opcode: DIVWEU_rec
/* 9643 */    MCD_OPC_FilterValue, 3, 196, 46, 0, // Skip to: 21620
/* 9648 */    MCD_OPC_Decode, 158, 5, 80, // Opcode: DIVWEUO_rec
/* 9652 */    MCD_OPC_FilterValue, 5, 64, 0, 0, // Skip to: 9721
/* 9657 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9660 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9669
/* 9665 */    MCD_OPC_Decode, 226, 2, 83, // Opcode: ADDEX
/* 9669 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 9695
/* 9674 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9677 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9686
/* 9682 */    MCD_OPC_Decode, 153, 5, 80, // Opcode: DIVWE
/* 9686 */    MCD_OPC_FilterValue, 3, 153, 46, 0, // Skip to: 21620
/* 9691 */    MCD_OPC_Decode, 154, 5, 80, // Opcode: DIVWEO
/* 9695 */    MCD_OPC_FilterValue, 3, 144, 46, 0, // Skip to: 21620
/* 9700 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9703 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9712
/* 9708 */    MCD_OPC_Decode, 160, 5, 80, // Opcode: DIVWE_rec
/* 9712 */    MCD_OPC_FilterValue, 3, 127, 46, 0, // Skip to: 21620
/* 9717 */    MCD_OPC_Decode, 155, 5, 80, // Opcode: DIVWEO_rec
/* 9721 */    MCD_OPC_FilterValue, 6, 107, 0, 0, // Skip to: 9833
/* 9726 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9729 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 9755
/* 9734 */    MCD_OPC_ExtractField, 9, 7,  // Inst{15-9} ...
/* 9737 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9746
/* 9742 */    MCD_OPC_Decode, 136, 3, 82, // Opcode: ADDZE
/* 9746 */    MCD_OPC_FilterValue, 2, 93, 46, 0, // Skip to: 21620
/* 9751 */    MCD_OPC_Decode, 141, 3, 82, // Opcode: ADDZEO
/* 9755 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 9781
/* 9760 */    MCD_OPC_ExtractField, 9, 7,  // Inst{15-9} ...
/* 9763 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9772
/* 9768 */    MCD_OPC_Decode, 143, 3, 82, // Opcode: ADDZE_rec
/* 9772 */    MCD_OPC_FilterValue, 2, 67, 46, 0, // Skip to: 21620
/* 9777 */    MCD_OPC_Decode, 142, 3, 82, // Opcode: ADDZEO_rec
/* 9781 */    MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 9807
/* 9786 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9789 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9798
/* 9794 */    MCD_OPC_Decode, 163, 5, 80, // Opcode: DIVWU
/* 9798 */    MCD_OPC_FilterValue, 3, 41, 46, 0, // Skip to: 21620
/* 9803 */    MCD_OPC_Decode, 164, 5, 80, // Opcode: DIVWUO
/* 9807 */    MCD_OPC_FilterValue, 3, 32, 46, 0, // Skip to: 21620
/* 9812 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9815 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9824
/* 9820 */    MCD_OPC_Decode, 166, 5, 80, // Opcode: DIVWU_rec
/* 9824 */    MCD_OPC_FilterValue, 3, 15, 46, 0, // Skip to: 21620
/* 9829 */    MCD_OPC_Decode, 165, 5, 80, // Opcode: DIVWUO_rec
/* 9833 */    MCD_OPC_FilterValue, 7, 6, 46, 0, // Skip to: 21620
/* 9838 */    MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 9841 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 9867
/* 9846 */    MCD_OPC_ExtractField, 9, 7,  // Inst{15-9} ...
/* 9849 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9858
/* 9854 */    MCD_OPC_Decode, 255, 2, 82, // Opcode: ADDME
/* 9858 */    MCD_OPC_FilterValue, 2, 237, 45, 0, // Skip to: 21620
/* 9863 */    MCD_OPC_Decode, 132, 3, 82, // Opcode: ADDMEO
/* 9867 */    MCD_OPC_FilterValue, 1, 21, 0, 0, // Skip to: 9893
/* 9872 */    MCD_OPC_ExtractField, 9, 7,  // Inst{15-9} ...
/* 9875 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9884
/* 9880 */    MCD_OPC_Decode, 134, 3, 82, // Opcode: ADDME_rec
/* 9884 */    MCD_OPC_FilterValue, 2, 211, 45, 0, // Skip to: 21620
/* 9889 */    MCD_OPC_Decode, 133, 3, 82, // Opcode: ADDMEO_rec
/* 9893 */    MCD_OPC_FilterValue, 2, 39, 0, 0, // Skip to: 9937
/* 9898 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9901 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9910
/* 9906 */    MCD_OPC_Decode, 198, 10, 80, // Opcode: MULLW
/* 9910 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9919
/* 9915 */    MCD_OPC_Decode, 152, 5, 80, // Opcode: DIVW
/* 9919 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9928
/* 9924 */    MCD_OPC_Decode, 199, 10, 80, // Opcode: MULLWO
/* 9928 */    MCD_OPC_FilterValue, 3, 167, 45, 0, // Skip to: 21620
/* 9933 */    MCD_OPC_Decode, 161, 5, 80, // Opcode: DIVWO
/* 9937 */    MCD_OPC_FilterValue, 3, 158, 45, 0, // Skip to: 21620
/* 9942 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 9945 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 9954
/* 9950 */    MCD_OPC_Decode, 201, 10, 80, // Opcode: MULLW_rec
/* 9954 */    MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 9963
/* 9959 */    MCD_OPC_Decode, 167, 5, 80, // Opcode: DIVW_rec
/* 9963 */    MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 9972
/* 9968 */    MCD_OPC_Decode, 200, 10, 80, // Opcode: MULLWO_rec
/* 9972 */    MCD_OPC_FilterValue, 3, 123, 45, 0, // Skip to: 21620
/* 9977 */    MCD_OPC_Decode, 162, 5, 80, // Opcode: DIVWO_rec
/* 9981 */    MCD_OPC_FilterValue, 6, 30, 2, 0, // Skip to: 10528
/* 9986 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 9989 */    MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 10015
/* 9994 */    MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 9997 */    MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10006
/* 10002 */   MCD_OPC_Decode, 202, 9, 84, // Opcode: LXSIWZX
/* 10006 */   MCD_OPC_FilterValue, 1, 89, 45, 0, // Skip to: 21620
/* 10011 */   MCD_OPC_Decode, 214, 9, 85, // Opcode: LXVRBX
/* 10015 */   MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 10031
/* 10020 */   MCD_OPC_CheckField, 1, 1, 1, 73, 45, 0, // Skip to: 21620
/* 10027 */   MCD_OPC_Decode, 216, 9, 85, // Opcode: LXVRHX
/* 10031 */   MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 10057
/* 10036 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10039 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10048
/* 10044 */   MCD_OPC_Decode, 201, 9, 84, // Opcode: LXSIWAX
/* 10048 */   MCD_OPC_FilterValue, 1, 47, 45, 0, // Skip to: 21620
/* 10053 */   MCD_OPC_Decode, 217, 9, 85, // Opcode: LXVRWX
/* 10057 */   MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 10073
/* 10062 */   MCD_OPC_CheckField, 1, 1, 1, 31, 45, 0, // Skip to: 21620
/* 10069 */   MCD_OPC_Decode, 215, 9, 85, // Opcode: LXVRDX
/* 10073 */   MCD_OPC_FilterValue, 4, 21, 0, 0, // Skip to: 10099
/* 10078 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10081 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10090
/* 10086 */   MCD_OPC_Decode, 163, 13, 84, // Opcode: STXSIWX
/* 10090 */   MCD_OPC_FilterValue, 1, 5, 45, 0, // Skip to: 21620
/* 10095 */   MCD_OPC_Decode, 174, 13, 85, // Opcode: STXVRBX
/* 10099 */   MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 10115
/* 10104 */   MCD_OPC_CheckField, 1, 1, 1, 245, 44, 0, // Skip to: 21620
/* 10111 */   MCD_OPC_Decode, 176, 13, 85, // Opcode: STXVRHX
/* 10115 */   MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 10131
/* 10120 */   MCD_OPC_CheckField, 1, 1, 1, 229, 44, 0, // Skip to: 21620
/* 10127 */   MCD_OPC_Decode, 177, 13, 85, // Opcode: STXVRWX
/* 10131 */   MCD_OPC_FilterValue, 7, 11, 0, 0, // Skip to: 10147
/* 10136 */   MCD_OPC_CheckField, 1, 1, 1, 213, 44, 0, // Skip to: 21620
/* 10143 */   MCD_OPC_Decode, 175, 13, 85, // Opcode: STXVRDX
/* 10147 */   MCD_OPC_FilterValue, 8, 21, 0, 0, // Skip to: 10173
/* 10152 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10155 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10164
/* 10160 */   MCD_OPC_Decode, 220, 9, 85, // Opcode: LXVX
/* 10164 */   MCD_OPC_FilterValue, 1, 187, 44, 0, // Skip to: 21620
/* 10169 */   MCD_OPC_Decode, 210, 9, 86, // Opcode: LXVL
/* 10173 */   MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 10189
/* 10178 */   MCD_OPC_CheckField, 1, 1, 1, 171, 44, 0, // Skip to: 21620
/* 10185 */   MCD_OPC_Decode, 211, 9, 86, // Opcode: LXVLL
/* 10189 */   MCD_OPC_FilterValue, 10, 28, 0, 0, // Skip to: 10222
/* 10194 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10197 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10206
/* 10202 */   MCD_OPC_Decode, 208, 9, 85, // Opcode: LXVDSX
/* 10206 */   MCD_OPC_FilterValue, 1, 145, 44, 0, // Skip to: 21620
/* 10211 */   MCD_OPC_CheckField, 0, 1, 0, 138, 44, 0, // Skip to: 21620
/* 10218 */   MCD_OPC_Decode, 213, 9, 87, // Opcode: LXVPX
/* 10222 */   MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 10238
/* 10227 */   MCD_OPC_CheckField, 1, 1, 0, 122, 44, 0, // Skip to: 21620
/* 10234 */   MCD_OPC_Decode, 219, 9, 85, // Opcode: LXVWSX
/* 10238 */   MCD_OPC_FilterValue, 12, 21, 0, 0, // Skip to: 10264
/* 10243 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10246 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10255
/* 10251 */   MCD_OPC_Decode, 179, 13, 85, // Opcode: STXVX
/* 10255 */   MCD_OPC_FilterValue, 1, 96, 44, 0, // Skip to: 21620
/* 10260 */   MCD_OPC_Decode, 170, 13, 86, // Opcode: STXVL
/* 10264 */   MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 10280
/* 10269 */   MCD_OPC_CheckField, 1, 1, 1, 80, 44, 0, // Skip to: 21620
/* 10276 */   MCD_OPC_Decode, 171, 13, 86, // Opcode: STXVLL
/* 10280 */   MCD_OPC_FilterValue, 14, 11, 0, 0, // Skip to: 10296
/* 10285 */   MCD_OPC_CheckField, 0, 2, 2, 64, 44, 0, // Skip to: 21620
/* 10292 */   MCD_OPC_Decode, 173, 13, 87, // Opcode: STXVPX
/* 10296 */   MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 10312
/* 10301 */   MCD_OPC_CheckField, 1, 1, 0, 48, 44, 0, // Skip to: 21620
/* 10308 */   MCD_OPC_Decode, 204, 9, 88, // Opcode: LXSSPX
/* 10312 */   MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 10328
/* 10317 */   MCD_OPC_CheckField, 1, 1, 0, 32, 44, 0, // Skip to: 21620
/* 10324 */   MCD_OPC_Decode, 198, 9, 84, // Opcode: LXSDX
/* 10328 */   MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 10344
/* 10333 */   MCD_OPC_CheckField, 1, 1, 0, 16, 44, 0, // Skip to: 21620
/* 10340 */   MCD_OPC_Decode, 165, 13, 88, // Opcode: STXSSPX
/* 10344 */   MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 10360
/* 10349 */   MCD_OPC_CheckField, 1, 1, 0, 0, 44, 0, // Skip to: 21620
/* 10356 */   MCD_OPC_Decode, 158, 13, 84, // Opcode: STXSDX
/* 10360 */   MCD_OPC_FilterValue, 24, 21, 0, 0, // Skip to: 10386
/* 10365 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10368 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10377
/* 10373 */   MCD_OPC_Decode, 218, 9, 85, // Opcode: LXVW4X
/* 10377 */   MCD_OPC_FilterValue, 1, 230, 43, 0, // Skip to: 21620
/* 10382 */   MCD_OPC_Decode, 199, 9, 84, // Opcode: LXSIBZX
/* 10386 */   MCD_OPC_FilterValue, 25, 21, 0, 0, // Skip to: 10412
/* 10391 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10394 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10403
/* 10399 */   MCD_OPC_Decode, 209, 9, 85, // Opcode: LXVH8X
/* 10403 */   MCD_OPC_FilterValue, 1, 204, 43, 0, // Skip to: 21620
/* 10408 */   MCD_OPC_Decode, 200, 9, 84, // Opcode: LXSIHZX
/* 10412 */   MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 10428
/* 10417 */   MCD_OPC_CheckField, 1, 1, 0, 188, 43, 0, // Skip to: 21620
/* 10424 */   MCD_OPC_Decode, 207, 9, 85, // Opcode: LXVD2X
/* 10428 */   MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 10444
/* 10433 */   MCD_OPC_CheckField, 1, 1, 0, 172, 43, 0, // Skip to: 21620
/* 10440 */   MCD_OPC_Decode, 206, 9, 85, // Opcode: LXVB16X
/* 10444 */   MCD_OPC_FilterValue, 28, 21, 0, 0, // Skip to: 10470
/* 10449 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10452 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10461
/* 10457 */   MCD_OPC_Decode, 178, 13, 85, // Opcode: STXVW4X
/* 10461 */   MCD_OPC_FilterValue, 1, 146, 43, 0, // Skip to: 21620
/* 10466 */   MCD_OPC_Decode, 159, 13, 84, // Opcode: STXSIBX
/* 10470 */   MCD_OPC_FilterValue, 29, 21, 0, 0, // Skip to: 10496
/* 10475 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 10478 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 10487
/* 10483 */   MCD_OPC_Decode, 169, 13, 85, // Opcode: STXVH8X
/* 10487 */   MCD_OPC_FilterValue, 1, 120, 43, 0, // Skip to: 21620
/* 10492 */   MCD_OPC_Decode, 161, 13, 84, // Opcode: STXSIHX
/* 10496 */   MCD_OPC_FilterValue, 30, 11, 0, 0, // Skip to: 10512
/* 10501 */   MCD_OPC_CheckField, 1, 1, 0, 104, 43, 0, // Skip to: 21620
/* 10508 */   MCD_OPC_Decode, 168, 13, 85, // Opcode: STXVD2X
/* 10512 */   MCD_OPC_FilterValue, 31, 95, 43, 0, // Skip to: 21620
/* 10517 */   MCD_OPC_CheckField, 1, 1, 0, 88, 43, 0, // Skip to: 21620
/* 10524 */   MCD_OPC_Decode, 167, 13, 85, // Opcode: STXVB16X
/* 10528 */   MCD_OPC_FilterValue, 7, 247, 0, 0, // Skip to: 10780
/* 10533 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 10536 */   MCD_OPC_FilterValue, 0, 62, 0, 0, // Skip to: 10603
/* 10541 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 10544 */   MCD_OPC_FilterValue, 9, 4, 0, 0, // Skip to: 10553
/* 10549 */   MCD_OPC_Decode, 229, 9, 89, // Opcode: MFBHRBE
/* 10553 */   MCD_OPC_FilterValue, 10, 4, 0, 0, // Skip to: 10562
/* 10558 */   MCD_OPC_Decode, 248, 9, 71, // Opcode: MFPMR
/* 10562 */   MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 10578
/* 10567 */   MCD_OPC_CheckField, 11, 15, 0, 38, 43, 0, // Skip to: 21620
/* 10574 */   MCD_OPC_Decode, 202, 4, 0, // Opcode: CLRBHRB
/* 10578 */   MCD_OPC_FilterValue, 14, 4, 0, 0, // Skip to: 10587
/* 10583 */   MCD_OPC_Decode, 162, 10, 90, // Opcode: MTPMR
/* 10587 */   MCD_OPC_FilterValue, 22, 20, 43, 0, // Skip to: 21620
/* 10592 */   MCD_OPC_CheckField, 11, 12, 0, 13, 43, 0, // Skip to: 21620
/* 10599 */   MCD_OPC_Decode, 236, 13, 68, // Opcode: TCHECK
/* 10603 */   MCD_OPC_FilterValue, 1, 163, 0, 0, // Skip to: 10771
/* 10608 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 10611 */   MCD_OPC_FilterValue, 20, 18, 0, 0, // Skip to: 10634
/* 10616 */   MCD_OPC_CheckField, 22, 4, 0, 245, 42, 0, // Skip to: 21620
/* 10623 */   MCD_OPC_CheckField, 11, 10, 0, 238, 42, 0, // Skip to: 21620
/* 10630 */   MCD_OPC_Decode, 234, 13, 91, // Opcode: TBEGIN
/* 10634 */   MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 10650
/* 10639 */   MCD_OPC_CheckField, 11, 14, 0, 222, 42, 0, // Skip to: 21620
/* 10646 */   MCD_OPC_Decode, 246, 13, 92, // Opcode: TEND
/* 10650 */   MCD_OPC_FilterValue, 23, 18, 0, 0, // Skip to: 10673
/* 10655 */   MCD_OPC_CheckField, 22, 3, 0, 206, 42, 0, // Skip to: 21620
/* 10662 */   MCD_OPC_CheckField, 11, 10, 0, 199, 42, 0, // Skip to: 21620
/* 10669 */   MCD_OPC_Decode, 138, 14, 91, // Opcode: TSR
/* 10673 */   MCD_OPC_FilterValue, 24, 4, 0, 0, // Skip to: 10682
/* 10678 */   MCD_OPC_Decode, 226, 13, 72, // Opcode: TABORTWC
/* 10682 */   MCD_OPC_FilterValue, 25, 4, 0, 0, // Skip to: 10691
/* 10687 */   MCD_OPC_Decode, 224, 13, 72, // Opcode: TABORTDC
/* 10691 */   MCD_OPC_FilterValue, 26, 4, 0, 0, // Skip to: 10700
/* 10696 */   MCD_OPC_Decode, 227, 13, 93, // Opcode: TABORTWCI
/* 10700 */   MCD_OPC_FilterValue, 27, 4, 0, 0, // Skip to: 10709
/* 10705 */   MCD_OPC_Decode, 225, 13, 93, // Opcode: TABORTDCI
/* 10709 */   MCD_OPC_FilterValue, 28, 18, 0, 0, // Skip to: 10732
/* 10714 */   MCD_OPC_CheckField, 21, 5, 0, 147, 42, 0, // Skip to: 21620
/* 10721 */   MCD_OPC_CheckField, 11, 5, 0, 140, 42, 0, // Skip to: 21620
/* 10728 */   MCD_OPC_Decode, 223, 13, 94, // Opcode: TABORT
/* 10732 */   MCD_OPC_FilterValue, 29, 18, 0, 0, // Skip to: 10755
/* 10737 */   MCD_OPC_CheckField, 21, 5, 0, 124, 42, 0, // Skip to: 21620
/* 10744 */   MCD_OPC_CheckField, 11, 5, 0, 117, 42, 0, // Skip to: 21620
/* 10751 */   MCD_OPC_Decode, 137, 14, 94, // Opcode: TRECLAIM
/* 10755 */   MCD_OPC_FilterValue, 31, 108, 42, 0, // Skip to: 21620
/* 10760 */   MCD_OPC_CheckField, 11, 15, 0, 101, 42, 0, // Skip to: 21620
/* 10767 */   MCD_OPC_Decode, 136, 14, 0, // Opcode: TRECHKPT
/* 10771 */   MCD_OPC_FilterValue, 2, 92, 42, 0, // Skip to: 21620
/* 10776 */   MCD_OPC_Decode, 209, 8, 95, // Opcode: ISEL
/* 10780 */   MCD_OPC_FilterValue, 8, 80, 0, 0, // Skip to: 10865
/* 10785 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 10788 */   MCD_OPC_FilterValue, 0, 35, 0, 0, // Skip to: 10828
/* 10793 */   MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 10796 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 10812
/* 10801 */   MCD_OPC_CheckField, 6, 6, 4, 60, 42, 0, // Skip to: 21620
/* 10808 */   MCD_OPC_Decode, 141, 10, 96, // Opcode: MTCRF
/* 10812 */   MCD_OPC_FilterValue, 1, 51, 42, 0, // Skip to: 21620
/* 10817 */   MCD_OPC_CheckField, 6, 6, 4, 44, 42, 0, // Skip to: 21620
/* 10824 */   MCD_OPC_Decode, 160, 10, 97, // Opcode: MTOCRF
/* 10828 */   MCD_OPC_FilterValue, 2, 35, 42, 0, // Skip to: 21620
/* 10833 */   MCD_OPC_ExtractField, 6, 17,  // Inst{22-6} ...
/* 10836 */   MCD_OPC_FilterValue, 5, 4, 0, 0, // Skip to: 10845
/* 10841 */   MCD_OPC_Decode, 183, 19, 98, // Opcode: XXMFACC
/* 10845 */   MCD_OPC_FilterValue, 133, 8, 4, 0, 0, // Skip to: 10855
/* 10851 */   MCD_OPC_Decode, 186, 19, 98, // Opcode: XXMTACC
/* 10855 */   MCD_OPC_FilterValue, 133, 24, 7, 42, 0, // Skip to: 21620
/* 10861 */   MCD_OPC_Decode, 193, 19, 99, // Opcode: XXSETACCZ
/* 10865 */   MCD_OPC_FilterValue, 9, 124, 3, 0, // Skip to: 11762
/* 10870 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 10873 */   MCD_OPC_FilterValue, 0, 49, 0, 0, // Skip to: 10927
/* 10878 */   MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 10881 */   MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 10904
/* 10886 */   MCD_OPC_CheckField, 11, 9, 0, 231, 41, 0, // Skip to: 21620
/* 10893 */   MCD_OPC_CheckField, 0, 2, 2, 224, 41, 0, // Skip to: 21620
/* 10900 */   MCD_OPC_Decode, 230, 9, 69, // Opcode: MFCR
/* 10904 */   MCD_OPC_FilterValue, 1, 215, 41, 0, // Skip to: 21620
/* 10909 */   MCD_OPC_CheckField, 11, 1, 0, 208, 41, 0, // Skip to: 21620
/* 10916 */   MCD_OPC_CheckField, 0, 2, 2, 201, 41, 0, // Skip to: 21620
/* 10923 */   MCD_OPC_Decode, 246, 9, 100, // Opcode: MFOCRF
/* 10927 */   MCD_OPC_FilterValue, 1, 18, 0, 0, // Skip to: 10950
/* 10932 */   MCD_OPC_CheckField, 11, 5, 0, 185, 41, 0, // Skip to: 21620
/* 10939 */   MCD_OPC_CheckField, 1, 1, 1, 178, 41, 0, // Skip to: 21620
/* 10946 */   MCD_OPC_Decode, 132, 10, 101, // Opcode: MFVSRD
/* 10950 */   MCD_OPC_FilterValue, 2, 18, 0, 0, // Skip to: 10973
/* 10955 */   MCD_OPC_CheckField, 11, 10, 0, 162, 41, 0, // Skip to: 21620
/* 10962 */   MCD_OPC_CheckField, 0, 2, 2, 155, 41, 0, // Skip to: 21620
/* 10969 */   MCD_OPC_Decode, 245, 9, 69, // Opcode: MFMSR
/* 10973 */   MCD_OPC_FilterValue, 3, 18, 0, 0, // Skip to: 10996
/* 10978 */   MCD_OPC_CheckField, 11, 5, 0, 139, 41, 0, // Skip to: 21620
/* 10985 */   MCD_OPC_CheckField, 1, 1, 1, 132, 41, 0, // Skip to: 21620
/* 10992 */   MCD_OPC_Decode, 134, 10, 102, // Opcode: MFVSRWZ
/* 10996 */   MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 11012
/* 11001 */   MCD_OPC_CheckField, 1, 1, 0, 116, 41, 0, // Skip to: 21620
/* 11008 */   MCD_OPC_Decode, 158, 10, 103, // Opcode: MTMSR
/* 11012 */   MCD_OPC_FilterValue, 5, 28, 0, 0, // Skip to: 11045
/* 11017 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11020 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11029
/* 11025 */   MCD_OPC_Decode, 159, 10, 103, // Opcode: MTMSRD
/* 11029 */   MCD_OPC_FilterValue, 1, 90, 41, 0, // Skip to: 21620
/* 11034 */   MCD_OPC_CheckField, 11, 5, 0, 83, 41, 0, // Skip to: 21620
/* 11041 */   MCD_OPC_Decode, 175, 10, 104, // Opcode: MTVSRD
/* 11045 */   MCD_OPC_FilterValue, 6, 28, 0, 0, // Skip to: 11078
/* 11050 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11053 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11062
/* 11058 */   MCD_OPC_Decode, 165, 10, 105, // Opcode: MTSR
/* 11062 */   MCD_OPC_FilterValue, 1, 57, 41, 0, // Skip to: 21620
/* 11067 */   MCD_OPC_CheckField, 11, 5, 0, 50, 41, 0, // Skip to: 21620
/* 11074 */   MCD_OPC_Decode, 180, 10, 106, // Opcode: MTVSRWA
/* 11078 */   MCD_OPC_FilterValue, 7, 28, 0, 0, // Skip to: 11111
/* 11083 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11086 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11095
/* 11091 */   MCD_OPC_Decode, 166, 10, 107, // Opcode: MTSRIN
/* 11095 */   MCD_OPC_FilterValue, 1, 24, 41, 0, // Skip to: 21620
/* 11100 */   MCD_OPC_CheckField, 11, 5, 0, 17, 41, 0, // Skip to: 21620
/* 11107 */   MCD_OPC_Decode, 183, 10, 106, // Opcode: MTVSRWZ
/* 11111 */   MCD_OPC_FilterValue, 8, 18, 0, 0, // Skip to: 11134
/* 11116 */   MCD_OPC_CheckField, 16, 10, 0, 1, 41, 0, // Skip to: 21620
/* 11123 */   MCD_OPC_CheckField, 0, 2, 0, 250, 40, 0, // Skip to: 21620
/* 11130 */   MCD_OPC_Decode, 249, 13, 108, // Opcode: TLBIEL
/* 11134 */   MCD_OPC_FilterValue, 9, 42, 0, 0, // Skip to: 11181
/* 11139 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11142 */   MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 11165
/* 11147 */   MCD_OPC_CheckField, 16, 5, 0, 226, 40, 0, // Skip to: 21620
/* 11154 */   MCD_OPC_CheckField, 0, 1, 0, 219, 40, 0, // Skip to: 21620
/* 11161 */   MCD_OPC_Decode, 248, 13, 107, // Opcode: TLBIE
/* 11165 */   MCD_OPC_FilterValue, 1, 210, 40, 0, // Skip to: 21620
/* 11170 */   MCD_OPC_CheckField, 11, 5, 0, 203, 40, 0, // Skip to: 21620
/* 11177 */   MCD_OPC_Decode, 133, 10, 109, // Opcode: MFVSRLD
/* 11181 */   MCD_OPC_FilterValue, 10, 51, 0, 0, // Skip to: 11237
/* 11186 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11189 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 11205
/* 11194 */   MCD_OPC_CheckField, 11, 15, 0, 179, 40, 0, // Skip to: 21620
/* 11201 */   MCD_OPC_Decode, 177, 12, 0, // Opcode: SLBSYNC
/* 11205 */   MCD_OPC_FilterValue, 2, 170, 40, 0, // Skip to: 21620
/* 11210 */   MCD_OPC_ExtractField, 11, 10,  // Inst{20-11} ...
/* 11213 */   MCD_OPC_FilterValue, 128, 2, 4, 0, 0, // Skip to: 11223
/* 11219 */   MCD_OPC_Decode, 243, 9, 69, // Opcode: MFLR
/* 11223 */   MCD_OPC_FilterValue, 160, 2, 4, 0, 0, // Skip to: 11233
/* 11229 */   MCD_OPC_Decode, 232, 9, 69, // Opcode: MFCTR
/* 11233 */   MCD_OPC_Decode, 249, 9, 71, // Opcode: MFSPR
/* 11237 */   MCD_OPC_FilterValue, 11, 28, 0, 0, // Skip to: 11270
/* 11242 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11245 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 11261
/* 11250 */   MCD_OPC_CheckField, 11, 15, 0, 123, 40, 0, // Skip to: 21620
/* 11257 */   MCD_OPC_Decode, 247, 13, 0, // Opcode: TLBIA
/* 11261 */   MCD_OPC_FilterValue, 2, 114, 40, 0, // Skip to: 21620
/* 11266 */   MCD_OPC_Decode, 253, 9, 71, // Opcode: MFTB
/* 11270 */   MCD_OPC_FilterValue, 12, 42, 0, 0, // Skip to: 11317
/* 11275 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11278 */   MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 11301
/* 11283 */   MCD_OPC_CheckField, 16, 5, 0, 90, 40, 0, // Skip to: 21620
/* 11290 */   MCD_OPC_CheckField, 0, 1, 0, 83, 40, 0, // Skip to: 21620
/* 11297 */   MCD_OPC_Decode, 176, 12, 107, // Opcode: SLBMTE
/* 11301 */   MCD_OPC_FilterValue, 1, 74, 40, 0, // Skip to: 21620
/* 11306 */   MCD_OPC_CheckField, 11, 5, 0, 67, 40, 0, // Skip to: 21620
/* 11313 */   MCD_OPC_Decode, 182, 10, 110, // Opcode: MTVSRWS
/* 11317 */   MCD_OPC_FilterValue, 13, 35, 0, 0, // Skip to: 11357
/* 11322 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11325 */   MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 11348
/* 11330 */   MCD_OPC_CheckField, 16, 10, 0, 43, 40, 0, // Skip to: 21620
/* 11337 */   MCD_OPC_CheckField, 0, 1, 0, 36, 40, 0, // Skip to: 21620
/* 11344 */   MCD_OPC_Decode, 172, 12, 108, // Opcode: SLBIE
/* 11348 */   MCD_OPC_FilterValue, 1, 27, 40, 0, // Skip to: 21620
/* 11353 */   MCD_OPC_Decode, 176, 10, 111, // Opcode: MTVSRDD
/* 11357 */   MCD_OPC_FilterValue, 14, 51, 0, 0, // Skip to: 11413
/* 11362 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11365 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 11381
/* 11370 */   MCD_OPC_CheckField, 16, 5, 0, 3, 40, 0, // Skip to: 21620
/* 11377 */   MCD_OPC_Decode, 173, 12, 107, // Opcode: SLBIEG
/* 11381 */   MCD_OPC_FilterValue, 2, 250, 39, 0, // Skip to: 21620
/* 11386 */   MCD_OPC_ExtractField, 11, 10,  // Inst{20-11} ...
/* 11389 */   MCD_OPC_FilterValue, 128, 2, 4, 0, 0, // Skip to: 11399
/* 11395 */   MCD_OPC_Decode, 156, 10, 69, // Opcode: MTLR
/* 11399 */   MCD_OPC_FilterValue, 160, 2, 4, 0, 0, // Skip to: 11409
/* 11405 */   MCD_OPC_Decode, 143, 10, 69, // Opcode: MTCTR
/* 11409 */   MCD_OPC_Decode, 163, 10, 90, // Opcode: MTSPR
/* 11413 */   MCD_OPC_FilterValue, 15, 18, 0, 0, // Skip to: 11436
/* 11418 */   MCD_OPC_CheckField, 11, 15, 0, 211, 39, 0, // Skip to: 21620
/* 11425 */   MCD_OPC_CheckField, 0, 2, 0, 204, 39, 0, // Skip to: 21620
/* 11432 */   MCD_OPC_Decode, 171, 12, 0, // Opcode: SLBIA
/* 11436 */   MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 11452
/* 11441 */   MCD_OPC_CheckField, 1, 1, 1, 188, 39, 0, // Skip to: 21620
/* 11448 */   MCD_OPC_Decode, 251, 9, 105, // Opcode: MFSR
/* 11452 */   MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 11478
/* 11457 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11460 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11469
/* 11465 */   MCD_OPC_Decode, 200, 8, 112, // Opcode: HASHSTP
/* 11469 */   MCD_OPC_FilterValue, 1, 162, 39, 0, // Skip to: 21620
/* 11474 */   MCD_OPC_Decode, 252, 9, 107, // Opcode: MFSRIN
/* 11478 */   MCD_OPC_FilterValue, 21, 11, 0, 0, // Skip to: 11494
/* 11483 */   MCD_OPC_CheckField, 1, 1, 0, 146, 39, 0, // Skip to: 21620
/* 11490 */   MCD_OPC_Decode, 198, 8, 112, // Opcode: HASHCHKP
/* 11494 */   MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 11510
/* 11499 */   MCD_OPC_CheckField, 1, 1, 0, 130, 39, 0, // Skip to: 21620
/* 11506 */   MCD_OPC_Decode, 199, 8, 112, // Opcode: HASHST
/* 11510 */   MCD_OPC_FilterValue, 23, 42, 0, 0, // Skip to: 11557
/* 11515 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 11518 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11527
/* 11523 */   MCD_OPC_Decode, 197, 8, 112, // Opcode: HASHCHK
/* 11527 */   MCD_OPC_FilterValue, 1, 104, 39, 0, // Skip to: 21620
/* 11532 */   MCD_OPC_CheckField, 18, 3, 0, 97, 39, 0, // Skip to: 21620
/* 11539 */   MCD_OPC_CheckField, 11, 5, 0, 90, 39, 0, // Skip to: 21620
/* 11546 */   MCD_OPC_CheckField, 0, 1, 0, 83, 39, 0, // Skip to: 21620
/* 11553 */   MCD_OPC_Decode, 248, 4, 113, // Opcode: DARN
/* 11557 */   MCD_OPC_FilterValue, 24, 18, 0, 0, // Skip to: 11580
/* 11562 */   MCD_OPC_CheckField, 21, 5, 0, 67, 39, 0, // Skip to: 21620
/* 11569 */   MCD_OPC_CheckField, 0, 2, 0, 60, 39, 0, // Skip to: 21620
/* 11576 */   MCD_OPC_Decode, 250, 13, 76, // Opcode: TLBIVAX
/* 11580 */   MCD_OPC_FilterValue, 26, 18, 0, 0, // Skip to: 11603
/* 11585 */   MCD_OPC_CheckField, 16, 5, 0, 44, 39, 0, // Skip to: 21620
/* 11592 */   MCD_OPC_CheckField, 0, 2, 2, 37, 39, 0, // Skip to: 21620
/* 11599 */   MCD_OPC_Decode, 175, 12, 107, // Opcode: SLBMFEV
/* 11603 */   MCD_OPC_FilterValue, 28, 48, 0, 0, // Skip to: 11656
/* 11608 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11611 */   MCD_OPC_FilterValue, 0, 15, 0, 0, // Skip to: 11631
/* 11616 */   MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 11627
/* 11623 */   MCD_OPC_Decode, 255, 13, 76, // Opcode: TLBSX
/* 11627 */   MCD_OPC_Decode, 128, 14, 80, // Opcode: TLBSX2
/* 11631 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 11640
/* 11636 */   MCD_OPC_Decode, 129, 14, 80, // Opcode: TLBSX2D
/* 11640 */   MCD_OPC_FilterValue, 2, 247, 38, 0, // Skip to: 21620
/* 11645 */   MCD_OPC_CheckField, 16, 5, 0, 240, 38, 0, // Skip to: 21620
/* 11652 */   MCD_OPC_Decode, 174, 12, 107, // Opcode: SLBMFEE
/* 11656 */   MCD_OPC_FilterValue, 29, 23, 0, 0, // Skip to: 11684
/* 11661 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11664 */   MCD_OPC_FilterValue, 0, 223, 38, 0, // Skip to: 21620
/* 11669 */   MCD_OPC_CheckField, 11, 15, 0, 4, 0, 0, // Skip to: 11680
/* 11676 */   MCD_OPC_Decode, 253, 13, 0, // Opcode: TLBRE
/* 11680 */   MCD_OPC_Decode, 254, 13, 114, // Opcode: TLBRE2
/* 11684 */   MCD_OPC_FilterValue, 30, 50, 0, 0, // Skip to: 11739
/* 11689 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11692 */   MCD_OPC_FilterValue, 0, 26, 0, 0, // Skip to: 11723
/* 11697 */   MCD_OPC_CheckField, 11, 15, 0, 4, 0, 0, // Skip to: 11708
/* 11704 */   MCD_OPC_Decode, 131, 14, 0, // Opcode: TLBWE
/* 11708 */   MCD_OPC_CheckField, 16, 10, 0, 4, 0, 0, // Skip to: 11719
/* 11715 */   MCD_OPC_Decode, 251, 13, 108, // Opcode: TLBLD
/* 11719 */   MCD_OPC_Decode, 132, 14, 114, // Opcode: TLBWE2
/* 11723 */   MCD_OPC_FilterValue, 3, 164, 38, 0, // Skip to: 21620
/* 11728 */   MCD_OPC_CheckField, 16, 5, 0, 157, 38, 0, // Skip to: 21620
/* 11735 */   MCD_OPC_Decode, 170, 12, 107, // Opcode: SLBFEE_rec
/* 11739 */   MCD_OPC_FilterValue, 31, 148, 38, 0, // Skip to: 21620
/* 11744 */   MCD_OPC_CheckField, 16, 10, 0, 141, 38, 0, // Skip to: 21620
/* 11751 */   MCD_OPC_CheckField, 0, 2, 0, 134, 38, 0, // Skip to: 21620
/* 11758 */   MCD_OPC_Decode, 252, 13, 108, // Opcode: TLBLI
/* 11762 */   MCD_OPC_FilterValue, 10, 167, 1, 0, // Skip to: 12190
/* 11767 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 11770 */   MCD_OPC_FilterValue, 0, 30, 0, 0, // Skip to: 11805
/* 11775 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11778 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11787
/* 11783 */   MCD_OPC_Decode, 173, 9, 115, // Opcode: LWARX
/* 11787 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 11796
/* 11792 */   MCD_OPC_Decode, 174, 9, 115, // Opcode: LWARXL
/* 11796 */   MCD_OPC_FilterValue, 2, 91, 38, 0, // Skip to: 21620
/* 11801 */   MCD_OPC_Decode, 237, 8, 116, // Opcode: LDX
/* 11805 */   MCD_OPC_FilterValue, 1, 30, 0, 0, // Skip to: 11840
/* 11810 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11813 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11822
/* 11818 */   MCD_OPC_Decode, 213, 8, 115, // Opcode: LBARX
/* 11822 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 11831
/* 11827 */   MCD_OPC_Decode, 214, 8, 115, // Opcode: LBARXL
/* 11831 */   MCD_OPC_FilterValue, 2, 56, 38, 0, // Skip to: 21620
/* 11836 */   MCD_OPC_Decode, 236, 8, 117, // Opcode: LDUX
/* 11840 */   MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 11866
/* 11845 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11848 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11857
/* 11853 */   MCD_OPC_Decode, 229, 8, 116, // Opcode: LDARX
/* 11857 */   MCD_OPC_FilterValue, 1, 30, 38, 0, // Skip to: 21620
/* 11862 */   MCD_OPC_Decode, 230, 8, 116, // Opcode: LDARXL
/* 11866 */   MCD_OPC_FilterValue, 3, 21, 0, 0, // Skip to: 11892
/* 11871 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11874 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11883
/* 11879 */   MCD_OPC_Decode, 132, 9, 115, // Opcode: LHARX
/* 11883 */   MCD_OPC_FilterValue, 1, 4, 38, 0, // Skip to: 21620
/* 11888 */   MCD_OPC_Decode, 133, 9, 115, // Opcode: LHARXL
/* 11892 */   MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 11908
/* 11897 */   MCD_OPC_CheckField, 0, 2, 2, 244, 37, 0, // Skip to: 21620
/* 11904 */   MCD_OPC_Decode, 230, 12, 116, // Opcode: STDX
/* 11908 */   MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 11924
/* 11913 */   MCD_OPC_CheckField, 0, 2, 2, 228, 37, 0, // Skip to: 21620
/* 11920 */   MCD_OPC_Decode, 229, 12, 118, // Opcode: STDUX
/* 11924 */   MCD_OPC_FilterValue, 8, 21, 0, 0, // Skip to: 11950
/* 11929 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 11932 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 11941
/* 11937 */   MCD_OPC_Decode, 161, 9, 119, // Opcode: LQARX
/* 11941 */   MCD_OPC_FilterValue, 1, 202, 37, 0, // Skip to: 21620
/* 11946 */   MCD_OPC_Decode, 162, 9, 119, // Opcode: LQARXL
/* 11950 */   MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 11966
/* 11955 */   MCD_OPC_CheckField, 0, 2, 2, 186, 37, 0, // Skip to: 21620
/* 11962 */   MCD_OPC_Decode, 234, 8, 116, // Opcode: LDMX
/* 11966 */   MCD_OPC_FilterValue, 10, 11, 0, 0, // Skip to: 11982
/* 11971 */   MCD_OPC_CheckField, 0, 2, 2, 170, 37, 0, // Skip to: 21620
/* 11978 */   MCD_OPC_Decode, 177, 9, 116, // Opcode: LWAX
/* 11982 */   MCD_OPC_FilterValue, 11, 11, 0, 0, // Skip to: 11998
/* 11987 */   MCD_OPC_CheckField, 0, 2, 2, 154, 37, 0, // Skip to: 21620
/* 11994 */   MCD_OPC_Decode, 176, 9, 117, // Opcode: LWAUX
/* 11998 */   MCD_OPC_FilterValue, 16, 11, 0, 0, // Skip to: 12014
/* 12003 */   MCD_OPC_CheckField, 0, 2, 0, 138, 37, 0, // Skip to: 21620
/* 12010 */   MCD_OPC_Decode, 232, 8, 116, // Opcode: LDBRX
/* 12014 */   MCD_OPC_FilterValue, 18, 11, 0, 0, // Skip to: 12030
/* 12019 */   MCD_OPC_CheckField, 0, 2, 2, 122, 37, 0, // Skip to: 21620
/* 12026 */   MCD_OPC_Decode, 164, 9, 77, // Opcode: LSWI
/* 12030 */   MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 12046
/* 12035 */   MCD_OPC_CheckField, 0, 2, 0, 106, 37, 0, // Skip to: 21620
/* 12042 */   MCD_OPC_Decode, 225, 12, 116, // Opcode: STDBRX
/* 12046 */   MCD_OPC_FilterValue, 22, 11, 0, 0, // Skip to: 12062
/* 12051 */   MCD_OPC_CheckField, 0, 2, 2, 90, 37, 0, // Skip to: 21620
/* 12058 */   MCD_OPC_Decode, 135, 13, 77, // Opcode: STSWI
/* 12062 */   MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 12078
/* 12067 */   MCD_OPC_CheckField, 0, 2, 2, 74, 37, 0, // Skip to: 21620
/* 12074 */   MCD_OPC_Decode, 185, 9, 80, // Opcode: LWZCIX
/* 12078 */   MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 12094
/* 12083 */   MCD_OPC_CheckField, 0, 2, 2, 58, 37, 0, // Skip to: 21620
/* 12090 */   MCD_OPC_Decode, 145, 9, 80, // Opcode: LHZCIX
/* 12094 */   MCD_OPC_FilterValue, 26, 11, 0, 0, // Skip to: 12110
/* 12099 */   MCD_OPC_CheckField, 0, 2, 2, 42, 37, 0, // Skip to: 21620
/* 12106 */   MCD_OPC_Decode, 218, 8, 80, // Opcode: LBZCIX
/* 12110 */   MCD_OPC_FilterValue, 27, 11, 0, 0, // Skip to: 12126
/* 12115 */   MCD_OPC_CheckField, 0, 2, 2, 26, 37, 0, // Skip to: 21620
/* 12122 */   MCD_OPC_Decode, 233, 8, 80, // Opcode: LDCIX
/* 12126 */   MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 12142
/* 12131 */   MCD_OPC_CheckField, 0, 2, 2, 10, 37, 0, // Skip to: 21620
/* 12138 */   MCD_OPC_Decode, 145, 13, 80, // Opcode: STWCIX
/* 12142 */   MCD_OPC_FilterValue, 29, 11, 0, 0, // Skip to: 12158
/* 12147 */   MCD_OPC_CheckField, 0, 2, 2, 250, 36, 0, // Skip to: 21620
/* 12154 */   MCD_OPC_Decode, 246, 12, 80, // Opcode: STHCIX
/* 12158 */   MCD_OPC_FilterValue, 30, 11, 0, 0, // Skip to: 12174
/* 12163 */   MCD_OPC_CheckField, 0, 2, 2, 234, 36, 0, // Skip to: 21620
/* 12170 */   MCD_OPC_Decode, 211, 12, 80, // Opcode: STBCIX
/* 12174 */   MCD_OPC_FilterValue, 31, 225, 36, 0, // Skip to: 21620
/* 12179 */   MCD_OPC_CheckField, 0, 2, 2, 218, 36, 0, // Skip to: 21620
/* 12186 */   MCD_OPC_Decode, 226, 12, 80, // Opcode: STDCIX
/* 12190 */   MCD_OPC_FilterValue, 11, 110, 3, 0, // Skip to: 13073
/* 12195 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 12198 */   MCD_OPC_FilterValue, 0, 28, 0, 0, // Skip to: 12231
/* 12203 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12206 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 12222
/* 12211 */   MCD_OPC_CheckField, 25, 1, 0, 186, 36, 0, // Skip to: 21620
/* 12218 */   MCD_OPC_Decode, 206, 8, 75, // Opcode: ICBT
/* 12222 */   MCD_OPC_FilterValue, 2, 177, 36, 0, // Skip to: 21620
/* 12227 */   MCD_OPC_Decode, 190, 9, 115, // Opcode: LWZX
/* 12231 */   MCD_OPC_FilterValue, 1, 28, 0, 0, // Skip to: 12264
/* 12236 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12239 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 12255
/* 12244 */   MCD_OPC_CheckField, 21, 5, 0, 153, 36, 0, // Skip to: 21620
/* 12251 */   MCD_OPC_Decode, 253, 4, 120, // Opcode: DCBST
/* 12255 */   MCD_OPC_FilterValue, 2, 144, 36, 0, // Skip to: 21620
/* 12260 */   MCD_OPC_Decode, 188, 9, 121, // Opcode: LWZUX
/* 12264 */   MCD_OPC_FilterValue, 2, 21, 0, 0, // Skip to: 12290
/* 12269 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12272 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12281
/* 12277 */   MCD_OPC_Decode, 250, 4, 122, // Opcode: DCBF
/* 12281 */   MCD_OPC_FilterValue, 2, 118, 36, 0, // Skip to: 21620
/* 12286 */   MCD_OPC_Decode, 223, 8, 115, // Opcode: LBZX
/* 12290 */   MCD_OPC_FilterValue, 3, 11, 0, 0, // Skip to: 12306
/* 12295 */   MCD_OPC_CheckField, 0, 2, 2, 102, 36, 0, // Skip to: 21620
/* 12302 */   MCD_OPC_Decode, 221, 8, 121, // Opcode: LBZUX
/* 12306 */   MCD_OPC_FilterValue, 4, 21, 0, 0, // Skip to: 12332
/* 12311 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12314 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 12323
/* 12319 */   MCD_OPC_Decode, 146, 13, 115, // Opcode: STWCX
/* 12323 */   MCD_OPC_FilterValue, 2, 76, 36, 0, // Skip to: 21620
/* 12328 */   MCD_OPC_Decode, 152, 13, 115, // Opcode: STWX
/* 12332 */   MCD_OPC_FilterValue, 5, 21, 0, 0, // Skip to: 12358
/* 12337 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12340 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 12349
/* 12345 */   MCD_OPC_Decode, 133, 13, 119, // Opcode: STQCX
/* 12349 */   MCD_OPC_FilterValue, 2, 50, 36, 0, // Skip to: 21620
/* 12354 */   MCD_OPC_Decode, 150, 13, 123, // Opcode: STWUX
/* 12358 */   MCD_OPC_FilterValue, 6, 21, 0, 0, // Skip to: 12384
/* 12363 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12366 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 12375
/* 12371 */   MCD_OPC_Decode, 227, 12, 116, // Opcode: STDCX
/* 12375 */   MCD_OPC_FilterValue, 2, 24, 36, 0, // Skip to: 21620
/* 12380 */   MCD_OPC_Decode, 218, 12, 115, // Opcode: STBX
/* 12384 */   MCD_OPC_FilterValue, 7, 21, 0, 0, // Skip to: 12410
/* 12389 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12392 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12401
/* 12397 */   MCD_OPC_Decode, 129, 5, 124, // Opcode: DCBTST
/* 12401 */   MCD_OPC_FilterValue, 2, 254, 35, 0, // Skip to: 21620
/* 12406 */   MCD_OPC_Decode, 216, 12, 123, // Opcode: STBUX
/* 12410 */   MCD_OPC_FilterValue, 8, 21, 0, 0, // Skip to: 12436
/* 12415 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12418 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12427
/* 12423 */   MCD_OPC_Decode, 255, 4, 124, // Opcode: DCBT
/* 12427 */   MCD_OPC_FilterValue, 2, 228, 35, 0, // Skip to: 21620
/* 12432 */   MCD_OPC_Decode, 150, 9, 115, // Opcode: LHZX
/* 12436 */   MCD_OPC_FilterValue, 9, 11, 0, 0, // Skip to: 12452
/* 12441 */   MCD_OPC_CheckField, 0, 2, 2, 212, 35, 0, // Skip to: 21620
/* 12448 */   MCD_OPC_Decode, 148, 9, 121, // Opcode: LHZUX
/* 12452 */   MCD_OPC_FilterValue, 10, 38, 0, 0, // Skip to: 12495
/* 12457 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12460 */   MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 12486
/* 12465 */   MCD_OPC_ExtractField, 23, 3,  // Inst{25-23} ...
/* 12468 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12477
/* 12473 */   MCD_OPC_Decode, 170, 5, 125, // Opcode: DST
/* 12477 */   MCD_OPC_FilterValue, 4, 178, 35, 0, // Skip to: 21620
/* 12482 */   MCD_OPC_Decode, 176, 5, 125, // Opcode: DSTT
/* 12486 */   MCD_OPC_FilterValue, 2, 169, 35, 0, // Skip to: 21620
/* 12491 */   MCD_OPC_Decode, 138, 9, 115, // Opcode: LHAX
/* 12495 */   MCD_OPC_FilterValue, 11, 38, 0, 0, // Skip to: 12538
/* 12500 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12503 */   MCD_OPC_FilterValue, 0, 21, 0, 0, // Skip to: 12529
/* 12508 */   MCD_OPC_ExtractField, 23, 3,  // Inst{25-23} ...
/* 12511 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12520
/* 12516 */   MCD_OPC_Decode, 172, 5, 125, // Opcode: DSTST
/* 12520 */   MCD_OPC_FilterValue, 4, 135, 35, 0, // Skip to: 21620
/* 12525 */   MCD_OPC_Decode, 174, 5, 125, // Opcode: DSTSTT
/* 12529 */   MCD_OPC_FilterValue, 2, 126, 35, 0, // Skip to: 21620
/* 12534 */   MCD_OPC_Decode, 136, 9, 121, // Opcode: LHAUX
/* 12538 */   MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 12554
/* 12543 */   MCD_OPC_CheckField, 0, 2, 2, 110, 35, 0, // Skip to: 21620
/* 12550 */   MCD_OPC_Decode, 253, 12, 115, // Opcode: STHX
/* 12554 */   MCD_OPC_FilterValue, 13, 11, 0, 0, // Skip to: 12570
/* 12559 */   MCD_OPC_CheckField, 0, 2, 2, 94, 35, 0, // Skip to: 21620
/* 12566 */   MCD_OPC_Decode, 251, 12, 123, // Opcode: STHUX
/* 12570 */   MCD_OPC_FilterValue, 14, 18, 0, 0, // Skip to: 12593
/* 12575 */   MCD_OPC_CheckField, 21, 5, 0, 78, 35, 0, // Skip to: 21620
/* 12582 */   MCD_OPC_CheckField, 0, 2, 0, 71, 35, 0, // Skip to: 21620
/* 12589 */   MCD_OPC_Decode, 252, 4, 120, // Opcode: DCBI
/* 12593 */   MCD_OPC_FilterValue, 16, 21, 0, 0, // Skip to: 12619
/* 12598 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12601 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12610
/* 12606 */   MCD_OPC_Decode, 180, 9, 115, // Opcode: LWBRX
/* 12610 */   MCD_OPC_FilterValue, 2, 45, 35, 0, // Skip to: 21620
/* 12615 */   MCD_OPC_Decode, 129, 9, 126, // Opcode: LFSX
/* 12619 */   MCD_OPC_FilterValue, 17, 28, 0, 0, // Skip to: 12652
/* 12624 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12627 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 12643
/* 12632 */   MCD_OPC_CheckField, 11, 15, 0, 21, 35, 0, // Skip to: 21620
/* 12639 */   MCD_OPC_Decode, 130, 14, 0, // Opcode: TLBSYNC
/* 12643 */   MCD_OPC_FilterValue, 2, 12, 35, 0, // Skip to: 21620
/* 12648 */   MCD_OPC_Decode, 128, 9, 127, // Opcode: LFSUX
/* 12652 */   MCD_OPC_FilterValue, 18, 37, 0, 0, // Skip to: 12694
/* 12657 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12660 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 12684
/* 12665 */   MCD_OPC_CheckField, 23, 3, 0, 244, 34, 0, // Skip to: 21620
/* 12672 */   MCD_OPC_CheckField, 11, 10, 0, 237, 34, 0, // Skip to: 21620
/* 12679 */   MCD_OPC_Decode, 222, 13, 128, 1, // Opcode: SYNC
/* 12684 */   MCD_OPC_FilterValue, 2, 227, 34, 0, // Skip to: 21620
/* 12689 */   MCD_OPC_Decode, 251, 8, 129, 1, // Opcode: LFDX
/* 12694 */   MCD_OPC_FilterValue, 19, 12, 0, 0, // Skip to: 12711
/* 12699 */   MCD_OPC_CheckField, 0, 2, 2, 210, 34, 0, // Skip to: 21620
/* 12706 */   MCD_OPC_Decode, 250, 8, 130, 1, // Opcode: LFDUX
/* 12711 */   MCD_OPC_FilterValue, 20, 21, 0, 0, // Skip to: 12737
/* 12716 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12719 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 12728
/* 12724 */   MCD_OPC_Decode, 144, 13, 115, // Opcode: STWBRX
/* 12728 */   MCD_OPC_FilterValue, 2, 183, 34, 0, // Skip to: 21620
/* 12733 */   MCD_OPC_Decode, 242, 12, 126, // Opcode: STFSX
/* 12737 */   MCD_OPC_FilterValue, 21, 22, 0, 0, // Skip to: 12764
/* 12742 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12745 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 12754
/* 12750 */   MCD_OPC_Decode, 212, 12, 115, // Opcode: STBCX
/* 12754 */   MCD_OPC_FilterValue, 2, 157, 34, 0, // Skip to: 21620
/* 12759 */   MCD_OPC_Decode, 241, 12, 131, 1, // Opcode: STFSUX
/* 12764 */   MCD_OPC_FilterValue, 22, 22, 0, 0, // Skip to: 12791
/* 12769 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12772 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 12781
/* 12777 */   MCD_OPC_Decode, 247, 12, 115, // Opcode: STHCX
/* 12781 */   MCD_OPC_FilterValue, 2, 130, 34, 0, // Skip to: 21620
/* 12786 */   MCD_OPC_Decode, 237, 12, 129, 1, // Opcode: STFDX
/* 12791 */   MCD_OPC_FilterValue, 23, 29, 0, 0, // Skip to: 12825
/* 12796 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12799 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 12815
/* 12804 */   MCD_OPC_CheckField, 21, 5, 0, 105, 34, 0, // Skip to: 21620
/* 12811 */   MCD_OPC_Decode, 249, 4, 120, // Opcode: DCBA
/* 12815 */   MCD_OPC_FilterValue, 2, 96, 34, 0, // Skip to: 21620
/* 12820 */   MCD_OPC_Decode, 236, 12, 132, 1, // Opcode: STFDUX
/* 12825 */   MCD_OPC_FilterValue, 24, 11, 0, 0, // Skip to: 12841
/* 12830 */   MCD_OPC_CheckField, 0, 2, 0, 79, 34, 0, // Skip to: 21620
/* 12837 */   MCD_OPC_Decode, 140, 9, 115, // Opcode: LHBRX
/* 12841 */   MCD_OPC_FilterValue, 25, 50, 0, 0, // Skip to: 12896
/* 12846 */   MCD_OPC_ExtractField, 23, 3,  // Inst{25-23} ...
/* 12849 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 12873
/* 12854 */   MCD_OPC_CheckField, 11, 10, 0, 55, 34, 0, // Skip to: 21620
/* 12861 */   MCD_OPC_CheckField, 0, 2, 0, 48, 34, 0, // Skip to: 21620
/* 12868 */   MCD_OPC_Decode, 168, 5, 133, 1, // Opcode: DSS
/* 12873 */   MCD_OPC_FilterValue, 4, 38, 34, 0, // Skip to: 21620
/* 12878 */   MCD_OPC_CheckField, 11, 12, 0, 31, 34, 0, // Skip to: 21620
/* 12885 */   MCD_OPC_CheckField, 0, 2, 0, 24, 34, 0, // Skip to: 21620
/* 12892 */   MCD_OPC_Decode, 169, 5, 0, // Opcode: DSSALL
/* 12896 */   MCD_OPC_FilterValue, 26, 48, 0, 0, // Skip to: 12949
/* 12901 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 12904 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 12932
/* 12909 */   MCD_OPC_CheckField, 11, 15, 0, 11, 0, 0, // Skip to: 12927
/* 12916 */   MCD_OPC_CheckField, 0, 1, 0, 4, 0, 0, // Skip to: 12927
/* 12923 */   MCD_OPC_Decode, 201, 7, 0, // Opcode: EnforceIEIO
/* 12927 */   MCD_OPC_Decode, 225, 9, 134, 1, // Opcode: MBAR
/* 12932 */   MCD_OPC_FilterValue, 1, 235, 33, 0, // Skip to: 21620
/* 12937 */   MCD_OPC_CheckField, 0, 1, 0, 228, 33, 0, // Skip to: 21620
/* 12944 */   MCD_OPC_Decode, 252, 8, 129, 1, // Opcode: LFIWAX
/* 12949 */   MCD_OPC_FilterValue, 27, 29, 0, 0, // Skip to: 12983
/* 12954 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 12957 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 12973
/* 12962 */   MCD_OPC_CheckField, 11, 15, 0, 203, 33, 0, // Skip to: 21620
/* 12969 */   MCD_OPC_Decode, 139, 10, 0, // Opcode: MSGSYNC
/* 12973 */   MCD_OPC_FilterValue, 2, 194, 33, 0, // Skip to: 21620
/* 12978 */   MCD_OPC_Decode, 253, 8, 129, 1, // Opcode: LFIWZX
/* 12983 */   MCD_OPC_FilterValue, 28, 11, 0, 0, // Skip to: 12999
/* 12988 */   MCD_OPC_CheckField, 0, 2, 0, 177, 33, 0, // Skip to: 21620
/* 12995 */   MCD_OPC_Decode, 245, 12, 115, // Opcode: STHBRX
/* 12999 */   MCD_OPC_FilterValue, 30, 29, 0, 0, // Skip to: 13033
/* 13004 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13007 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 13023
/* 13012 */   MCD_OPC_CheckField, 21, 5, 0, 153, 33, 0, // Skip to: 21620
/* 13019 */   MCD_OPC_Decode, 202, 8, 120, // Opcode: ICBI
/* 13023 */   MCD_OPC_FilterValue, 2, 144, 33, 0, // Skip to: 21620
/* 13028 */   MCD_OPC_Decode, 238, 12, 129, 1, // Opcode: STFIWX
/* 13033 */   MCD_OPC_FilterValue, 31, 134, 33, 0, // Skip to: 21620
/* 13038 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 13041 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 13057
/* 13046 */   MCD_OPC_CheckField, 0, 2, 0, 119, 33, 0, // Skip to: 21620
/* 13053 */   MCD_OPC_Decode, 131, 5, 120, // Opcode: DCBZ
/* 13057 */   MCD_OPC_FilterValue, 1, 110, 33, 0, // Skip to: 21620
/* 13062 */   MCD_OPC_CheckField, 0, 2, 0, 103, 33, 0, // Skip to: 21620
/* 13069 */   MCD_OPC_Decode, 133, 5, 120, // Opcode: DCBZL
/* 13073 */   MCD_OPC_FilterValue, 12, 115, 0, 0, // Skip to: 13193
/* 13078 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 13081 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 13109
/* 13086 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13089 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13099
/* 13094 */   MCD_OPC_Decode, 180, 12, 135, 1, // Opcode: SLW
/* 13099 */   MCD_OPC_FilterValue, 1, 68, 33, 0, // Skip to: 21620
/* 13104 */   MCD_OPC_Decode, 183, 12, 135, 1, // Opcode: SLW_rec
/* 13109 */   MCD_OPC_FilterValue, 16, 23, 0, 0, // Skip to: 13137
/* 13114 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13117 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13127
/* 13122 */   MCD_OPC_Decode, 205, 12, 135, 1, // Opcode: SRW
/* 13127 */   MCD_OPC_FilterValue, 1, 40, 33, 0, // Skip to: 21620
/* 13132 */   MCD_OPC_Decode, 208, 12, 135, 1, // Opcode: SRW_rec
/* 13137 */   MCD_OPC_FilterValue, 24, 23, 0, 0, // Skip to: 13165
/* 13142 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13145 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13155
/* 13150 */   MCD_OPC_Decode, 199, 12, 135, 1, // Opcode: SRAW
/* 13155 */   MCD_OPC_FilterValue, 1, 12, 33, 0, // Skip to: 21620
/* 13160 */   MCD_OPC_Decode, 202, 12, 135, 1, // Opcode: SRAW_rec
/* 13165 */   MCD_OPC_FilterValue, 25, 2, 33, 0, // Skip to: 21620
/* 13170 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13173 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13183
/* 13178 */   MCD_OPC_Decode, 200, 12, 136, 1, // Opcode: SRAWI
/* 13183 */   MCD_OPC_FilterValue, 1, 240, 32, 0, // Skip to: 21620
/* 13188 */   MCD_OPC_Decode, 201, 12, 136, 1, // Opcode: SRAWI_rec
/* 13193 */   MCD_OPC_FilterValue, 13, 1, 2, 0, // Skip to: 13711
/* 13198 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 13201 */   MCD_OPC_FilterValue, 0, 57, 0, 0, // Skip to: 13263
/* 13206 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13209 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13226
/* 13214 */   MCD_OPC_CheckField, 11, 5, 0, 207, 32, 0, // Skip to: 21620
/* 13221 */   MCD_OPC_Decode, 219, 4, 137, 1, // Opcode: CNTLZW
/* 13226 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 13243
/* 13231 */   MCD_OPC_CheckField, 11, 5, 0, 190, 32, 0, // Skip to: 21620
/* 13238 */   MCD_OPC_Decode, 222, 4, 137, 1, // Opcode: CNTLZW_rec
/* 13243 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 13253
/* 13248 */   MCD_OPC_Decode, 178, 12, 138, 1, // Opcode: SLD
/* 13253 */   MCD_OPC_FilterValue, 3, 170, 32, 0, // Skip to: 21620
/* 13258 */   MCD_OPC_Decode, 179, 12, 138, 1, // Opcode: SLD_rec
/* 13263 */   MCD_OPC_FilterValue, 1, 47, 0, 0, // Skip to: 13315
/* 13268 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13271 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13288
/* 13276 */   MCD_OPC_CheckField, 11, 5, 0, 145, 32, 0, // Skip to: 21620
/* 13283 */   MCD_OPC_Decode, 216, 4, 139, 1, // Opcode: CNTLZD
/* 13288 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 13305
/* 13293 */   MCD_OPC_CheckField, 11, 5, 0, 128, 32, 0, // Skip to: 21620
/* 13300 */   MCD_OPC_Decode, 218, 4, 139, 1, // Opcode: CNTLZD_rec
/* 13305 */   MCD_OPC_FilterValue, 2, 118, 32, 0, // Skip to: 21620
/* 13310 */   MCD_OPC_Decode, 217, 4, 140, 1, // Opcode: CNTLZDM
/* 13315 */   MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 13339
/* 13320 */   MCD_OPC_CheckField, 11, 5, 0, 101, 32, 0, // Skip to: 21620
/* 13327 */   MCD_OPC_CheckField, 0, 2, 0, 94, 32, 0, // Skip to: 21620
/* 13334 */   MCD_OPC_Decode, 181, 11, 137, 1, // Opcode: POPCNTB
/* 13339 */   MCD_OPC_FilterValue, 11, 19, 0, 0, // Skip to: 13363
/* 13344 */   MCD_OPC_CheckField, 11, 5, 0, 77, 32, 0, // Skip to: 21620
/* 13351 */   MCD_OPC_CheckField, 0, 2, 0, 70, 32, 0, // Skip to: 21620
/* 13358 */   MCD_OPC_Decode, 184, 11, 137, 1, // Opcode: POPCNTW
/* 13363 */   MCD_OPC_FilterValue, 15, 19, 0, 0, // Skip to: 13387
/* 13368 */   MCD_OPC_CheckField, 11, 5, 0, 53, 32, 0, // Skip to: 21620
/* 13375 */   MCD_OPC_CheckField, 0, 2, 0, 46, 32, 0, // Skip to: 21620
/* 13382 */   MCD_OPC_Decode, 183, 11, 139, 1, // Opcode: POPCNTD
/* 13387 */   MCD_OPC_FilterValue, 16, 57, 0, 0, // Skip to: 13449
/* 13392 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13395 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13412
/* 13400 */   MCD_OPC_CheckField, 11, 5, 0, 21, 32, 0, // Skip to: 21620
/* 13407 */   MCD_OPC_Decode, 226, 4, 137, 1, // Opcode: CNTTZW
/* 13412 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 13429
/* 13417 */   MCD_OPC_CheckField, 11, 5, 0, 4, 32, 0, // Skip to: 21620
/* 13424 */   MCD_OPC_Decode, 229, 4, 137, 1, // Opcode: CNTTZW_rec
/* 13429 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 13439
/* 13434 */   MCD_OPC_Decode, 203, 12, 138, 1, // Opcode: SRD
/* 13439 */   MCD_OPC_FilterValue, 3, 240, 31, 0, // Skip to: 21620
/* 13444 */   MCD_OPC_Decode, 204, 12, 138, 1, // Opcode: SRD_rec
/* 13449 */   MCD_OPC_FilterValue, 17, 47, 0, 0, // Skip to: 13501
/* 13454 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13457 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13474
/* 13462 */   MCD_OPC_CheckField, 11, 5, 0, 215, 31, 0, // Skip to: 21620
/* 13469 */   MCD_OPC_Decode, 223, 4, 139, 1, // Opcode: CNTTZD
/* 13474 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 13491
/* 13479 */   MCD_OPC_CheckField, 11, 5, 0, 198, 31, 0, // Skip to: 21620
/* 13486 */   MCD_OPC_Decode, 225, 4, 139, 1, // Opcode: CNTTZD_rec
/* 13491 */   MCD_OPC_FilterValue, 2, 188, 31, 0, // Skip to: 21620
/* 13496 */   MCD_OPC_Decode, 224, 4, 140, 1, // Opcode: CNTTZDM
/* 13501 */   MCD_OPC_FilterValue, 24, 23, 0, 0, // Skip to: 13529
/* 13506 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13509 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13519
/* 13514 */   MCD_OPC_Decode, 194, 12, 138, 1, // Opcode: SRAD
/* 13519 */   MCD_OPC_FilterValue, 1, 160, 31, 0, // Skip to: 21620
/* 13524 */   MCD_OPC_Decode, 198, 12, 138, 1, // Opcode: SRAD_rec
/* 13529 */   MCD_OPC_FilterValue, 25, 23, 0, 0, // Skip to: 13557
/* 13534 */   MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 13537 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13547
/* 13542 */   MCD_OPC_Decode, 195, 12, 141, 1, // Opcode: SRADI
/* 13547 */   MCD_OPC_FilterValue, 1, 132, 31, 0, // Skip to: 21620
/* 13552 */   MCD_OPC_Decode, 197, 12, 141, 1, // Opcode: SRADI_rec
/* 13557 */   MCD_OPC_FilterValue, 27, 23, 0, 0, // Skip to: 13585
/* 13562 */   MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 13565 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13575
/* 13570 */   MCD_OPC_Decode, 193, 7, 141, 1, // Opcode: EXTSWSLI
/* 13575 */   MCD_OPC_FilterValue, 1, 104, 31, 0, // Skip to: 21620
/* 13580 */   MCD_OPC_Decode, 196, 7, 141, 1, // Opcode: EXTSWSLI_rec
/* 13585 */   MCD_OPC_FilterValue, 28, 37, 0, 0, // Skip to: 13627
/* 13590 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13593 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13610
/* 13598 */   MCD_OPC_CheckField, 11, 5, 0, 79, 31, 0, // Skip to: 21620
/* 13605 */   MCD_OPC_Decode, 187, 7, 137, 1, // Opcode: EXTSH
/* 13610 */   MCD_OPC_FilterValue, 1, 69, 31, 0, // Skip to: 21620
/* 13615 */   MCD_OPC_CheckField, 11, 5, 0, 62, 31, 0, // Skip to: 21620
/* 13622 */   MCD_OPC_Decode, 191, 7, 137, 1, // Opcode: EXTSH_rec
/* 13627 */   MCD_OPC_FilterValue, 29, 37, 0, 0, // Skip to: 13669
/* 13632 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13635 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13652
/* 13640 */   MCD_OPC_CheckField, 11, 5, 0, 37, 31, 0, // Skip to: 21620
/* 13647 */   MCD_OPC_Decode, 182, 7, 137, 1, // Opcode: EXTSB
/* 13652 */   MCD_OPC_FilterValue, 1, 27, 31, 0, // Skip to: 21620
/* 13657 */   MCD_OPC_CheckField, 11, 5, 0, 20, 31, 0, // Skip to: 21620
/* 13664 */   MCD_OPC_Decode, 186, 7, 137, 1, // Opcode: EXTSB_rec
/* 13669 */   MCD_OPC_FilterValue, 30, 10, 31, 0, // Skip to: 21620
/* 13674 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13677 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 13694
/* 13682 */   MCD_OPC_CheckField, 11, 5, 0, 251, 30, 0, // Skip to: 21620
/* 13689 */   MCD_OPC_Decode, 192, 7, 139, 1, // Opcode: EXTSW
/* 13694 */   MCD_OPC_FilterValue, 1, 241, 30, 0, // Skip to: 21620
/* 13699 */   MCD_OPC_CheckField, 11, 5, 0, 234, 30, 0, // Skip to: 21620
/* 13706 */   MCD_OPC_Decode, 200, 7, 139, 1, // Opcode: EXTSW_rec
/* 13711 */   MCD_OPC_FilterValue, 14, 56, 1, 0, // Skip to: 14028
/* 13716 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 13719 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 13747
/* 13724 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13727 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13737
/* 13732 */   MCD_OPC_Decode, 146, 3, 135, 1, // Opcode: AND
/* 13737 */   MCD_OPC_FilterValue, 1, 198, 30, 0, // Skip to: 21620
/* 13742 */   MCD_OPC_Decode, 161, 3, 135, 1, // Opcode: AND_rec
/* 13747 */   MCD_OPC_FilterValue, 1, 23, 0, 0, // Skip to: 13775
/* 13752 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13755 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13765
/* 13760 */   MCD_OPC_Decode, 149, 3, 135, 1, // Opcode: ANDC
/* 13765 */   MCD_OPC_FilterValue, 1, 170, 30, 0, // Skip to: 21620
/* 13770 */   MCD_OPC_Decode, 152, 3, 135, 1, // Opcode: ANDC_rec
/* 13775 */   MCD_OPC_FilterValue, 3, 23, 0, 0, // Skip to: 13803
/* 13780 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13783 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13793
/* 13788 */   MCD_OPC_Decode, 221, 10, 135, 1, // Opcode: NOR
/* 13793 */   MCD_OPC_FilterValue, 1, 142, 30, 0, // Skip to: 21620
/* 13798 */   MCD_OPC_Decode, 224, 10, 135, 1, // Opcode: NOR_rec
/* 13803 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 13820
/* 13808 */   MCD_OPC_CheckField, 0, 2, 0, 125, 30, 0, // Skip to: 21620
/* 13815 */   MCD_OPC_Decode, 242, 10, 140, 1, // Opcode: PDEPD
/* 13820 */   MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 13837
/* 13825 */   MCD_OPC_CheckField, 0, 2, 0, 108, 30, 0, // Skip to: 21620
/* 13832 */   MCD_OPC_Decode, 243, 10, 140, 1, // Opcode: PEXTD
/* 13837 */   MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 13854
/* 13842 */   MCD_OPC_CheckField, 0, 2, 0, 91, 30, 0, // Skip to: 21620
/* 13849 */   MCD_OPC_Decode, 201, 4, 140, 1, // Opcode: CFUGED
/* 13854 */   MCD_OPC_FilterValue, 7, 12, 0, 0, // Skip to: 13871
/* 13859 */   MCD_OPC_CheckField, 0, 2, 0, 74, 30, 0, // Skip to: 21620
/* 13866 */   MCD_OPC_Decode, 199, 4, 140, 1, // Opcode: BPERMD
/* 13871 */   MCD_OPC_FilterValue, 8, 23, 0, 0, // Skip to: 13899
/* 13876 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13879 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13889
/* 13884 */   MCD_OPC_Decode, 239, 5, 135, 1, // Opcode: EQV
/* 13889 */   MCD_OPC_FilterValue, 1, 46, 30, 0, // Skip to: 21620
/* 13894 */   MCD_OPC_Decode, 242, 5, 135, 1, // Opcode: EQV_rec
/* 13899 */   MCD_OPC_FilterValue, 9, 23, 0, 0, // Skip to: 13927
/* 13904 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13907 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13917
/* 13912 */   MCD_OPC_Decode, 153, 17, 135, 1, // Opcode: XOR
/* 13917 */   MCD_OPC_FilterValue, 1, 18, 30, 0, // Skip to: 21620
/* 13922 */   MCD_OPC_Decode, 160, 17, 135, 1, // Opcode: XOR_rec
/* 13927 */   MCD_OPC_FilterValue, 12, 23, 0, 0, // Skip to: 13955
/* 13932 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13935 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13945
/* 13940 */   MCD_OPC_Decode, 228, 10, 135, 1, // Opcode: ORC
/* 13945 */   MCD_OPC_FilterValue, 1, 246, 29, 0, // Skip to: 21620
/* 13950 */   MCD_OPC_Decode, 231, 10, 135, 1, // Opcode: ORC_rec
/* 13955 */   MCD_OPC_FilterValue, 13, 23, 0, 0, // Skip to: 13983
/* 13960 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13963 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 13973
/* 13968 */   MCD_OPC_Decode, 225, 10, 135, 1, // Opcode: OR
/* 13973 */   MCD_OPC_FilterValue, 1, 218, 29, 0, // Skip to: 21620
/* 13978 */   MCD_OPC_Decode, 236, 10, 135, 1, // Opcode: OR_rec
/* 13983 */   MCD_OPC_FilterValue, 14, 23, 0, 0, // Skip to: 14011
/* 13988 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 13991 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 14001
/* 13996 */   MCD_OPC_Decode, 205, 10, 135, 1, // Opcode: NAND
/* 14001 */   MCD_OPC_FilterValue, 1, 190, 29, 0, // Skip to: 21620
/* 14006 */   MCD_OPC_Decode, 208, 10, 135, 1, // Opcode: NAND_rec
/* 14011 */   MCD_OPC_FilterValue, 15, 180, 29, 0, // Skip to: 21620
/* 14016 */   MCD_OPC_CheckField, 0, 2, 0, 173, 29, 0, // Skip to: 21620
/* 14023 */   MCD_OPC_Decode, 203, 4, 135, 1, // Opcode: CMPB
/* 14028 */   MCD_OPC_FilterValue, 15, 163, 29, 0, // Skip to: 21620
/* 14033 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 14036 */   MCD_OPC_FilterValue, 0, 36, 0, 0, // Skip to: 14077
/* 14041 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 14044 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 14068
/* 14049 */   MCD_OPC_CheckField, 23, 3, 0, 140, 29, 0, // Skip to: 21620
/* 14056 */   MCD_OPC_CheckField, 11, 10, 0, 133, 29, 0, // Skip to: 21620
/* 14063 */   MCD_OPC_Decode, 150, 17, 128, 1, // Opcode: WAIT
/* 14068 */   MCD_OPC_FilterValue, 2, 123, 29, 0, // Skip to: 21620
/* 14073 */   MCD_OPC_Decode, 182, 9, 115, // Opcode: LWEPX
/* 14077 */   MCD_OPC_FilterValue, 1, 18, 0, 0, // Skip to: 14100
/* 14082 */   MCD_OPC_CheckField, 21, 5, 0, 107, 29, 0, // Skip to: 21620
/* 14089 */   MCD_OPC_CheckField, 0, 2, 2, 100, 29, 0, // Skip to: 21620
/* 14096 */   MCD_OPC_Decode, 254, 4, 120, // Opcode: DCBSTEP
/* 14100 */   MCD_OPC_FilterValue, 2, 11, 0, 0, // Skip to: 14116
/* 14105 */   MCD_OPC_CheckField, 0, 2, 2, 84, 29, 0, // Skip to: 21620
/* 14112 */   MCD_OPC_Decode, 215, 8, 115, // Opcode: LBEPX
/* 14116 */   MCD_OPC_FilterValue, 3, 18, 0, 0, // Skip to: 14139
/* 14121 */   MCD_OPC_CheckField, 21, 5, 0, 68, 29, 0, // Skip to: 21620
/* 14128 */   MCD_OPC_CheckField, 0, 2, 2, 61, 29, 0, // Skip to: 21620
/* 14135 */   MCD_OPC_Decode, 251, 4, 120, // Opcode: DCBFEP
/* 14139 */   MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 14155
/* 14144 */   MCD_OPC_CheckField, 0, 2, 2, 45, 29, 0, // Skip to: 21620
/* 14151 */   MCD_OPC_Decode, 147, 13, 115, // Opcode: STWEPX
/* 14155 */   MCD_OPC_FilterValue, 6, 11, 0, 0, // Skip to: 14171
/* 14160 */   MCD_OPC_CheckField, 0, 2, 2, 29, 29, 0, // Skip to: 21620
/* 14167 */   MCD_OPC_Decode, 213, 12, 115, // Opcode: STBEPX
/* 14171 */   MCD_OPC_FilterValue, 7, 12, 0, 0, // Skip to: 14188
/* 14176 */   MCD_OPC_CheckField, 0, 2, 2, 13, 29, 0, // Skip to: 21620
/* 14183 */   MCD_OPC_Decode, 130, 5, 142, 1, // Opcode: DCBTSTEP
/* 14188 */   MCD_OPC_FilterValue, 8, 11, 0, 0, // Skip to: 14204
/* 14193 */   MCD_OPC_CheckField, 0, 2, 2, 252, 28, 0, // Skip to: 21620
/* 14200 */   MCD_OPC_Decode, 142, 9, 115, // Opcode: LHEPX
/* 14204 */   MCD_OPC_FilterValue, 9, 12, 0, 0, // Skip to: 14221
/* 14209 */   MCD_OPC_CheckField, 0, 2, 2, 236, 28, 0, // Skip to: 21620
/* 14216 */   MCD_OPC_Decode, 128, 5, 142, 1, // Opcode: DCBTEP
/* 14221 */   MCD_OPC_FilterValue, 12, 11, 0, 0, // Skip to: 14237
/* 14226 */   MCD_OPC_CheckField, 0, 2, 2, 219, 28, 0, // Skip to: 21620
/* 14233 */   MCD_OPC_Decode, 248, 12, 115, // Opcode: STHEPX
/* 14237 */   MCD_OPC_FilterValue, 18, 12, 0, 0, // Skip to: 14254
/* 14242 */   MCD_OPC_CheckField, 0, 2, 2, 203, 28, 0, // Skip to: 21620
/* 14249 */   MCD_OPC_Decode, 248, 8, 129, 1, // Opcode: LFDEPX
/* 14254 */   MCD_OPC_FilterValue, 22, 12, 0, 0, // Skip to: 14271
/* 14259 */   MCD_OPC_CheckField, 0, 2, 2, 186, 28, 0, // Skip to: 21620
/* 14266 */   MCD_OPC_Decode, 234, 12, 129, 1, // Opcode: STFDEPX
/* 14271 */   MCD_OPC_FilterValue, 30, 18, 0, 0, // Skip to: 14294
/* 14276 */   MCD_OPC_CheckField, 21, 5, 0, 169, 28, 0, // Skip to: 21620
/* 14283 */   MCD_OPC_CheckField, 0, 2, 2, 162, 28, 0, // Skip to: 21620
/* 14290 */   MCD_OPC_Decode, 203, 8, 120, // Opcode: ICBIEP
/* 14294 */   MCD_OPC_FilterValue, 31, 153, 28, 0, // Skip to: 21620
/* 14299 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 14302 */   MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 14318
/* 14307 */   MCD_OPC_CheckField, 0, 2, 2, 138, 28, 0, // Skip to: 21620
/* 14314 */   MCD_OPC_Decode, 132, 5, 120, // Opcode: DCBZEP
/* 14318 */   MCD_OPC_FilterValue, 1, 129, 28, 0, // Skip to: 21620
/* 14323 */   MCD_OPC_CheckField, 0, 2, 2, 122, 28, 0, // Skip to: 21620
/* 14330 */   MCD_OPC_Decode, 134, 5, 120, // Opcode: DCBZLEP
/* 14334 */   MCD_OPC_FilterValue, 32, 5, 0, 0, // Skip to: 14344
/* 14339 */   MCD_OPC_Decode, 183, 9, 143, 1, // Opcode: LWZ
/* 14344 */   MCD_OPC_FilterValue, 33, 5, 0, 0, // Skip to: 14354
/* 14349 */   MCD_OPC_Decode, 186, 9, 143, 1, // Opcode: LWZU
/* 14354 */   MCD_OPC_FilterValue, 34, 5, 0, 0, // Skip to: 14364
/* 14359 */   MCD_OPC_Decode, 216, 8, 143, 1, // Opcode: LBZ
/* 14364 */   MCD_OPC_FilterValue, 35, 5, 0, 0, // Skip to: 14374
/* 14369 */   MCD_OPC_Decode, 219, 8, 143, 1, // Opcode: LBZU
/* 14374 */   MCD_OPC_FilterValue, 36, 5, 0, 0, // Skip to: 14384
/* 14379 */   MCD_OPC_Decode, 141, 13, 143, 1, // Opcode: STW
/* 14384 */   MCD_OPC_FilterValue, 37, 5, 0, 0, // Skip to: 14394
/* 14389 */   MCD_OPC_Decode, 148, 13, 143, 1, // Opcode: STWU
/* 14394 */   MCD_OPC_FilterValue, 38, 5, 0, 0, // Skip to: 14404
/* 14399 */   MCD_OPC_Decode, 209, 12, 143, 1, // Opcode: STB
/* 14404 */   MCD_OPC_FilterValue, 39, 5, 0, 0, // Skip to: 14414
/* 14409 */   MCD_OPC_Decode, 214, 12, 143, 1, // Opcode: STBU
/* 14414 */   MCD_OPC_FilterValue, 40, 5, 0, 0, // Skip to: 14424
/* 14419 */   MCD_OPC_Decode, 143, 9, 143, 1, // Opcode: LHZ
/* 14424 */   MCD_OPC_FilterValue, 41, 5, 0, 0, // Skip to: 14434
/* 14429 */   MCD_OPC_Decode, 146, 9, 143, 1, // Opcode: LHZU
/* 14434 */   MCD_OPC_FilterValue, 42, 5, 0, 0, // Skip to: 14444
/* 14439 */   MCD_OPC_Decode, 130, 9, 143, 1, // Opcode: LHA
/* 14444 */   MCD_OPC_FilterValue, 43, 5, 0, 0, // Skip to: 14454
/* 14449 */   MCD_OPC_Decode, 134, 9, 143, 1, // Opcode: LHAU
/* 14454 */   MCD_OPC_FilterValue, 44, 5, 0, 0, // Skip to: 14464
/* 14459 */   MCD_OPC_Decode, 243, 12, 143, 1, // Opcode: STH
/* 14464 */   MCD_OPC_FilterValue, 45, 5, 0, 0, // Skip to: 14474
/* 14469 */   MCD_OPC_Decode, 249, 12, 143, 1, // Opcode: STHU
/* 14474 */   MCD_OPC_FilterValue, 46, 5, 0, 0, // Skip to: 14484
/* 14479 */   MCD_OPC_Decode, 159, 9, 143, 1, // Opcode: LMW
/* 14484 */   MCD_OPC_FilterValue, 47, 5, 0, 0, // Skip to: 14494
/* 14489 */   MCD_OPC_Decode, 130, 13, 143, 1, // Opcode: STMW
/* 14494 */   MCD_OPC_FilterValue, 48, 5, 0, 0, // Skip to: 14504
/* 14499 */   MCD_OPC_Decode, 254, 8, 144, 1, // Opcode: LFS
/* 14504 */   MCD_OPC_FilterValue, 49, 5, 0, 0, // Skip to: 14514
/* 14509 */   MCD_OPC_Decode, 255, 8, 144, 1, // Opcode: LFSU
/* 14514 */   MCD_OPC_FilterValue, 50, 5, 0, 0, // Skip to: 14524
/* 14519 */   MCD_OPC_Decode, 247, 8, 145, 1, // Opcode: LFD
/* 14524 */   MCD_OPC_FilterValue, 51, 5, 0, 0, // Skip to: 14534
/* 14529 */   MCD_OPC_Decode, 249, 8, 145, 1, // Opcode: LFDU
/* 14534 */   MCD_OPC_FilterValue, 52, 5, 0, 0, // Skip to: 14544
/* 14539 */   MCD_OPC_Decode, 239, 12, 144, 1, // Opcode: STFS
/* 14544 */   MCD_OPC_FilterValue, 53, 5, 0, 0, // Skip to: 14554
/* 14549 */   MCD_OPC_Decode, 240, 12, 144, 1, // Opcode: STFSU
/* 14554 */   MCD_OPC_FilterValue, 54, 5, 0, 0, // Skip to: 14564
/* 14559 */   MCD_OPC_Decode, 233, 12, 145, 1, // Opcode: STFD
/* 14564 */   MCD_OPC_FilterValue, 55, 5, 0, 0, // Skip to: 14574
/* 14569 */   MCD_OPC_Decode, 235, 12, 145, 1, // Opcode: STFDU
/* 14574 */   MCD_OPC_FilterValue, 56, 12, 0, 0, // Skip to: 14591
/* 14579 */   MCD_OPC_CheckField, 0, 4, 0, 122, 27, 0, // Skip to: 21620
/* 14586 */   MCD_OPC_Decode, 160, 9, 146, 1, // Opcode: LQ
/* 14591 */   MCD_OPC_FilterValue, 57, 23, 0, 0, // Skip to: 14619
/* 14596 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 14599 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 14609
/* 14604 */   MCD_OPC_Decode, 197, 9, 147, 1, // Opcode: LXSD
/* 14609 */   MCD_OPC_FilterValue, 3, 94, 27, 0, // Skip to: 21620
/* 14614 */   MCD_OPC_Decode, 203, 9, 147, 1, // Opcode: LXSSP
/* 14619 */   MCD_OPC_FilterValue, 58, 33, 0, 0, // Skip to: 14657
/* 14624 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 14627 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 14637
/* 14632 */   MCD_OPC_Decode, 228, 8, 148, 1, // Opcode: LD
/* 14637 */   MCD_OPC_FilterValue, 1, 5, 0, 0, // Skip to: 14647
/* 14642 */   MCD_OPC_Decode, 235, 8, 148, 1, // Opcode: LDU
/* 14647 */   MCD_OPC_FilterValue, 2, 56, 27, 0, // Skip to: 21620
/* 14652 */   MCD_OPC_Decode, 172, 9, 148, 1, // Opcode: LWA
/* 14657 */   MCD_OPC_FilterValue, 59, 167, 4, 0, // Skip to: 15853
/* 14662 */   MCD_OPC_ExtractField, 3, 3,  // Inst{5-3} ...
/* 14665 */   MCD_OPC_FilterValue, 2, 203, 1, 0, // Skip to: 15129
/* 14670 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 14673 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 14697
/* 14678 */   MCD_OPC_CheckField, 21, 2, 0, 23, 27, 0, // Skip to: 21620
/* 14685 */   MCD_OPC_CheckField, 0, 1, 0, 16, 27, 0, // Skip to: 21620
/* 14692 */   MCD_OPC_Decode, 224, 18, 149, 1, // Opcode: XVI8GER4PP
/* 14697 */   MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 14721
/* 14702 */   MCD_OPC_CheckField, 21, 2, 0, 255, 26, 0, // Skip to: 21620
/* 14709 */   MCD_OPC_CheckField, 0, 1, 0, 248, 26, 0, // Skip to: 21620
/* 14716 */   MCD_OPC_Decode, 206, 18, 149, 1, // Opcode: XVF16GER2PP
/* 14721 */   MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 14745
/* 14726 */   MCD_OPC_CheckField, 21, 2, 0, 231, 26, 0, // Skip to: 21620
/* 14733 */   MCD_OPC_CheckField, 0, 1, 0, 224, 26, 0, // Skip to: 21620
/* 14740 */   MCD_OPC_Decode, 211, 18, 149, 1, // Opcode: XVF32GERPP
/* 14745 */   MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 14769
/* 14750 */   MCD_OPC_CheckField, 21, 2, 0, 207, 26, 0, // Skip to: 21620
/* 14757 */   MCD_OPC_CheckField, 0, 1, 0, 200, 26, 0, // Skip to: 21620
/* 14764 */   MCD_OPC_Decode, 222, 18, 149, 1, // Opcode: XVI4GER8PP
/* 14769 */   MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 14793
/* 14774 */   MCD_OPC_CheckField, 21, 2, 0, 183, 26, 0, // Skip to: 21620
/* 14781 */   MCD_OPC_CheckField, 0, 1, 0, 176, 26, 0, // Skip to: 21620
/* 14788 */   MCD_OPC_Decode, 220, 18, 149, 1, // Opcode: XVI16GER2SPP
/* 14793 */   MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 14817
/* 14798 */   MCD_OPC_CheckField, 21, 2, 0, 159, 26, 0, // Skip to: 21620
/* 14805 */   MCD_OPC_CheckField, 0, 1, 0, 152, 26, 0, // Skip to: 21620
/* 14812 */   MCD_OPC_Decode, 163, 18, 149, 1, // Opcode: XVBF16GER2PP
/* 14817 */   MCD_OPC_FilterValue, 7, 19, 0, 0, // Skip to: 14841
/* 14822 */   MCD_OPC_CheckField, 21, 2, 0, 135, 26, 0, // Skip to: 21620
/* 14829 */   MCD_OPC_CheckField, 0, 1, 0, 128, 26, 0, // Skip to: 21620
/* 14836 */   MCD_OPC_Decode, 216, 18, 150, 1, // Opcode: XVF64GERPP
/* 14841 */   MCD_OPC_FilterValue, 10, 19, 0, 0, // Skip to: 14865
/* 14846 */   MCD_OPC_CheckField, 21, 2, 0, 111, 26, 0, // Skip to: 21620
/* 14853 */   MCD_OPC_CheckField, 0, 1, 0, 104, 26, 0, // Skip to: 21620
/* 14860 */   MCD_OPC_Decode, 204, 18, 149, 1, // Opcode: XVF16GER2NP
/* 14865 */   MCD_OPC_FilterValue, 11, 19, 0, 0, // Skip to: 14889
/* 14870 */   MCD_OPC_CheckField, 21, 2, 0, 87, 26, 0, // Skip to: 21620
/* 14877 */   MCD_OPC_CheckField, 0, 1, 0, 80, 26, 0, // Skip to: 21620
/* 14884 */   MCD_OPC_Decode, 209, 18, 149, 1, // Opcode: XVF32GERNP
/* 14889 */   MCD_OPC_FilterValue, 14, 19, 0, 0, // Skip to: 14913
/* 14894 */   MCD_OPC_CheckField, 21, 2, 0, 63, 26, 0, // Skip to: 21620
/* 14901 */   MCD_OPC_CheckField, 0, 1, 0, 56, 26, 0, // Skip to: 21620
/* 14908 */   MCD_OPC_Decode, 161, 18, 149, 1, // Opcode: XVBF16GER2NP
/* 14913 */   MCD_OPC_FilterValue, 15, 19, 0, 0, // Skip to: 14937
/* 14918 */   MCD_OPC_CheckField, 21, 2, 0, 39, 26, 0, // Skip to: 21620
/* 14925 */   MCD_OPC_CheckField, 0, 1, 0, 32, 26, 0, // Skip to: 21620
/* 14932 */   MCD_OPC_Decode, 214, 18, 150, 1, // Opcode: XVF64GERNP
/* 14937 */   MCD_OPC_FilterValue, 18, 19, 0, 0, // Skip to: 14961
/* 14942 */   MCD_OPC_CheckField, 21, 2, 0, 15, 26, 0, // Skip to: 21620
/* 14949 */   MCD_OPC_CheckField, 0, 1, 0, 8, 26, 0, // Skip to: 21620
/* 14956 */   MCD_OPC_Decode, 205, 18, 149, 1, // Opcode: XVF16GER2PN
/* 14961 */   MCD_OPC_FilterValue, 19, 19, 0, 0, // Skip to: 14985
/* 14966 */   MCD_OPC_CheckField, 21, 2, 0, 247, 25, 0, // Skip to: 21620
/* 14973 */   MCD_OPC_CheckField, 0, 1, 0, 240, 25, 0, // Skip to: 21620
/* 14980 */   MCD_OPC_Decode, 210, 18, 149, 1, // Opcode: XVF32GERPN
/* 14985 */   MCD_OPC_FilterValue, 22, 19, 0, 0, // Skip to: 15009
/* 14990 */   MCD_OPC_CheckField, 21, 2, 0, 223, 25, 0, // Skip to: 21620
/* 14997 */   MCD_OPC_CheckField, 0, 1, 0, 216, 25, 0, // Skip to: 21620
/* 15004 */   MCD_OPC_Decode, 162, 18, 149, 1, // Opcode: XVBF16GER2PN
/* 15009 */   MCD_OPC_FilterValue, 23, 19, 0, 0, // Skip to: 15033
/* 15014 */   MCD_OPC_CheckField, 21, 2, 0, 199, 25, 0, // Skip to: 21620
/* 15021 */   MCD_OPC_CheckField, 0, 1, 0, 192, 25, 0, // Skip to: 21620
/* 15028 */   MCD_OPC_Decode, 215, 18, 150, 1, // Opcode: XVF64GERPN
/* 15033 */   MCD_OPC_FilterValue, 26, 19, 0, 0, // Skip to: 15057
/* 15038 */   MCD_OPC_CheckField, 21, 2, 0, 175, 25, 0, // Skip to: 21620
/* 15045 */   MCD_OPC_CheckField, 0, 1, 0, 168, 25, 0, // Skip to: 21620
/* 15052 */   MCD_OPC_Decode, 203, 18, 149, 1, // Opcode: XVF16GER2NN
/* 15057 */   MCD_OPC_FilterValue, 27, 19, 0, 0, // Skip to: 15081
/* 15062 */   MCD_OPC_CheckField, 21, 2, 0, 151, 25, 0, // Skip to: 21620
/* 15069 */   MCD_OPC_CheckField, 0, 1, 0, 144, 25, 0, // Skip to: 21620
/* 15076 */   MCD_OPC_Decode, 208, 18, 149, 1, // Opcode: XVF32GERNN
/* 15081 */   MCD_OPC_FilterValue, 30, 19, 0, 0, // Skip to: 15105
/* 15086 */   MCD_OPC_CheckField, 21, 2, 0, 127, 25, 0, // Skip to: 21620
/* 15093 */   MCD_OPC_CheckField, 0, 1, 0, 120, 25, 0, // Skip to: 21620
/* 15100 */   MCD_OPC_Decode, 160, 18, 149, 1, // Opcode: XVBF16GER2NN
/* 15105 */   MCD_OPC_FilterValue, 31, 110, 25, 0, // Skip to: 21620
/* 15110 */   MCD_OPC_CheckField, 21, 2, 0, 103, 25, 0, // Skip to: 21620
/* 15117 */   MCD_OPC_CheckField, 0, 1, 0, 96, 25, 0, // Skip to: 21620
/* 15124 */   MCD_OPC_Decode, 213, 18, 150, 1, // Opcode: XVF64GERNN
/* 15129 */   MCD_OPC_FilterValue, 3, 71, 1, 0, // Skip to: 15461
/* 15134 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 15137 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 15161
/* 15142 */   MCD_OPC_CheckField, 21, 2, 0, 71, 25, 0, // Skip to: 21620
/* 15149 */   MCD_OPC_CheckField, 0, 1, 0, 64, 25, 0, // Skip to: 21620
/* 15156 */   MCD_OPC_Decode, 223, 18, 151, 1, // Opcode: XVI8GER4
/* 15161 */   MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 15185
/* 15166 */   MCD_OPC_CheckField, 21, 2, 0, 47, 25, 0, // Skip to: 21620
/* 15173 */   MCD_OPC_CheckField, 0, 1, 0, 40, 25, 0, // Skip to: 21620
/* 15180 */   MCD_OPC_Decode, 202, 18, 151, 1, // Opcode: XVF16GER2
/* 15185 */   MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 15209
/* 15190 */   MCD_OPC_CheckField, 21, 2, 0, 23, 25, 0, // Skip to: 21620
/* 15197 */   MCD_OPC_CheckField, 0, 1, 0, 16, 25, 0, // Skip to: 21620
/* 15204 */   MCD_OPC_Decode, 207, 18, 151, 1, // Opcode: XVF32GER
/* 15209 */   MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 15233
/* 15214 */   MCD_OPC_CheckField, 21, 2, 0, 255, 24, 0, // Skip to: 21620
/* 15221 */   MCD_OPC_CheckField, 0, 1, 0, 248, 24, 0, // Skip to: 21620
/* 15228 */   MCD_OPC_Decode, 221, 18, 151, 1, // Opcode: XVI4GER8
/* 15233 */   MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 15257
/* 15238 */   MCD_OPC_CheckField, 21, 2, 0, 231, 24, 0, // Skip to: 21620
/* 15245 */   MCD_OPC_CheckField, 0, 1, 0, 224, 24, 0, // Skip to: 21620
/* 15252 */   MCD_OPC_Decode, 219, 18, 151, 1, // Opcode: XVI16GER2S
/* 15257 */   MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 15281
/* 15262 */   MCD_OPC_CheckField, 21, 2, 0, 207, 24, 0, // Skip to: 21620
/* 15269 */   MCD_OPC_CheckField, 0, 1, 0, 200, 24, 0, // Skip to: 21620
/* 15276 */   MCD_OPC_Decode, 159, 18, 151, 1, // Opcode: XVBF16GER2
/* 15281 */   MCD_OPC_FilterValue, 7, 19, 0, 0, // Skip to: 15305
/* 15286 */   MCD_OPC_CheckField, 21, 2, 0, 183, 24, 0, // Skip to: 21620
/* 15293 */   MCD_OPC_CheckField, 0, 1, 0, 176, 24, 0, // Skip to: 21620
/* 15300 */   MCD_OPC_Decode, 212, 18, 152, 1, // Opcode: XVF64GER
/* 15305 */   MCD_OPC_FilterValue, 9, 19, 0, 0, // Skip to: 15329
/* 15310 */   MCD_OPC_CheckField, 21, 2, 0, 159, 24, 0, // Skip to: 21620
/* 15317 */   MCD_OPC_CheckField, 0, 1, 0, 152, 24, 0, // Skip to: 21620
/* 15324 */   MCD_OPC_Decode, 217, 18, 151, 1, // Opcode: XVI16GER2
/* 15329 */   MCD_OPC_FilterValue, 12, 19, 0, 0, // Skip to: 15353
/* 15334 */   MCD_OPC_CheckField, 21, 2, 0, 135, 24, 0, // Skip to: 21620
/* 15341 */   MCD_OPC_CheckField, 0, 1, 0, 128, 24, 0, // Skip to: 21620
/* 15348 */   MCD_OPC_Decode, 225, 18, 149, 1, // Opcode: XVI8GER4SPP
/* 15353 */   MCD_OPC_FilterValue, 13, 19, 0, 0, // Skip to: 15377
/* 15358 */   MCD_OPC_CheckField, 21, 2, 0, 111, 24, 0, // Skip to: 21620
/* 15365 */   MCD_OPC_CheckField, 0, 1, 0, 104, 24, 0, // Skip to: 21620
/* 15372 */   MCD_OPC_Decode, 218, 18, 149, 1, // Opcode: XVI16GER2PP
/* 15377 */   MCD_OPC_FilterValue, 26, 37, 0, 0, // Skip to: 15419
/* 15382 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15385 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 15402
/* 15390 */   MCD_OPC_CheckField, 16, 5, 0, 79, 24, 0, // Skip to: 21620
/* 15397 */   MCD_OPC_Decode, 212, 7, 153, 1, // Opcode: FCFIDS
/* 15402 */   MCD_OPC_FilterValue, 5, 69, 24, 0, // Skip to: 21620
/* 15407 */   MCD_OPC_CheckField, 16, 5, 0, 62, 24, 0, // Skip to: 21620
/* 15414 */   MCD_OPC_Decode, 213, 7, 153, 1, // Opcode: FCFIDS_rec
/* 15419 */   MCD_OPC_FilterValue, 30, 52, 24, 0, // Skip to: 21620
/* 15424 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15427 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 15444
/* 15432 */   MCD_OPC_CheckField, 16, 5, 0, 37, 24, 0, // Skip to: 21620
/* 15439 */   MCD_OPC_Decode, 215, 7, 153, 1, // Opcode: FCFIDUS
/* 15444 */   MCD_OPC_FilterValue, 5, 27, 24, 0, // Skip to: 21620
/* 15449 */   MCD_OPC_CheckField, 16, 5, 0, 20, 24, 0, // Skip to: 21620
/* 15456 */   MCD_OPC_Decode, 216, 7, 153, 1, // Opcode: FCFIDUS_rec
/* 15461 */   MCD_OPC_FilterValue, 4, 37, 0, 0, // Skip to: 15503
/* 15466 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15469 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 15486
/* 15474 */   MCD_OPC_CheckField, 6, 5, 0, 251, 23, 0, // Skip to: 21620
/* 15481 */   MCD_OPC_Decode, 244, 7, 154, 1, // Opcode: FDIVS
/* 15486 */   MCD_OPC_FilterValue, 5, 241, 23, 0, // Skip to: 21620
/* 15491 */   MCD_OPC_CheckField, 6, 5, 0, 234, 23, 0, // Skip to: 21620
/* 15498 */   MCD_OPC_Decode, 245, 7, 154, 1, // Opcode: FDIVS_rec
/* 15503 */   MCD_OPC_FilterValue, 5, 119, 0, 0, // Skip to: 15627
/* 15508 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15511 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 15528
/* 15516 */   MCD_OPC_CheckField, 6, 5, 0, 209, 23, 0, // Skip to: 21620
/* 15523 */   MCD_OPC_Decode, 184, 8, 154, 1, // Opcode: FSUBS
/* 15528 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 15545
/* 15533 */   MCD_OPC_CheckField, 6, 5, 0, 192, 23, 0, // Skip to: 21620
/* 15540 */   MCD_OPC_Decode, 185, 8, 154, 1, // Opcode: FSUBS_rec
/* 15545 */   MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 15562
/* 15550 */   MCD_OPC_CheckField, 6, 5, 0, 175, 23, 0, // Skip to: 21620
/* 15557 */   MCD_OPC_Decode, 207, 7, 154, 1, // Opcode: FADDS
/* 15562 */   MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 15579
/* 15567 */   MCD_OPC_CheckField, 6, 5, 0, 158, 23, 0, // Skip to: 21620
/* 15574 */   MCD_OPC_Decode, 208, 7, 154, 1, // Opcode: FADDS_rec
/* 15579 */   MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 15603
/* 15584 */   MCD_OPC_CheckField, 16, 5, 0, 141, 23, 0, // Skip to: 21620
/* 15591 */   MCD_OPC_CheckField, 6, 5, 0, 134, 23, 0, // Skip to: 21620
/* 15598 */   MCD_OPC_Decode, 180, 8, 155, 1, // Opcode: FSQRTS
/* 15603 */   MCD_OPC_FilterValue, 5, 124, 23, 0, // Skip to: 21620
/* 15608 */   MCD_OPC_CheckField, 16, 5, 0, 117, 23, 0, // Skip to: 21620
/* 15615 */   MCD_OPC_CheckField, 6, 5, 0, 110, 23, 0, // Skip to: 21620
/* 15622 */   MCD_OPC_Decode, 181, 8, 155, 1, // Opcode: FSQRTS_rec
/* 15627 */   MCD_OPC_FilterValue, 6, 133, 0, 0, // Skip to: 15765
/* 15632 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15635 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 15659
/* 15640 */   MCD_OPC_CheckField, 16, 5, 0, 85, 23, 0, // Skip to: 21620
/* 15647 */   MCD_OPC_CheckField, 6, 5, 0, 78, 23, 0, // Skip to: 21620
/* 15654 */   MCD_OPC_Decode, 150, 8, 155, 1, // Opcode: FRES
/* 15659 */   MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 15683
/* 15664 */   MCD_OPC_CheckField, 16, 5, 0, 61, 23, 0, // Skip to: 21620
/* 15671 */   MCD_OPC_CheckField, 6, 5, 0, 54, 23, 0, // Skip to: 21620
/* 15678 */   MCD_OPC_Decode, 151, 8, 155, 1, // Opcode: FRES_rec
/* 15683 */   MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 15700
/* 15688 */   MCD_OPC_CheckField, 11, 5, 0, 37, 23, 0, // Skip to: 21620
/* 15695 */   MCD_OPC_Decode, 130, 8, 156, 1, // Opcode: FMULS
/* 15700 */   MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 15717
/* 15705 */   MCD_OPC_CheckField, 11, 5, 0, 20, 23, 0, // Skip to: 21620
/* 15712 */   MCD_OPC_Decode, 131, 8, 156, 1, // Opcode: FMULS_rec
/* 15717 */   MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 15741
/* 15722 */   MCD_OPC_CheckField, 16, 5, 0, 3, 23, 0, // Skip to: 21620
/* 15729 */   MCD_OPC_CheckField, 6, 5, 0, 252, 22, 0, // Skip to: 21620
/* 15736 */   MCD_OPC_Decode, 172, 8, 155, 1, // Opcode: FRSQRTES
/* 15741 */   MCD_OPC_FilterValue, 5, 242, 22, 0, // Skip to: 21620
/* 15746 */   MCD_OPC_CheckField, 16, 5, 0, 235, 22, 0, // Skip to: 21620
/* 15753 */   MCD_OPC_CheckField, 6, 5, 0, 228, 22, 0, // Skip to: 21620
/* 15760 */   MCD_OPC_Decode, 173, 8, 155, 1, // Opcode: FRSQRTES_rec
/* 15765 */   MCD_OPC_FilterValue, 7, 218, 22, 0, // Skip to: 21620
/* 15770 */   MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 15773 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15783
/* 15778 */   MCD_OPC_Decode, 254, 7, 157, 1, // Opcode: FMSUBS
/* 15783 */   MCD_OPC_FilterValue, 1, 5, 0, 0, // Skip to: 15793
/* 15788 */   MCD_OPC_Decode, 255, 7, 157, 1, // Opcode: FMSUBS_rec
/* 15793 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 15803
/* 15798 */   MCD_OPC_Decode, 248, 7, 157, 1, // Opcode: FMADDS
/* 15803 */   MCD_OPC_FilterValue, 3, 5, 0, 0, // Skip to: 15813
/* 15808 */   MCD_OPC_Decode, 249, 7, 157, 1, // Opcode: FMADDS_rec
/* 15813 */   MCD_OPC_FilterValue, 4, 5, 0, 0, // Skip to: 15823
/* 15818 */   MCD_OPC_Decode, 146, 8, 157, 1, // Opcode: FNMSUBS
/* 15823 */   MCD_OPC_FilterValue, 5, 5, 0, 0, // Skip to: 15833
/* 15828 */   MCD_OPC_Decode, 147, 8, 157, 1, // Opcode: FNMSUBS_rec
/* 15833 */   MCD_OPC_FilterValue, 6, 5, 0, 0, // Skip to: 15843
/* 15838 */   MCD_OPC_Decode, 142, 8, 157, 1, // Opcode: FNMADDS
/* 15843 */   MCD_OPC_FilterValue, 7, 140, 22, 0, // Skip to: 21620
/* 15848 */   MCD_OPC_Decode, 143, 8, 157, 1, // Opcode: FNMADDS_rec
/* 15853 */   MCD_OPC_FilterValue, 60, 94, 14, 0, // Skip to: 19536
/* 15858 */   MCD_OPC_ExtractField, 4, 2,  // Inst{5-4} ...
/* 15861 */   MCD_OPC_FilterValue, 0, 120, 3, 0, // Skip to: 16754
/* 15866 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 15869 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 15897
/* 15874 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 15877 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15887
/* 15882 */   MCD_OPC_Decode, 166, 17, 158, 1, // Opcode: XSADDSP
/* 15887 */   MCD_OPC_FilterValue, 1, 96, 22, 0, // Skip to: 21620
/* 15892 */   MCD_OPC_Decode, 216, 17, 159, 1, // Opcode: XSMADDASP
/* 15897 */   MCD_OPC_FilterValue, 1, 23, 0, 0, // Skip to: 15925
/* 15902 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 15905 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15915
/* 15910 */   MCD_OPC_Decode, 145, 18, 158, 1, // Opcode: XSSUBSP
/* 15915 */   MCD_OPC_FilterValue, 1, 68, 22, 0, // Skip to: 21620
/* 15920 */   MCD_OPC_Decode, 218, 17, 159, 1, // Opcode: XSMADDMSP
/* 15925 */   MCD_OPC_FilterValue, 2, 23, 0, 0, // Skip to: 15953
/* 15930 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 15933 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15943
/* 15938 */   MCD_OPC_Decode, 236, 17, 158, 1, // Opcode: XSMULSP
/* 15943 */   MCD_OPC_FilterValue, 1, 40, 22, 0, // Skip to: 21620
/* 15948 */   MCD_OPC_Decode, 228, 17, 159, 1, // Opcode: XSMSUBASP
/* 15953 */   MCD_OPC_FilterValue, 3, 23, 0, 0, // Skip to: 15981
/* 15958 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 15961 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15971
/* 15966 */   MCD_OPC_Decode, 212, 17, 158, 1, // Opcode: XSDIVSP
/* 15971 */   MCD_OPC_FilterValue, 1, 12, 22, 0, // Skip to: 21620
/* 15976 */   MCD_OPC_Decode, 230, 17, 159, 1, // Opcode: XSMSUBMSP
/* 15981 */   MCD_OPC_FilterValue, 4, 23, 0, 0, // Skip to: 16009
/* 15986 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 15989 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 15999
/* 15994 */   MCD_OPC_Decode, 163, 17, 160, 1, // Opcode: XSADDDP
/* 15999 */   MCD_OPC_FilterValue, 1, 240, 21, 0, // Skip to: 21620
/* 16004 */   MCD_OPC_Decode, 215, 17, 161, 1, // Opcode: XSMADDADP
/* 16009 */   MCD_OPC_FilterValue, 5, 23, 0, 0, // Skip to: 16037
/* 16014 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16017 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16027
/* 16022 */   MCD_OPC_Decode, 142, 18, 160, 1, // Opcode: XSSUBDP
/* 16027 */   MCD_OPC_FilterValue, 1, 212, 21, 0, // Skip to: 21620
/* 16032 */   MCD_OPC_Decode, 217, 17, 161, 1, // Opcode: XSMADDMDP
/* 16037 */   MCD_OPC_FilterValue, 6, 23, 0, 0, // Skip to: 16065
/* 16042 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16045 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16055
/* 16050 */   MCD_OPC_Decode, 233, 17, 160, 1, // Opcode: XSMULDP
/* 16055 */   MCD_OPC_FilterValue, 1, 184, 21, 0, // Skip to: 21620
/* 16060 */   MCD_OPC_Decode, 227, 17, 161, 1, // Opcode: XSMSUBADP
/* 16065 */   MCD_OPC_FilterValue, 7, 23, 0, 0, // Skip to: 16093
/* 16070 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16073 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16083
/* 16078 */   MCD_OPC_Decode, 209, 17, 160, 1, // Opcode: XSDIVDP
/* 16083 */   MCD_OPC_FilterValue, 1, 156, 21, 0, // Skip to: 21620
/* 16088 */   MCD_OPC_Decode, 229, 17, 161, 1, // Opcode: XSMSUBMDP
/* 16093 */   MCD_OPC_FilterValue, 8, 23, 0, 0, // Skip to: 16121
/* 16098 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16101 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16111
/* 16106 */   MCD_OPC_Decode, 158, 18, 162, 1, // Opcode: XVADDSP
/* 16111 */   MCD_OPC_FilterValue, 1, 128, 21, 0, // Skip to: 21620
/* 16116 */   MCD_OPC_Decode, 229, 18, 163, 1, // Opcode: XVMADDASP
/* 16121 */   MCD_OPC_FilterValue, 9, 23, 0, 0, // Skip to: 16149
/* 16126 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16129 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16139
/* 16134 */   MCD_OPC_Decode, 143, 19, 162, 1, // Opcode: XVSUBSP
/* 16139 */   MCD_OPC_FilterValue, 1, 100, 21, 0, // Skip to: 21620
/* 16144 */   MCD_OPC_Decode, 231, 18, 163, 1, // Opcode: XVMADDMSP
/* 16149 */   MCD_OPC_FilterValue, 10, 23, 0, 0, // Skip to: 16177
/* 16154 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16157 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16167
/* 16162 */   MCD_OPC_Decode, 241, 18, 162, 1, // Opcode: XVMULSP
/* 16167 */   MCD_OPC_FilterValue, 1, 72, 21, 0, // Skip to: 21620
/* 16172 */   MCD_OPC_Decode, 237, 18, 163, 1, // Opcode: XVMSUBASP
/* 16177 */   MCD_OPC_FilterValue, 11, 23, 0, 0, // Skip to: 16205
/* 16182 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16185 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16195
/* 16190 */   MCD_OPC_Decode, 201, 18, 162, 1, // Opcode: XVDIVSP
/* 16195 */   MCD_OPC_FilterValue, 1, 44, 21, 0, // Skip to: 21620
/* 16200 */   MCD_OPC_Decode, 239, 18, 163, 1, // Opcode: XVMSUBMSP
/* 16205 */   MCD_OPC_FilterValue, 12, 23, 0, 0, // Skip to: 16233
/* 16210 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16213 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16223
/* 16218 */   MCD_OPC_Decode, 157, 18, 162, 1, // Opcode: XVADDDP
/* 16223 */   MCD_OPC_FilterValue, 1, 16, 21, 0, // Skip to: 21620
/* 16228 */   MCD_OPC_Decode, 228, 18, 163, 1, // Opcode: XVMADDADP
/* 16233 */   MCD_OPC_FilterValue, 13, 23, 0, 0, // Skip to: 16261
/* 16238 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16241 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16251
/* 16246 */   MCD_OPC_Decode, 142, 19, 162, 1, // Opcode: XVSUBDP
/* 16251 */   MCD_OPC_FilterValue, 1, 244, 20, 0, // Skip to: 21620
/* 16256 */   MCD_OPC_Decode, 230, 18, 163, 1, // Opcode: XVMADDMDP
/* 16261 */   MCD_OPC_FilterValue, 14, 23, 0, 0, // Skip to: 16289
/* 16266 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16269 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16279
/* 16274 */   MCD_OPC_Decode, 240, 18, 162, 1, // Opcode: XVMULDP
/* 16279 */   MCD_OPC_FilterValue, 1, 216, 20, 0, // Skip to: 21620
/* 16284 */   MCD_OPC_Decode, 236, 18, 163, 1, // Opcode: XVMSUBADP
/* 16289 */   MCD_OPC_FilterValue, 15, 23, 0, 0, // Skip to: 16317
/* 16294 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16297 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16307
/* 16302 */   MCD_OPC_Decode, 200, 18, 162, 1, // Opcode: XVDIVDP
/* 16307 */   MCD_OPC_FilterValue, 1, 188, 20, 0, // Skip to: 21620
/* 16312 */   MCD_OPC_Decode, 238, 18, 163, 1, // Opcode: XVMSUBMDP
/* 16317 */   MCD_OPC_FilterValue, 16, 23, 0, 0, // Skip to: 16345
/* 16322 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16325 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16335
/* 16330 */   MCD_OPC_Decode, 221, 17, 160, 1, // Opcode: XSMAXCDP
/* 16335 */   MCD_OPC_FilterValue, 1, 160, 20, 0, // Skip to: 21620
/* 16340 */   MCD_OPC_Decode, 242, 17, 159, 1, // Opcode: XSNMADDASP
/* 16345 */   MCD_OPC_FilterValue, 17, 23, 0, 0, // Skip to: 16373
/* 16350 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16353 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16363
/* 16358 */   MCD_OPC_Decode, 224, 17, 160, 1, // Opcode: XSMINCDP
/* 16363 */   MCD_OPC_FilterValue, 1, 132, 20, 0, // Skip to: 21620
/* 16368 */   MCD_OPC_Decode, 244, 17, 159, 1, // Opcode: XSNMADDMSP
/* 16373 */   MCD_OPC_FilterValue, 18, 23, 0, 0, // Skip to: 16401
/* 16378 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16381 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16391
/* 16386 */   MCD_OPC_Decode, 223, 17, 164, 1, // Opcode: XSMAXJDP
/* 16391 */   MCD_OPC_FilterValue, 1, 104, 20, 0, // Skip to: 21620
/* 16396 */   MCD_OPC_Decode, 248, 17, 159, 1, // Opcode: XSNMSUBASP
/* 16401 */   MCD_OPC_FilterValue, 19, 23, 0, 0, // Skip to: 16429
/* 16406 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16409 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16419
/* 16414 */   MCD_OPC_Decode, 226, 17, 164, 1, // Opcode: XSMINJDP
/* 16419 */   MCD_OPC_FilterValue, 1, 76, 20, 0, // Skip to: 21620
/* 16424 */   MCD_OPC_Decode, 250, 17, 159, 1, // Opcode: XSNMSUBMSP
/* 16429 */   MCD_OPC_FilterValue, 20, 23, 0, 0, // Skip to: 16457
/* 16434 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16437 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16447
/* 16442 */   MCD_OPC_Decode, 222, 17, 160, 1, // Opcode: XSMAXDP
/* 16447 */   MCD_OPC_FilterValue, 1, 48, 20, 0, // Skip to: 21620
/* 16452 */   MCD_OPC_Decode, 241, 17, 161, 1, // Opcode: XSNMADDADP
/* 16457 */   MCD_OPC_FilterValue, 21, 23, 0, 0, // Skip to: 16485
/* 16462 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16465 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16475
/* 16470 */   MCD_OPC_Decode, 225, 17, 160, 1, // Opcode: XSMINDP
/* 16475 */   MCD_OPC_FilterValue, 1, 20, 20, 0, // Skip to: 21620
/* 16480 */   MCD_OPC_Decode, 243, 17, 161, 1, // Opcode: XSNMADDMDP
/* 16485 */   MCD_OPC_FilterValue, 22, 23, 0, 0, // Skip to: 16513
/* 16490 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16493 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16503
/* 16498 */   MCD_OPC_Decode, 176, 17, 160, 1, // Opcode: XSCPSGNDP
/* 16503 */   MCD_OPC_FilterValue, 1, 248, 19, 0, // Skip to: 21620
/* 16508 */   MCD_OPC_Decode, 247, 17, 161, 1, // Opcode: XSNMSUBADP
/* 16513 */   MCD_OPC_FilterValue, 23, 12, 0, 0, // Skip to: 16530
/* 16518 */   MCD_OPC_CheckField, 3, 1, 1, 231, 19, 0, // Skip to: 21620
/* 16525 */   MCD_OPC_Decode, 249, 17, 161, 1, // Opcode: XSNMSUBMDP
/* 16530 */   MCD_OPC_FilterValue, 24, 23, 0, 0, // Skip to: 16558
/* 16535 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16538 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16548
/* 16543 */   MCD_OPC_Decode, 233, 18, 162, 1, // Opcode: XVMAXSP
/* 16548 */   MCD_OPC_FilterValue, 1, 203, 19, 0, // Skip to: 21620
/* 16553 */   MCD_OPC_Decode, 247, 18, 163, 1, // Opcode: XVNMADDASP
/* 16558 */   MCD_OPC_FilterValue, 25, 23, 0, 0, // Skip to: 16586
/* 16563 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16566 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16576
/* 16571 */   MCD_OPC_Decode, 235, 18, 162, 1, // Opcode: XVMINSP
/* 16576 */   MCD_OPC_FilterValue, 1, 175, 19, 0, // Skip to: 21620
/* 16581 */   MCD_OPC_Decode, 249, 18, 163, 1, // Opcode: XVNMADDMSP
/* 16586 */   MCD_OPC_FilterValue, 26, 23, 0, 0, // Skip to: 16614
/* 16591 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16594 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16604
/* 16599 */   MCD_OPC_Decode, 177, 18, 162, 1, // Opcode: XVCPSGNSP
/* 16604 */   MCD_OPC_FilterValue, 1, 147, 19, 0, // Skip to: 21620
/* 16609 */   MCD_OPC_Decode, 251, 18, 163, 1, // Opcode: XVNMSUBASP
/* 16614 */   MCD_OPC_FilterValue, 27, 23, 0, 0, // Skip to: 16642
/* 16619 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16622 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16632
/* 16627 */   MCD_OPC_Decode, 227, 18, 162, 1, // Opcode: XVIEXPSP
/* 16632 */   MCD_OPC_FilterValue, 1, 119, 19, 0, // Skip to: 21620
/* 16637 */   MCD_OPC_Decode, 253, 18, 163, 1, // Opcode: XVNMSUBMSP
/* 16642 */   MCD_OPC_FilterValue, 28, 23, 0, 0, // Skip to: 16670
/* 16647 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16650 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16660
/* 16655 */   MCD_OPC_Decode, 232, 18, 162, 1, // Opcode: XVMAXDP
/* 16660 */   MCD_OPC_FilterValue, 1, 91, 19, 0, // Skip to: 21620
/* 16665 */   MCD_OPC_Decode, 246, 18, 163, 1, // Opcode: XVNMADDADP
/* 16670 */   MCD_OPC_FilterValue, 29, 23, 0, 0, // Skip to: 16698
/* 16675 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16678 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16688
/* 16683 */   MCD_OPC_Decode, 234, 18, 162, 1, // Opcode: XVMINDP
/* 16688 */   MCD_OPC_FilterValue, 1, 63, 19, 0, // Skip to: 21620
/* 16693 */   MCD_OPC_Decode, 248, 18, 163, 1, // Opcode: XVNMADDMDP
/* 16698 */   MCD_OPC_FilterValue, 30, 23, 0, 0, // Skip to: 16726
/* 16703 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16706 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16716
/* 16711 */   MCD_OPC_Decode, 176, 18, 162, 1, // Opcode: XVCPSGNDP
/* 16716 */   MCD_OPC_FilterValue, 1, 35, 19, 0, // Skip to: 21620
/* 16721 */   MCD_OPC_Decode, 250, 18, 163, 1, // Opcode: XVNMSUBADP
/* 16726 */   MCD_OPC_FilterValue, 31, 25, 19, 0, // Skip to: 21620
/* 16731 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16734 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16744
/* 16739 */   MCD_OPC_Decode, 226, 18, 162, 1, // Opcode: XVIEXPDP
/* 16744 */   MCD_OPC_FilterValue, 1, 7, 19, 0, // Skip to: 21620
/* 16749 */   MCD_OPC_Decode, 252, 18, 163, 1, // Opcode: XVNMSUBMDP
/* 16754 */   MCD_OPC_FilterValue, 1, 97, 2, 0, // Skip to: 17368
/* 16759 */   MCD_OPC_ExtractField, 6, 2,  // Inst{7-6} ...
/* 16762 */   MCD_OPC_FilterValue, 0, 131, 0, 0, // Skip to: 16898
/* 16767 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16770 */   MCD_OPC_FilterValue, 0, 41, 0, 0, // Skip to: 16816
/* 16775 */   MCD_OPC_ExtractField, 10, 1,  // Inst{10} ...
/* 16778 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16788
/* 16783 */   MCD_OPC_Decode, 194, 19, 165, 1, // Opcode: XXSLDWI
/* 16788 */   MCD_OPC_FilterValue, 1, 219, 18, 0, // Skip to: 21620
/* 16793 */   MCD_OPC_ExtractField, 8, 2,  // Inst{9-8} ...
/* 16796 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16806
/* 16801 */   MCD_OPC_Decode, 170, 19, 162, 1, // Opcode: XXLAND
/* 16806 */   MCD_OPC_FilterValue, 1, 201, 18, 0, // Skip to: 21620
/* 16811 */   MCD_OPC_Decode, 175, 19, 162, 1, // Opcode: XXLNOR
/* 16816 */   MCD_OPC_FilterValue, 1, 191, 18, 0, // Skip to: 21620
/* 16821 */   MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 16824 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16834
/* 16829 */   MCD_OPC_Decode, 167, 17, 164, 1, // Opcode: XSCMPEQDP
/* 16834 */   MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 16858
/* 16839 */   MCD_OPC_CheckField, 21, 2, 0, 166, 18, 0, // Skip to: 21620
/* 16846 */   MCD_OPC_CheckField, 0, 1, 0, 159, 18, 0, // Skip to: 21620
/* 16853 */   MCD_OPC_Decode, 174, 17, 166, 1, // Opcode: XSCMPUDP
/* 16858 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 16868
/* 16863 */   MCD_OPC_Decode, 166, 18, 162, 1, // Opcode: XVCMPEQSP
/* 16868 */   MCD_OPC_FilterValue, 3, 5, 0, 0, // Skip to: 16878
/* 16873 */   MCD_OPC_Decode, 164, 18, 162, 1, // Opcode: XVCMPEQDP
/* 16878 */   MCD_OPC_FilterValue, 6, 5, 0, 0, // Skip to: 16888
/* 16883 */   MCD_OPC_Decode, 167, 18, 162, 1, // Opcode: XVCMPEQSP_rec
/* 16888 */   MCD_OPC_FilterValue, 7, 119, 18, 0, // Skip to: 21620
/* 16893 */   MCD_OPC_Decode, 165, 18, 162, 1, // Opcode: XVCMPEQDP_rec
/* 16898 */   MCD_OPC_FilterValue, 1, 131, 0, 0, // Skip to: 17034
/* 16903 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 16906 */   MCD_OPC_FilterValue, 0, 41, 0, 0, // Skip to: 16952
/* 16911 */   MCD_OPC_ExtractField, 10, 1,  // Inst{10} ...
/* 16914 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16924
/* 16919 */   MCD_OPC_Decode, 188, 19, 165, 1, // Opcode: XXPERMDI
/* 16924 */   MCD_OPC_FilterValue, 1, 83, 18, 0, // Skip to: 21620
/* 16929 */   MCD_OPC_ExtractField, 8, 2,  // Inst{9-8} ...
/* 16932 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16942
/* 16937 */   MCD_OPC_Decode, 171, 19, 162, 1, // Opcode: XXLANDC
/* 16942 */   MCD_OPC_FilterValue, 1, 65, 18, 0, // Skip to: 21620
/* 16947 */   MCD_OPC_Decode, 177, 19, 162, 1, // Opcode: XXLORC
/* 16952 */   MCD_OPC_FilterValue, 1, 55, 18, 0, // Skip to: 21620
/* 16957 */   MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 16960 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 16970
/* 16965 */   MCD_OPC_Decode, 171, 17, 164, 1, // Opcode: XSCMPGTDP
/* 16970 */   MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 16994
/* 16975 */   MCD_OPC_CheckField, 21, 2, 0, 30, 18, 0, // Skip to: 21620
/* 16982 */   MCD_OPC_CheckField, 0, 1, 0, 23, 18, 0, // Skip to: 21620
/* 16989 */   MCD_OPC_Decode, 172, 17, 166, 1, // Opcode: XSCMPODP
/* 16994 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 17004
/* 16999 */   MCD_OPC_Decode, 174, 18, 162, 1, // Opcode: XVCMPGTSP
/* 17004 */   MCD_OPC_FilterValue, 3, 5, 0, 0, // Skip to: 17014
/* 17009 */   MCD_OPC_Decode, 172, 18, 162, 1, // Opcode: XVCMPGTDP
/* 17014 */   MCD_OPC_FilterValue, 6, 5, 0, 0, // Skip to: 17024
/* 17019 */   MCD_OPC_Decode, 175, 18, 162, 1, // Opcode: XVCMPGTSP_rec
/* 17024 */   MCD_OPC_FilterValue, 7, 239, 17, 0, // Skip to: 21620
/* 17029 */   MCD_OPC_Decode, 173, 18, 162, 1, // Opcode: XVCMPGTDP_rec
/* 17034 */   MCD_OPC_FilterValue, 2, 186, 0, 0, // Skip to: 17225
/* 17039 */   MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 17042 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 17070
/* 17047 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 17050 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 17060
/* 17055 */   MCD_OPC_Decode, 184, 19, 162, 1, // Opcode: XXMRGHW
/* 17060 */   MCD_OPC_FilterValue, 1, 203, 17, 0, // Skip to: 21620
/* 17065 */   MCD_OPC_Decode, 170, 17, 164, 1, // Opcode: XSCMPGEDP
/* 17070 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 17087
/* 17075 */   MCD_OPC_CheckField, 3, 1, 0, 186, 17, 0, // Skip to: 21620
/* 17082 */   MCD_OPC_Decode, 185, 19, 162, 1, // Opcode: XXMRGLW
/* 17087 */   MCD_OPC_FilterValue, 2, 48, 0, 0, // Skip to: 17140
/* 17092 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 17095 */   MCD_OPC_FilterValue, 0, 30, 0, 0, // Skip to: 17130
/* 17100 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 17103 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17120
/* 17108 */   MCD_OPC_CheckField, 18, 3, 0, 153, 17, 0, // Skip to: 21620
/* 17115 */   MCD_OPC_Decode, 200, 19, 167, 1, // Opcode: XXSPLTW
/* 17120 */   MCD_OPC_FilterValue, 1, 143, 17, 0, // Skip to: 21620
/* 17125 */   MCD_OPC_Decode, 164, 19, 168, 1, // Opcode: XXEXTRACTUW
/* 17130 */   MCD_OPC_FilterValue, 1, 133, 17, 0, // Skip to: 21620
/* 17135 */   MCD_OPC_Decode, 170, 18, 162, 1, // Opcode: XVCMPGESP
/* 17140 */   MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 17157
/* 17145 */   MCD_OPC_CheckField, 3, 1, 1, 116, 17, 0, // Skip to: 21620
/* 17152 */   MCD_OPC_Decode, 168, 18, 162, 1, // Opcode: XVCMPGEDP
/* 17157 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 17174
/* 17162 */   MCD_OPC_CheckField, 3, 1, 0, 99, 17, 0, // Skip to: 21620
/* 17169 */   MCD_OPC_Decode, 176, 19, 162, 1, // Opcode: XXLOR
/* 17174 */   MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 17191
/* 17179 */   MCD_OPC_CheckField, 3, 1, 0, 82, 17, 0, // Skip to: 21620
/* 17186 */   MCD_OPC_Decode, 174, 19, 162, 1, // Opcode: XXLNAND
/* 17191 */   MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 17208
/* 17196 */   MCD_OPC_CheckField, 3, 1, 1, 65, 17, 0, // Skip to: 21620
/* 17203 */   MCD_OPC_Decode, 171, 18, 162, 1, // Opcode: XVCMPGESP_rec
/* 17208 */   MCD_OPC_FilterValue, 7, 55, 17, 0, // Skip to: 21620
/* 17213 */   MCD_OPC_CheckField, 3, 1, 1, 48, 17, 0, // Skip to: 21620
/* 17220 */   MCD_OPC_Decode, 169, 18, 162, 1, // Opcode: XVCMPGEDP_rec
/* 17225 */   MCD_OPC_FilterValue, 3, 38, 17, 0, // Skip to: 21620
/* 17230 */   MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 17233 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17250
/* 17238 */   MCD_OPC_CheckField, 3, 1, 0, 23, 17, 0, // Skip to: 21620
/* 17245 */   MCD_OPC_Decode, 187, 19, 162, 1, // Opcode: XXPERM
/* 17250 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 17292
/* 17255 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 17258 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 17268
/* 17263 */   MCD_OPC_Decode, 190, 19, 162, 1, // Opcode: XXPERMR
/* 17268 */   MCD_OPC_FilterValue, 1, 251, 16, 0, // Skip to: 21620
/* 17273 */   MCD_OPC_CheckField, 21, 2, 0, 244, 16, 0, // Skip to: 21620
/* 17280 */   MCD_OPC_CheckField, 0, 1, 0, 237, 16, 0, // Skip to: 21620
/* 17287 */   MCD_OPC_Decode, 168, 17, 166, 1, // Opcode: XSCMPEXPDP
/* 17292 */   MCD_OPC_FilterValue, 2, 37, 0, 0, // Skip to: 17334
/* 17297 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 17300 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 17324
/* 17305 */   MCD_OPC_CheckField, 19, 2, 0, 212, 16, 0, // Skip to: 21620
/* 17312 */   MCD_OPC_CheckField, 1, 1, 0, 205, 16, 0, // Skip to: 21620
/* 17319 */   MCD_OPC_Decode, 197, 19, 169, 1, // Opcode: XXSPLTIB
/* 17324 */   MCD_OPC_FilterValue, 1, 195, 16, 0, // Skip to: 21620
/* 17329 */   MCD_OPC_Decode, 169, 19, 170, 1, // Opcode: XXINSERTW
/* 17334 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 17351
/* 17339 */   MCD_OPC_CheckField, 3, 1, 0, 178, 16, 0, // Skip to: 21620
/* 17346 */   MCD_OPC_Decode, 179, 19, 162, 1, // Opcode: XXLXOR
/* 17351 */   MCD_OPC_FilterValue, 5, 168, 16, 0, // Skip to: 21620
/* 17356 */   MCD_OPC_CheckField, 3, 1, 0, 161, 16, 0, // Skip to: 21620
/* 17363 */   MCD_OPC_Decode, 172, 19, 162, 1, // Opcode: XXLEQV
/* 17368 */   MCD_OPC_FilterValue, 2, 105, 8, 0, // Skip to: 19526
/* 17373 */   MCD_OPC_ExtractField, 7, 4,  // Inst{10-7} ...
/* 17376 */   MCD_OPC_FilterValue, 0, 69, 0, 0, // Skip to: 17450
/* 17381 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 17384 */   MCD_OPC_FilterValue, 2, 37, 0, 0, // Skip to: 17426
/* 17389 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17392 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17409
/* 17397 */   MCD_OPC_CheckField, 16, 5, 0, 120, 16, 0, // Skip to: 21620
/* 17404 */   MCD_OPC_Decode, 137, 18, 171, 1, // Opcode: XSRSQRTESP
/* 17409 */   MCD_OPC_FilterValue, 1, 110, 16, 0, // Skip to: 21620
/* 17414 */   MCD_OPC_CheckField, 16, 5, 0, 103, 16, 0, // Skip to: 21620
/* 17421 */   MCD_OPC_Decode, 131, 18, 171, 1, // Opcode: XSRESP
/* 17426 */   MCD_OPC_FilterValue, 3, 93, 16, 0, // Skip to: 21620
/* 17431 */   MCD_OPC_CheckField, 16, 5, 0, 86, 16, 0, // Skip to: 21620
/* 17438 */   MCD_OPC_CheckField, 6, 1, 0, 79, 16, 0, // Skip to: 21620
/* 17445 */   MCD_OPC_Decode, 141, 18, 171, 1, // Opcode: XSSQRTSP
/* 17450 */   MCD_OPC_FilterValue, 2, 153, 0, 0, // Skip to: 17608
/* 17455 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 17458 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 17500
/* 17463 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17466 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17483
/* 17471 */   MCD_OPC_CheckField, 16, 5, 0, 46, 16, 0, // Skip to: 21620
/* 17478 */   MCD_OPC_Decode, 188, 17, 172, 1, // Opcode: XSCVDPUXWS
/* 17483 */   MCD_OPC_FilterValue, 1, 36, 16, 0, // Skip to: 21620
/* 17488 */   MCD_OPC_CheckField, 16, 5, 0, 29, 16, 0, // Skip to: 21620
/* 17495 */   MCD_OPC_Decode, 184, 17, 172, 1, // Opcode: XSCVDPSXWS
/* 17500 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 17542
/* 17505 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17508 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17525
/* 17513 */   MCD_OPC_CheckField, 16, 5, 0, 4, 16, 0, // Skip to: 21620
/* 17520 */   MCD_OPC_Decode, 253, 17, 172, 1, // Opcode: XSRDPI
/* 17525 */   MCD_OPC_FilterValue, 1, 250, 15, 0, // Skip to: 21620
/* 17530 */   MCD_OPC_CheckField, 16, 5, 0, 243, 15, 0, // Skip to: 21620
/* 17537 */   MCD_OPC_Decode, 129, 18, 172, 1, // Opcode: XSRDPIZ
/* 17542 */   MCD_OPC_FilterValue, 2, 37, 0, 0, // Skip to: 17584
/* 17547 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17550 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17567
/* 17555 */   MCD_OPC_CheckField, 16, 5, 0, 218, 15, 0, // Skip to: 21620
/* 17562 */   MCD_OPC_Decode, 136, 18, 172, 1, // Opcode: XSRSQRTEDP
/* 17567 */   MCD_OPC_FilterValue, 1, 208, 15, 0, // Skip to: 21620
/* 17572 */   MCD_OPC_CheckField, 16, 5, 0, 201, 15, 0, // Skip to: 21620
/* 17579 */   MCD_OPC_Decode, 130, 18, 172, 1, // Opcode: XSREDP
/* 17584 */   MCD_OPC_FilterValue, 3, 191, 15, 0, // Skip to: 21620
/* 17589 */   MCD_OPC_CheckField, 16, 5, 0, 184, 15, 0, // Skip to: 21620
/* 17596 */   MCD_OPC_CheckField, 6, 1, 0, 177, 15, 0, // Skip to: 21620
/* 17603 */   MCD_OPC_Decode, 138, 18, 172, 1, // Opcode: XSSQRTDP
/* 17608 */   MCD_OPC_FilterValue, 3, 140, 0, 0, // Skip to: 17753
/* 17613 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 17616 */   MCD_OPC_FilterValue, 0, 51, 0, 0, // Skip to: 17672
/* 17621 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17624 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 17648
/* 17629 */   MCD_OPC_CheckField, 16, 5, 0, 144, 15, 0, // Skip to: 21620
/* 17636 */   MCD_OPC_CheckField, 2, 1, 1, 137, 15, 0, // Skip to: 21620
/* 17643 */   MCD_OPC_Decode, 128, 18, 172, 1, // Opcode: XSRDPIP
/* 17648 */   MCD_OPC_FilterValue, 1, 127, 15, 0, // Skip to: 21620
/* 17653 */   MCD_OPC_CheckField, 16, 5, 0, 120, 15, 0, // Skip to: 21620
/* 17660 */   MCD_OPC_CheckField, 2, 1, 1, 113, 15, 0, // Skip to: 21620
/* 17667 */   MCD_OPC_Decode, 255, 17, 172, 1, // Opcode: XSRDPIM
/* 17672 */   MCD_OPC_FilterValue, 1, 103, 15, 0, // Skip to: 21620
/* 17677 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17680 */   MCD_OPC_FilterValue, 0, 44, 0, 0, // Skip to: 17729
/* 17685 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 17688 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 17712
/* 17693 */   MCD_OPC_CheckField, 16, 7, 0, 80, 15, 0, // Skip to: 21620
/* 17700 */   MCD_OPC_CheckField, 0, 1, 0, 73, 15, 0, // Skip to: 21620
/* 17707 */   MCD_OPC_Decode, 147, 18, 173, 1, // Opcode: XSTSQRTDP
/* 17712 */   MCD_OPC_FilterValue, 1, 63, 15, 0, // Skip to: 21620
/* 17717 */   MCD_OPC_CheckField, 16, 5, 0, 56, 15, 0, // Skip to: 21620
/* 17724 */   MCD_OPC_Decode, 254, 17, 172, 1, // Opcode: XSRDPIC
/* 17729 */   MCD_OPC_FilterValue, 1, 46, 15, 0, // Skip to: 21620
/* 17734 */   MCD_OPC_CheckField, 21, 2, 0, 39, 15, 0, // Skip to: 21620
/* 17741 */   MCD_OPC_CheckField, 0, 1, 0, 32, 15, 0, // Skip to: 21620
/* 17748 */   MCD_OPC_Decode, 146, 18, 166, 1, // Opcode: XSTDIVDP
/* 17753 */   MCD_OPC_FilterValue, 4, 153, 0, 0, // Skip to: 17911
/* 17758 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 17761 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 17803
/* 17766 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17769 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17786
/* 17774 */   MCD_OPC_CheckField, 16, 5, 0, 255, 14, 0, // Skip to: 21620
/* 17781 */   MCD_OPC_Decode, 191, 18, 174, 1, // Opcode: XVCVSPUXWS
/* 17786 */   MCD_OPC_FilterValue, 1, 245, 14, 0, // Skip to: 21620
/* 17791 */   MCD_OPC_CheckField, 16, 5, 0, 238, 14, 0, // Skip to: 21620
/* 17798 */   MCD_OPC_Decode, 189, 18, 174, 1, // Opcode: XVCVSPSXWS
/* 17803 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 17845
/* 17808 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17811 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17828
/* 17816 */   MCD_OPC_CheckField, 16, 5, 0, 213, 14, 0, // Skip to: 21620
/* 17823 */   MCD_OPC_Decode, 133, 19, 174, 1, // Opcode: XVRSPI
/* 17828 */   MCD_OPC_FilterValue, 1, 203, 14, 0, // Skip to: 21620
/* 17833 */   MCD_OPC_CheckField, 16, 5, 0, 196, 14, 0, // Skip to: 21620
/* 17840 */   MCD_OPC_Decode, 137, 19, 174, 1, // Opcode: XVRSPIZ
/* 17845 */   MCD_OPC_FilterValue, 2, 37, 0, 0, // Skip to: 17887
/* 17850 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17853 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17870
/* 17858 */   MCD_OPC_CheckField, 16, 5, 0, 171, 14, 0, // Skip to: 21620
/* 17865 */   MCD_OPC_Decode, 139, 19, 174, 1, // Opcode: XVRSQRTESP
/* 17870 */   MCD_OPC_FilterValue, 1, 161, 14, 0, // Skip to: 21620
/* 17875 */   MCD_OPC_CheckField, 16, 5, 0, 154, 14, 0, // Skip to: 21620
/* 17882 */   MCD_OPC_Decode, 132, 19, 174, 1, // Opcode: XVRESP
/* 17887 */   MCD_OPC_FilterValue, 3, 144, 14, 0, // Skip to: 21620
/* 17892 */   MCD_OPC_CheckField, 16, 5, 0, 137, 14, 0, // Skip to: 21620
/* 17899 */   MCD_OPC_CheckField, 6, 1, 0, 130, 14, 0, // Skip to: 21620
/* 17906 */   MCD_OPC_Decode, 141, 19, 174, 1, // Opcode: XVSQRTSP
/* 17911 */   MCD_OPC_FilterValue, 5, 176, 0, 0, // Skip to: 18092
/* 17916 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 17919 */   MCD_OPC_FilterValue, 0, 87, 0, 0, // Skip to: 18011
/* 17924 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 17927 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 17969
/* 17932 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17935 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17952
/* 17940 */   MCD_OPC_CheckField, 16, 5, 0, 89, 14, 0, // Skip to: 21620
/* 17947 */   MCD_OPC_Decode, 199, 18, 174, 1, // Opcode: XVCVUXWSP
/* 17952 */   MCD_OPC_FilterValue, 1, 79, 14, 0, // Skip to: 21620
/* 17957 */   MCD_OPC_CheckField, 16, 5, 0, 72, 14, 0, // Skip to: 21620
/* 17964 */   MCD_OPC_Decode, 195, 18, 174, 1, // Opcode: XVCVSXWSP
/* 17969 */   MCD_OPC_FilterValue, 1, 62, 14, 0, // Skip to: 21620
/* 17974 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 17977 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 17994
/* 17982 */   MCD_OPC_CheckField, 16, 5, 0, 47, 14, 0, // Skip to: 21620
/* 17989 */   MCD_OPC_Decode, 136, 19, 174, 1, // Opcode: XVRSPIP
/* 17994 */   MCD_OPC_FilterValue, 1, 37, 14, 0, // Skip to: 21620
/* 17999 */   MCD_OPC_CheckField, 16, 5, 0, 30, 14, 0, // Skip to: 21620
/* 18006 */   MCD_OPC_Decode, 135, 19, 174, 1, // Opcode: XVRSPIM
/* 18011 */   MCD_OPC_FilterValue, 1, 20, 14, 0, // Skip to: 21620
/* 18016 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18019 */   MCD_OPC_FilterValue, 0, 44, 0, 0, // Skip to: 18068
/* 18024 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 18027 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 18051
/* 18032 */   MCD_OPC_CheckField, 16, 7, 0, 253, 13, 0, // Skip to: 21620
/* 18039 */   MCD_OPC_CheckField, 0, 1, 0, 246, 13, 0, // Skip to: 21620
/* 18046 */   MCD_OPC_Decode, 148, 19, 175, 1, // Opcode: XVTSQRTSP
/* 18051 */   MCD_OPC_FilterValue, 1, 236, 13, 0, // Skip to: 21620
/* 18056 */   MCD_OPC_CheckField, 16, 5, 0, 229, 13, 0, // Skip to: 21620
/* 18063 */   MCD_OPC_Decode, 134, 19, 174, 1, // Opcode: XVRSPIC
/* 18068 */   MCD_OPC_FilterValue, 1, 219, 13, 0, // Skip to: 21620
/* 18073 */   MCD_OPC_CheckField, 21, 2, 0, 212, 13, 0, // Skip to: 21620
/* 18080 */   MCD_OPC_CheckField, 0, 1, 0, 205, 13, 0, // Skip to: 21620
/* 18087 */   MCD_OPC_Decode, 145, 19, 176, 1, // Opcode: XVTDIVSP
/* 18092 */   MCD_OPC_FilterValue, 6, 153, 0, 0, // Skip to: 18250
/* 18097 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18100 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 18142
/* 18105 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18108 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18125
/* 18113 */   MCD_OPC_CheckField, 16, 5, 0, 172, 13, 0, // Skip to: 21620
/* 18120 */   MCD_OPC_Decode, 183, 18, 174, 1, // Opcode: XVCVDPUXWS
/* 18125 */   MCD_OPC_FilterValue, 1, 162, 13, 0, // Skip to: 21620
/* 18130 */   MCD_OPC_CheckField, 16, 5, 0, 155, 13, 0, // Skip to: 21620
/* 18137 */   MCD_OPC_Decode, 181, 18, 174, 1, // Opcode: XVCVDPSXWS
/* 18142 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 18184
/* 18147 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18150 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18167
/* 18155 */   MCD_OPC_CheckField, 16, 5, 0, 130, 13, 0, // Skip to: 21620
/* 18162 */   MCD_OPC_Decode, 254, 18, 174, 1, // Opcode: XVRDPI
/* 18167 */   MCD_OPC_FilterValue, 1, 120, 13, 0, // Skip to: 21620
/* 18172 */   MCD_OPC_CheckField, 16, 5, 0, 113, 13, 0, // Skip to: 21620
/* 18179 */   MCD_OPC_Decode, 130, 19, 174, 1, // Opcode: XVRDPIZ
/* 18184 */   MCD_OPC_FilterValue, 2, 37, 0, 0, // Skip to: 18226
/* 18189 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18192 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18209
/* 18197 */   MCD_OPC_CheckField, 16, 5, 0, 88, 13, 0, // Skip to: 21620
/* 18204 */   MCD_OPC_Decode, 138, 19, 174, 1, // Opcode: XVRSQRTEDP
/* 18209 */   MCD_OPC_FilterValue, 1, 78, 13, 0, // Skip to: 21620
/* 18214 */   MCD_OPC_CheckField, 16, 5, 0, 71, 13, 0, // Skip to: 21620
/* 18221 */   MCD_OPC_Decode, 131, 19, 174, 1, // Opcode: XVREDP
/* 18226 */   MCD_OPC_FilterValue, 3, 61, 13, 0, // Skip to: 21620
/* 18231 */   MCD_OPC_CheckField, 16, 5, 0, 54, 13, 0, // Skip to: 21620
/* 18238 */   MCD_OPC_CheckField, 6, 1, 0, 47, 13, 0, // Skip to: 21620
/* 18245 */   MCD_OPC_Decode, 140, 19, 174, 1, // Opcode: XVSQRTDP
/* 18250 */   MCD_OPC_FilterValue, 7, 176, 0, 0, // Skip to: 18431
/* 18255 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 18258 */   MCD_OPC_FilterValue, 0, 87, 0, 0, // Skip to: 18350
/* 18263 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 18266 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 18308
/* 18271 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18274 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18291
/* 18279 */   MCD_OPC_CheckField, 16, 5, 0, 6, 13, 0, // Skip to: 21620
/* 18286 */   MCD_OPC_Decode, 198, 18, 174, 1, // Opcode: XVCVUXWDP
/* 18291 */   MCD_OPC_FilterValue, 1, 252, 12, 0, // Skip to: 21620
/* 18296 */   MCD_OPC_CheckField, 16, 5, 0, 245, 12, 0, // Skip to: 21620
/* 18303 */   MCD_OPC_Decode, 194, 18, 174, 1, // Opcode: XVCVSXWDP
/* 18308 */   MCD_OPC_FilterValue, 1, 235, 12, 0, // Skip to: 21620
/* 18313 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18316 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18333
/* 18321 */   MCD_OPC_CheckField, 16, 5, 0, 220, 12, 0, // Skip to: 21620
/* 18328 */   MCD_OPC_Decode, 129, 19, 174, 1, // Opcode: XVRDPIP
/* 18333 */   MCD_OPC_FilterValue, 1, 210, 12, 0, // Skip to: 21620
/* 18338 */   MCD_OPC_CheckField, 16, 5, 0, 203, 12, 0, // Skip to: 21620
/* 18345 */   MCD_OPC_Decode, 128, 19, 174, 1, // Opcode: XVRDPIM
/* 18350 */   MCD_OPC_FilterValue, 1, 193, 12, 0, // Skip to: 21620
/* 18355 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18358 */   MCD_OPC_FilterValue, 0, 44, 0, 0, // Skip to: 18407
/* 18363 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 18366 */   MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 18390
/* 18371 */   MCD_OPC_CheckField, 16, 7, 0, 170, 12, 0, // Skip to: 21620
/* 18378 */   MCD_OPC_CheckField, 0, 1, 0, 163, 12, 0, // Skip to: 21620
/* 18385 */   MCD_OPC_Decode, 147, 19, 175, 1, // Opcode: XVTSQRTDP
/* 18390 */   MCD_OPC_FilterValue, 1, 153, 12, 0, // Skip to: 21620
/* 18395 */   MCD_OPC_CheckField, 16, 5, 0, 146, 12, 0, // Skip to: 21620
/* 18402 */   MCD_OPC_Decode, 255, 18, 174, 1, // Opcode: XVRDPIC
/* 18407 */   MCD_OPC_FilterValue, 1, 136, 12, 0, // Skip to: 21620
/* 18412 */   MCD_OPC_CheckField, 21, 2, 0, 129, 12, 0, // Skip to: 21620
/* 18419 */   MCD_OPC_CheckField, 0, 1, 0, 122, 12, 0, // Skip to: 21620
/* 18426 */   MCD_OPC_Decode, 144, 19, 176, 1, // Opcode: XVTDIVDP
/* 18431 */   MCD_OPC_FilterValue, 8, 69, 0, 0, // Skip to: 18505
/* 18436 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18439 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 18481
/* 18444 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18447 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18464
/* 18452 */   MCD_OPC_CheckField, 16, 5, 0, 89, 12, 0, // Skip to: 21620
/* 18459 */   MCD_OPC_Decode, 180, 17, 172, 1, // Opcode: XSCVDPSP
/* 18464 */   MCD_OPC_FilterValue, 1, 79, 12, 0, // Skip to: 21620
/* 18469 */   MCD_OPC_CheckField, 16, 5, 0, 72, 12, 0, // Skip to: 21620
/* 18476 */   MCD_OPC_Decode, 135, 18, 177, 1, // Opcode: XSRSP
/* 18481 */   MCD_OPC_FilterValue, 3, 62, 12, 0, // Skip to: 21620
/* 18486 */   MCD_OPC_CheckField, 16, 5, 0, 55, 12, 0, // Skip to: 21620
/* 18493 */   MCD_OPC_CheckField, 6, 1, 0, 48, 12, 0, // Skip to: 21620
/* 18500 */   MCD_OPC_Decode, 181, 17, 178, 1, // Opcode: XSCVDPSPN
/* 18505 */   MCD_OPC_FilterValue, 9, 69, 0, 0, // Skip to: 18579
/* 18510 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18513 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 18555
/* 18518 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18521 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18538
/* 18526 */   MCD_OPC_CheckField, 16, 5, 0, 15, 12, 0, // Skip to: 21620
/* 18533 */   MCD_OPC_Decode, 208, 17, 177, 1, // Opcode: XSCVUXDSP
/* 18538 */   MCD_OPC_FilterValue, 1, 5, 12, 0, // Skip to: 21620
/* 18543 */   MCD_OPC_CheckField, 16, 5, 0, 254, 11, 0, // Skip to: 21620
/* 18550 */   MCD_OPC_Decode, 204, 17, 177, 1, // Opcode: XSCVSXDSP
/* 18555 */   MCD_OPC_FilterValue, 2, 244, 11, 0, // Skip to: 21620
/* 18560 */   MCD_OPC_CheckField, 6, 1, 0, 237, 11, 0, // Skip to: 21620
/* 18567 */   MCD_OPC_CheckField, 0, 1, 0, 230, 11, 0, // Skip to: 21620
/* 18574 */   MCD_OPC_Decode, 150, 18, 179, 1, // Opcode: XSTSTDCSP
/* 18579 */   MCD_OPC_FilterValue, 10, 181, 0, 0, // Skip to: 18765
/* 18584 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 18587 */   MCD_OPC_FilterValue, 0, 94, 0, 0, // Skip to: 18686
/* 18592 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18595 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 18623
/* 18600 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18603 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 18613
/* 18608 */   MCD_OPC_Decode, 186, 17, 172, 1, // Opcode: XSCVDPUXDS
/* 18613 */   MCD_OPC_FilterValue, 1, 186, 11, 0, // Skip to: 21620
/* 18618 */   MCD_OPC_Decode, 182, 17, 172, 1, // Opcode: XSCVDPSXDS
/* 18623 */   MCD_OPC_FilterValue, 1, 23, 0, 0, // Skip to: 18651
/* 18628 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18631 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 18641
/* 18636 */   MCD_OPC_Decode, 200, 17, 172, 1, // Opcode: XSCVSPDP
/* 18641 */   MCD_OPC_FilterValue, 1, 158, 11, 0, // Skip to: 21620
/* 18646 */   MCD_OPC_Decode, 161, 17, 172, 1, // Opcode: XSABSDP
/* 18651 */   MCD_OPC_FilterValue, 3, 148, 11, 0, // Skip to: 21620
/* 18656 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18659 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 18669
/* 18664 */   MCD_OPC_Decode, 201, 17, 180, 1, // Opcode: XSCVSPDPN
/* 18669 */   MCD_OPC_FilterValue, 1, 130, 11, 0, // Skip to: 21620
/* 18674 */   MCD_OPC_CheckField, 0, 1, 0, 123, 11, 0, // Skip to: 21620
/* 18681 */   MCD_OPC_Decode, 151, 18, 181, 1, // Opcode: XSXEXPDP
/* 18686 */   MCD_OPC_FilterValue, 1, 26, 0, 0, // Skip to: 18717
/* 18691 */   MCD_OPC_CheckField, 6, 1, 1, 106, 11, 0, // Skip to: 21620
/* 18698 */   MCD_OPC_CheckField, 2, 2, 3, 99, 11, 0, // Skip to: 21620
/* 18705 */   MCD_OPC_CheckField, 0, 1, 0, 92, 11, 0, // Skip to: 21620
/* 18712 */   MCD_OPC_Decode, 153, 18, 181, 1, // Opcode: XSXSIGDP
/* 18717 */   MCD_OPC_FilterValue, 16, 19, 0, 0, // Skip to: 18741
/* 18722 */   MCD_OPC_CheckField, 6, 1, 1, 75, 11, 0, // Skip to: 21620
/* 18729 */   MCD_OPC_CheckField, 2, 2, 3, 68, 11, 0, // Skip to: 21620
/* 18736 */   MCD_OPC_Decode, 190, 17, 172, 1, // Opcode: XSCVHPDP
/* 18741 */   MCD_OPC_FilterValue, 17, 58, 11, 0, // Skip to: 21620
/* 18746 */   MCD_OPC_CheckField, 6, 1, 1, 51, 11, 0, // Skip to: 21620
/* 18753 */   MCD_OPC_CheckField, 2, 2, 3, 44, 11, 0, // Skip to: 21620
/* 18760 */   MCD_OPC_Decode, 178, 17, 172, 1, // Opcode: XSCVDPHP
/* 18765 */   MCD_OPC_FilterValue, 11, 111, 0, 0, // Skip to: 18881
/* 18770 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18773 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 18815
/* 18778 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18781 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18798
/* 18786 */   MCD_OPC_CheckField, 16, 5, 0, 11, 11, 0, // Skip to: 21620
/* 18793 */   MCD_OPC_Decode, 207, 17, 172, 1, // Opcode: XSCVUXDDP
/* 18798 */   MCD_OPC_FilterValue, 1, 1, 11, 0, // Skip to: 21620
/* 18803 */   MCD_OPC_CheckField, 16, 5, 0, 250, 10, 0, // Skip to: 21620
/* 18810 */   MCD_OPC_Decode, 203, 17, 172, 1, // Opcode: XSCVSXDDP
/* 18815 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 18857
/* 18820 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18823 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18840
/* 18828 */   MCD_OPC_CheckField, 16, 5, 0, 225, 10, 0, // Skip to: 21620
/* 18835 */   MCD_OPC_Decode, 237, 17, 172, 1, // Opcode: XSNABSDP
/* 18840 */   MCD_OPC_FilterValue, 1, 215, 10, 0, // Skip to: 21620
/* 18845 */   MCD_OPC_CheckField, 16, 5, 0, 208, 10, 0, // Skip to: 21620
/* 18852 */   MCD_OPC_Decode, 239, 17, 172, 1, // Opcode: XSNEGDP
/* 18857 */   MCD_OPC_FilterValue, 2, 198, 10, 0, // Skip to: 21620
/* 18862 */   MCD_OPC_CheckField, 6, 1, 0, 191, 10, 0, // Skip to: 21620
/* 18869 */   MCD_OPC_CheckField, 0, 1, 0, 184, 10, 0, // Skip to: 21620
/* 18876 */   MCD_OPC_Decode, 148, 18, 179, 1, // Opcode: XSTSTDCDP
/* 18881 */   MCD_OPC_FilterValue, 12, 87, 0, 0, // Skip to: 18973
/* 18886 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 18889 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 18931
/* 18894 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18897 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18914
/* 18902 */   MCD_OPC_CheckField, 16, 5, 0, 151, 10, 0, // Skip to: 21620
/* 18909 */   MCD_OPC_Decode, 190, 18, 174, 1, // Opcode: XVCVSPUXDS
/* 18914 */   MCD_OPC_FilterValue, 1, 141, 10, 0, // Skip to: 21620
/* 18919 */   MCD_OPC_CheckField, 16, 5, 0, 134, 10, 0, // Skip to: 21620
/* 18926 */   MCD_OPC_Decode, 188, 18, 174, 1, // Opcode: XVCVSPSXDS
/* 18931 */   MCD_OPC_FilterValue, 1, 124, 10, 0, // Skip to: 21620
/* 18936 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18939 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 18956
/* 18944 */   MCD_OPC_CheckField, 16, 5, 0, 109, 10, 0, // Skip to: 21620
/* 18951 */   MCD_OPC_Decode, 179, 18, 174, 1, // Opcode: XVCVDPSP
/* 18956 */   MCD_OPC_FilterValue, 1, 99, 10, 0, // Skip to: 21620
/* 18961 */   MCD_OPC_CheckField, 16, 5, 0, 92, 10, 0, // Skip to: 21620
/* 18968 */   MCD_OPC_Decode, 156, 18, 174, 1, // Opcode: XVABSSP
/* 18973 */   MCD_OPC_FilterValue, 13, 105, 0, 0, // Skip to: 19083
/* 18978 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 18981 */   MCD_OPC_FilterValue, 0, 87, 0, 0, // Skip to: 19073
/* 18986 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 18989 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 19031
/* 18994 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 18997 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19014
/* 19002 */   MCD_OPC_CheckField, 16, 5, 0, 51, 10, 0, // Skip to: 21620
/* 19009 */   MCD_OPC_Decode, 197, 18, 174, 1, // Opcode: XVCVUXDSP
/* 19014 */   MCD_OPC_FilterValue, 1, 41, 10, 0, // Skip to: 21620
/* 19019 */   MCD_OPC_CheckField, 16, 5, 0, 34, 10, 0, // Skip to: 21620
/* 19026 */   MCD_OPC_Decode, 193, 18, 174, 1, // Opcode: XVCVSXDSP
/* 19031 */   MCD_OPC_FilterValue, 1, 24, 10, 0, // Skip to: 21620
/* 19036 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19039 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19056
/* 19044 */   MCD_OPC_CheckField, 16, 5, 0, 9, 10, 0, // Skip to: 21620
/* 19051 */   MCD_OPC_Decode, 243, 18, 174, 1, // Opcode: XVNABSSP
/* 19056 */   MCD_OPC_FilterValue, 1, 255, 9, 0, // Skip to: 21620
/* 19061 */   MCD_OPC_CheckField, 16, 5, 0, 248, 9, 0, // Skip to: 21620
/* 19068 */   MCD_OPC_Decode, 245, 18, 174, 1, // Opcode: XVNEGSP
/* 19073 */   MCD_OPC_FilterValue, 1, 238, 9, 0, // Skip to: 21620
/* 19078 */   MCD_OPC_Decode, 150, 19, 182, 1, // Opcode: XVTSTDCSP
/* 19083 */   MCD_OPC_FilterValue, 14, 72, 1, 0, // Skip to: 19416
/* 19088 */   MCD_OPC_ExtractField, 2, 2,  // Inst{3-2} ...
/* 19091 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 19133
/* 19096 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19099 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19116
/* 19104 */   MCD_OPC_CheckField, 16, 5, 0, 205, 9, 0, // Skip to: 21620
/* 19111 */   MCD_OPC_Decode, 182, 18, 174, 1, // Opcode: XVCVDPUXDS
/* 19116 */   MCD_OPC_FilterValue, 1, 195, 9, 0, // Skip to: 21620
/* 19121 */   MCD_OPC_CheckField, 16, 5, 0, 188, 9, 0, // Skip to: 21620
/* 19128 */   MCD_OPC_Decode, 180, 18, 174, 1, // Opcode: XVCVDPSXDS
/* 19133 */   MCD_OPC_FilterValue, 1, 37, 0, 0, // Skip to: 19175
/* 19138 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19141 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19158
/* 19146 */   MCD_OPC_CheckField, 16, 5, 0, 163, 9, 0, // Skip to: 21620
/* 19153 */   MCD_OPC_Decode, 186, 18, 174, 1, // Opcode: XVCVSPDP
/* 19158 */   MCD_OPC_FilterValue, 1, 153, 9, 0, // Skip to: 21620
/* 19163 */   MCD_OPC_CheckField, 16, 5, 0, 146, 9, 0, // Skip to: 21620
/* 19170 */   MCD_OPC_Decode, 155, 18, 174, 1, // Opcode: XVABSDP
/* 19175 */   MCD_OPC_FilterValue, 2, 59, 0, 0, // Skip to: 19239
/* 19180 */   MCD_OPC_ExtractField, 1, 1,  // Inst{1} ...
/* 19183 */   MCD_OPC_FilterValue, 0, 23, 0, 0, // Skip to: 19211
/* 19188 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19191 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 19201
/* 19196 */   MCD_OPC_Decode, 165, 19, 183, 1, // Opcode: XXGENPCVBM
/* 19201 */   MCD_OPC_FilterValue, 1, 110, 9, 0, // Skip to: 21620
/* 19206 */   MCD_OPC_Decode, 168, 19, 183, 1, // Opcode: XXGENPCVWM
/* 19211 */   MCD_OPC_FilterValue, 1, 100, 9, 0, // Skip to: 21620
/* 19216 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19219 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 19229
/* 19224 */   MCD_OPC_Decode, 167, 19, 183, 1, // Opcode: XXGENPCVHM
/* 19229 */   MCD_OPC_FilterValue, 1, 82, 9, 0, // Skip to: 21620
/* 19234 */   MCD_OPC_Decode, 166, 19, 183, 1, // Opcode: XXGENPCVDM
/* 19239 */   MCD_OPC_FilterValue, 3, 72, 9, 0, // Skip to: 21620
/* 19244 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19247 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19264
/* 19252 */   MCD_OPC_CheckField, 1, 1, 0, 57, 9, 0, // Skip to: 21620
/* 19259 */   MCD_OPC_Decode, 213, 17, 184, 1, // Opcode: XSIEXPDP
/* 19264 */   MCD_OPC_FilterValue, 1, 47, 9, 0, // Skip to: 21620
/* 19269 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 19272 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 19282
/* 19277 */   MCD_OPC_Decode, 151, 19, 174, 1, // Opcode: XVXEXPDP
/* 19282 */   MCD_OPC_FilterValue, 1, 5, 0, 0, // Skip to: 19292
/* 19287 */   MCD_OPC_Decode, 153, 19, 174, 1, // Opcode: XVXSIGDP
/* 19292 */   MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 19316
/* 19297 */   MCD_OPC_CheckField, 21, 2, 0, 12, 9, 0, // Skip to: 21620
/* 19304 */   MCD_OPC_CheckField, 0, 1, 0, 5, 9, 0, // Skip to: 21620
/* 19311 */   MCD_OPC_Decode, 146, 19, 175, 1, // Opcode: XVTLSBB
/* 19316 */   MCD_OPC_FilterValue, 7, 5, 0, 0, // Skip to: 19326
/* 19321 */   MCD_OPC_Decode, 160, 19, 174, 1, // Opcode: XXBRH
/* 19326 */   MCD_OPC_FilterValue, 8, 5, 0, 0, // Skip to: 19336
/* 19331 */   MCD_OPC_Decode, 152, 19, 174, 1, // Opcode: XVXEXPSP
/* 19336 */   MCD_OPC_FilterValue, 9, 5, 0, 0, // Skip to: 19346
/* 19341 */   MCD_OPC_Decode, 154, 19, 174, 1, // Opcode: XVXSIGSP
/* 19346 */   MCD_OPC_FilterValue, 15, 5, 0, 0, // Skip to: 19356
/* 19351 */   MCD_OPC_Decode, 162, 19, 174, 1, // Opcode: XXBRW
/* 19356 */   MCD_OPC_FilterValue, 16, 5, 0, 0, // Skip to: 19366
/* 19361 */   MCD_OPC_Decode, 178, 18, 174, 1, // Opcode: XVCVBF16SPN
/* 19366 */   MCD_OPC_FilterValue, 17, 5, 0, 0, // Skip to: 19376
/* 19371 */   MCD_OPC_Decode, 185, 18, 174, 1, // Opcode: XVCVSPBF16
/* 19376 */   MCD_OPC_FilterValue, 23, 5, 0, 0, // Skip to: 19386
/* 19381 */   MCD_OPC_Decode, 159, 19, 174, 1, // Opcode: XXBRD
/* 19386 */   MCD_OPC_FilterValue, 24, 5, 0, 0, // Skip to: 19396
/* 19391 */   MCD_OPC_Decode, 184, 18, 174, 1, // Opcode: XVCVHPSP
/* 19396 */   MCD_OPC_FilterValue, 25, 5, 0, 0, // Skip to: 19406
/* 19401 */   MCD_OPC_Decode, 187, 18, 174, 1, // Opcode: XVCVSPHP
/* 19406 */   MCD_OPC_FilterValue, 31, 161, 8, 0, // Skip to: 21620
/* 19411 */   MCD_OPC_Decode, 161, 19, 174, 1, // Opcode: XXBRQ
/* 19416 */   MCD_OPC_FilterValue, 15, 151, 8, 0, // Skip to: 21620
/* 19421 */   MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 19424 */   MCD_OPC_FilterValue, 0, 87, 0, 0, // Skip to: 19516
/* 19429 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 19432 */   MCD_OPC_FilterValue, 0, 37, 0, 0, // Skip to: 19474
/* 19437 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19440 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19457
/* 19445 */   MCD_OPC_CheckField, 16, 5, 0, 120, 8, 0, // Skip to: 21620
/* 19452 */   MCD_OPC_Decode, 196, 18, 174, 1, // Opcode: XVCVUXDDP
/* 19457 */   MCD_OPC_FilterValue, 1, 110, 8, 0, // Skip to: 21620
/* 19462 */   MCD_OPC_CheckField, 16, 5, 0, 103, 8, 0, // Skip to: 21620
/* 19469 */   MCD_OPC_Decode, 192, 18, 174, 1, // Opcode: XVCVSXDDP
/* 19474 */   MCD_OPC_FilterValue, 1, 93, 8, 0, // Skip to: 21620
/* 19479 */   MCD_OPC_ExtractField, 6, 1,  // Inst{6} ...
/* 19482 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19499
/* 19487 */   MCD_OPC_CheckField, 16, 5, 0, 78, 8, 0, // Skip to: 21620
/* 19494 */   MCD_OPC_Decode, 242, 18, 174, 1, // Opcode: XVNABSDP
/* 19499 */   MCD_OPC_FilterValue, 1, 68, 8, 0, // Skip to: 21620
/* 19504 */   MCD_OPC_CheckField, 16, 5, 0, 61, 8, 0, // Skip to: 21620
/* 19511 */   MCD_OPC_Decode, 244, 18, 174, 1, // Opcode: XVNEGDP
/* 19516 */   MCD_OPC_FilterValue, 1, 51, 8, 0, // Skip to: 21620
/* 19521 */   MCD_OPC_Decode, 149, 19, 182, 1, // Opcode: XVTSTDCDP
/* 19526 */   MCD_OPC_FilterValue, 3, 41, 8, 0, // Skip to: 21620
/* 19531 */   MCD_OPC_Decode, 192, 19, 185, 1, // Opcode: XXSEL
/* 19536 */   MCD_OPC_FilterValue, 61, 51, 0, 0, // Skip to: 19592
/* 19541 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 19544 */   MCD_OPC_FilterValue, 1, 23, 0, 0, // Skip to: 19572
/* 19549 */   MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 19552 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 19562
/* 19557 */   MCD_OPC_Decode, 205, 9, 186, 1, // Opcode: LXV
/* 19562 */   MCD_OPC_FilterValue, 1, 5, 8, 0, // Skip to: 21620
/* 19567 */   MCD_OPC_Decode, 166, 13, 186, 1, // Opcode: STXV
/* 19572 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 19582
/* 19577 */   MCD_OPC_Decode, 157, 13, 147, 1, // Opcode: STXSD
/* 19582 */   MCD_OPC_FilterValue, 3, 241, 7, 0, // Skip to: 21620
/* 19587 */   MCD_OPC_Decode, 164, 13, 147, 1, // Opcode: STXSSP
/* 19592 */   MCD_OPC_FilterValue, 62, 33, 0, 0, // Skip to: 19630
/* 19597 */   MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 19600 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 19610
/* 19605 */   MCD_OPC_Decode, 223, 12, 148, 1, // Opcode: STD
/* 19610 */   MCD_OPC_FilterValue, 1, 5, 0, 0, // Skip to: 19620
/* 19615 */   MCD_OPC_Decode, 228, 12, 148, 1, // Opcode: STDU
/* 19620 */   MCD_OPC_FilterValue, 2, 203, 7, 0, // Skip to: 21620
/* 19625 */   MCD_OPC_Decode, 132, 13, 187, 1, // Opcode: STQ
/* 19630 */   MCD_OPC_FilterValue, 63, 193, 7, 0, // Skip to: 21620
/* 19635 */   MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 19638 */   MCD_OPC_FilterValue, 0, 94, 0, 0, // Skip to: 19737
/* 19643 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 19646 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 19663
/* 19651 */   MCD_OPC_CheckField, 21, 2, 0, 170, 7, 0, // Skip to: 21620
/* 19658 */   MCD_OPC_Decode, 222, 7, 188, 1, // Opcode: FCMPUS
/* 19663 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 19680
/* 19668 */   MCD_OPC_CheckField, 21, 2, 0, 153, 7, 0, // Skip to: 21620
/* 19675 */   MCD_OPC_Decode, 220, 7, 188, 1, // Opcode: FCMPOS
/* 19680 */   MCD_OPC_FilterValue, 2, 18, 0, 0, // Skip to: 19703
/* 19685 */   MCD_OPC_CheckField, 21, 2, 0, 136, 7, 0, // Skip to: 21620
/* 19692 */   MCD_OPC_CheckField, 11, 7, 0, 129, 7, 0, // Skip to: 21620
/* 19699 */   MCD_OPC_Decode, 227, 9, 51, // Opcode: MCRFS
/* 19703 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 19720
/* 19708 */   MCD_OPC_CheckField, 21, 2, 0, 113, 7, 0, // Skip to: 21620
/* 19715 */   MCD_OPC_Decode, 187, 8, 189, 1, // Opcode: FTDIV
/* 19720 */   MCD_OPC_FilterValue, 5, 103, 7, 0, // Skip to: 21620
/* 19725 */   MCD_OPC_CheckField, 16, 7, 0, 96, 7, 0, // Skip to: 21620
/* 19732 */   MCD_OPC_Decode, 188, 8, 190, 1, // Opcode: FTSQRT
/* 19737 */   MCD_OPC_FilterValue, 8, 82, 1, 0, // Skip to: 20080
/* 19742 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 19745 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 19754
/* 19750 */   MCD_OPC_Decode, 164, 17, 3, // Opcode: XSADDQP
/* 19754 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 19763
/* 19759 */   MCD_OPC_Decode, 234, 17, 3, // Opcode: XSMULQP
/* 19763 */   MCD_OPC_FilterValue, 3, 4, 0, 0, // Skip to: 19772
/* 19768 */   MCD_OPC_Decode, 177, 17, 3, // Opcode: XSCPSGNQP
/* 19772 */   MCD_OPC_FilterValue, 4, 11, 0, 0, // Skip to: 19788
/* 19777 */   MCD_OPC_CheckField, 21, 2, 0, 44, 7, 0, // Skip to: 21620
/* 19784 */   MCD_OPC_Decode, 173, 17, 6, // Opcode: XSCMPOQP
/* 19788 */   MCD_OPC_FilterValue, 5, 11, 0, 0, // Skip to: 19804
/* 19793 */   MCD_OPC_CheckField, 21, 2, 0, 28, 7, 0, // Skip to: 21620
/* 19800 */   MCD_OPC_Decode, 169, 17, 6, // Opcode: XSCMPEXPQP
/* 19804 */   MCD_OPC_FilterValue, 12, 5, 0, 0, // Skip to: 19814
/* 19809 */   MCD_OPC_Decode, 219, 17, 191, 1, // Opcode: XSMADDQP
/* 19814 */   MCD_OPC_FilterValue, 13, 5, 0, 0, // Skip to: 19824
/* 19819 */   MCD_OPC_Decode, 231, 17, 191, 1, // Opcode: XSMSUBQP
/* 19824 */   MCD_OPC_FilterValue, 14, 5, 0, 0, // Skip to: 19834
/* 19829 */   MCD_OPC_Decode, 245, 17, 191, 1, // Opcode: XSNMADDQP
/* 19834 */   MCD_OPC_FilterValue, 15, 5, 0, 0, // Skip to: 19844
/* 19839 */   MCD_OPC_Decode, 251, 17, 191, 1, // Opcode: XSNMSUBQP
/* 19844 */   MCD_OPC_FilterValue, 16, 4, 0, 0, // Skip to: 19853
/* 19849 */   MCD_OPC_Decode, 143, 18, 3, // Opcode: XSSUBQP
/* 19853 */   MCD_OPC_FilterValue, 17, 4, 0, 0, // Skip to: 19862
/* 19858 */   MCD_OPC_Decode, 210, 17, 3, // Opcode: XSDIVQP
/* 19862 */   MCD_OPC_FilterValue, 20, 11, 0, 0, // Skip to: 19878
/* 19867 */   MCD_OPC_CheckField, 21, 2, 0, 210, 6, 0, // Skip to: 21620
/* 19874 */   MCD_OPC_Decode, 175, 17, 6, // Opcode: XSCMPUQP
/* 19878 */   MCD_OPC_FilterValue, 22, 5, 0, 0, // Skip to: 19888
/* 19883 */   MCD_OPC_Decode, 149, 18, 192, 1, // Opcode: XSTSTDCQP
/* 19888 */   MCD_OPC_FilterValue, 25, 57, 0, 0, // Skip to: 19950
/* 19893 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 19896 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 19905
/* 19901 */   MCD_OPC_Decode, 162, 17, 7, // Opcode: XSABSQP
/* 19905 */   MCD_OPC_FilterValue, 2, 4, 0, 0, // Skip to: 19914
/* 19910 */   MCD_OPC_Decode, 152, 18, 7, // Opcode: XSXEXPQP
/* 19914 */   MCD_OPC_FilterValue, 8, 4, 0, 0, // Skip to: 19923
/* 19919 */   MCD_OPC_Decode, 238, 17, 7, // Opcode: XSNABSQP
/* 19923 */   MCD_OPC_FilterValue, 16, 4, 0, 0, // Skip to: 19932
/* 19928 */   MCD_OPC_Decode, 240, 17, 7, // Opcode: XSNEGQP
/* 19932 */   MCD_OPC_FilterValue, 18, 4, 0, 0, // Skip to: 19941
/* 19937 */   MCD_OPC_Decode, 154, 18, 7, // Opcode: XSXSIGQP
/* 19941 */   MCD_OPC_FilterValue, 27, 138, 6, 0, // Skip to: 21620
/* 19946 */   MCD_OPC_Decode, 139, 18, 7, // Opcode: XSSQRTQP
/* 19950 */   MCD_OPC_FilterValue, 26, 115, 0, 0, // Skip to: 20070
/* 19955 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 19958 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 19967
/* 19963 */   MCD_OPC_Decode, 197, 17, 7, // Opcode: XSCVQPUQZ
/* 19967 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 19976
/* 19972 */   MCD_OPC_Decode, 198, 17, 7, // Opcode: XSCVQPUWZ
/* 19976 */   MCD_OPC_FilterValue, 2, 5, 0, 0, // Skip to: 19986
/* 19981 */   MCD_OPC_Decode, 205, 17, 193, 1, // Opcode: XSCVUDQP
/* 19986 */   MCD_OPC_FilterValue, 3, 4, 0, 0, // Skip to: 19995
/* 19991 */   MCD_OPC_Decode, 206, 17, 7, // Opcode: XSCVUQQP
/* 19995 */   MCD_OPC_FilterValue, 8, 4, 0, 0, // Skip to: 20004
/* 20000 */   MCD_OPC_Decode, 194, 17, 7, // Opcode: XSCVQPSQZ
/* 20004 */   MCD_OPC_FilterValue, 9, 4, 0, 0, // Skip to: 20013
/* 20009 */   MCD_OPC_Decode, 195, 17, 7, // Opcode: XSCVQPSWZ
/* 20013 */   MCD_OPC_FilterValue, 10, 5, 0, 0, // Skip to: 20023
/* 20018 */   MCD_OPC_Decode, 199, 17, 193, 1, // Opcode: XSCVSDQP
/* 20023 */   MCD_OPC_FilterValue, 11, 4, 0, 0, // Skip to: 20032
/* 20028 */   MCD_OPC_Decode, 202, 17, 7, // Opcode: XSCVSQQP
/* 20032 */   MCD_OPC_FilterValue, 17, 4, 0, 0, // Skip to: 20041
/* 20037 */   MCD_OPC_Decode, 196, 17, 7, // Opcode: XSCVQPUDZ
/* 20041 */   MCD_OPC_FilterValue, 20, 5, 0, 0, // Skip to: 20051
/* 20046 */   MCD_OPC_Decode, 191, 17, 194, 1, // Opcode: XSCVQPDP
/* 20051 */   MCD_OPC_FilterValue, 22, 5, 0, 0, // Skip to: 20061
/* 20056 */   MCD_OPC_Decode, 179, 17, 193, 1, // Opcode: XSCVDPQP
/* 20061 */   MCD_OPC_FilterValue, 25, 18, 6, 0, // Skip to: 21620
/* 20066 */   MCD_OPC_Decode, 193, 17, 7, // Opcode: XSCVQPSDZ
/* 20070 */   MCD_OPC_FilterValue, 27, 9, 6, 0, // Skip to: 21620
/* 20075 */   MCD_OPC_Decode, 214, 17, 195, 1, // Opcode: XSIEXPQP
/* 20080 */   MCD_OPC_FilterValue, 9, 112, 0, 0, // Skip to: 20197
/* 20085 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20088 */   MCD_OPC_FilterValue, 0, 4, 0, 0, // Skip to: 20097
/* 20093 */   MCD_OPC_Decode, 165, 17, 3, // Opcode: XSADDQPO
/* 20097 */   MCD_OPC_FilterValue, 1, 4, 0, 0, // Skip to: 20106
/* 20102 */   MCD_OPC_Decode, 235, 17, 3, // Opcode: XSMULQPO
/* 20106 */   MCD_OPC_FilterValue, 12, 5, 0, 0, // Skip to: 20116
/* 20111 */   MCD_OPC_Decode, 220, 17, 191, 1, // Opcode: XSMADDQPO
/* 20116 */   MCD_OPC_FilterValue, 13, 5, 0, 0, // Skip to: 20126
/* 20121 */   MCD_OPC_Decode, 232, 17, 191, 1, // Opcode: XSMSUBQPO
/* 20126 */   MCD_OPC_FilterValue, 14, 5, 0, 0, // Skip to: 20136
/* 20131 */   MCD_OPC_Decode, 246, 17, 191, 1, // Opcode: XSNMADDQPO
/* 20136 */   MCD_OPC_FilterValue, 15, 5, 0, 0, // Skip to: 20146
/* 20141 */   MCD_OPC_Decode, 252, 17, 191, 1, // Opcode: XSNMSUBQPO
/* 20146 */   MCD_OPC_FilterValue, 16, 4, 0, 0, // Skip to: 20155
/* 20151 */   MCD_OPC_Decode, 144, 18, 3, // Opcode: XSSUBQPO
/* 20155 */   MCD_OPC_FilterValue, 17, 4, 0, 0, // Skip to: 20164
/* 20160 */   MCD_OPC_Decode, 211, 17, 3, // Opcode: XSDIVQPO
/* 20164 */   MCD_OPC_FilterValue, 25, 11, 0, 0, // Skip to: 20180
/* 20169 */   MCD_OPC_CheckField, 16, 5, 27, 164, 5, 0, // Skip to: 21620
/* 20176 */   MCD_OPC_Decode, 140, 18, 7, // Opcode: XSSQRTQPO
/* 20180 */   MCD_OPC_FilterValue, 26, 155, 5, 0, // Skip to: 21620
/* 20185 */   MCD_OPC_CheckField, 16, 5, 20, 148, 5, 0, // Skip to: 21620
/* 20192 */   MCD_OPC_Decode, 192, 17, 194, 1, // Opcode: XSCVQPDPO
/* 20197 */   MCD_OPC_FilterValue, 10, 37, 0, 0, // Skip to: 20239
/* 20202 */   MCD_OPC_ExtractField, 6, 3,  // Inst{8-6} ...
/* 20205 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 20222
/* 20210 */   MCD_OPC_CheckField, 17, 4, 0, 123, 5, 0, // Skip to: 21620
/* 20217 */   MCD_OPC_Decode, 132, 18, 196, 1, // Opcode: XSRQPI
/* 20222 */   MCD_OPC_FilterValue, 1, 113, 5, 0, // Skip to: 21620
/* 20227 */   MCD_OPC_CheckField, 17, 4, 0, 106, 5, 0, // Skip to: 21620
/* 20234 */   MCD_OPC_Decode, 134, 18, 196, 1, // Opcode: XSRQPXP
/* 20239 */   MCD_OPC_FilterValue, 11, 19, 0, 0, // Skip to: 20263
/* 20244 */   MCD_OPC_CheckField, 17, 4, 0, 89, 5, 0, // Skip to: 21620
/* 20251 */   MCD_OPC_CheckField, 6, 3, 0, 82, 5, 0, // Skip to: 21620
/* 20258 */   MCD_OPC_Decode, 133, 18, 196, 1, // Opcode: XSRQPIX
/* 20263 */   MCD_OPC_FilterValue, 12, 54, 0, 0, // Skip to: 20322
/* 20268 */   MCD_OPC_ExtractField, 6, 6,  // Inst{11-6} ...
/* 20271 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 20288
/* 20276 */   MCD_OPC_CheckField, 12, 9, 0, 57, 5, 0, // Skip to: 21620
/* 20283 */   MCD_OPC_Decode, 149, 10, 134, 1, // Opcode: MTFSB1
/* 20288 */   MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 20305
/* 20293 */   MCD_OPC_CheckField, 12, 9, 0, 40, 5, 0, // Skip to: 21620
/* 20300 */   MCD_OPC_Decode, 148, 10, 134, 1, // Opcode: MTFSB0
/* 20305 */   MCD_OPC_FilterValue, 4, 30, 5, 0, // Skip to: 21620
/* 20310 */   MCD_OPC_CheckField, 17, 6, 0, 23, 5, 0, // Skip to: 21620
/* 20317 */   MCD_OPC_Decode, 151, 10, 197, 1, // Opcode: MTFSFI
/* 20322 */   MCD_OPC_FilterValue, 13, 19, 0, 0, // Skip to: 20346
/* 20327 */   MCD_OPC_CheckField, 17, 6, 0, 6, 5, 0, // Skip to: 21620
/* 20334 */   MCD_OPC_CheckField, 6, 6, 4, 255, 4, 0, // Skip to: 21620
/* 20341 */   MCD_OPC_Decode, 152, 10, 197, 1, // Opcode: MTFSFI_rec
/* 20346 */   MCD_OPC_FilterValue, 14, 126, 0, 0, // Skip to: 20477
/* 20351 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20354 */   MCD_OPC_FilterValue, 18, 108, 0, 0, // Skip to: 20467
/* 20359 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 20362 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 20379
/* 20367 */   MCD_OPC_CheckField, 11, 5, 0, 222, 4, 0, // Skip to: 21620
/* 20374 */   MCD_OPC_Decode, 235, 9, 198, 1, // Opcode: MFFS
/* 20379 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 20396
/* 20384 */   MCD_OPC_CheckField, 11, 5, 0, 205, 4, 0, // Skip to: 21620
/* 20391 */   MCD_OPC_Decode, 238, 9, 198, 1, // Opcode: MFFSCE
/* 20396 */   MCD_OPC_FilterValue, 20, 5, 0, 0, // Skip to: 20406
/* 20401 */   MCD_OPC_Decode, 236, 9, 199, 1, // Opcode: MFFSCDRN
/* 20406 */   MCD_OPC_FilterValue, 21, 12, 0, 0, // Skip to: 20423
/* 20411 */   MCD_OPC_CheckField, 14, 2, 0, 178, 4, 0, // Skip to: 21620
/* 20418 */   MCD_OPC_Decode, 237, 9, 200, 1, // Opcode: MFFSCDRNI
/* 20423 */   MCD_OPC_FilterValue, 22, 5, 0, 0, // Skip to: 20433
/* 20428 */   MCD_OPC_Decode, 239, 9, 199, 1, // Opcode: MFFSCRN
/* 20433 */   MCD_OPC_FilterValue, 23, 12, 0, 0, // Skip to: 20450
/* 20438 */   MCD_OPC_CheckField, 13, 3, 0, 151, 4, 0, // Skip to: 21620
/* 20445 */   MCD_OPC_Decode, 240, 9, 201, 1, // Opcode: MFFSCRNI
/* 20450 */   MCD_OPC_FilterValue, 24, 141, 4, 0, // Skip to: 21620
/* 20455 */   MCD_OPC_CheckField, 11, 5, 0, 134, 4, 0, // Skip to: 21620
/* 20462 */   MCD_OPC_Decode, 241, 9, 198, 1, // Opcode: MFFSL
/* 20467 */   MCD_OPC_FilterValue, 22, 124, 4, 0, // Skip to: 21620
/* 20472 */   MCD_OPC_Decode, 150, 10, 202, 1, // Opcode: MTFSF
/* 20477 */   MCD_OPC_FilterValue, 15, 30, 0, 0, // Skip to: 20512
/* 20482 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20485 */   MCD_OPC_FilterValue, 18, 12, 0, 0, // Skip to: 20502
/* 20490 */   MCD_OPC_CheckField, 11, 10, 0, 99, 4, 0, // Skip to: 21620
/* 20497 */   MCD_OPC_Decode, 242, 9, 198, 1, // Opcode: MFFS_rec
/* 20502 */   MCD_OPC_FilterValue, 22, 89, 4, 0, // Skip to: 21620
/* 20507 */   MCD_OPC_Decode, 154, 10, 202, 1, // Opcode: MTFSF_rec
/* 20512 */   MCD_OPC_FilterValue, 16, 149, 0, 0, // Skip to: 20666
/* 20517 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20520 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 20530
/* 20525 */   MCD_OPC_Decode, 225, 7, 154, 1, // Opcode: FCPSGNS
/* 20530 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 20547
/* 20535 */   MCD_OPC_CheckField, 16, 5, 0, 54, 4, 0, // Skip to: 21620
/* 20542 */   MCD_OPC_Decode, 139, 8, 155, 1, // Opcode: FNEGS
/* 20547 */   MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 20564
/* 20552 */   MCD_OPC_CheckField, 16, 5, 0, 37, 4, 0, // Skip to: 21620
/* 20559 */   MCD_OPC_Decode, 251, 7, 155, 1, // Opcode: FMR
/* 20564 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 20581
/* 20569 */   MCD_OPC_CheckField, 16, 5, 0, 20, 4, 0, // Skip to: 21620
/* 20576 */   MCD_OPC_Decode, 135, 8, 155, 1, // Opcode: FNABSS
/* 20581 */   MCD_OPC_FilterValue, 8, 12, 0, 0, // Skip to: 20598
/* 20586 */   MCD_OPC_CheckField, 16, 5, 0, 3, 4, 0, // Skip to: 21620
/* 20593 */   MCD_OPC_Decode, 204, 7, 155, 1, // Opcode: FABSS
/* 20598 */   MCD_OPC_FilterValue, 12, 12, 0, 0, // Skip to: 20615
/* 20603 */   MCD_OPC_CheckField, 16, 5, 0, 242, 3, 0, // Skip to: 21620
/* 20610 */   MCD_OPC_Decode, 159, 8, 155, 1, // Opcode: FRINS
/* 20615 */   MCD_OPC_FilterValue, 13, 12, 0, 0, // Skip to: 20632
/* 20620 */   MCD_OPC_CheckField, 16, 5, 0, 225, 3, 0, // Skip to: 21620
/* 20627 */   MCD_OPC_Decode, 167, 8, 155, 1, // Opcode: FRIZS
/* 20632 */   MCD_OPC_FilterValue, 14, 12, 0, 0, // Skip to: 20649
/* 20637 */   MCD_OPC_CheckField, 16, 5, 0, 208, 3, 0, // Skip to: 21620
/* 20644 */   MCD_OPC_Decode, 163, 8, 155, 1, // Opcode: FRIPS
/* 20649 */   MCD_OPC_FilterValue, 15, 198, 3, 0, // Skip to: 21620
/* 20654 */   MCD_OPC_CheckField, 16, 5, 0, 191, 3, 0, // Skip to: 21620
/* 20661 */   MCD_OPC_Decode, 155, 8, 155, 1, // Opcode: FRIMS
/* 20666 */   MCD_OPC_FilterValue, 17, 149, 0, 0, // Skip to: 20820
/* 20671 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20674 */   MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 20684
/* 20679 */   MCD_OPC_Decode, 226, 7, 154, 1, // Opcode: FCPSGNS_rec
/* 20684 */   MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 20701
/* 20689 */   MCD_OPC_CheckField, 16, 5, 0, 156, 3, 0, // Skip to: 21620
/* 20696 */   MCD_OPC_Decode, 140, 8, 155, 1, // Opcode: FNEGS_rec
/* 20701 */   MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 20718
/* 20706 */   MCD_OPC_CheckField, 16, 5, 0, 139, 3, 0, // Skip to: 21620
/* 20713 */   MCD_OPC_Decode, 252, 7, 155, 1, // Opcode: FMR_rec
/* 20718 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 20735
/* 20723 */   MCD_OPC_CheckField, 16, 5, 0, 122, 3, 0, // Skip to: 21620
/* 20730 */   MCD_OPC_Decode, 136, 8, 155, 1, // Opcode: FNABSS_rec
/* 20735 */   MCD_OPC_FilterValue, 8, 12, 0, 0, // Skip to: 20752
/* 20740 */   MCD_OPC_CheckField, 16, 5, 0, 105, 3, 0, // Skip to: 21620
/* 20747 */   MCD_OPC_Decode, 205, 7, 155, 1, // Opcode: FABSS_rec
/* 20752 */   MCD_OPC_FilterValue, 12, 12, 0, 0, // Skip to: 20769
/* 20757 */   MCD_OPC_CheckField, 16, 5, 0, 88, 3, 0, // Skip to: 21620
/* 20764 */   MCD_OPC_Decode, 160, 8, 155, 1, // Opcode: FRINS_rec
/* 20769 */   MCD_OPC_FilterValue, 13, 12, 0, 0, // Skip to: 20786
/* 20774 */   MCD_OPC_CheckField, 16, 5, 0, 71, 3, 0, // Skip to: 21620
/* 20781 */   MCD_OPC_Decode, 168, 8, 155, 1, // Opcode: FRIZS_rec
/* 20786 */   MCD_OPC_FilterValue, 14, 12, 0, 0, // Skip to: 20803
/* 20791 */   MCD_OPC_CheckField, 16, 5, 0, 54, 3, 0, // Skip to: 21620
/* 20798 */   MCD_OPC_Decode, 164, 8, 155, 1, // Opcode: FRIPS_rec
/* 20803 */   MCD_OPC_FilterValue, 15, 44, 3, 0, // Skip to: 21620
/* 20808 */   MCD_OPC_CheckField, 16, 5, 0, 37, 3, 0, // Skip to: 21620
/* 20815 */   MCD_OPC_Decode, 156, 8, 155, 1, // Opcode: FRIMS_rec
/* 20820 */   MCD_OPC_FilterValue, 24, 19, 0, 0, // Skip to: 20844
/* 20825 */   MCD_OPC_CheckField, 16, 5, 0, 20, 3, 0, // Skip to: 21620
/* 20832 */   MCD_OPC_CheckField, 6, 5, 0, 13, 3, 0, // Skip to: 21620
/* 20839 */   MCD_OPC_Decode, 169, 8, 153, 1, // Opcode: FRSP
/* 20844 */   MCD_OPC_FilterValue, 25, 19, 0, 0, // Skip to: 20868
/* 20849 */   MCD_OPC_CheckField, 16, 5, 0, 252, 2, 0, // Skip to: 21620
/* 20856 */   MCD_OPC_CheckField, 6, 5, 0, 245, 2, 0, // Skip to: 21620
/* 20863 */   MCD_OPC_Decode, 170, 8, 153, 1, // Opcode: FRSP_rec
/* 20868 */   MCD_OPC_FilterValue, 28, 105, 0, 0, // Skip to: 20978
/* 20873 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20876 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 20893
/* 20881 */   MCD_OPC_CheckField, 16, 5, 0, 220, 2, 0, // Skip to: 21620
/* 20888 */   MCD_OPC_Decode, 235, 7, 199, 1, // Opcode: FCTIW
/* 20893 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 20910
/* 20898 */   MCD_OPC_CheckField, 16, 5, 0, 203, 2, 0, // Skip to: 21620
/* 20905 */   MCD_OPC_Decode, 236, 7, 199, 1, // Opcode: FCTIWU
/* 20910 */   MCD_OPC_FilterValue, 25, 12, 0, 0, // Skip to: 20927
/* 20915 */   MCD_OPC_CheckField, 16, 5, 0, 186, 2, 0, // Skip to: 21620
/* 20922 */   MCD_OPC_Decode, 227, 7, 199, 1, // Opcode: FCTID
/* 20927 */   MCD_OPC_FilterValue, 26, 12, 0, 0, // Skip to: 20944
/* 20932 */   MCD_OPC_CheckField, 16, 5, 0, 169, 2, 0, // Skip to: 21620
/* 20939 */   MCD_OPC_Decode, 211, 7, 199, 1, // Opcode: FCFID
/* 20944 */   MCD_OPC_FilterValue, 29, 12, 0, 0, // Skip to: 20961
/* 20949 */   MCD_OPC_CheckField, 16, 5, 0, 152, 2, 0, // Skip to: 21620
/* 20956 */   MCD_OPC_Decode, 228, 7, 199, 1, // Opcode: FCTIDU
/* 20961 */   MCD_OPC_FilterValue, 30, 142, 2, 0, // Skip to: 21620
/* 20966 */   MCD_OPC_CheckField, 16, 5, 0, 135, 2, 0, // Skip to: 21620
/* 20973 */   MCD_OPC_Decode, 214, 7, 199, 1, // Opcode: FCFIDU
/* 20978 */   MCD_OPC_FilterValue, 29, 105, 0, 0, // Skip to: 21088
/* 20983 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 20986 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 21003
/* 20991 */   MCD_OPC_CheckField, 16, 5, 0, 110, 2, 0, // Skip to: 21620
/* 20998 */   MCD_OPC_Decode, 242, 7, 199, 1, // Opcode: FCTIW_rec
/* 21003 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 21020
/* 21008 */   MCD_OPC_CheckField, 16, 5, 0, 93, 2, 0, // Skip to: 21620
/* 21015 */   MCD_OPC_Decode, 239, 7, 199, 1, // Opcode: FCTIWU_rec
/* 21020 */   MCD_OPC_FilterValue, 25, 12, 0, 0, // Skip to: 21037
/* 21025 */   MCD_OPC_CheckField, 16, 5, 0, 76, 2, 0, // Skip to: 21620
/* 21032 */   MCD_OPC_Decode, 234, 7, 199, 1, // Opcode: FCTID_rec
/* 21037 */   MCD_OPC_FilterValue, 26, 12, 0, 0, // Skip to: 21054
/* 21042 */   MCD_OPC_CheckField, 16, 5, 0, 59, 2, 0, // Skip to: 21620
/* 21049 */   MCD_OPC_Decode, 218, 7, 199, 1, // Opcode: FCFID_rec
/* 21054 */   MCD_OPC_FilterValue, 29, 12, 0, 0, // Skip to: 21071
/* 21059 */   MCD_OPC_CheckField, 16, 5, 0, 42, 2, 0, // Skip to: 21620
/* 21066 */   MCD_OPC_Decode, 231, 7, 199, 1, // Opcode: FCTIDU_rec
/* 21071 */   MCD_OPC_FilterValue, 30, 32, 2, 0, // Skip to: 21620
/* 21076 */   MCD_OPC_CheckField, 16, 5, 0, 25, 2, 0, // Skip to: 21620
/* 21083 */   MCD_OPC_Decode, 217, 7, 199, 1, // Opcode: FCFIDU_rec
/* 21088 */   MCD_OPC_FilterValue, 30, 71, 0, 0, // Skip to: 21164
/* 21093 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 21096 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 21113
/* 21101 */   MCD_OPC_CheckField, 16, 5, 0, 0, 2, 0, // Skip to: 21620
/* 21108 */   MCD_OPC_Decode, 240, 7, 199, 1, // Opcode: FCTIWZ
/* 21113 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 21130
/* 21118 */   MCD_OPC_CheckField, 16, 5, 0, 239, 1, 0, // Skip to: 21620
/* 21125 */   MCD_OPC_Decode, 237, 7, 199, 1, // Opcode: FCTIWUZ
/* 21130 */   MCD_OPC_FilterValue, 25, 12, 0, 0, // Skip to: 21147
/* 21135 */   MCD_OPC_CheckField, 16, 5, 0, 222, 1, 0, // Skip to: 21620
/* 21142 */   MCD_OPC_Decode, 232, 7, 199, 1, // Opcode: FCTIDZ
/* 21147 */   MCD_OPC_FilterValue, 29, 212, 1, 0, // Skip to: 21620
/* 21152 */   MCD_OPC_CheckField, 16, 5, 0, 205, 1, 0, // Skip to: 21620
/* 21159 */   MCD_OPC_Decode, 229, 7, 199, 1, // Opcode: FCTIDUZ
/* 21164 */   MCD_OPC_FilterValue, 31, 71, 0, 0, // Skip to: 21240
/* 21169 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 21172 */   MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 21189
/* 21177 */   MCD_OPC_CheckField, 16, 5, 0, 180, 1, 0, // Skip to: 21620
/* 21184 */   MCD_OPC_Decode, 241, 7, 199, 1, // Opcode: FCTIWZ_rec
/* 21189 */   MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 21206
/* 21194 */   MCD_OPC_CheckField, 16, 5, 0, 163, 1, 0, // Skip to: 21620
/* 21201 */   MCD_OPC_Decode, 238, 7, 199, 1, // Opcode: FCTIWUZ_rec
/* 21206 */   MCD_OPC_FilterValue, 25, 12, 0, 0, // Skip to: 21223
/* 21211 */   MCD_OPC_CheckField, 16, 5, 0, 146, 1, 0, // Skip to: 21620
/* 21218 */   MCD_OPC_Decode, 233, 7, 199, 1, // Opcode: FCTIDZ_rec
/* 21223 */   MCD_OPC_FilterValue, 29, 136, 1, 0, // Skip to: 21620
/* 21228 */   MCD_OPC_CheckField, 16, 5, 0, 129, 1, 0, // Skip to: 21620
/* 21235 */   MCD_OPC_Decode, 230, 7, 199, 1, // Opcode: FCTIDUZ_rec
/* 21240 */   MCD_OPC_FilterValue, 36, 12, 0, 0, // Skip to: 21257
/* 21245 */   MCD_OPC_CheckField, 6, 5, 0, 112, 1, 0, // Skip to: 21620
/* 21252 */   MCD_OPC_Decode, 243, 7, 203, 1, // Opcode: FDIV
/* 21257 */   MCD_OPC_FilterValue, 37, 12, 0, 0, // Skip to: 21274
/* 21262 */   MCD_OPC_CheckField, 6, 5, 0, 95, 1, 0, // Skip to: 21620
/* 21269 */   MCD_OPC_Decode, 246, 7, 203, 1, // Opcode: FDIV_rec
/* 21274 */   MCD_OPC_FilterValue, 40, 12, 0, 0, // Skip to: 21291
/* 21279 */   MCD_OPC_CheckField, 6, 5, 0, 78, 1, 0, // Skip to: 21620
/* 21286 */   MCD_OPC_Decode, 183, 8, 203, 1, // Opcode: FSUB
/* 21291 */   MCD_OPC_FilterValue, 41, 12, 0, 0, // Skip to: 21308
/* 21296 */   MCD_OPC_CheckField, 6, 5, 0, 61, 1, 0, // Skip to: 21620
/* 21303 */   MCD_OPC_Decode, 186, 8, 203, 1, // Opcode: FSUB_rec
/* 21308 */   MCD_OPC_FilterValue, 42, 12, 0, 0, // Skip to: 21325
/* 21313 */   MCD_OPC_CheckField, 6, 5, 0, 44, 1, 0, // Skip to: 21620
/* 21320 */   MCD_OPC_Decode, 206, 7, 203, 1, // Opcode: FADD
/* 21325 */   MCD_OPC_FilterValue, 43, 12, 0, 0, // Skip to: 21342
/* 21330 */   MCD_OPC_CheckField, 6, 5, 0, 27, 1, 0, // Skip to: 21620
/* 21337 */   MCD_OPC_Decode, 209, 7, 203, 1, // Opcode: FADD_rec
/* 21342 */   MCD_OPC_FilterValue, 44, 19, 0, 0, // Skip to: 21366
/* 21347 */   MCD_OPC_CheckField, 16, 5, 0, 10, 1, 0, // Skip to: 21620
/* 21354 */   MCD_OPC_CheckField, 6, 5, 0, 3, 1, 0, // Skip to: 21620
/* 21361 */   MCD_OPC_Decode, 179, 8, 199, 1, // Opcode: FSQRT
/* 21366 */   MCD_OPC_FilterValue, 45, 19, 0, 0, // Skip to: 21390
/* 21371 */   MCD_OPC_CheckField, 16, 5, 0, 242, 0, 0, // Skip to: 21620
/* 21378 */   MCD_OPC_CheckField, 6, 5, 0, 235, 0, 0, // Skip to: 21620
/* 21385 */   MCD_OPC_Decode, 182, 8, 199, 1, // Opcode: FSQRT_rec
/* 21390 */   MCD_OPC_FilterValue, 46, 5, 0, 0, // Skip to: 21400
/* 21395 */   MCD_OPC_Decode, 177, 8, 204, 1, // Opcode: FSELS
/* 21400 */   MCD_OPC_FilterValue, 47, 5, 0, 0, // Skip to: 21410
/* 21405 */   MCD_OPC_Decode, 178, 8, 204, 1, // Opcode: FSELS_rec
/* 21410 */   MCD_OPC_FilterValue, 48, 19, 0, 0, // Skip to: 21434
/* 21415 */   MCD_OPC_CheckField, 16, 5, 0, 198, 0, 0, // Skip to: 21620
/* 21422 */   MCD_OPC_CheckField, 6, 5, 0, 191, 0, 0, // Skip to: 21620
/* 21429 */   MCD_OPC_Decode, 149, 8, 199, 1, // Opcode: FRE
/* 21434 */   MCD_OPC_FilterValue, 49, 19, 0, 0, // Skip to: 21458
/* 21439 */   MCD_OPC_CheckField, 16, 5, 0, 174, 0, 0, // Skip to: 21620
/* 21446 */   MCD_OPC_CheckField, 6, 5, 0, 167, 0, 0, // Skip to: 21620
/* 21453 */   MCD_OPC_Decode, 152, 8, 199, 1, // Opcode: FRE_rec
/* 21458 */   MCD_OPC_FilterValue, 50, 12, 0, 0, // Skip to: 21475
/* 21463 */   MCD_OPC_CheckField, 11, 5, 0, 150, 0, 0, // Skip to: 21620
/* 21470 */   MCD_OPC_Decode, 129, 8, 205, 1, // Opcode: FMUL
/* 21475 */   MCD_OPC_FilterValue, 51, 12, 0, 0, // Skip to: 21492
/* 21480 */   MCD_OPC_CheckField, 11, 5, 0, 133, 0, 0, // Skip to: 21620
/* 21487 */   MCD_OPC_Decode, 132, 8, 205, 1, // Opcode: FMUL_rec
/* 21492 */   MCD_OPC_FilterValue, 52, 19, 0, 0, // Skip to: 21516
/* 21497 */   MCD_OPC_CheckField, 16, 5, 0, 116, 0, 0, // Skip to: 21620
/* 21504 */   MCD_OPC_CheckField, 6, 5, 0, 109, 0, 0, // Skip to: 21620
/* 21511 */   MCD_OPC_Decode, 171, 8, 199, 1, // Opcode: FRSQRTE
/* 21516 */   MCD_OPC_FilterValue, 53, 19, 0, 0, // Skip to: 21540
/* 21521 */   MCD_OPC_CheckField, 16, 5, 0, 92, 0, 0, // Skip to: 21620
/* 21528 */   MCD_OPC_CheckField, 6, 5, 0, 85, 0, 0, // Skip to: 21620
/* 21535 */   MCD_OPC_Decode, 174, 8, 199, 1, // Opcode: FRSQRTE_rec
/* 21540 */   MCD_OPC_FilterValue, 56, 5, 0, 0, // Skip to: 21550
/* 21545 */   MCD_OPC_Decode, 253, 7, 206, 1, // Opcode: FMSUB
/* 21550 */   MCD_OPC_FilterValue, 57, 5, 0, 0, // Skip to: 21560
/* 21555 */   MCD_OPC_Decode, 128, 8, 206, 1, // Opcode: FMSUB_rec
/* 21560 */   MCD_OPC_FilterValue, 58, 5, 0, 0, // Skip to: 21570
/* 21565 */   MCD_OPC_Decode, 247, 7, 206, 1, // Opcode: FMADD
/* 21570 */   MCD_OPC_FilterValue, 59, 5, 0, 0, // Skip to: 21580
/* 21575 */   MCD_OPC_Decode, 250, 7, 206, 1, // Opcode: FMADD_rec
/* 21580 */   MCD_OPC_FilterValue, 60, 5, 0, 0, // Skip to: 21590
/* 21585 */   MCD_OPC_Decode, 145, 8, 206, 1, // Opcode: FNMSUB
/* 21590 */   MCD_OPC_FilterValue, 61, 5, 0, 0, // Skip to: 21600
/* 21595 */   MCD_OPC_Decode, 148, 8, 206, 1, // Opcode: FNMSUB_rec
/* 21600 */   MCD_OPC_FilterValue, 62, 5, 0, 0, // Skip to: 21610
/* 21605 */   MCD_OPC_Decode, 141, 8, 206, 1, // Opcode: FNMADD
/* 21610 */   MCD_OPC_FilterValue, 63, 5, 0, 0, // Skip to: 21620
/* 21615 */   MCD_OPC_Decode, 144, 8, 206, 1, // Opcode: FNMADD_rec
/* 21620 */   MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTable64[] = {
/* 0 */       MCD_OPC_ExtractField, 27, 5,  // Inst{31-27} ...
/* 3 */       MCD_OPC_FilterValue, 7, 52, 0, 0, // Skip to: 60
/* 8 */       MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 11 */      MCD_OPC_FilterValue, 128, 3, 25, 0, 0, // Skip to: 42
/* 17 */      MCD_OPC_ExtractField, 26, 1,  // Inst{26} ...
/* 20 */      MCD_OPC_FilterValue, 0, 79, 9, 0, // Skip to: 2408
/* 25 */      MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 37
/* 32 */      MCD_OPC_Decode, 134, 11, 207, 1, // Opcode: PLI
/* 37 */      MCD_OPC_Decode, 237, 10, 208, 1, // Opcode: PADDI
/* 42 */      MCD_OPC_FilterValue, 132, 3, 56, 9, 0, // Skip to: 2408
/* 48 */      MCD_OPC_CheckField, 26, 1, 0, 49, 9, 0, // Skip to: 2408
/* 55 */      MCD_OPC_Decode, 241, 10, 209, 1, // Opcode: PADDIpc
/* 60 */      MCD_OPC_FilterValue, 16, 191, 0, 0, // Skip to: 256
/* 65 */      MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 68 */      MCD_OPC_FilterValue, 192, 2, 146, 0, 0, // Skip to: 220
/* 74 */      MCD_OPC_ExtractField, 26, 1,  // Inst{26} ...
/* 77 */      MCD_OPC_FilterValue, 0, 62, 0, 0, // Skip to: 144
/* 82 */      MCD_OPC_ExtractField, 18, 3,  // Inst{20-18} ...
/* 85 */      MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 102
/* 90 */      MCD_OPC_CheckField, 48, 2, 0, 7, 9, 0, // Skip to: 2408
/* 97 */      MCD_OPC_Decode, 196, 19, 210, 1, // Opcode: XXSPLTI32DX
/* 102 */     MCD_OPC_FilterValue, 1, 253, 8, 0, // Skip to: 2408
/* 107 */     MCD_OPC_ExtractField, 17, 1,  // Inst{17} ...
/* 110 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 127
/* 115 */     MCD_OPC_CheckField, 48, 2, 0, 238, 8, 0, // Skip to: 2408
/* 122 */     MCD_OPC_Decode, 198, 19, 211, 1, // Opcode: XXSPLTIDP
/* 127 */     MCD_OPC_FilterValue, 1, 228, 8, 0, // Skip to: 2408
/* 132 */     MCD_OPC_CheckField, 48, 2, 0, 221, 8, 0, // Skip to: 2408
/* 139 */     MCD_OPC_Decode, 199, 19, 211, 1, // Opcode: XXSPLTIW
/* 144 */     MCD_OPC_FilterValue, 1, 211, 8, 0, // Skip to: 2408
/* 149 */     MCD_OPC_ExtractField, 4, 2,  // Inst{5-4} ...
/* 152 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 169
/* 157 */     MCD_OPC_CheckField, 32, 18, 0, 196, 8, 0, // Skip to: 2408
/* 164 */     MCD_OPC_Decode, 155, 19, 185, 1, // Opcode: XXBLENDVB
/* 169 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 186
/* 174 */     MCD_OPC_CheckField, 32, 18, 0, 179, 8, 0, // Skip to: 2408
/* 181 */     MCD_OPC_Decode, 157, 19, 185, 1, // Opcode: XXBLENDVH
/* 186 */     MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 203
/* 191 */     MCD_OPC_CheckField, 32, 18, 0, 162, 8, 0, // Skip to: 2408
/* 198 */     MCD_OPC_Decode, 158, 19, 185, 1, // Opcode: XXBLENDVW
/* 203 */     MCD_OPC_FilterValue, 3, 152, 8, 0, // Skip to: 2408
/* 208 */     MCD_OPC_CheckField, 32, 18, 0, 145, 8, 0, // Skip to: 2408
/* 215 */     MCD_OPC_Decode, 156, 19, 185, 1, // Opcode: XXBLENDVD
/* 220 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 238
/* 226 */     MCD_OPC_CheckField, 26, 1, 0, 127, 8, 0, // Skip to: 2408
/* 233 */     MCD_OPC_Decode, 140, 11, 212, 1, // Opcode: PLWZ
/* 238 */     MCD_OPC_FilterValue, 132, 3, 116, 8, 0, // Skip to: 2408
/* 244 */     MCD_OPC_CheckField, 26, 1, 0, 109, 8, 0, // Skip to: 2408
/* 251 */     MCD_OPC_Decode, 143, 11, 213, 1, // Opcode: PLWZpc
/* 256 */     MCD_OPC_FilterValue, 17, 96, 0, 0, // Skip to: 357
/* 261 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 264 */     MCD_OPC_FilterValue, 192, 2, 51, 0, 0, // Skip to: 321
/* 270 */     MCD_OPC_ExtractField, 4, 2,  // Inst{5-4} ...
/* 273 */     MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 297
/* 278 */     MCD_OPC_CheckField, 35, 15, 0, 75, 8, 0, // Skip to: 2408
/* 285 */     MCD_OPC_CheckField, 26, 1, 0, 68, 8, 0, // Skip to: 2408
/* 292 */     MCD_OPC_Decode, 191, 19, 214, 1, // Opcode: XXPERMX
/* 297 */     MCD_OPC_FilterValue, 1, 58, 8, 0, // Skip to: 2408
/* 302 */     MCD_OPC_CheckField, 40, 10, 0, 51, 8, 0, // Skip to: 2408
/* 309 */     MCD_OPC_CheckField, 26, 1, 0, 44, 8, 0, // Skip to: 2408
/* 316 */     MCD_OPC_Decode, 163, 19, 215, 1, // Opcode: XXEVAL
/* 321 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 339
/* 327 */     MCD_OPC_CheckField, 26, 1, 0, 26, 8, 0, // Skip to: 2408
/* 334 */     MCD_OPC_Decode, 244, 10, 212, 1, // Opcode: PLBZ
/* 339 */     MCD_OPC_FilterValue, 132, 3, 15, 8, 0, // Skip to: 2408
/* 345 */     MCD_OPC_CheckField, 26, 1, 0, 8, 8, 0, // Skip to: 2408
/* 352 */     MCD_OPC_Decode, 247, 10, 213, 1, // Opcode: PLBZpc
/* 357 */     MCD_OPC_FilterValue, 18, 39, 0, 0, // Skip to: 401
/* 362 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 365 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 383
/* 371 */     MCD_OPC_CheckField, 26, 1, 0, 238, 7, 0, // Skip to: 2408
/* 378 */     MCD_OPC_Decode, 209, 11, 212, 1, // Opcode: PSTW
/* 383 */     MCD_OPC_FilterValue, 132, 3, 227, 7, 0, // Skip to: 2408
/* 389 */     MCD_OPC_CheckField, 26, 1, 0, 220, 7, 0, // Skip to: 2408
/* 396 */     MCD_OPC_Decode, 212, 11, 213, 1, // Opcode: PSTWpc
/* 401 */     MCD_OPC_FilterValue, 19, 39, 0, 0, // Skip to: 445
/* 406 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 409 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 427
/* 415 */     MCD_OPC_CheckField, 26, 1, 0, 194, 7, 0, // Skip to: 2408
/* 422 */     MCD_OPC_Decode, 195, 11, 212, 1, // Opcode: PSTB
/* 427 */     MCD_OPC_FilterValue, 132, 3, 183, 7, 0, // Skip to: 2408
/* 433 */     MCD_OPC_CheckField, 26, 1, 0, 176, 7, 0, // Skip to: 2408
/* 440 */     MCD_OPC_Decode, 198, 11, 213, 1, // Opcode: PSTBpc
/* 445 */     MCD_OPC_FilterValue, 20, 75, 0, 0, // Skip to: 525
/* 450 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 453 */     MCD_OPC_FilterValue, 128, 2, 12, 0, 0, // Skip to: 471
/* 459 */     MCD_OPC_CheckField, 26, 1, 1, 150, 7, 0, // Skip to: 2408
/* 466 */     MCD_OPC_Decode, 136, 11, 212, 1, // Opcode: PLWA
/* 471 */     MCD_OPC_FilterValue, 132, 2, 12, 0, 0, // Skip to: 489
/* 477 */     MCD_OPC_CheckField, 26, 1, 1, 132, 7, 0, // Skip to: 2408
/* 484 */     MCD_OPC_Decode, 139, 11, 213, 1, // Opcode: PLWApc
/* 489 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 507
/* 495 */     MCD_OPC_CheckField, 26, 1, 0, 114, 7, 0, // Skip to: 2408
/* 502 */     MCD_OPC_Decode, 130, 11, 212, 1, // Opcode: PLHZ
/* 507 */     MCD_OPC_FilterValue, 132, 3, 103, 7, 0, // Skip to: 2408
/* 513 */     MCD_OPC_CheckField, 26, 1, 0, 96, 7, 0, // Skip to: 2408
/* 520 */     MCD_OPC_Decode, 133, 11, 213, 1, // Opcode: PLHZpc
/* 525 */     MCD_OPC_FilterValue, 21, 97, 0, 0, // Skip to: 627
/* 530 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 533 */     MCD_OPC_FilterValue, 128, 2, 23, 0, 0, // Skip to: 562
/* 539 */     MCD_OPC_ExtractField, 26, 1,  // Inst{26} ...
/* 542 */     MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 552
/* 547 */     MCD_OPC_Decode, 144, 11, 216, 1, // Opcode: PLXSD
/* 552 */     MCD_OPC_FilterValue, 1, 59, 7, 0, // Skip to: 2408
/* 557 */     MCD_OPC_Decode, 146, 11, 216, 1, // Opcode: PLXSSP
/* 562 */     MCD_OPC_FilterValue, 132, 2, 23, 0, 0, // Skip to: 591
/* 568 */     MCD_OPC_ExtractField, 26, 1,  // Inst{26} ...
/* 571 */     MCD_OPC_FilterValue, 0, 5, 0, 0, // Skip to: 581
/* 576 */     MCD_OPC_Decode, 145, 11, 217, 1, // Opcode: PLXSDpc
/* 581 */     MCD_OPC_FilterValue, 1, 30, 7, 0, // Skip to: 2408
/* 586 */     MCD_OPC_Decode, 147, 11, 217, 1, // Opcode: PLXSSPpc
/* 591 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 609
/* 597 */     MCD_OPC_CheckField, 26, 1, 0, 12, 7, 0, // Skip to: 2408
/* 604 */     MCD_OPC_Decode, 254, 10, 212, 1, // Opcode: PLHA
/* 609 */     MCD_OPC_FilterValue, 132, 3, 1, 7, 0, // Skip to: 2408
/* 615 */     MCD_OPC_CheckField, 26, 1, 0, 250, 6, 0, // Skip to: 2408
/* 622 */     MCD_OPC_Decode, 129, 11, 213, 1, // Opcode: PLHApc
/* 627 */     MCD_OPC_FilterValue, 22, 39, 0, 0, // Skip to: 671
/* 632 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 635 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 653
/* 641 */     MCD_OPC_CheckField, 26, 1, 0, 224, 6, 0, // Skip to: 2408
/* 648 */     MCD_OPC_Decode, 205, 11, 212, 1, // Opcode: PSTH
/* 653 */     MCD_OPC_FilterValue, 132, 3, 213, 6, 0, // Skip to: 2408
/* 659 */     MCD_OPC_CheckField, 26, 1, 0, 206, 6, 0, // Skip to: 2408
/* 666 */     MCD_OPC_Decode, 208, 11, 213, 1, // Opcode: PSTHpc
/* 671 */     MCD_OPC_FilterValue, 23, 63, 0, 0, // Skip to: 739
/* 676 */     MCD_OPC_ExtractField, 26, 1,  // Inst{26} ...
/* 679 */     MCD_OPC_FilterValue, 0, 25, 0, 0, // Skip to: 709
/* 684 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 687 */     MCD_OPC_FilterValue, 128, 2, 5, 0, 0, // Skip to: 698
/* 693 */     MCD_OPC_Decode, 213, 11, 216, 1, // Opcode: PSTXSD
/* 698 */     MCD_OPC_FilterValue, 132, 2, 168, 6, 0, // Skip to: 2408
/* 704 */     MCD_OPC_Decode, 214, 11, 217, 1, // Opcode: PSTXSDpc
/* 709 */     MCD_OPC_FilterValue, 1, 158, 6, 0, // Skip to: 2408
/* 714 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 717 */     MCD_OPC_FilterValue, 128, 2, 5, 0, 0, // Skip to: 728
/* 723 */     MCD_OPC_Decode, 215, 11, 216, 1, // Opcode: PSTXSSP
/* 728 */     MCD_OPC_FilterValue, 132, 2, 138, 6, 0, // Skip to: 2408
/* 734 */     MCD_OPC_Decode, 216, 11, 217, 1, // Opcode: PSTXSSPpc
/* 739 */     MCD_OPC_FilterValue, 24, 39, 0, 0, // Skip to: 783
/* 744 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 747 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 765
/* 753 */     MCD_OPC_CheckField, 26, 1, 0, 112, 6, 0, // Skip to: 2408
/* 760 */     MCD_OPC_Decode, 252, 10, 218, 1, // Opcode: PLFS
/* 765 */     MCD_OPC_FilterValue, 132, 3, 101, 6, 0, // Skip to: 2408
/* 771 */     MCD_OPC_CheckField, 26, 1, 0, 94, 6, 0, // Skip to: 2408
/* 778 */     MCD_OPC_Decode, 253, 10, 219, 1, // Opcode: PLFSpc
/* 783 */     MCD_OPC_FilterValue, 25, 61, 0, 0, // Skip to: 849
/* 788 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 791 */     MCD_OPC_FilterValue, 128, 2, 5, 0, 0, // Skip to: 802
/* 797 */     MCD_OPC_Decode, 148, 11, 220, 1, // Opcode: PLXV
/* 802 */     MCD_OPC_FilterValue, 132, 2, 5, 0, 0, // Skip to: 813
/* 808 */     MCD_OPC_Decode, 151, 11, 221, 1, // Opcode: PLXVpc
/* 813 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 831
/* 819 */     MCD_OPC_CheckField, 26, 1, 0, 46, 6, 0, // Skip to: 2408
/* 826 */     MCD_OPC_Decode, 250, 10, 222, 1, // Opcode: PLFD
/* 831 */     MCD_OPC_FilterValue, 132, 3, 35, 6, 0, // Skip to: 2408
/* 837 */     MCD_OPC_CheckField, 26, 1, 0, 28, 6, 0, // Skip to: 2408
/* 844 */     MCD_OPC_Decode, 251, 10, 223, 1, // Opcode: PLFDpc
/* 849 */     MCD_OPC_FilterValue, 26, 39, 0, 0, // Skip to: 893
/* 854 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 857 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 875
/* 863 */     MCD_OPC_CheckField, 26, 1, 0, 2, 6, 0, // Skip to: 2408
/* 870 */     MCD_OPC_Decode, 203, 11, 218, 1, // Opcode: PSTFS
/* 875 */     MCD_OPC_FilterValue, 132, 3, 247, 5, 0, // Skip to: 2408
/* 881 */     MCD_OPC_CheckField, 26, 1, 0, 240, 5, 0, // Skip to: 2408
/* 888 */     MCD_OPC_Decode, 204, 11, 219, 1, // Opcode: PSTFSpc
/* 893 */     MCD_OPC_FilterValue, 27, 61, 0, 0, // Skip to: 959
/* 898 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 901 */     MCD_OPC_FilterValue, 128, 2, 5, 0, 0, // Skip to: 912
/* 907 */     MCD_OPC_Decode, 217, 11, 220, 1, // Opcode: PSTXV
/* 912 */     MCD_OPC_FilterValue, 132, 2, 5, 0, 0, // Skip to: 923
/* 918 */     MCD_OPC_Decode, 220, 11, 221, 1, // Opcode: PSTXVpc
/* 923 */     MCD_OPC_FilterValue, 128, 3, 12, 0, 0, // Skip to: 941
/* 929 */     MCD_OPC_CheckField, 26, 1, 0, 192, 5, 0, // Skip to: 2408
/* 936 */     MCD_OPC_Decode, 201, 11, 222, 1, // Opcode: PSTFD
/* 941 */     MCD_OPC_FilterValue, 132, 3, 181, 5, 0, // Skip to: 2408
/* 947 */     MCD_OPC_CheckField, 26, 1, 0, 174, 5, 0, // Skip to: 2408
/* 954 */     MCD_OPC_Decode, 202, 11, 223, 1, // Opcode: PSTFDpc
/* 959 */     MCD_OPC_FilterValue, 28, 39, 0, 0, // Skip to: 1003
/* 964 */     MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 967 */     MCD_OPC_FilterValue, 128, 2, 12, 0, 0, // Skip to: 985
/* 973 */     MCD_OPC_CheckField, 26, 1, 1, 148, 5, 0, // Skip to: 2408
/* 980 */     MCD_OPC_Decode, 248, 10, 224, 1, // Opcode: PLD
/* 985 */     MCD_OPC_FilterValue, 132, 2, 137, 5, 0, // Skip to: 2408
/* 991 */     MCD_OPC_CheckField, 26, 1, 1, 130, 5, 0, // Skip to: 2408
/* 998 */     MCD_OPC_Decode, 249, 10, 225, 1, // Opcode: PLDpc
/* 1003 */    MCD_OPC_FilterValue, 29, 32, 5, 0, // Skip to: 2320
/* 1008 */    MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 1011 */    MCD_OPC_FilterValue, 128, 2, 12, 0, 0, // Skip to: 1029
/* 1017 */    MCD_OPC_CheckField, 26, 1, 0, 104, 5, 0, // Skip to: 2408
/* 1024 */    MCD_OPC_Decode, 149, 11, 226, 1, // Opcode: PLXVP
/* 1029 */    MCD_OPC_FilterValue, 132, 2, 12, 0, 0, // Skip to: 1047
/* 1035 */    MCD_OPC_CheckField, 26, 1, 0, 86, 5, 0, // Skip to: 2408
/* 1042 */    MCD_OPC_Decode, 150, 11, 227, 1, // Opcode: PLXVPpc
/* 1047 */    MCD_OPC_FilterValue, 228, 3, 75, 5, 0, // Skip to: 2408
/* 1053 */    MCD_OPC_ExtractField, 3, 8,  // Inst{10-3} ...
/* 1056 */    MCD_OPC_FilterValue, 2, 40, 0, 0, // Skip to: 1101
/* 1061 */    MCD_OPC_CheckField, 48, 2, 0, 60, 5, 0, // Skip to: 2408
/* 1068 */    MCD_OPC_CheckField, 40, 4, 0, 53, 5, 0, // Skip to: 2408
/* 1075 */    MCD_OPC_CheckField, 26, 1, 1, 46, 5, 0, // Skip to: 2408
/* 1082 */    MCD_OPC_CheckField, 21, 2, 0, 39, 5, 0, // Skip to: 2408
/* 1089 */    MCD_OPC_CheckField, 0, 1, 0, 32, 5, 0, // Skip to: 2408
/* 1096 */    MCD_OPC_Decode, 179, 11, 228, 1, // Opcode: PMXVI8GER4PP
/* 1101 */    MCD_OPC_FilterValue, 3, 40, 0, 0, // Skip to: 1146
/* 1106 */    MCD_OPC_CheckField, 48, 2, 0, 15, 5, 0, // Skip to: 2408
/* 1113 */    MCD_OPC_CheckField, 40, 4, 0, 8, 5, 0, // Skip to: 2408
/* 1120 */    MCD_OPC_CheckField, 26, 1, 1, 1, 5, 0, // Skip to: 2408
/* 1127 */    MCD_OPC_CheckField, 21, 2, 0, 250, 4, 0, // Skip to: 2408
/* 1134 */    MCD_OPC_CheckField, 0, 1, 0, 243, 4, 0, // Skip to: 2408
/* 1141 */    MCD_OPC_Decode, 178, 11, 229, 1, // Opcode: PMXVI8GER4
/* 1146 */    MCD_OPC_FilterValue, 18, 40, 0, 0, // Skip to: 1191
/* 1151 */    MCD_OPC_CheckField, 48, 2, 0, 226, 4, 0, // Skip to: 2408
/* 1158 */    MCD_OPC_CheckField, 40, 6, 0, 219, 4, 0, // Skip to: 2408
/* 1165 */    MCD_OPC_CheckField, 26, 1, 1, 212, 4, 0, // Skip to: 2408
/* 1172 */    MCD_OPC_CheckField, 21, 2, 0, 205, 4, 0, // Skip to: 2408
/* 1179 */    MCD_OPC_CheckField, 0, 1, 0, 198, 4, 0, // Skip to: 2408
/* 1186 */    MCD_OPC_Decode, 161, 11, 230, 1, // Opcode: PMXVF16GER2PP
/* 1191 */    MCD_OPC_FilterValue, 19, 40, 0, 0, // Skip to: 1236
/* 1196 */    MCD_OPC_CheckField, 48, 2, 0, 181, 4, 0, // Skip to: 2408
/* 1203 */    MCD_OPC_CheckField, 40, 6, 0, 174, 4, 0, // Skip to: 2408
/* 1210 */    MCD_OPC_CheckField, 26, 1, 1, 167, 4, 0, // Skip to: 2408
/* 1217 */    MCD_OPC_CheckField, 21, 2, 0, 160, 4, 0, // Skip to: 2408
/* 1224 */    MCD_OPC_CheckField, 0, 1, 0, 153, 4, 0, // Skip to: 2408
/* 1231 */    MCD_OPC_Decode, 157, 11, 231, 1, // Opcode: PMXVF16GER2
/* 1236 */    MCD_OPC_FilterValue, 26, 33, 0, 0, // Skip to: 1274
/* 1241 */    MCD_OPC_CheckField, 40, 10, 0, 136, 4, 0, // Skip to: 2408
/* 1248 */    MCD_OPC_CheckField, 26, 1, 1, 129, 4, 0, // Skip to: 2408
/* 1255 */    MCD_OPC_CheckField, 21, 2, 0, 122, 4, 0, // Skip to: 2408
/* 1262 */    MCD_OPC_CheckField, 0, 1, 0, 115, 4, 0, // Skip to: 2408
/* 1269 */    MCD_OPC_Decode, 166, 11, 232, 1, // Opcode: PMXVF32GERPP
/* 1274 */    MCD_OPC_FilterValue, 27, 33, 0, 0, // Skip to: 1312
/* 1279 */    MCD_OPC_CheckField, 40, 10, 0, 98, 4, 0, // Skip to: 2408
/* 1286 */    MCD_OPC_CheckField, 26, 1, 1, 91, 4, 0, // Skip to: 2408
/* 1293 */    MCD_OPC_CheckField, 21, 2, 0, 84, 4, 0, // Skip to: 2408
/* 1300 */    MCD_OPC_CheckField, 0, 1, 0, 77, 4, 0, // Skip to: 2408
/* 1307 */    MCD_OPC_Decode, 162, 11, 233, 1, // Opcode: PMXVF32GER
/* 1312 */    MCD_OPC_FilterValue, 34, 33, 0, 0, // Skip to: 1350
/* 1317 */    MCD_OPC_CheckField, 48, 2, 0, 60, 4, 0, // Skip to: 2408
/* 1324 */    MCD_OPC_CheckField, 26, 1, 1, 53, 4, 0, // Skip to: 2408
/* 1331 */    MCD_OPC_CheckField, 21, 2, 0, 46, 4, 0, // Skip to: 2408
/* 1338 */    MCD_OPC_CheckField, 0, 1, 0, 39, 4, 0, // Skip to: 2408
/* 1345 */    MCD_OPC_Decode, 177, 11, 234, 1, // Opcode: PMXVI4GER8PP
/* 1350 */    MCD_OPC_FilterValue, 35, 33, 0, 0, // Skip to: 1388
/* 1355 */    MCD_OPC_CheckField, 48, 2, 0, 22, 4, 0, // Skip to: 2408
/* 1362 */    MCD_OPC_CheckField, 26, 1, 1, 15, 4, 0, // Skip to: 2408
/* 1369 */    MCD_OPC_CheckField, 21, 2, 0, 8, 4, 0, // Skip to: 2408
/* 1376 */    MCD_OPC_CheckField, 0, 1, 0, 1, 4, 0, // Skip to: 2408
/* 1383 */    MCD_OPC_Decode, 176, 11, 235, 1, // Opcode: PMXVI4GER8
/* 1388 */    MCD_OPC_FilterValue, 42, 40, 0, 0, // Skip to: 1433
/* 1393 */    MCD_OPC_CheckField, 48, 2, 0, 240, 3, 0, // Skip to: 2408
/* 1400 */    MCD_OPC_CheckField, 40, 6, 0, 233, 3, 0, // Skip to: 2408
/* 1407 */    MCD_OPC_CheckField, 26, 1, 1, 226, 3, 0, // Skip to: 2408
/* 1414 */    MCD_OPC_CheckField, 21, 2, 0, 219, 3, 0, // Skip to: 2408
/* 1421 */    MCD_OPC_CheckField, 0, 1, 0, 212, 3, 0, // Skip to: 2408
/* 1428 */    MCD_OPC_Decode, 175, 11, 230, 1, // Opcode: PMXVI16GER2SPP
/* 1433 */    MCD_OPC_FilterValue, 43, 40, 0, 0, // Skip to: 1478
/* 1438 */    MCD_OPC_CheckField, 48, 2, 0, 195, 3, 0, // Skip to: 2408
/* 1445 */    MCD_OPC_CheckField, 40, 6, 0, 188, 3, 0, // Skip to: 2408
/* 1452 */    MCD_OPC_CheckField, 26, 1, 1, 181, 3, 0, // Skip to: 2408
/* 1459 */    MCD_OPC_CheckField, 21, 2, 0, 174, 3, 0, // Skip to: 2408
/* 1466 */    MCD_OPC_CheckField, 0, 1, 0, 167, 3, 0, // Skip to: 2408
/* 1473 */    MCD_OPC_Decode, 174, 11, 231, 1, // Opcode: PMXVI16GER2S
/* 1478 */    MCD_OPC_FilterValue, 50, 40, 0, 0, // Skip to: 1523
/* 1483 */    MCD_OPC_CheckField, 48, 2, 0, 150, 3, 0, // Skip to: 2408
/* 1490 */    MCD_OPC_CheckField, 40, 6, 0, 143, 3, 0, // Skip to: 2408
/* 1497 */    MCD_OPC_CheckField, 26, 1, 1, 136, 3, 0, // Skip to: 2408
/* 1504 */    MCD_OPC_CheckField, 21, 2, 0, 129, 3, 0, // Skip to: 2408
/* 1511 */    MCD_OPC_CheckField, 0, 1, 0, 122, 3, 0, // Skip to: 2408
/* 1518 */    MCD_OPC_Decode, 156, 11, 230, 1, // Opcode: PMXVBF16GER2PP
/* 1523 */    MCD_OPC_FilterValue, 51, 40, 0, 0, // Skip to: 1568
/* 1528 */    MCD_OPC_CheckField, 48, 2, 0, 105, 3, 0, // Skip to: 2408
/* 1535 */    MCD_OPC_CheckField, 40, 6, 0, 98, 3, 0, // Skip to: 2408
/* 1542 */    MCD_OPC_CheckField, 26, 1, 1, 91, 3, 0, // Skip to: 2408
/* 1549 */    MCD_OPC_CheckField, 21, 2, 0, 84, 3, 0, // Skip to: 2408
/* 1556 */    MCD_OPC_CheckField, 0, 1, 0, 77, 3, 0, // Skip to: 2408
/* 1563 */    MCD_OPC_Decode, 152, 11, 231, 1, // Opcode: PMXVBF16GER2
/* 1568 */    MCD_OPC_FilterValue, 58, 40, 0, 0, // Skip to: 1613
/* 1573 */    MCD_OPC_CheckField, 40, 10, 0, 60, 3, 0, // Skip to: 2408
/* 1580 */    MCD_OPC_CheckField, 32, 2, 0, 53, 3, 0, // Skip to: 2408
/* 1587 */    MCD_OPC_CheckField, 26, 1, 1, 46, 3, 0, // Skip to: 2408
/* 1594 */    MCD_OPC_CheckField, 21, 2, 0, 39, 3, 0, // Skip to: 2408
/* 1601 */    MCD_OPC_CheckField, 0, 1, 0, 32, 3, 0, // Skip to: 2408
/* 1608 */    MCD_OPC_Decode, 171, 11, 236, 1, // Opcode: PMXVF64GERPP
/* 1613 */    MCD_OPC_FilterValue, 59, 40, 0, 0, // Skip to: 1658
/* 1618 */    MCD_OPC_CheckField, 40, 10, 0, 15, 3, 0, // Skip to: 2408
/* 1625 */    MCD_OPC_CheckField, 32, 2, 0, 8, 3, 0, // Skip to: 2408
/* 1632 */    MCD_OPC_CheckField, 26, 1, 1, 1, 3, 0, // Skip to: 2408
/* 1639 */    MCD_OPC_CheckField, 21, 2, 0, 250, 2, 0, // Skip to: 2408
/* 1646 */    MCD_OPC_CheckField, 0, 1, 0, 243, 2, 0, // Skip to: 2408
/* 1653 */    MCD_OPC_Decode, 167, 11, 237, 1, // Opcode: PMXVF64GER
/* 1658 */    MCD_OPC_FilterValue, 75, 40, 0, 0, // Skip to: 1703
/* 1663 */    MCD_OPC_CheckField, 48, 2, 0, 226, 2, 0, // Skip to: 2408
/* 1670 */    MCD_OPC_CheckField, 40, 6, 0, 219, 2, 0, // Skip to: 2408
/* 1677 */    MCD_OPC_CheckField, 26, 1, 1, 212, 2, 0, // Skip to: 2408
/* 1684 */    MCD_OPC_CheckField, 21, 2, 0, 205, 2, 0, // Skip to: 2408
/* 1691 */    MCD_OPC_CheckField, 0, 1, 0, 198, 2, 0, // Skip to: 2408
/* 1698 */    MCD_OPC_Decode, 172, 11, 231, 1, // Opcode: PMXVI16GER2
/* 1703 */    MCD_OPC_FilterValue, 82, 40, 0, 0, // Skip to: 1748
/* 1708 */    MCD_OPC_CheckField, 48, 2, 0, 181, 2, 0, // Skip to: 2408
/* 1715 */    MCD_OPC_CheckField, 40, 6, 0, 174, 2, 0, // Skip to: 2408
/* 1722 */    MCD_OPC_CheckField, 26, 1, 1, 167, 2, 0, // Skip to: 2408
/* 1729 */    MCD_OPC_CheckField, 21, 2, 0, 160, 2, 0, // Skip to: 2408
/* 1736 */    MCD_OPC_CheckField, 0, 1, 0, 153, 2, 0, // Skip to: 2408
/* 1743 */    MCD_OPC_Decode, 159, 11, 230, 1, // Opcode: PMXVF16GER2NP
/* 1748 */    MCD_OPC_FilterValue, 90, 33, 0, 0, // Skip to: 1786
/* 1753 */    MCD_OPC_CheckField, 40, 10, 0, 136, 2, 0, // Skip to: 2408
/* 1760 */    MCD_OPC_CheckField, 26, 1, 1, 129, 2, 0, // Skip to: 2408
/* 1767 */    MCD_OPC_CheckField, 21, 2, 0, 122, 2, 0, // Skip to: 2408
/* 1774 */    MCD_OPC_CheckField, 0, 1, 0, 115, 2, 0, // Skip to: 2408
/* 1781 */    MCD_OPC_Decode, 164, 11, 232, 1, // Opcode: PMXVF32GERNP
/* 1786 */    MCD_OPC_FilterValue, 99, 40, 0, 0, // Skip to: 1831
/* 1791 */    MCD_OPC_CheckField, 48, 2, 0, 98, 2, 0, // Skip to: 2408
/* 1798 */    MCD_OPC_CheckField, 40, 4, 0, 91, 2, 0, // Skip to: 2408
/* 1805 */    MCD_OPC_CheckField, 26, 1, 1, 84, 2, 0, // Skip to: 2408
/* 1812 */    MCD_OPC_CheckField, 21, 2, 0, 77, 2, 0, // Skip to: 2408
/* 1819 */    MCD_OPC_CheckField, 0, 1, 0, 70, 2, 0, // Skip to: 2408
/* 1826 */    MCD_OPC_Decode, 180, 11, 228, 1, // Opcode: PMXVI8GER4SPP
/* 1831 */    MCD_OPC_FilterValue, 107, 40, 0, 0, // Skip to: 1876
/* 1836 */    MCD_OPC_CheckField, 48, 2, 0, 53, 2, 0, // Skip to: 2408
/* 1843 */    MCD_OPC_CheckField, 40, 6, 0, 46, 2, 0, // Skip to: 2408
/* 1850 */    MCD_OPC_CheckField, 26, 1, 1, 39, 2, 0, // Skip to: 2408
/* 1857 */    MCD_OPC_CheckField, 21, 2, 0, 32, 2, 0, // Skip to: 2408
/* 1864 */    MCD_OPC_CheckField, 0, 1, 0, 25, 2, 0, // Skip to: 2408
/* 1871 */    MCD_OPC_Decode, 173, 11, 230, 1, // Opcode: PMXVI16GER2PP
/* 1876 */    MCD_OPC_FilterValue, 114, 40, 0, 0, // Skip to: 1921
/* 1881 */    MCD_OPC_CheckField, 48, 2, 0, 8, 2, 0, // Skip to: 2408
/* 1888 */    MCD_OPC_CheckField, 40, 6, 0, 1, 2, 0, // Skip to: 2408
/* 1895 */    MCD_OPC_CheckField, 26, 1, 1, 250, 1, 0, // Skip to: 2408
/* 1902 */    MCD_OPC_CheckField, 21, 2, 0, 243, 1, 0, // Skip to: 2408
/* 1909 */    MCD_OPC_CheckField, 0, 1, 0, 236, 1, 0, // Skip to: 2408
/* 1916 */    MCD_OPC_Decode, 154, 11, 230, 1, // Opcode: PMXVBF16GER2NP
/* 1921 */    MCD_OPC_FilterValue, 122, 40, 0, 0, // Skip to: 1966
/* 1926 */    MCD_OPC_CheckField, 40, 10, 0, 219, 1, 0, // Skip to: 2408
/* 1933 */    MCD_OPC_CheckField, 32, 2, 0, 212, 1, 0, // Skip to: 2408
/* 1940 */    MCD_OPC_CheckField, 26, 1, 1, 205, 1, 0, // Skip to: 2408
/* 1947 */    MCD_OPC_CheckField, 21, 2, 0, 198, 1, 0, // Skip to: 2408
/* 1954 */    MCD_OPC_CheckField, 0, 1, 0, 191, 1, 0, // Skip to: 2408
/* 1961 */    MCD_OPC_Decode, 169, 11, 236, 1, // Opcode: PMXVF64GERNP
/* 1966 */    MCD_OPC_FilterValue, 146, 1, 40, 0, 0, // Skip to: 2012
/* 1972 */    MCD_OPC_CheckField, 48, 2, 0, 173, 1, 0, // Skip to: 2408
/* 1979 */    MCD_OPC_CheckField, 40, 6, 0, 166, 1, 0, // Skip to: 2408
/* 1986 */    MCD_OPC_CheckField, 26, 1, 1, 159, 1, 0, // Skip to: 2408
/* 1993 */    MCD_OPC_CheckField, 21, 2, 0, 152, 1, 0, // Skip to: 2408
/* 2000 */    MCD_OPC_CheckField, 0, 1, 0, 145, 1, 0, // Skip to: 2408
/* 2007 */    MCD_OPC_Decode, 160, 11, 230, 1, // Opcode: PMXVF16GER2PN
/* 2012 */    MCD_OPC_FilterValue, 154, 1, 33, 0, 0, // Skip to: 2051
/* 2018 */    MCD_OPC_CheckField, 40, 10, 0, 127, 1, 0, // Skip to: 2408
/* 2025 */    MCD_OPC_CheckField, 26, 1, 1, 120, 1, 0, // Skip to: 2408
/* 2032 */    MCD_OPC_CheckField, 21, 2, 0, 113, 1, 0, // Skip to: 2408
/* 2039 */    MCD_OPC_CheckField, 0, 1, 0, 106, 1, 0, // Skip to: 2408
/* 2046 */    MCD_OPC_Decode, 165, 11, 232, 1, // Opcode: PMXVF32GERPN
/* 2051 */    MCD_OPC_FilterValue, 178, 1, 40, 0, 0, // Skip to: 2097
/* 2057 */    MCD_OPC_CheckField, 48, 2, 0, 88, 1, 0, // Skip to: 2408
/* 2064 */    MCD_OPC_CheckField, 40, 6, 0, 81, 1, 0, // Skip to: 2408
/* 2071 */    MCD_OPC_CheckField, 26, 1, 1, 74, 1, 0, // Skip to: 2408
/* 2078 */    MCD_OPC_CheckField, 21, 2, 0, 67, 1, 0, // Skip to: 2408
/* 2085 */    MCD_OPC_CheckField, 0, 1, 0, 60, 1, 0, // Skip to: 2408
/* 2092 */    MCD_OPC_Decode, 155, 11, 230, 1, // Opcode: PMXVBF16GER2PN
/* 2097 */    MCD_OPC_FilterValue, 186, 1, 40, 0, 0, // Skip to: 2143
/* 2103 */    MCD_OPC_CheckField, 40, 10, 0, 42, 1, 0, // Skip to: 2408
/* 2110 */    MCD_OPC_CheckField, 32, 2, 0, 35, 1, 0, // Skip to: 2408
/* 2117 */    MCD_OPC_CheckField, 26, 1, 1, 28, 1, 0, // Skip to: 2408
/* 2124 */    MCD_OPC_CheckField, 21, 2, 0, 21, 1, 0, // Skip to: 2408
/* 2131 */    MCD_OPC_CheckField, 0, 1, 0, 14, 1, 0, // Skip to: 2408
/* 2138 */    MCD_OPC_Decode, 170, 11, 236, 1, // Opcode: PMXVF64GERPN
/* 2143 */    MCD_OPC_FilterValue, 210, 1, 40, 0, 0, // Skip to: 2189
/* 2149 */    MCD_OPC_CheckField, 48, 2, 0, 252, 0, 0, // Skip to: 2408
/* 2156 */    MCD_OPC_CheckField, 40, 6, 0, 245, 0, 0, // Skip to: 2408
/* 2163 */    MCD_OPC_CheckField, 26, 1, 1, 238, 0, 0, // Skip to: 2408
/* 2170 */    MCD_OPC_CheckField, 21, 2, 0, 231, 0, 0, // Skip to: 2408
/* 2177 */    MCD_OPC_CheckField, 0, 1, 0, 224, 0, 0, // Skip to: 2408
/* 2184 */    MCD_OPC_Decode, 158, 11, 230, 1, // Opcode: PMXVF16GER2NN
/* 2189 */    MCD_OPC_FilterValue, 218, 1, 33, 0, 0, // Skip to: 2228
/* 2195 */    MCD_OPC_CheckField, 40, 10, 0, 206, 0, 0, // Skip to: 2408
/* 2202 */    MCD_OPC_CheckField, 26, 1, 1, 199, 0, 0, // Skip to: 2408
/* 2209 */    MCD_OPC_CheckField, 21, 2, 0, 192, 0, 0, // Skip to: 2408
/* 2216 */    MCD_OPC_CheckField, 0, 1, 0, 185, 0, 0, // Skip to: 2408
/* 2223 */    MCD_OPC_Decode, 163, 11, 232, 1, // Opcode: PMXVF32GERNN
/* 2228 */    MCD_OPC_FilterValue, 242, 1, 40, 0, 0, // Skip to: 2274
/* 2234 */    MCD_OPC_CheckField, 48, 2, 0, 167, 0, 0, // Skip to: 2408
/* 2241 */    MCD_OPC_CheckField, 40, 6, 0, 160, 0, 0, // Skip to: 2408
/* 2248 */    MCD_OPC_CheckField, 26, 1, 1, 153, 0, 0, // Skip to: 2408
/* 2255 */    MCD_OPC_CheckField, 21, 2, 0, 146, 0, 0, // Skip to: 2408
/* 2262 */    MCD_OPC_CheckField, 0, 1, 0, 139, 0, 0, // Skip to: 2408
/* 2269 */    MCD_OPC_Decode, 153, 11, 230, 1, // Opcode: PMXVBF16GER2NN
/* 2274 */    MCD_OPC_FilterValue, 250, 1, 128, 0, 0, // Skip to: 2408
/* 2280 */    MCD_OPC_CheckField, 40, 10, 0, 121, 0, 0, // Skip to: 2408
/* 2287 */    MCD_OPC_CheckField, 32, 2, 0, 114, 0, 0, // Skip to: 2408
/* 2294 */    MCD_OPC_CheckField, 26, 1, 1, 107, 0, 0, // Skip to: 2408
/* 2301 */    MCD_OPC_CheckField, 21, 2, 0, 100, 0, 0, // Skip to: 2408
/* 2308 */    MCD_OPC_CheckField, 0, 1, 0, 93, 0, 0, // Skip to: 2408
/* 2315 */    MCD_OPC_Decode, 168, 11, 236, 1, // Opcode: PMXVF64GERNN
/* 2320 */    MCD_OPC_FilterValue, 30, 39, 0, 0, // Skip to: 2364
/* 2325 */    MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 2328 */    MCD_OPC_FilterValue, 128, 2, 12, 0, 0, // Skip to: 2346
/* 2334 */    MCD_OPC_CheckField, 26, 1, 1, 67, 0, 0, // Skip to: 2408
/* 2341 */    MCD_OPC_Decode, 199, 11, 224, 1, // Opcode: PSTD
/* 2346 */    MCD_OPC_FilterValue, 132, 2, 56, 0, 0, // Skip to: 2408
/* 2352 */    MCD_OPC_CheckField, 26, 1, 1, 49, 0, 0, // Skip to: 2408
/* 2359 */    MCD_OPC_Decode, 200, 11, 225, 1, // Opcode: PSTDpc
/* 2364 */    MCD_OPC_FilterValue, 31, 39, 0, 0, // Skip to: 2408
/* 2369 */    MCD_OPC_ExtractField, 50, 14,  // Inst{63-50} ...
/* 2372 */    MCD_OPC_FilterValue, 128, 2, 12, 0, 0, // Skip to: 2390
/* 2378 */    MCD_OPC_CheckField, 26, 1, 0, 23, 0, 0, // Skip to: 2408
/* 2385 */    MCD_OPC_Decode, 218, 11, 226, 1, // Opcode: PSTXVP
/* 2390 */    MCD_OPC_FilterValue, 132, 2, 12, 0, 0, // Skip to: 2408
/* 2396 */    MCD_OPC_CheckField, 26, 1, 0, 5, 0, 0, // Skip to: 2408
/* 2403 */    MCD_OPC_Decode, 219, 11, 227, 1, // Opcode: PSTXVPpc
/* 2408 */    MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableSPE32[] = {
/* 0 */       MCD_OPC_ExtractField, 3, 8,  // Inst{10-3} ...
/* 3 */       MCD_OPC_FilterValue, 64, 71, 0, 0, // Skip to: 79
/* 8 */       MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 28
/* 16 */      MCD_OPC_CheckField, 26, 6, 4, 112, 20, 0, // Skip to: 5255
/* 23 */      MCD_OPC_Decode, 249, 5, 238, 1, // Opcode: EVADDW
/* 28 */      MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 45
/* 33 */      MCD_OPC_CheckField, 26, 6, 4, 95, 20, 0, // Skip to: 5255
/* 40 */      MCD_OPC_Decode, 244, 5, 239, 1, // Opcode: EVADDIW
/* 45 */      MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 62
/* 50 */      MCD_OPC_CheckField, 26, 6, 4, 78, 20, 0, // Skip to: 5255
/* 57 */      MCD_OPC_Decode, 179, 7, 238, 1, // Opcode: EVSUBFW
/* 62 */      MCD_OPC_FilterValue, 6, 68, 20, 0, // Skip to: 5255
/* 67 */      MCD_OPC_CheckField, 26, 6, 4, 61, 20, 0, // Skip to: 5255
/* 74 */      MCD_OPC_Decode, 180, 7, 240, 1, // Opcode: EVSUBIFW
/* 79 */      MCD_OPC_FilterValue, 65, 187, 0, 0, // Skip to: 271
/* 84 */      MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 87 */      MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 111
/* 92 */      MCD_OPC_CheckField, 26, 6, 4, 36, 20, 0, // Skip to: 5255
/* 99 */      MCD_OPC_CheckField, 11, 5, 0, 29, 20, 0, // Skip to: 5255
/* 106 */     MCD_OPC_Decode, 243, 5, 241, 1, // Opcode: EVABS
/* 111 */     MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 135
/* 116 */     MCD_OPC_CheckField, 26, 6, 4, 12, 20, 0, // Skip to: 5255
/* 123 */     MCD_OPC_CheckField, 11, 5, 0, 5, 20, 0, // Skip to: 5255
/* 130 */     MCD_OPC_Decode, 145, 7, 241, 1, // Opcode: EVNEG
/* 135 */     MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 159
/* 140 */     MCD_OPC_CheckField, 26, 6, 4, 244, 19, 0, // Skip to: 5255
/* 147 */     MCD_OPC_CheckField, 11, 5, 0, 237, 19, 0, // Skip to: 5255
/* 154 */     MCD_OPC_Decode, 134, 6, 241, 1, // Opcode: EVEXTSB
/* 159 */     MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 183
/* 164 */     MCD_OPC_CheckField, 26, 6, 4, 220, 19, 0, // Skip to: 5255
/* 171 */     MCD_OPC_CheckField, 11, 5, 0, 213, 19, 0, // Skip to: 5255
/* 178 */     MCD_OPC_Decode, 135, 6, 241, 1, // Opcode: EVEXTSH
/* 183 */     MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 207
/* 188 */     MCD_OPC_CheckField, 26, 6, 4, 196, 19, 0, // Skip to: 5255
/* 195 */     MCD_OPC_CheckField, 11, 5, 0, 189, 19, 0, // Skip to: 5255
/* 202 */     MCD_OPC_Decode, 151, 7, 241, 1, // Opcode: EVRNDW
/* 207 */     MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 231
/* 212 */     MCD_OPC_CheckField, 26, 6, 4, 172, 19, 0, // Skip to: 5255
/* 219 */     MCD_OPC_CheckField, 11, 5, 0, 165, 19, 0, // Skip to: 5255
/* 226 */     MCD_OPC_Decode, 130, 6, 241, 1, // Opcode: EVCNTLZW
/* 231 */     MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 255
/* 236 */     MCD_OPC_CheckField, 26, 6, 4, 148, 19, 0, // Skip to: 5255
/* 243 */     MCD_OPC_CheckField, 11, 5, 0, 141, 19, 0, // Skip to: 5255
/* 250 */     MCD_OPC_Decode, 129, 6, 241, 1, // Opcode: EVCNTLSW
/* 255 */     MCD_OPC_FilterValue, 7, 131, 19, 0, // Skip to: 5255
/* 260 */     MCD_OPC_CheckField, 26, 6, 4, 124, 19, 0, // Skip to: 5255
/* 267 */     MCD_OPC_Decode, 200, 4, 80, // Opcode: BRINC
/* 271 */     MCD_OPC_FilterValue, 66, 71, 0, 0, // Skip to: 347
/* 276 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 279 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 296
/* 284 */     MCD_OPC_CheckField, 26, 6, 4, 100, 19, 0, // Skip to: 5255
/* 291 */     MCD_OPC_Decode, 250, 5, 238, 1, // Opcode: EVAND
/* 296 */     MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 313
/* 301 */     MCD_OPC_CheckField, 26, 6, 4, 83, 19, 0, // Skip to: 5255
/* 308 */     MCD_OPC_Decode, 251, 5, 238, 1, // Opcode: EVANDC
/* 313 */     MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 330
/* 318 */     MCD_OPC_CheckField, 26, 6, 4, 66, 19, 0, // Skip to: 5255
/* 325 */     MCD_OPC_Decode, 181, 7, 238, 1, // Opcode: EVXOR
/* 330 */     MCD_OPC_FilterValue, 7, 56, 19, 0, // Skip to: 5255
/* 335 */     MCD_OPC_CheckField, 26, 6, 4, 49, 19, 0, // Skip to: 5255
/* 342 */     MCD_OPC_Decode, 147, 7, 238, 1, // Opcode: EVOR
/* 347 */     MCD_OPC_FilterValue, 67, 71, 0, 0, // Skip to: 423
/* 352 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 355 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 372
/* 360 */     MCD_OPC_CheckField, 26, 6, 4, 24, 19, 0, // Skip to: 5255
/* 367 */     MCD_OPC_Decode, 146, 7, 238, 1, // Opcode: EVNOR
/* 372 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 389
/* 377 */     MCD_OPC_CheckField, 26, 6, 4, 7, 19, 0, // Skip to: 5255
/* 384 */     MCD_OPC_Decode, 133, 6, 238, 1, // Opcode: EVEQV
/* 389 */     MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 406
/* 394 */     MCD_OPC_CheckField, 26, 6, 4, 246, 18, 0, // Skip to: 5255
/* 401 */     MCD_OPC_Decode, 148, 7, 238, 1, // Opcode: EVORC
/* 406 */     MCD_OPC_FilterValue, 6, 236, 18, 0, // Skip to: 5255
/* 411 */     MCD_OPC_CheckField, 26, 6, 4, 229, 18, 0, // Skip to: 5255
/* 418 */     MCD_OPC_Decode, 144, 7, 238, 1, // Opcode: EVNAND
/* 423 */     MCD_OPC_FilterValue, 68, 105, 0, 0, // Skip to: 533
/* 428 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 431 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 448
/* 436 */     MCD_OPC_CheckField, 26, 6, 4, 204, 18, 0, // Skip to: 5255
/* 443 */     MCD_OPC_Decode, 160, 7, 238, 1, // Opcode: EVSRWU
/* 448 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 465
/* 453 */     MCD_OPC_CheckField, 26, 6, 4, 187, 18, 0, // Skip to: 5255
/* 460 */     MCD_OPC_Decode, 159, 7, 238, 1, // Opcode: EVSRWS
/* 465 */     MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 482
/* 470 */     MCD_OPC_CheckField, 26, 6, 4, 170, 18, 0, // Skip to: 5255
/* 477 */     MCD_OPC_Decode, 158, 7, 239, 1, // Opcode: EVSRWIU
/* 482 */     MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 499
/* 487 */     MCD_OPC_CheckField, 26, 6, 4, 153, 18, 0, // Skip to: 5255
/* 494 */     MCD_OPC_Decode, 157, 7, 239, 1, // Opcode: EVSRWIS
/* 499 */     MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 516
/* 504 */     MCD_OPC_CheckField, 26, 6, 4, 136, 18, 0, // Skip to: 5255
/* 511 */     MCD_OPC_Decode, 153, 7, 238, 1, // Opcode: EVSLW
/* 516 */     MCD_OPC_FilterValue, 6, 126, 18, 0, // Skip to: 5255
/* 521 */     MCD_OPC_CheckField, 26, 6, 4, 119, 18, 0, // Skip to: 5255
/* 528 */     MCD_OPC_Decode, 154, 7, 239, 1, // Opcode: EVSLWI
/* 533 */     MCD_OPC_FilterValue, 69, 153, 0, 0, // Skip to: 691
/* 538 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 541 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 558
/* 546 */     MCD_OPC_CheckField, 26, 6, 4, 94, 18, 0, // Skip to: 5255
/* 553 */     MCD_OPC_Decode, 149, 7, 238, 1, // Opcode: EVRLW
/* 558 */     MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 582
/* 563 */     MCD_OPC_CheckField, 26, 6, 4, 77, 18, 0, // Skip to: 5255
/* 570 */     MCD_OPC_CheckField, 11, 5, 0, 70, 18, 0, // Skip to: 5255
/* 577 */     MCD_OPC_Decode, 156, 7, 242, 1, // Opcode: EVSPLATI
/* 582 */     MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 599
/* 587 */     MCD_OPC_CheckField, 26, 6, 4, 53, 18, 0, // Skip to: 5255
/* 594 */     MCD_OPC_Decode, 150, 7, 239, 1, // Opcode: EVRLWI
/* 599 */     MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 623
/* 604 */     MCD_OPC_CheckField, 26, 6, 4, 36, 18, 0, // Skip to: 5255
/* 611 */     MCD_OPC_CheckField, 11, 5, 0, 29, 18, 0, // Skip to: 5255
/* 618 */     MCD_OPC_Decode, 155, 7, 242, 1, // Opcode: EVSPLATFI
/* 623 */     MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 640
/* 628 */     MCD_OPC_CheckField, 26, 6, 4, 12, 18, 0, // Skip to: 5255
/* 635 */     MCD_OPC_Decode, 181, 6, 238, 1, // Opcode: EVMERGEHI
/* 640 */     MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 657
/* 645 */     MCD_OPC_CheckField, 26, 6, 4, 251, 17, 0, // Skip to: 5255
/* 652 */     MCD_OPC_Decode, 183, 6, 243, 1, // Opcode: EVMERGELO
/* 657 */     MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 674
/* 662 */     MCD_OPC_CheckField, 26, 6, 4, 234, 17, 0, // Skip to: 5255
/* 669 */     MCD_OPC_Decode, 182, 6, 238, 1, // Opcode: EVMERGEHILO
/* 674 */     MCD_OPC_FilterValue, 7, 224, 17, 0, // Skip to: 5255
/* 679 */     MCD_OPC_CheckField, 26, 6, 4, 217, 17, 0, // Skip to: 5255
/* 686 */     MCD_OPC_Decode, 184, 6, 238, 1, // Opcode: EVMERGELOHI
/* 691 */     MCD_OPC_FilterValue, 70, 123, 0, 0, // Skip to: 819
/* 696 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 699 */     MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 723
/* 704 */     MCD_OPC_CheckField, 26, 6, 4, 192, 17, 0, // Skip to: 5255
/* 711 */     MCD_OPC_CheckField, 21, 2, 0, 185, 17, 0, // Skip to: 5255
/* 718 */     MCD_OPC_Decode, 254, 5, 244, 1, // Opcode: EVCMPGTU
/* 723 */     MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 747
/* 728 */     MCD_OPC_CheckField, 26, 6, 4, 168, 17, 0, // Skip to: 5255
/* 735 */     MCD_OPC_CheckField, 21, 2, 0, 161, 17, 0, // Skip to: 5255
/* 742 */     MCD_OPC_Decode, 253, 5, 244, 1, // Opcode: EVCMPGTS
/* 747 */     MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 771
/* 752 */     MCD_OPC_CheckField, 26, 6, 4, 144, 17, 0, // Skip to: 5255
/* 759 */     MCD_OPC_CheckField, 21, 2, 0, 137, 17, 0, // Skip to: 5255
/* 766 */     MCD_OPC_Decode, 128, 6, 244, 1, // Opcode: EVCMPLTU
/* 771 */     MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 795
/* 776 */     MCD_OPC_CheckField, 26, 6, 4, 120, 17, 0, // Skip to: 5255
/* 783 */     MCD_OPC_CheckField, 21, 2, 0, 113, 17, 0, // Skip to: 5255
/* 790 */     MCD_OPC_Decode, 255, 5, 244, 1, // Opcode: EVCMPLTS
/* 795 */     MCD_OPC_FilterValue, 4, 103, 17, 0, // Skip to: 5255
/* 800 */     MCD_OPC_CheckField, 26, 6, 4, 96, 17, 0, // Skip to: 5255
/* 807 */     MCD_OPC_CheckField, 21, 2, 0, 89, 17, 0, // Skip to: 5255
/* 814 */     MCD_OPC_Decode, 252, 5, 244, 1, // Opcode: EVCMPEQ
/* 819 */     MCD_OPC_FilterValue, 79, 12, 0, 0, // Skip to: 836
/* 824 */     MCD_OPC_CheckField, 26, 6, 4, 72, 17, 0, // Skip to: 5255
/* 831 */     MCD_OPC_Decode, 152, 7, 245, 1, // Opcode: EVSEL
/* 836 */     MCD_OPC_FilterValue, 80, 109, 0, 0, // Skip to: 950
/* 841 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 844 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 861
/* 849 */     MCD_OPC_CheckField, 26, 6, 4, 47, 17, 0, // Skip to: 5255
/* 856 */     MCD_OPC_Decode, 137, 6, 238, 1, // Opcode: EVFSADD
/* 861 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 878
/* 866 */     MCD_OPC_CheckField, 26, 6, 4, 30, 17, 0, // Skip to: 5255
/* 873 */     MCD_OPC_Decode, 155, 6, 238, 1, // Opcode: EVFSSUB
/* 878 */     MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 902
/* 883 */     MCD_OPC_CheckField, 26, 6, 4, 13, 17, 0, // Skip to: 5255
/* 890 */     MCD_OPC_CheckField, 11, 5, 0, 6, 17, 0, // Skip to: 5255
/* 897 */     MCD_OPC_Decode, 136, 6, 241, 1, // Opcode: EVFSABS
/* 902 */     MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 926
/* 907 */     MCD_OPC_CheckField, 26, 6, 4, 245, 16, 0, // Skip to: 5255
/* 914 */     MCD_OPC_CheckField, 11, 5, 0, 238, 16, 0, // Skip to: 5255
/* 921 */     MCD_OPC_Decode, 153, 6, 241, 1, // Opcode: EVFSNABS
/* 926 */     MCD_OPC_FilterValue, 6, 228, 16, 0, // Skip to: 5255
/* 931 */     MCD_OPC_CheckField, 26, 6, 4, 221, 16, 0, // Skip to: 5255
/* 938 */     MCD_OPC_CheckField, 11, 5, 0, 214, 16, 0, // Skip to: 5255
/* 945 */     MCD_OPC_Decode, 154, 6, 241, 1, // Opcode: EVFSNEG
/* 950 */     MCD_OPC_FilterValue, 81, 133, 0, 0, // Skip to: 1088
/* 955 */     MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 958 */     MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 975
/* 963 */     MCD_OPC_CheckField, 26, 6, 4, 189, 16, 0, // Skip to: 5255
/* 970 */     MCD_OPC_Decode, 152, 6, 238, 1, // Opcode: EVFSMUL
/* 975 */     MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 992
/* 980 */     MCD_OPC_CheckField, 26, 6, 4, 172, 16, 0, // Skip to: 5255
/* 987 */     MCD_OPC_Decode, 151, 6, 238, 1, // Opcode: EVFSDIV
/* 992 */     MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 1016
/* 997 */     MCD_OPC_CheckField, 26, 6, 4, 155, 16, 0, // Skip to: 5255
/* 1004 */    MCD_OPC_CheckField, 16, 5, 0, 148, 16, 0, // Skip to: 5255
/* 1011 */    MCD_OPC_Decode, 141, 6, 246, 1, // Opcode: EVFSCFUI
/* 1016 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 1040
/* 1021 */    MCD_OPC_CheckField, 26, 6, 4, 131, 16, 0, // Skip to: 5255
/* 1028 */    MCD_OPC_CheckField, 21, 2, 0, 124, 16, 0, // Skip to: 5255
/* 1035 */    MCD_OPC_Decode, 143, 6, 244, 1, // Opcode: EVFSCMPGT
/* 1040 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 1064
/* 1045 */    MCD_OPC_CheckField, 26, 6, 4, 107, 16, 0, // Skip to: 5255
/* 1052 */    MCD_OPC_CheckField, 21, 2, 0, 100, 16, 0, // Skip to: 5255
/* 1059 */    MCD_OPC_Decode, 144, 6, 244, 1, // Opcode: EVFSCMPLT
/* 1064 */    MCD_OPC_FilterValue, 6, 90, 16, 0, // Skip to: 5255
/* 1069 */    MCD_OPC_CheckField, 26, 6, 4, 83, 16, 0, // Skip to: 5255
/* 1076 */    MCD_OPC_CheckField, 21, 2, 0, 76, 16, 0, // Skip to: 5255
/* 1083 */    MCD_OPC_Decode, 142, 6, 244, 1, // Opcode: EVFSCMPEQ
/* 1088 */    MCD_OPC_FilterValue, 82, 171, 0, 0, // Skip to: 1264
/* 1093 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1096 */    MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 1120
/* 1101 */    MCD_OPC_CheckField, 26, 6, 4, 51, 16, 0, // Skip to: 5255
/* 1108 */    MCD_OPC_CheckField, 16, 5, 0, 44, 16, 0, // Skip to: 5255
/* 1115 */    MCD_OPC_Decode, 139, 6, 246, 1, // Opcode: EVFSCFSI
/* 1120 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 1144
/* 1125 */    MCD_OPC_CheckField, 26, 6, 4, 27, 16, 0, // Skip to: 5255
/* 1132 */    MCD_OPC_CheckField, 16, 5, 0, 20, 16, 0, // Skip to: 5255
/* 1139 */    MCD_OPC_Decode, 140, 6, 246, 1, // Opcode: EVFSCFUF
/* 1144 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 1168
/* 1149 */    MCD_OPC_CheckField, 26, 6, 4, 3, 16, 0, // Skip to: 5255
/* 1156 */    MCD_OPC_CheckField, 16, 5, 0, 252, 15, 0, // Skip to: 5255
/* 1163 */    MCD_OPC_Decode, 138, 6, 246, 1, // Opcode: EVFSCFSF
/* 1168 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 1192
/* 1173 */    MCD_OPC_CheckField, 26, 6, 4, 235, 15, 0, // Skip to: 5255
/* 1180 */    MCD_OPC_CheckField, 16, 5, 0, 228, 15, 0, // Skip to: 5255
/* 1187 */    MCD_OPC_Decode, 149, 6, 246, 1, // Opcode: EVFSCTUI
/* 1192 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 1216
/* 1197 */    MCD_OPC_CheckField, 26, 6, 4, 211, 15, 0, // Skip to: 5255
/* 1204 */    MCD_OPC_CheckField, 16, 5, 0, 204, 15, 0, // Skip to: 5255
/* 1211 */    MCD_OPC_Decode, 146, 6, 246, 1, // Opcode: EVFSCTSI
/* 1216 */    MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 1240
/* 1221 */    MCD_OPC_CheckField, 26, 6, 4, 187, 15, 0, // Skip to: 5255
/* 1228 */    MCD_OPC_CheckField, 16, 5, 0, 180, 15, 0, // Skip to: 5255
/* 1235 */    MCD_OPC_Decode, 148, 6, 246, 1, // Opcode: EVFSCTUF
/* 1240 */    MCD_OPC_FilterValue, 7, 170, 15, 0, // Skip to: 5255
/* 1245 */    MCD_OPC_CheckField, 26, 6, 4, 163, 15, 0, // Skip to: 5255
/* 1252 */    MCD_OPC_CheckField, 16, 5, 0, 156, 15, 0, // Skip to: 5255
/* 1259 */    MCD_OPC_Decode, 145, 6, 246, 1, // Opcode: EVFSCTSF
/* 1264 */    MCD_OPC_FilterValue, 83, 123, 0, 0, // Skip to: 1392
/* 1269 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1272 */    MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 1296
/* 1277 */    MCD_OPC_CheckField, 26, 6, 4, 131, 15, 0, // Skip to: 5255
/* 1284 */    MCD_OPC_CheckField, 16, 5, 0, 124, 15, 0, // Skip to: 5255
/* 1291 */    MCD_OPC_Decode, 150, 6, 246, 1, // Opcode: EVFSCTUIZ
/* 1296 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 1320
/* 1301 */    MCD_OPC_CheckField, 26, 6, 4, 107, 15, 0, // Skip to: 5255
/* 1308 */    MCD_OPC_CheckField, 16, 5, 0, 100, 15, 0, // Skip to: 5255
/* 1315 */    MCD_OPC_Decode, 147, 6, 246, 1, // Opcode: EVFSCTSIZ
/* 1320 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 1344
/* 1325 */    MCD_OPC_CheckField, 26, 6, 4, 83, 15, 0, // Skip to: 5255
/* 1332 */    MCD_OPC_CheckField, 21, 2, 0, 76, 15, 0, // Skip to: 5255
/* 1339 */    MCD_OPC_Decode, 157, 6, 244, 1, // Opcode: EVFSTSTGT
/* 1344 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 1368
/* 1349 */    MCD_OPC_CheckField, 26, 6, 4, 59, 15, 0, // Skip to: 5255
/* 1356 */    MCD_OPC_CheckField, 21, 2, 0, 52, 15, 0, // Skip to: 5255
/* 1363 */    MCD_OPC_Decode, 158, 6, 244, 1, // Opcode: EVFSTSTLT
/* 1368 */    MCD_OPC_FilterValue, 6, 42, 15, 0, // Skip to: 5255
/* 1373 */    MCD_OPC_CheckField, 26, 6, 4, 35, 15, 0, // Skip to: 5255
/* 1380 */    MCD_OPC_CheckField, 21, 2, 0, 28, 15, 0, // Skip to: 5255
/* 1387 */    MCD_OPC_Decode, 156, 6, 244, 1, // Opcode: EVFSTSTEQ
/* 1392 */    MCD_OPC_FilterValue, 88, 104, 0, 0, // Skip to: 1501
/* 1397 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1400 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1416
/* 1405 */    MCD_OPC_CheckField, 26, 6, 4, 3, 15, 0, // Skip to: 5255
/* 1412 */    MCD_OPC_Decode, 211, 5, 80, // Opcode: EFSADD
/* 1416 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 1432
/* 1421 */    MCD_OPC_CheckField, 26, 6, 4, 243, 14, 0, // Skip to: 5255
/* 1428 */    MCD_OPC_Decode, 230, 5, 80, // Opcode: EFSSUB
/* 1432 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 1455
/* 1437 */    MCD_OPC_CheckField, 26, 6, 4, 227, 14, 0, // Skip to: 5255
/* 1444 */    MCD_OPC_CheckField, 11, 5, 0, 220, 14, 0, // Skip to: 5255
/* 1451 */    MCD_OPC_Decode, 210, 5, 82, // Opcode: EFSABS
/* 1455 */    MCD_OPC_FilterValue, 5, 18, 0, 0, // Skip to: 1478
/* 1460 */    MCD_OPC_CheckField, 26, 6, 4, 204, 14, 0, // Skip to: 5255
/* 1467 */    MCD_OPC_CheckField, 11, 5, 0, 197, 14, 0, // Skip to: 5255
/* 1474 */    MCD_OPC_Decode, 228, 5, 82, // Opcode: EFSNABS
/* 1478 */    MCD_OPC_FilterValue, 6, 188, 14, 0, // Skip to: 5255
/* 1483 */    MCD_OPC_CheckField, 26, 6, 4, 181, 14, 0, // Skip to: 5255
/* 1490 */    MCD_OPC_CheckField, 11, 5, 0, 174, 14, 0, // Skip to: 5255
/* 1497 */    MCD_OPC_Decode, 229, 5, 82, // Opcode: EFSNEG
/* 1501 */    MCD_OPC_FilterValue, 89, 128, 0, 0, // Skip to: 1634
/* 1506 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1509 */    MCD_OPC_FilterValue, 0, 11, 0, 0, // Skip to: 1525
/* 1514 */    MCD_OPC_CheckField, 26, 6, 4, 150, 14, 0, // Skip to: 5255
/* 1521 */    MCD_OPC_Decode, 227, 5, 80, // Opcode: EFSMUL
/* 1525 */    MCD_OPC_FilterValue, 1, 11, 0, 0, // Skip to: 1541
/* 1530 */    MCD_OPC_CheckField, 26, 6, 4, 134, 14, 0, // Skip to: 5255
/* 1537 */    MCD_OPC_Decode, 226, 5, 80, // Opcode: EFSDIV
/* 1541 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 1564
/* 1546 */    MCD_OPC_CheckField, 26, 6, 4, 118, 14, 0, // Skip to: 5255
/* 1553 */    MCD_OPC_CheckField, 21, 2, 0, 111, 14, 0, // Skip to: 5255
/* 1560 */    MCD_OPC_Decode, 218, 5, 63, // Opcode: EFSCMPGT
/* 1564 */    MCD_OPC_FilterValue, 5, 18, 0, 0, // Skip to: 1587
/* 1569 */    MCD_OPC_CheckField, 26, 6, 4, 95, 14, 0, // Skip to: 5255
/* 1576 */    MCD_OPC_CheckField, 21, 2, 0, 88, 14, 0, // Skip to: 5255
/* 1583 */    MCD_OPC_Decode, 219, 5, 63, // Opcode: EFSCMPLT
/* 1587 */    MCD_OPC_FilterValue, 6, 18, 0, 0, // Skip to: 1610
/* 1592 */    MCD_OPC_CheckField, 26, 6, 4, 72, 14, 0, // Skip to: 5255
/* 1599 */    MCD_OPC_CheckField, 21, 2, 0, 65, 14, 0, // Skip to: 5255
/* 1606 */    MCD_OPC_Decode, 217, 5, 63, // Opcode: EFSCMPEQ
/* 1610 */    MCD_OPC_FilterValue, 7, 56, 14, 0, // Skip to: 5255
/* 1615 */    MCD_OPC_CheckField, 26, 6, 4, 49, 14, 0, // Skip to: 5255
/* 1622 */    MCD_OPC_CheckField, 16, 5, 0, 42, 14, 0, // Skip to: 5255
/* 1629 */    MCD_OPC_Decode, 212, 5, 247, 1, // Opcode: EFSCFD
/* 1634 */    MCD_OPC_FilterValue, 90, 188, 0, 0, // Skip to: 1827
/* 1639 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1642 */    MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 1665
/* 1647 */    MCD_OPC_CheckField, 26, 6, 4, 17, 14, 0, // Skip to: 5255
/* 1654 */    MCD_OPC_CheckField, 16, 5, 0, 10, 14, 0, // Skip to: 5255
/* 1661 */    MCD_OPC_Decode, 216, 5, 107, // Opcode: EFSCFUI
/* 1665 */    MCD_OPC_FilterValue, 1, 18, 0, 0, // Skip to: 1688
/* 1670 */    MCD_OPC_CheckField, 26, 6, 4, 250, 13, 0, // Skip to: 5255
/* 1677 */    MCD_OPC_CheckField, 16, 5, 0, 243, 13, 0, // Skip to: 5255
/* 1684 */    MCD_OPC_Decode, 214, 5, 107, // Opcode: EFSCFSI
/* 1688 */    MCD_OPC_FilterValue, 2, 18, 0, 0, // Skip to: 1711
/* 1693 */    MCD_OPC_CheckField, 26, 6, 4, 227, 13, 0, // Skip to: 5255
/* 1700 */    MCD_OPC_CheckField, 16, 5, 0, 220, 13, 0, // Skip to: 5255
/* 1707 */    MCD_OPC_Decode, 215, 5, 107, // Opcode: EFSCFUF
/* 1711 */    MCD_OPC_FilterValue, 3, 18, 0, 0, // Skip to: 1734
/* 1716 */    MCD_OPC_CheckField, 26, 6, 4, 204, 13, 0, // Skip to: 5255
/* 1723 */    MCD_OPC_CheckField, 16, 5, 0, 197, 13, 0, // Skip to: 5255
/* 1730 */    MCD_OPC_Decode, 213, 5, 107, // Opcode: EFSCFSF
/* 1734 */    MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 1757
/* 1739 */    MCD_OPC_CheckField, 26, 6, 4, 181, 13, 0, // Skip to: 5255
/* 1746 */    MCD_OPC_CheckField, 16, 5, 0, 174, 13, 0, // Skip to: 5255
/* 1753 */    MCD_OPC_Decode, 224, 5, 107, // Opcode: EFSCTUI
/* 1757 */    MCD_OPC_FilterValue, 5, 18, 0, 0, // Skip to: 1780
/* 1762 */    MCD_OPC_CheckField, 26, 6, 4, 158, 13, 0, // Skip to: 5255
/* 1769 */    MCD_OPC_CheckField, 16, 5, 0, 151, 13, 0, // Skip to: 5255
/* 1776 */    MCD_OPC_Decode, 221, 5, 107, // Opcode: EFSCTSI
/* 1780 */    MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 1804
/* 1785 */    MCD_OPC_CheckField, 26, 6, 4, 135, 13, 0, // Skip to: 5255
/* 1792 */    MCD_OPC_CheckField, 16, 5, 0, 128, 13, 0, // Skip to: 5255
/* 1799 */    MCD_OPC_Decode, 223, 5, 248, 1, // Opcode: EFSCTUF
/* 1804 */    MCD_OPC_FilterValue, 7, 118, 13, 0, // Skip to: 5255
/* 1809 */    MCD_OPC_CheckField, 26, 6, 4, 111, 13, 0, // Skip to: 5255
/* 1816 */    MCD_OPC_CheckField, 16, 5, 0, 104, 13, 0, // Skip to: 5255
/* 1823 */    MCD_OPC_Decode, 220, 5, 107, // Opcode: EFSCTSF
/* 1827 */    MCD_OPC_FilterValue, 91, 121, 0, 0, // Skip to: 1953
/* 1832 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1835 */    MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 1858
/* 1840 */    MCD_OPC_CheckField, 26, 6, 4, 80, 13, 0, // Skip to: 5255
/* 1847 */    MCD_OPC_CheckField, 16, 5, 0, 73, 13, 0, // Skip to: 5255
/* 1854 */    MCD_OPC_Decode, 225, 5, 107, // Opcode: EFSCTUIZ
/* 1858 */    MCD_OPC_FilterValue, 2, 18, 0, 0, // Skip to: 1881
/* 1863 */    MCD_OPC_CheckField, 26, 6, 4, 57, 13, 0, // Skip to: 5255
/* 1870 */    MCD_OPC_CheckField, 16, 5, 0, 50, 13, 0, // Skip to: 5255
/* 1877 */    MCD_OPC_Decode, 222, 5, 107, // Opcode: EFSCTSIZ
/* 1881 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 1905
/* 1886 */    MCD_OPC_CheckField, 26, 6, 4, 34, 13, 0, // Skip to: 5255
/* 1893 */    MCD_OPC_CheckField, 21, 2, 0, 27, 13, 0, // Skip to: 5255
/* 1900 */    MCD_OPC_Decode, 232, 5, 244, 1, // Opcode: EFSTSTGT
/* 1905 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 1929
/* 1910 */    MCD_OPC_CheckField, 26, 6, 4, 10, 13, 0, // Skip to: 5255
/* 1917 */    MCD_OPC_CheckField, 21, 2, 0, 3, 13, 0, // Skip to: 5255
/* 1924 */    MCD_OPC_Decode, 233, 5, 244, 1, // Opcode: EFSTSTLT
/* 1929 */    MCD_OPC_FilterValue, 6, 249, 12, 0, // Skip to: 5255
/* 1934 */    MCD_OPC_CheckField, 26, 6, 4, 242, 12, 0, // Skip to: 5255
/* 1941 */    MCD_OPC_CheckField, 21, 2, 0, 235, 12, 0, // Skip to: 5255
/* 1948 */    MCD_OPC_Decode, 231, 5, 244, 1, // Opcode: EFSTSTEQ
/* 1953 */    MCD_OPC_FilterValue, 92, 157, 0, 0, // Skip to: 2115
/* 1958 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1961 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 1978
/* 1966 */    MCD_OPC_CheckField, 26, 6, 4, 210, 12, 0, // Skip to: 5255
/* 1973 */    MCD_OPC_Decode, 183, 5, 238, 1, // Opcode: EFDADD
/* 1978 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 1995
/* 1983 */    MCD_OPC_CheckField, 26, 6, 4, 193, 12, 0, // Skip to: 5255
/* 1990 */    MCD_OPC_Decode, 206, 5, 238, 1, // Opcode: EFDSUB
/* 1995 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 2019
/* 2000 */    MCD_OPC_CheckField, 26, 6, 4, 176, 12, 0, // Skip to: 5255
/* 2007 */    MCD_OPC_CheckField, 16, 5, 0, 169, 12, 0, // Skip to: 5255
/* 2014 */    MCD_OPC_Decode, 190, 5, 248, 1, // Opcode: EFDCFUID
/* 2019 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 2043
/* 2024 */    MCD_OPC_CheckField, 26, 6, 4, 152, 12, 0, // Skip to: 5255
/* 2031 */    MCD_OPC_CheckField, 16, 5, 0, 145, 12, 0, // Skip to: 5255
/* 2038 */    MCD_OPC_Decode, 187, 5, 248, 1, // Opcode: EFDCFSID
/* 2043 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 2067
/* 2048 */    MCD_OPC_CheckField, 26, 6, 4, 128, 12, 0, // Skip to: 5255
/* 2055 */    MCD_OPC_CheckField, 11, 5, 0, 121, 12, 0, // Skip to: 5255
/* 2062 */    MCD_OPC_Decode, 182, 5, 241, 1, // Opcode: EFDABS
/* 2067 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 2091
/* 2072 */    MCD_OPC_CheckField, 26, 6, 4, 104, 12, 0, // Skip to: 5255
/* 2079 */    MCD_OPC_CheckField, 11, 5, 0, 97, 12, 0, // Skip to: 5255
/* 2086 */    MCD_OPC_Decode, 204, 5, 241, 1, // Opcode: EFDNABS
/* 2091 */    MCD_OPC_FilterValue, 6, 87, 12, 0, // Skip to: 5255
/* 2096 */    MCD_OPC_CheckField, 26, 6, 4, 80, 12, 0, // Skip to: 5255
/* 2103 */    MCD_OPC_CheckField, 11, 5, 0, 73, 12, 0, // Skip to: 5255
/* 2110 */    MCD_OPC_Decode, 205, 5, 241, 1, // Opcode: EFDNEG
/* 2115 */    MCD_OPC_FilterValue, 93, 181, 0, 0, // Skip to: 2301
/* 2120 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2123 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 2140
/* 2128 */    MCD_OPC_CheckField, 26, 6, 4, 48, 12, 0, // Skip to: 5255
/* 2135 */    MCD_OPC_Decode, 203, 5, 238, 1, // Opcode: EFDMUL
/* 2140 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 2157
/* 2145 */    MCD_OPC_CheckField, 26, 6, 4, 31, 12, 0, // Skip to: 5255
/* 2152 */    MCD_OPC_Decode, 202, 5, 238, 1, // Opcode: EFDDIV
/* 2157 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 2181
/* 2162 */    MCD_OPC_CheckField, 26, 6, 4, 14, 12, 0, // Skip to: 5255
/* 2169 */    MCD_OPC_CheckField, 16, 5, 0, 7, 12, 0, // Skip to: 5255
/* 2176 */    MCD_OPC_Decode, 200, 5, 247, 1, // Opcode: EFDCTUIDZ
/* 2181 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 2205
/* 2186 */    MCD_OPC_CheckField, 26, 6, 4, 246, 11, 0, // Skip to: 5255
/* 2193 */    MCD_OPC_CheckField, 16, 5, 0, 239, 11, 0, // Skip to: 5255
/* 2200 */    MCD_OPC_Decode, 196, 5, 247, 1, // Opcode: EFDCTSIDZ
/* 2205 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 2229
/* 2210 */    MCD_OPC_CheckField, 26, 6, 4, 222, 11, 0, // Skip to: 5255
/* 2217 */    MCD_OPC_CheckField, 21, 2, 0, 215, 11, 0, // Skip to: 5255
/* 2224 */    MCD_OPC_Decode, 192, 5, 244, 1, // Opcode: EFDCMPGT
/* 2229 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 2253
/* 2234 */    MCD_OPC_CheckField, 26, 6, 4, 198, 11, 0, // Skip to: 5255
/* 2241 */    MCD_OPC_CheckField, 21, 2, 0, 191, 11, 0, // Skip to: 5255
/* 2248 */    MCD_OPC_Decode, 193, 5, 244, 1, // Opcode: EFDCMPLT
/* 2253 */    MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 2277
/* 2258 */    MCD_OPC_CheckField, 26, 6, 4, 174, 11, 0, // Skip to: 5255
/* 2265 */    MCD_OPC_CheckField, 21, 2, 0, 167, 11, 0, // Skip to: 5255
/* 2272 */    MCD_OPC_Decode, 191, 5, 244, 1, // Opcode: EFDCMPEQ
/* 2277 */    MCD_OPC_FilterValue, 7, 157, 11, 0, // Skip to: 5255
/* 2282 */    MCD_OPC_CheckField, 26, 6, 4, 150, 11, 0, // Skip to: 5255
/* 2289 */    MCD_OPC_CheckField, 16, 5, 0, 143, 11, 0, // Skip to: 5255
/* 2296 */    MCD_OPC_Decode, 184, 5, 248, 1, // Opcode: EFDCFS
/* 2301 */    MCD_OPC_FilterValue, 94, 195, 0, 0, // Skip to: 2501
/* 2306 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2309 */    MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 2333
/* 2314 */    MCD_OPC_CheckField, 26, 6, 4, 118, 11, 0, // Skip to: 5255
/* 2321 */    MCD_OPC_CheckField, 16, 5, 0, 111, 11, 0, // Skip to: 5255
/* 2328 */    MCD_OPC_Decode, 189, 5, 248, 1, // Opcode: EFDCFUI
/* 2333 */    MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 2357
/* 2338 */    MCD_OPC_CheckField, 26, 6, 4, 94, 11, 0, // Skip to: 5255
/* 2345 */    MCD_OPC_CheckField, 16, 5, 0, 87, 11, 0, // Skip to: 5255
/* 2352 */    MCD_OPC_Decode, 186, 5, 248, 1, // Opcode: EFDCFSI
/* 2357 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 2381
/* 2362 */    MCD_OPC_CheckField, 26, 6, 4, 70, 11, 0, // Skip to: 5255
/* 2369 */    MCD_OPC_CheckField, 16, 5, 0, 63, 11, 0, // Skip to: 5255
/* 2376 */    MCD_OPC_Decode, 188, 5, 248, 1, // Opcode: EFDCFUF
/* 2381 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 2405
/* 2386 */    MCD_OPC_CheckField, 26, 6, 4, 46, 11, 0, // Skip to: 5255
/* 2393 */    MCD_OPC_CheckField, 16, 5, 0, 39, 11, 0, // Skip to: 5255
/* 2400 */    MCD_OPC_Decode, 185, 5, 248, 1, // Opcode: EFDCFSF
/* 2405 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 2429
/* 2410 */    MCD_OPC_CheckField, 26, 6, 4, 22, 11, 0, // Skip to: 5255
/* 2417 */    MCD_OPC_CheckField, 16, 5, 0, 15, 11, 0, // Skip to: 5255
/* 2424 */    MCD_OPC_Decode, 199, 5, 247, 1, // Opcode: EFDCTUI
/* 2429 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 2453
/* 2434 */    MCD_OPC_CheckField, 26, 6, 4, 254, 10, 0, // Skip to: 5255
/* 2441 */    MCD_OPC_CheckField, 16, 5, 0, 247, 10, 0, // Skip to: 5255
/* 2448 */    MCD_OPC_Decode, 195, 5, 247, 1, // Opcode: EFDCTSI
/* 2453 */    MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 2477
/* 2458 */    MCD_OPC_CheckField, 26, 6, 4, 230, 10, 0, // Skip to: 5255
/* 2465 */    MCD_OPC_CheckField, 16, 5, 0, 223, 10, 0, // Skip to: 5255
/* 2472 */    MCD_OPC_Decode, 198, 5, 248, 1, // Opcode: EFDCTUF
/* 2477 */    MCD_OPC_FilterValue, 7, 213, 10, 0, // Skip to: 5255
/* 2482 */    MCD_OPC_CheckField, 26, 6, 4, 206, 10, 0, // Skip to: 5255
/* 2489 */    MCD_OPC_CheckField, 16, 5, 0, 199, 10, 0, // Skip to: 5255
/* 2496 */    MCD_OPC_Decode, 194, 5, 248, 1, // Opcode: EFDCTSF
/* 2501 */    MCD_OPC_FilterValue, 95, 123, 0, 0, // Skip to: 2629
/* 2506 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2509 */    MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 2533
/* 2514 */    MCD_OPC_CheckField, 26, 6, 4, 174, 10, 0, // Skip to: 5255
/* 2521 */    MCD_OPC_CheckField, 16, 5, 0, 167, 10, 0, // Skip to: 5255
/* 2528 */    MCD_OPC_Decode, 201, 5, 247, 1, // Opcode: EFDCTUIZ
/* 2533 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 2557
/* 2538 */    MCD_OPC_CheckField, 26, 6, 4, 150, 10, 0, // Skip to: 5255
/* 2545 */    MCD_OPC_CheckField, 16, 5, 0, 143, 10, 0, // Skip to: 5255
/* 2552 */    MCD_OPC_Decode, 197, 5, 247, 1, // Opcode: EFDCTSIZ
/* 2557 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 2581
/* 2562 */    MCD_OPC_CheckField, 26, 6, 4, 126, 10, 0, // Skip to: 5255
/* 2569 */    MCD_OPC_CheckField, 21, 2, 0, 119, 10, 0, // Skip to: 5255
/* 2576 */    MCD_OPC_Decode, 208, 5, 244, 1, // Opcode: EFDTSTGT
/* 2581 */    MCD_OPC_FilterValue, 5, 19, 0, 0, // Skip to: 2605
/* 2586 */    MCD_OPC_CheckField, 26, 6, 4, 102, 10, 0, // Skip to: 5255
/* 2593 */    MCD_OPC_CheckField, 21, 2, 0, 95, 10, 0, // Skip to: 5255
/* 2600 */    MCD_OPC_Decode, 209, 5, 244, 1, // Opcode: EFDTSTLT
/* 2605 */    MCD_OPC_FilterValue, 6, 85, 10, 0, // Skip to: 5255
/* 2610 */    MCD_OPC_CheckField, 26, 6, 4, 78, 10, 0, // Skip to: 5255
/* 2617 */    MCD_OPC_CheckField, 21, 2, 0, 71, 10, 0, // Skip to: 5255
/* 2624 */    MCD_OPC_Decode, 207, 5, 244, 1, // Opcode: EFDTSTEQ
/* 2629 */    MCD_OPC_FilterValue, 96, 105, 0, 0, // Skip to: 2739
/* 2634 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2637 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 2654
/* 2642 */    MCD_OPC_CheckField, 26, 6, 4, 46, 10, 0, // Skip to: 5255
/* 2649 */    MCD_OPC_Decode, 160, 6, 249, 1, // Opcode: EVLDDX
/* 2654 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 2671
/* 2659 */    MCD_OPC_CheckField, 26, 6, 4, 29, 10, 0, // Skip to: 5255
/* 2666 */    MCD_OPC_Decode, 159, 6, 250, 1, // Opcode: EVLDD
/* 2671 */    MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 2688
/* 2676 */    MCD_OPC_CheckField, 26, 6, 4, 12, 10, 0, // Skip to: 5255
/* 2683 */    MCD_OPC_Decode, 164, 6, 249, 1, // Opcode: EVLDWX
/* 2688 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 2705
/* 2693 */    MCD_OPC_CheckField, 26, 6, 4, 251, 9, 0, // Skip to: 5255
/* 2700 */    MCD_OPC_Decode, 163, 6, 250, 1, // Opcode: EVLDW
/* 2705 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 2722
/* 2710 */    MCD_OPC_CheckField, 26, 6, 4, 234, 9, 0, // Skip to: 5255
/* 2717 */    MCD_OPC_Decode, 162, 6, 249, 1, // Opcode: EVLDHX
/* 2722 */    MCD_OPC_FilterValue, 5, 224, 9, 0, // Skip to: 5255
/* 2727 */    MCD_OPC_CheckField, 26, 6, 4, 217, 9, 0, // Skip to: 5255
/* 2734 */    MCD_OPC_Decode, 161, 6, 250, 1, // Opcode: EVLDH
/* 2739 */    MCD_OPC_FilterValue, 97, 105, 0, 0, // Skip to: 2849
/* 2744 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2747 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 2764
/* 2752 */    MCD_OPC_CheckField, 26, 6, 4, 192, 9, 0, // Skip to: 5255
/* 2759 */    MCD_OPC_Decode, 166, 6, 249, 1, // Opcode: EVLHHESPLATX
/* 2764 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 2781
/* 2769 */    MCD_OPC_CheckField, 26, 6, 4, 175, 9, 0, // Skip to: 5255
/* 2776 */    MCD_OPC_Decode, 165, 6, 251, 1, // Opcode: EVLHHESPLAT
/* 2781 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 2798
/* 2786 */    MCD_OPC_CheckField, 26, 6, 4, 158, 9, 0, // Skip to: 5255
/* 2793 */    MCD_OPC_Decode, 170, 6, 249, 1, // Opcode: EVLHHOUSPLATX
/* 2798 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 2815
/* 2803 */    MCD_OPC_CheckField, 26, 6, 4, 141, 9, 0, // Skip to: 5255
/* 2810 */    MCD_OPC_Decode, 169, 6, 251, 1, // Opcode: EVLHHOUSPLAT
/* 2815 */    MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 2832
/* 2820 */    MCD_OPC_CheckField, 26, 6, 4, 124, 9, 0, // Skip to: 5255
/* 2827 */    MCD_OPC_Decode, 168, 6, 249, 1, // Opcode: EVLHHOSSPLATX
/* 2832 */    MCD_OPC_FilterValue, 7, 114, 9, 0, // Skip to: 5255
/* 2837 */    MCD_OPC_CheckField, 26, 6, 4, 107, 9, 0, // Skip to: 5255
/* 2844 */    MCD_OPC_Decode, 167, 6, 251, 1, // Opcode: EVLHHOSSPLAT
/* 2849 */    MCD_OPC_FilterValue, 98, 105, 0, 0, // Skip to: 2959
/* 2854 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2857 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 2874
/* 2862 */    MCD_OPC_CheckField, 26, 6, 4, 82, 9, 0, // Skip to: 5255
/* 2869 */    MCD_OPC_Decode, 172, 6, 249, 1, // Opcode: EVLWHEX
/* 2874 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 2891
/* 2879 */    MCD_OPC_CheckField, 26, 6, 4, 65, 9, 0, // Skip to: 5255
/* 2886 */    MCD_OPC_Decode, 171, 6, 252, 1, // Opcode: EVLWHE
/* 2891 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 2908
/* 2896 */    MCD_OPC_CheckField, 26, 6, 4, 48, 9, 0, // Skip to: 5255
/* 2903 */    MCD_OPC_Decode, 176, 6, 249, 1, // Opcode: EVLWHOUX
/* 2908 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 2925
/* 2913 */    MCD_OPC_CheckField, 26, 6, 4, 31, 9, 0, // Skip to: 5255
/* 2920 */    MCD_OPC_Decode, 175, 6, 252, 1, // Opcode: EVLWHOU
/* 2925 */    MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 2942
/* 2930 */    MCD_OPC_CheckField, 26, 6, 4, 14, 9, 0, // Skip to: 5255
/* 2937 */    MCD_OPC_Decode, 174, 6, 249, 1, // Opcode: EVLWHOSX
/* 2942 */    MCD_OPC_FilterValue, 7, 4, 9, 0, // Skip to: 5255
/* 2947 */    MCD_OPC_CheckField, 26, 6, 4, 253, 8, 0, // Skip to: 5255
/* 2954 */    MCD_OPC_Decode, 173, 6, 252, 1, // Opcode: EVLWHOS
/* 2959 */    MCD_OPC_FilterValue, 99, 71, 0, 0, // Skip to: 3035
/* 2964 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2967 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 2984
/* 2972 */    MCD_OPC_CheckField, 26, 6, 4, 228, 8, 0, // Skip to: 5255
/* 2979 */    MCD_OPC_Decode, 180, 6, 249, 1, // Opcode: EVLWWSPLATX
/* 2984 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3001
/* 2989 */    MCD_OPC_CheckField, 26, 6, 4, 211, 8, 0, // Skip to: 5255
/* 2996 */    MCD_OPC_Decode, 179, 6, 252, 1, // Opcode: EVLWWSPLAT
/* 3001 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3018
/* 3006 */    MCD_OPC_CheckField, 26, 6, 4, 194, 8, 0, // Skip to: 5255
/* 3013 */    MCD_OPC_Decode, 178, 6, 249, 1, // Opcode: EVLWHSPLATX
/* 3018 */    MCD_OPC_FilterValue, 5, 184, 8, 0, // Skip to: 5255
/* 3023 */    MCD_OPC_CheckField, 26, 6, 4, 177, 8, 0, // Skip to: 5255
/* 3030 */    MCD_OPC_Decode, 177, 6, 252, 1, // Opcode: EVLWHSPLAT
/* 3035 */    MCD_OPC_FilterValue, 100, 105, 0, 0, // Skip to: 3145
/* 3040 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3043 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3060
/* 3048 */    MCD_OPC_CheckField, 26, 6, 4, 152, 8, 0, // Skip to: 5255
/* 3055 */    MCD_OPC_Decode, 162, 7, 249, 1, // Opcode: EVSTDDX
/* 3060 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3077
/* 3065 */    MCD_OPC_CheckField, 26, 6, 4, 135, 8, 0, // Skip to: 5255
/* 3072 */    MCD_OPC_Decode, 161, 7, 250, 1, // Opcode: EVSTDD
/* 3077 */    MCD_OPC_FilterValue, 2, 12, 0, 0, // Skip to: 3094
/* 3082 */    MCD_OPC_CheckField, 26, 6, 4, 118, 8, 0, // Skip to: 5255
/* 3089 */    MCD_OPC_Decode, 166, 7, 249, 1, // Opcode: EVSTDWX
/* 3094 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 3111
/* 3099 */    MCD_OPC_CheckField, 26, 6, 4, 101, 8, 0, // Skip to: 5255
/* 3106 */    MCD_OPC_Decode, 165, 7, 250, 1, // Opcode: EVSTDW
/* 3111 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3128
/* 3116 */    MCD_OPC_CheckField, 26, 6, 4, 84, 8, 0, // Skip to: 5255
/* 3123 */    MCD_OPC_Decode, 164, 7, 249, 1, // Opcode: EVSTDHX
/* 3128 */    MCD_OPC_FilterValue, 5, 74, 8, 0, // Skip to: 5255
/* 3133 */    MCD_OPC_CheckField, 26, 6, 4, 67, 8, 0, // Skip to: 5255
/* 3140 */    MCD_OPC_Decode, 163, 7, 250, 1, // Opcode: EVSTDH
/* 3145 */    MCD_OPC_FilterValue, 102, 71, 0, 0, // Skip to: 3221
/* 3150 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3153 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3170
/* 3158 */    MCD_OPC_CheckField, 26, 6, 4, 42, 8, 0, // Skip to: 5255
/* 3165 */    MCD_OPC_Decode, 168, 7, 249, 1, // Opcode: EVSTWHEX
/* 3170 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3187
/* 3175 */    MCD_OPC_CheckField, 26, 6, 4, 25, 8, 0, // Skip to: 5255
/* 3182 */    MCD_OPC_Decode, 167, 7, 252, 1, // Opcode: EVSTWHE
/* 3187 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3204
/* 3192 */    MCD_OPC_CheckField, 26, 6, 4, 8, 8, 0, // Skip to: 5255
/* 3199 */    MCD_OPC_Decode, 170, 7, 249, 1, // Opcode: EVSTWHOX
/* 3204 */    MCD_OPC_FilterValue, 5, 254, 7, 0, // Skip to: 5255
/* 3209 */    MCD_OPC_CheckField, 26, 6, 4, 247, 7, 0, // Skip to: 5255
/* 3216 */    MCD_OPC_Decode, 169, 7, 252, 1, // Opcode: EVSTWHO
/* 3221 */    MCD_OPC_FilterValue, 103, 71, 0, 0, // Skip to: 3297
/* 3226 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3229 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3246
/* 3234 */    MCD_OPC_CheckField, 26, 6, 4, 222, 7, 0, // Skip to: 5255
/* 3241 */    MCD_OPC_Decode, 172, 7, 249, 1, // Opcode: EVSTWWEX
/* 3246 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3263
/* 3251 */    MCD_OPC_CheckField, 26, 6, 4, 205, 7, 0, // Skip to: 5255
/* 3258 */    MCD_OPC_Decode, 171, 7, 252, 1, // Opcode: EVSTWWE
/* 3263 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3280
/* 3268 */    MCD_OPC_CheckField, 26, 6, 4, 188, 7, 0, // Skip to: 5255
/* 3275 */    MCD_OPC_Decode, 174, 7, 249, 1, // Opcode: EVSTWWOX
/* 3280 */    MCD_OPC_FilterValue, 5, 178, 7, 0, // Skip to: 5255
/* 3285 */    MCD_OPC_CheckField, 26, 6, 4, 171, 7, 0, // Skip to: 5255
/* 3292 */    MCD_OPC_Decode, 173, 7, 252, 1, // Opcode: EVSTWWO
/* 3297 */    MCD_OPC_FilterValue, 128, 1, 37, 0, 0, // Skip to: 3340
/* 3303 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3306 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 3323
/* 3311 */    MCD_OPC_CheckField, 26, 6, 4, 145, 7, 0, // Skip to: 5255
/* 3318 */    MCD_OPC_Decode, 199, 6, 238, 1, // Opcode: EVMHESSF
/* 3323 */    MCD_OPC_FilterValue, 7, 135, 7, 0, // Skip to: 5255
/* 3328 */    MCD_OPC_CheckField, 26, 6, 4, 128, 7, 0, // Skip to: 5255
/* 3335 */    MCD_OPC_Decode, 225, 6, 238, 1, // Opcode: EVMHOSSF
/* 3340 */    MCD_OPC_FilterValue, 129, 1, 105, 0, 0, // Skip to: 3451
/* 3346 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3349 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3366
/* 3354 */    MCD_OPC_CheckField, 26, 6, 4, 102, 7, 0, // Skip to: 5255
/* 3361 */    MCD_OPC_Decode, 205, 6, 238, 1, // Opcode: EVMHEUMI
/* 3366 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3383
/* 3371 */    MCD_OPC_CheckField, 26, 6, 4, 85, 7, 0, // Skip to: 5255
/* 3378 */    MCD_OPC_Decode, 195, 6, 238, 1, // Opcode: EVMHESMI
/* 3383 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 3400
/* 3388 */    MCD_OPC_CheckField, 26, 6, 4, 68, 7, 0, // Skip to: 5255
/* 3395 */    MCD_OPC_Decode, 191, 6, 238, 1, // Opcode: EVMHESMF
/* 3400 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3417
/* 3405 */    MCD_OPC_CheckField, 26, 6, 4, 51, 7, 0, // Skip to: 5255
/* 3412 */    MCD_OPC_Decode, 231, 6, 238, 1, // Opcode: EVMHOUMI
/* 3417 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 3434
/* 3422 */    MCD_OPC_CheckField, 26, 6, 4, 34, 7, 0, // Skip to: 5255
/* 3429 */    MCD_OPC_Decode, 221, 6, 238, 1, // Opcode: EVMHOSMI
/* 3434 */    MCD_OPC_FilterValue, 7, 24, 7, 0, // Skip to: 5255
/* 3439 */    MCD_OPC_CheckField, 26, 6, 4, 17, 7, 0, // Skip to: 5255
/* 3446 */    MCD_OPC_Decode, 217, 6, 238, 1, // Opcode: EVMHOSMF
/* 3451 */    MCD_OPC_FilterValue, 132, 1, 37, 0, 0, // Skip to: 3494
/* 3457 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3460 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 3477
/* 3465 */    MCD_OPC_CheckField, 26, 6, 4, 247, 6, 0, // Skip to: 5255
/* 3472 */    MCD_OPC_Decode, 200, 6, 238, 1, // Opcode: EVMHESSFA
/* 3477 */    MCD_OPC_FilterValue, 7, 237, 6, 0, // Skip to: 5255
/* 3482 */    MCD_OPC_CheckField, 26, 6, 4, 230, 6, 0, // Skip to: 5255
/* 3489 */    MCD_OPC_Decode, 226, 6, 238, 1, // Opcode: EVMHOSSFA
/* 3494 */    MCD_OPC_FilterValue, 133, 1, 105, 0, 0, // Skip to: 3605
/* 3500 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3503 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3520
/* 3508 */    MCD_OPC_CheckField, 26, 6, 4, 204, 6, 0, // Skip to: 5255
/* 3515 */    MCD_OPC_Decode, 206, 6, 238, 1, // Opcode: EVMHEUMIA
/* 3520 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3537
/* 3525 */    MCD_OPC_CheckField, 26, 6, 4, 187, 6, 0, // Skip to: 5255
/* 3532 */    MCD_OPC_Decode, 196, 6, 238, 1, // Opcode: EVMHESMIA
/* 3537 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 3554
/* 3542 */    MCD_OPC_CheckField, 26, 6, 4, 170, 6, 0, // Skip to: 5255
/* 3549 */    MCD_OPC_Decode, 192, 6, 238, 1, // Opcode: EVMHESMFA
/* 3554 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3571
/* 3559 */    MCD_OPC_CheckField, 26, 6, 4, 153, 6, 0, // Skip to: 5255
/* 3566 */    MCD_OPC_Decode, 232, 6, 238, 1, // Opcode: EVMHOUMIA
/* 3571 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 3588
/* 3576 */    MCD_OPC_CheckField, 26, 6, 4, 136, 6, 0, // Skip to: 5255
/* 3583 */    MCD_OPC_Decode, 222, 6, 238, 1, // Opcode: EVMHOSMIA
/* 3588 */    MCD_OPC_FilterValue, 7, 126, 6, 0, // Skip to: 5255
/* 3593 */    MCD_OPC_CheckField, 26, 6, 4, 119, 6, 0, // Skip to: 5255
/* 3600 */    MCD_OPC_Decode, 218, 6, 238, 1, // Opcode: EVMHOSMFA
/* 3605 */    MCD_OPC_FilterValue, 136, 1, 19, 0, 0, // Skip to: 3630
/* 3611 */    MCD_OPC_CheckField, 26, 6, 4, 101, 6, 0, // Skip to: 5255
/* 3618 */    MCD_OPC_CheckField, 0, 3, 7, 94, 6, 0, // Skip to: 5255
/* 3625 */    MCD_OPC_Decode, 242, 6, 238, 1, // Opcode: EVMWHSSF
/* 3630 */    MCD_OPC_FilterValue, 137, 1, 71, 0, 0, // Skip to: 3707
/* 3636 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3639 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3656
/* 3644 */    MCD_OPC_CheckField, 26, 6, 4, 68, 6, 0, // Skip to: 5255
/* 3651 */    MCD_OPC_Decode, 250, 6, 238, 1, // Opcode: EVMWLUMI
/* 3656 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3673
/* 3661 */    MCD_OPC_CheckField, 26, 6, 4, 51, 6, 0, // Skip to: 5255
/* 3668 */    MCD_OPC_Decode, 244, 6, 238, 1, // Opcode: EVMWHUMI
/* 3673 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 3690
/* 3678 */    MCD_OPC_CheckField, 26, 6, 4, 34, 6, 0, // Skip to: 5255
/* 3685 */    MCD_OPC_Decode, 240, 6, 238, 1, // Opcode: EVMWHSMI
/* 3690 */    MCD_OPC_FilterValue, 7, 24, 6, 0, // Skip to: 5255
/* 3695 */    MCD_OPC_CheckField, 26, 6, 4, 17, 6, 0, // Skip to: 5255
/* 3702 */    MCD_OPC_Decode, 238, 6, 238, 1, // Opcode: EVMWHSMF
/* 3707 */    MCD_OPC_FilterValue, 138, 1, 19, 0, 0, // Skip to: 3732
/* 3713 */    MCD_OPC_CheckField, 26, 6, 4, 255, 5, 0, // Skip to: 5255
/* 3720 */    MCD_OPC_CheckField, 0, 3, 3, 248, 5, 0, // Skip to: 5255
/* 3727 */    MCD_OPC_Decode, 136, 7, 238, 1, // Opcode: EVMWSSF
/* 3732 */    MCD_OPC_FilterValue, 139, 1, 54, 0, 0, // Skip to: 3792
/* 3738 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3741 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3758
/* 3746 */    MCD_OPC_CheckField, 26, 6, 4, 222, 5, 0, // Skip to: 5255
/* 3753 */    MCD_OPC_Decode, 140, 7, 238, 1, // Opcode: EVMWUMI
/* 3758 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3775
/* 3763 */    MCD_OPC_CheckField, 26, 6, 4, 205, 5, 0, // Skip to: 5255
/* 3770 */    MCD_OPC_Decode, 132, 7, 238, 1, // Opcode: EVMWSMI
/* 3775 */    MCD_OPC_FilterValue, 3, 195, 5, 0, // Skip to: 5255
/* 3780 */    MCD_OPC_CheckField, 26, 6, 4, 188, 5, 0, // Skip to: 5255
/* 3787 */    MCD_OPC_Decode, 128, 7, 238, 1, // Opcode: EVMWSMF
/* 3792 */    MCD_OPC_FilterValue, 140, 1, 19, 0, 0, // Skip to: 3817
/* 3798 */    MCD_OPC_CheckField, 26, 6, 4, 170, 5, 0, // Skip to: 5255
/* 3805 */    MCD_OPC_CheckField, 0, 3, 7, 163, 5, 0, // Skip to: 5255
/* 3812 */    MCD_OPC_Decode, 243, 6, 238, 1, // Opcode: EVMWHSSFA
/* 3817 */    MCD_OPC_FilterValue, 141, 1, 71, 0, 0, // Skip to: 3894
/* 3823 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3826 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3843
/* 3831 */    MCD_OPC_CheckField, 26, 6, 4, 137, 5, 0, // Skip to: 5255
/* 3838 */    MCD_OPC_Decode, 251, 6, 238, 1, // Opcode: EVMWLUMIA
/* 3843 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 3860
/* 3848 */    MCD_OPC_CheckField, 26, 6, 4, 120, 5, 0, // Skip to: 5255
/* 3855 */    MCD_OPC_Decode, 245, 6, 238, 1, // Opcode: EVMWHUMIA
/* 3860 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 3877
/* 3865 */    MCD_OPC_CheckField, 26, 6, 4, 103, 5, 0, // Skip to: 5255
/* 3872 */    MCD_OPC_Decode, 241, 6, 238, 1, // Opcode: EVMWHSMIA
/* 3877 */    MCD_OPC_FilterValue, 7, 93, 5, 0, // Skip to: 5255
/* 3882 */    MCD_OPC_CheckField, 26, 6, 4, 86, 5, 0, // Skip to: 5255
/* 3889 */    MCD_OPC_Decode, 239, 6, 238, 1, // Opcode: EVMWHSMFA
/* 3894 */    MCD_OPC_FilterValue, 142, 1, 19, 0, 0, // Skip to: 3919
/* 3900 */    MCD_OPC_CheckField, 26, 6, 4, 68, 5, 0, // Skip to: 5255
/* 3907 */    MCD_OPC_CheckField, 0, 3, 3, 61, 5, 0, // Skip to: 5255
/* 3914 */    MCD_OPC_Decode, 137, 7, 238, 1, // Opcode: EVMWSSFA
/* 3919 */    MCD_OPC_FilterValue, 143, 1, 54, 0, 0, // Skip to: 3979
/* 3925 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3928 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 3945
/* 3933 */    MCD_OPC_CheckField, 26, 6, 4, 35, 5, 0, // Skip to: 5255
/* 3940 */    MCD_OPC_Decode, 141, 7, 238, 1, // Opcode: EVMWUMIA
/* 3945 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 3962
/* 3950 */    MCD_OPC_CheckField, 26, 6, 4, 18, 5, 0, // Skip to: 5255
/* 3957 */    MCD_OPC_Decode, 133, 7, 238, 1, // Opcode: EVMWSMIA
/* 3962 */    MCD_OPC_FilterValue, 3, 8, 5, 0, // Skip to: 5255
/* 3967 */    MCD_OPC_CheckField, 26, 6, 4, 1, 5, 0, // Skip to: 5255
/* 3974 */    MCD_OPC_Decode, 129, 7, 238, 1, // Opcode: EVMWSMFA
/* 3979 */    MCD_OPC_FilterValue, 152, 1, 157, 0, 0, // Skip to: 4142
/* 3985 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 3988 */    MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 4012
/* 3993 */    MCD_OPC_CheckField, 26, 6, 4, 231, 4, 0, // Skip to: 5255
/* 4000 */    MCD_OPC_CheckField, 11, 5, 0, 224, 4, 0, // Skip to: 5255
/* 4007 */    MCD_OPC_Decode, 248, 5, 241, 1, // Opcode: EVADDUSIAAW
/* 4012 */    MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 4036
/* 4017 */    MCD_OPC_CheckField, 26, 6, 4, 207, 4, 0, // Skip to: 5255
/* 4024 */    MCD_OPC_CheckField, 11, 5, 0, 200, 4, 0, // Skip to: 5255
/* 4031 */    MCD_OPC_Decode, 246, 5, 241, 1, // Opcode: EVADDSSIAAW
/* 4036 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 4060
/* 4041 */    MCD_OPC_CheckField, 26, 6, 4, 183, 4, 0, // Skip to: 5255
/* 4048 */    MCD_OPC_CheckField, 11, 5, 0, 176, 4, 0, // Skip to: 5255
/* 4055 */    MCD_OPC_Decode, 178, 7, 241, 1, // Opcode: EVSUBFUSIAAW
/* 4060 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 4084
/* 4065 */    MCD_OPC_CheckField, 26, 6, 4, 159, 4, 0, // Skip to: 5255
/* 4072 */    MCD_OPC_CheckField, 11, 5, 0, 152, 4, 0, // Skip to: 5255
/* 4079 */    MCD_OPC_Decode, 176, 7, 241, 1, // Opcode: EVSUBFSSIAAW
/* 4084 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 4108
/* 4089 */    MCD_OPC_CheckField, 26, 6, 4, 135, 4, 0, // Skip to: 5255
/* 4096 */    MCD_OPC_CheckField, 11, 5, 0, 128, 4, 0, // Skip to: 5255
/* 4103 */    MCD_OPC_Decode, 237, 6, 241, 1, // Opcode: EVMRA
/* 4108 */    MCD_OPC_FilterValue, 6, 12, 0, 0, // Skip to: 4125
/* 4113 */    MCD_OPC_CheckField, 26, 6, 4, 111, 4, 0, // Skip to: 5255
/* 4120 */    MCD_OPC_Decode, 131, 6, 238, 1, // Opcode: EVDIVWS
/* 4125 */    MCD_OPC_FilterValue, 7, 101, 4, 0, // Skip to: 5255
/* 4130 */    MCD_OPC_CheckField, 26, 6, 4, 94, 4, 0, // Skip to: 5255
/* 4137 */    MCD_OPC_Decode, 132, 6, 238, 1, // Opcode: EVDIVWU
/* 4142 */    MCD_OPC_FilterValue, 153, 1, 99, 0, 0, // Skip to: 4247
/* 4148 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4151 */    MCD_OPC_FilterValue, 0, 19, 0, 0, // Skip to: 4175
/* 4156 */    MCD_OPC_CheckField, 26, 6, 4, 68, 4, 0, // Skip to: 5255
/* 4163 */    MCD_OPC_CheckField, 11, 5, 0, 61, 4, 0, // Skip to: 5255
/* 4170 */    MCD_OPC_Decode, 247, 5, 241, 1, // Opcode: EVADDUMIAAW
/* 4175 */    MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 4199
/* 4180 */    MCD_OPC_CheckField, 26, 6, 4, 44, 4, 0, // Skip to: 5255
/* 4187 */    MCD_OPC_CheckField, 11, 5, 0, 37, 4, 0, // Skip to: 5255
/* 4194 */    MCD_OPC_Decode, 245, 5, 241, 1, // Opcode: EVADDSMIAAW
/* 4199 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 4223
/* 4204 */    MCD_OPC_CheckField, 26, 6, 4, 20, 4, 0, // Skip to: 5255
/* 4211 */    MCD_OPC_CheckField, 11, 5, 0, 13, 4, 0, // Skip to: 5255
/* 4218 */    MCD_OPC_Decode, 177, 7, 241, 1, // Opcode: EVSUBFUMIAAW
/* 4223 */    MCD_OPC_FilterValue, 3, 3, 4, 0, // Skip to: 5255
/* 4228 */    MCD_OPC_CheckField, 26, 6, 4, 252, 3, 0, // Skip to: 5255
/* 4235 */    MCD_OPC_CheckField, 11, 5, 0, 245, 3, 0, // Skip to: 5255
/* 4242 */    MCD_OPC_Decode, 175, 7, 241, 1, // Opcode: EVSUBFSMIAAW
/* 4247 */    MCD_OPC_FilterValue, 160, 1, 105, 0, 0, // Skip to: 4358
/* 4253 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4256 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4273
/* 4261 */    MCD_OPC_CheckField, 26, 6, 4, 219, 3, 0, // Skip to: 5255
/* 4268 */    MCD_OPC_Decode, 209, 6, 238, 1, // Opcode: EVMHEUSIAAW
/* 4273 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4290
/* 4278 */    MCD_OPC_CheckField, 26, 6, 4, 202, 3, 0, // Skip to: 5255
/* 4285 */    MCD_OPC_Decode, 203, 6, 238, 1, // Opcode: EVMHESSIAAW
/* 4290 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 4307
/* 4295 */    MCD_OPC_CheckField, 26, 6, 4, 185, 3, 0, // Skip to: 5255
/* 4302 */    MCD_OPC_Decode, 201, 6, 238, 1, // Opcode: EVMHESSFAAW
/* 4307 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 4324
/* 4312 */    MCD_OPC_CheckField, 26, 6, 4, 168, 3, 0, // Skip to: 5255
/* 4319 */    MCD_OPC_Decode, 235, 6, 238, 1, // Opcode: EVMHOUSIAAW
/* 4324 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 4341
/* 4329 */    MCD_OPC_CheckField, 26, 6, 4, 151, 3, 0, // Skip to: 5255
/* 4336 */    MCD_OPC_Decode, 229, 6, 238, 1, // Opcode: EVMHOSSIAAW
/* 4341 */    MCD_OPC_FilterValue, 7, 141, 3, 0, // Skip to: 5255
/* 4346 */    MCD_OPC_CheckField, 26, 6, 4, 134, 3, 0, // Skip to: 5255
/* 4353 */    MCD_OPC_Decode, 227, 6, 238, 1, // Opcode: EVMHOSSFAAW
/* 4358 */    MCD_OPC_FilterValue, 161, 1, 105, 0, 0, // Skip to: 4469
/* 4364 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4367 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4384
/* 4372 */    MCD_OPC_CheckField, 26, 6, 4, 108, 3, 0, // Skip to: 5255
/* 4379 */    MCD_OPC_Decode, 207, 6, 238, 1, // Opcode: EVMHEUMIAAW
/* 4384 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4401
/* 4389 */    MCD_OPC_CheckField, 26, 6, 4, 91, 3, 0, // Skip to: 5255
/* 4396 */    MCD_OPC_Decode, 197, 6, 238, 1, // Opcode: EVMHESMIAAW
/* 4401 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 4418
/* 4406 */    MCD_OPC_CheckField, 26, 6, 4, 74, 3, 0, // Skip to: 5255
/* 4413 */    MCD_OPC_Decode, 193, 6, 238, 1, // Opcode: EVMHESMFAAW
/* 4418 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 4435
/* 4423 */    MCD_OPC_CheckField, 26, 6, 4, 57, 3, 0, // Skip to: 5255
/* 4430 */    MCD_OPC_Decode, 233, 6, 238, 1, // Opcode: EVMHOUMIAAW
/* 4435 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 4452
/* 4440 */    MCD_OPC_CheckField, 26, 6, 4, 40, 3, 0, // Skip to: 5255
/* 4447 */    MCD_OPC_Decode, 223, 6, 238, 1, // Opcode: EVMHOSMIAAW
/* 4452 */    MCD_OPC_FilterValue, 7, 30, 3, 0, // Skip to: 5255
/* 4457 */    MCD_OPC_CheckField, 26, 6, 4, 23, 3, 0, // Skip to: 5255
/* 4464 */    MCD_OPC_Decode, 219, 6, 238, 1, // Opcode: EVMHOSMFAAW
/* 4469 */    MCD_OPC_FilterValue, 165, 1, 105, 0, 0, // Skip to: 4580
/* 4475 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4478 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4495
/* 4483 */    MCD_OPC_CheckField, 26, 6, 4, 253, 2, 0, // Skip to: 5255
/* 4490 */    MCD_OPC_Decode, 189, 6, 238, 1, // Opcode: EVMHEGUMIAA
/* 4495 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4512
/* 4500 */    MCD_OPC_CheckField, 26, 6, 4, 236, 2, 0, // Skip to: 5255
/* 4507 */    MCD_OPC_Decode, 187, 6, 238, 1, // Opcode: EVMHEGSMIAA
/* 4512 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 4529
/* 4517 */    MCD_OPC_CheckField, 26, 6, 4, 219, 2, 0, // Skip to: 5255
/* 4524 */    MCD_OPC_Decode, 185, 6, 238, 1, // Opcode: EVMHEGSMFAA
/* 4529 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 4546
/* 4534 */    MCD_OPC_CheckField, 26, 6, 4, 202, 2, 0, // Skip to: 5255
/* 4541 */    MCD_OPC_Decode, 215, 6, 238, 1, // Opcode: EVMHOGUMIAA
/* 4546 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 4563
/* 4551 */    MCD_OPC_CheckField, 26, 6, 4, 185, 2, 0, // Skip to: 5255
/* 4558 */    MCD_OPC_Decode, 213, 6, 238, 1, // Opcode: EVMHOGSMIAA
/* 4563 */    MCD_OPC_FilterValue, 7, 175, 2, 0, // Skip to: 5255
/* 4568 */    MCD_OPC_CheckField, 26, 6, 4, 168, 2, 0, // Skip to: 5255
/* 4575 */    MCD_OPC_Decode, 211, 6, 238, 1, // Opcode: EVMHOGSMFAA
/* 4580 */    MCD_OPC_FilterValue, 168, 1, 37, 0, 0, // Skip to: 4623
/* 4586 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4589 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4606
/* 4594 */    MCD_OPC_CheckField, 26, 6, 4, 142, 2, 0, // Skip to: 5255
/* 4601 */    MCD_OPC_Decode, 254, 6, 238, 1, // Opcode: EVMWLUSIAAW
/* 4606 */    MCD_OPC_FilterValue, 1, 132, 2, 0, // Skip to: 5255
/* 4611 */    MCD_OPC_CheckField, 26, 6, 4, 125, 2, 0, // Skip to: 5255
/* 4618 */    MCD_OPC_Decode, 248, 6, 238, 1, // Opcode: EVMWLSSIAAW
/* 4623 */    MCD_OPC_FilterValue, 169, 1, 37, 0, 0, // Skip to: 4666
/* 4629 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4632 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4649
/* 4637 */    MCD_OPC_CheckField, 26, 6, 4, 99, 2, 0, // Skip to: 5255
/* 4644 */    MCD_OPC_Decode, 252, 6, 238, 1, // Opcode: EVMWLUMIAAW
/* 4649 */    MCD_OPC_FilterValue, 1, 89, 2, 0, // Skip to: 5255
/* 4654 */    MCD_OPC_CheckField, 26, 6, 4, 82, 2, 0, // Skip to: 5255
/* 4661 */    MCD_OPC_Decode, 246, 6, 238, 1, // Opcode: EVMWLSMIAAW
/* 4666 */    MCD_OPC_FilterValue, 170, 1, 19, 0, 0, // Skip to: 4691
/* 4672 */    MCD_OPC_CheckField, 26, 6, 4, 64, 2, 0, // Skip to: 5255
/* 4679 */    MCD_OPC_CheckField, 0, 3, 3, 57, 2, 0, // Skip to: 5255
/* 4686 */    MCD_OPC_Decode, 138, 7, 238, 1, // Opcode: EVMWSSFAA
/* 4691 */    MCD_OPC_FilterValue, 171, 1, 54, 0, 0, // Skip to: 4751
/* 4697 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4700 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4717
/* 4705 */    MCD_OPC_CheckField, 26, 6, 4, 31, 2, 0, // Skip to: 5255
/* 4712 */    MCD_OPC_Decode, 142, 7, 238, 1, // Opcode: EVMWUMIAA
/* 4717 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4734
/* 4722 */    MCD_OPC_CheckField, 26, 6, 4, 14, 2, 0, // Skip to: 5255
/* 4729 */    MCD_OPC_Decode, 134, 7, 238, 1, // Opcode: EVMWSMIAA
/* 4734 */    MCD_OPC_FilterValue, 3, 4, 2, 0, // Skip to: 5255
/* 4739 */    MCD_OPC_CheckField, 26, 6, 4, 253, 1, 0, // Skip to: 5255
/* 4746 */    MCD_OPC_Decode, 130, 7, 238, 1, // Opcode: EVMWSMFAA
/* 4751 */    MCD_OPC_FilterValue, 176, 1, 105, 0, 0, // Skip to: 4862
/* 4757 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4760 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4777
/* 4765 */    MCD_OPC_CheckField, 26, 6, 4, 227, 1, 0, // Skip to: 5255
/* 4772 */    MCD_OPC_Decode, 210, 6, 238, 1, // Opcode: EVMHEUSIANW
/* 4777 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4794
/* 4782 */    MCD_OPC_CheckField, 26, 6, 4, 210, 1, 0, // Skip to: 5255
/* 4789 */    MCD_OPC_Decode, 204, 6, 238, 1, // Opcode: EVMHESSIANW
/* 4794 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 4811
/* 4799 */    MCD_OPC_CheckField, 26, 6, 4, 193, 1, 0, // Skip to: 5255
/* 4806 */    MCD_OPC_Decode, 202, 6, 238, 1, // Opcode: EVMHESSFANW
/* 4811 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 4828
/* 4816 */    MCD_OPC_CheckField, 26, 6, 4, 176, 1, 0, // Skip to: 5255
/* 4823 */    MCD_OPC_Decode, 236, 6, 238, 1, // Opcode: EVMHOUSIANW
/* 4828 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 4845
/* 4833 */    MCD_OPC_CheckField, 26, 6, 4, 159, 1, 0, // Skip to: 5255
/* 4840 */    MCD_OPC_Decode, 230, 6, 238, 1, // Opcode: EVMHOSSIANW
/* 4845 */    MCD_OPC_FilterValue, 7, 149, 1, 0, // Skip to: 5255
/* 4850 */    MCD_OPC_CheckField, 26, 6, 4, 142, 1, 0, // Skip to: 5255
/* 4857 */    MCD_OPC_Decode, 228, 6, 238, 1, // Opcode: EVMHOSSFANW
/* 4862 */    MCD_OPC_FilterValue, 177, 1, 105, 0, 0, // Skip to: 4973
/* 4868 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4871 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4888
/* 4876 */    MCD_OPC_CheckField, 26, 6, 4, 116, 1, 0, // Skip to: 5255
/* 4883 */    MCD_OPC_Decode, 208, 6, 238, 1, // Opcode: EVMHEUMIANW
/* 4888 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 4905
/* 4893 */    MCD_OPC_CheckField, 26, 6, 4, 99, 1, 0, // Skip to: 5255
/* 4900 */    MCD_OPC_Decode, 198, 6, 238, 1, // Opcode: EVMHESMIANW
/* 4905 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 4922
/* 4910 */    MCD_OPC_CheckField, 26, 6, 4, 82, 1, 0, // Skip to: 5255
/* 4917 */    MCD_OPC_Decode, 194, 6, 238, 1, // Opcode: EVMHESMFANW
/* 4922 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 4939
/* 4927 */    MCD_OPC_CheckField, 26, 6, 4, 65, 1, 0, // Skip to: 5255
/* 4934 */    MCD_OPC_Decode, 234, 6, 238, 1, // Opcode: EVMHOUMIANW
/* 4939 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 4956
/* 4944 */    MCD_OPC_CheckField, 26, 6, 4, 48, 1, 0, // Skip to: 5255
/* 4951 */    MCD_OPC_Decode, 224, 6, 238, 1, // Opcode: EVMHOSMIANW
/* 4956 */    MCD_OPC_FilterValue, 7, 38, 1, 0, // Skip to: 5255
/* 4961 */    MCD_OPC_CheckField, 26, 6, 4, 31, 1, 0, // Skip to: 5255
/* 4968 */    MCD_OPC_Decode, 220, 6, 238, 1, // Opcode: EVMHOSMFANW
/* 4973 */    MCD_OPC_FilterValue, 181, 1, 105, 0, 0, // Skip to: 5084
/* 4979 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 4982 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 4999
/* 4987 */    MCD_OPC_CheckField, 26, 6, 4, 5, 1, 0, // Skip to: 5255
/* 4994 */    MCD_OPC_Decode, 190, 6, 238, 1, // Opcode: EVMHEGUMIAN
/* 4999 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 5016
/* 5004 */    MCD_OPC_CheckField, 26, 6, 4, 244, 0, 0, // Skip to: 5255
/* 5011 */    MCD_OPC_Decode, 188, 6, 238, 1, // Opcode: EVMHEGSMIAN
/* 5016 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 5033
/* 5021 */    MCD_OPC_CheckField, 26, 6, 4, 227, 0, 0, // Skip to: 5255
/* 5028 */    MCD_OPC_Decode, 186, 6, 238, 1, // Opcode: EVMHEGSMFAN
/* 5033 */    MCD_OPC_FilterValue, 4, 12, 0, 0, // Skip to: 5050
/* 5038 */    MCD_OPC_CheckField, 26, 6, 4, 210, 0, 0, // Skip to: 5255
/* 5045 */    MCD_OPC_Decode, 216, 6, 238, 1, // Opcode: EVMHOGUMIAN
/* 5050 */    MCD_OPC_FilterValue, 5, 12, 0, 0, // Skip to: 5067
/* 5055 */    MCD_OPC_CheckField, 26, 6, 4, 193, 0, 0, // Skip to: 5255
/* 5062 */    MCD_OPC_Decode, 214, 6, 238, 1, // Opcode: EVMHOGSMIAN
/* 5067 */    MCD_OPC_FilterValue, 7, 183, 0, 0, // Skip to: 5255
/* 5072 */    MCD_OPC_CheckField, 26, 6, 4, 176, 0, 0, // Skip to: 5255
/* 5079 */    MCD_OPC_Decode, 212, 6, 238, 1, // Opcode: EVMHOGSMFAN
/* 5084 */    MCD_OPC_FilterValue, 184, 1, 37, 0, 0, // Skip to: 5127
/* 5090 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 5093 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 5110
/* 5098 */    MCD_OPC_CheckField, 26, 6, 4, 150, 0, 0, // Skip to: 5255
/* 5105 */    MCD_OPC_Decode, 255, 6, 238, 1, // Opcode: EVMWLUSIANW
/* 5110 */    MCD_OPC_FilterValue, 1, 140, 0, 0, // Skip to: 5255
/* 5115 */    MCD_OPC_CheckField, 26, 6, 4, 133, 0, 0, // Skip to: 5255
/* 5122 */    MCD_OPC_Decode, 249, 6, 238, 1, // Opcode: EVMWLSSIANW
/* 5127 */    MCD_OPC_FilterValue, 185, 1, 37, 0, 0, // Skip to: 5170
/* 5133 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 5136 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 5153
/* 5141 */    MCD_OPC_CheckField, 26, 6, 4, 107, 0, 0, // Skip to: 5255
/* 5148 */    MCD_OPC_Decode, 253, 6, 238, 1, // Opcode: EVMWLUMIANW
/* 5153 */    MCD_OPC_FilterValue, 1, 97, 0, 0, // Skip to: 5255
/* 5158 */    MCD_OPC_CheckField, 26, 6, 4, 90, 0, 0, // Skip to: 5255
/* 5165 */    MCD_OPC_Decode, 247, 6, 238, 1, // Opcode: EVMWLSMIANW
/* 5170 */    MCD_OPC_FilterValue, 186, 1, 19, 0, 0, // Skip to: 5195
/* 5176 */    MCD_OPC_CheckField, 26, 6, 4, 72, 0, 0, // Skip to: 5255
/* 5183 */    MCD_OPC_CheckField, 0, 3, 3, 65, 0, 0, // Skip to: 5255
/* 5190 */    MCD_OPC_Decode, 139, 7, 238, 1, // Opcode: EVMWSSFAN
/* 5195 */    MCD_OPC_FilterValue, 187, 1, 54, 0, 0, // Skip to: 5255
/* 5201 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 5204 */    MCD_OPC_FilterValue, 0, 12, 0, 0, // Skip to: 5221
/* 5209 */    MCD_OPC_CheckField, 26, 6, 4, 39, 0, 0, // Skip to: 5255
/* 5216 */    MCD_OPC_Decode, 143, 7, 238, 1, // Opcode: EVMWUMIAN
/* 5221 */    MCD_OPC_FilterValue, 1, 12, 0, 0, // Skip to: 5238
/* 5226 */    MCD_OPC_CheckField, 26, 6, 4, 22, 0, 0, // Skip to: 5255
/* 5233 */    MCD_OPC_Decode, 135, 7, 238, 1, // Opcode: EVMWSMIAN
/* 5238 */    MCD_OPC_FilterValue, 3, 12, 0, 0, // Skip to: 5255
/* 5243 */    MCD_OPC_CheckField, 26, 6, 4, 5, 0, 0, // Skip to: 5255
/* 5250 */    MCD_OPC_Decode, 131, 7, 238, 1, // Opcode: EVMWSMFAN
/* 5255 */    MCD_OPC_Fail,
  0
};

static bool getbool(uint64_t b)
{
	return b != 0;
}
static bool checkDecoderPredicate(unsigned Idx, uint64_t Bits) {
  llvm_unreachable("Invalid index!");
}

#define DecodeToMCInst(fname, fieldname, InsnType) \
static DecodeStatus fname(DecodeStatus S, unsigned Idx, InsnType insn, MCInst *MI, \
                uint64_t Address, bool *Decoder) {\
  InsnType tmp;\
  switch (Idx) {\
  default: llvm_unreachable("Invalid index!");\
  case 0:\
    return S;\
  case 1:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 2:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 3:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 4:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 5:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 6:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 7:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 8:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 9:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 10:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 11:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 12:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 15, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 13:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 14:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 15:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 16:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 17:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 18:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 19:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 20:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 21:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 22:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 23:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 24:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 25:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 26:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 27:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 28:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 0;\
    tmp |= fieldFromInstruction(insn, 6, 10) << 6;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 1;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 29:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 30:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 31:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 32:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 33:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 34:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 35:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 36:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 21, 1) << 4;\
    tmp |= fieldFromInstruction(insn, 22, 4) << 0;\
    if (DecodeVSRpRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 17);\
    if (decodeMemRIX16Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 37:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 38:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 39:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 40:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 41:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 42:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 43:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRC_NOR0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 44:\
    tmp = fieldFromInstruction(insn, 2, 14);\
    if (decodeCondBrTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 45:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 2, 14);\
    if (decodeCondBrTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 46:\
    tmp = fieldFromInstruction(insn, 2, 14);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 47:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 2, 14);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 48:\
    tmp = fieldFromInstruction(insn, 5, 7);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 49:\
    tmp = fieldFromInstruction(insn, 2, 24);\
    if (decodeDirectBrTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 50:\
    tmp = fieldFromInstruction(insn, 2, 24);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 51:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 52:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 53:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 0;\
    tmp |= fieldFromInstruction(insn, 6, 10) << 6;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 1;\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 54:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 55:\
    tmp = fieldFromInstruction(insn, 11, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 56:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 57:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 58:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 59:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 60:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 5, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 61:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 5, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 62:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 5, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 63:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 64:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 65:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 66:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 67:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 68:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 69:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 70:\
    tmp = fieldFromInstruction(insn, 15, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 71:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 72:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 73:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 74:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 75:\
    tmp = fieldFromInstruction(insn, 21, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 76:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 77:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 78:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 79:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 80:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 81:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 82:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 83:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 84:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 85:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 86:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 87:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 21, 1) << 4;\
    tmp |= fieldFromInstruction(insn, 22, 4) << 0;\
    if (DecodeVSRpRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 88:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 89:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 10) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 90:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 91:\
    tmp = fieldFromInstruction(insn, 21, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 92:\
    tmp = fieldFromInstruction(insn, 25, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 93:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 94:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 95:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRC_NOR0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeCRBITRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 96:\
    tmp = fieldFromInstruction(insn, 12, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 97:\
    tmp = fieldFromInstruction(insn, 12, 8);\
    if (decodeCRBitMOperand(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 98:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 99:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 100:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 12, 8);\
    if (decodeCRBitMOperand(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 101:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 102:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 103:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 104:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 105:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 106:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 107:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 108:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 109:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 110:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 111:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RC_NOX0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 112:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 6;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (decodeMemRIHashOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 113:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 114:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 115:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 116:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 117:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 118:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 119:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8pRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 120:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 121:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 122:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 123:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 124:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 125:\
    tmp = fieldFromInstruction(insn, 21, 2);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 126:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 127:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 128:\
    tmp = fieldFromInstruction(insn, 21, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 129:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 130:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 131:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 132:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 133:\
    tmp = fieldFromInstruction(insn, 21, 2);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 134:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 135:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 136:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 137:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 138:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 139:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 140:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 141:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 142:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 143:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (decodeMemRIOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 144:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (decodeMemRIOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 145:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (decodeMemRIOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 146:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8pRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 17);\
    if (decodeMemRIX16Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 147:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 2, 19);\
    if (decodeMemRIXOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 148:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 2, 19);\
    if (decodeMemRIXOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 149:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 150:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (decodeVSRpEvenOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 151:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 152:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (decodeVSRpEvenOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 153:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 154:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 155:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 156:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 157:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 158:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 159:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 160:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 161:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 162:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 163:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 164:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 165:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 8, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 166:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 167:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 168:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 169:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 8);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 8) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 170:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 171:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 172:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 173:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 174:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 175:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 176:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 177:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 178:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 179:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 7);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 7) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 180:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 181:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 182:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 1) << 6;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 7) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 183:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 184:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 185:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 3, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 186:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 3, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 17);\
    if (decodeMemRIX16Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 187:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8pRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 2, 19);\
    if (decodeMemRIXOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 188:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 189:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 190:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 191:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 192:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 7);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 7) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 193:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 194:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 195:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVSFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 196:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeVRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 197:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 12, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 198:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 199:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 200:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 201:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 202:\
    tmp = fieldFromInstruction(insn, 17, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 25, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 203:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 204:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 205:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 206:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 207:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 34) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 208:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 34) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 209:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeImmZeroOperand(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 34) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 210:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 16, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 16, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 17, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 32, 16) << 16;\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 211:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 16, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 32, 16) << 16;\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 212:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 213:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 214:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 3, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 32, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 215:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 21, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 3, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 6, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 32, 8);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 8) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 216:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 217:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeVFRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 218:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 219:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF4RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 220:\
    tmp = fieldFromInstruction(insn, 21, 6);\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 221:\
    tmp = fieldFromInstruction(insn, 21, 6);\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 222:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 223:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeF8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 224:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 225:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeG8RCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 226:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 21, 1) << 4;\
    tmp |= fieldFromInstruction(insn, 22, 4) << 0;\
    if (DecodeVSRpRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 227:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 21, 1) << 4;\
    tmp |= fieldFromInstruction(insn, 22, 4) << 0;\
    if (DecodeVSRpRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 16) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 34;\
    tmp |= fieldFromInstruction(insn, 32, 18) << 16;\
    if (decodeMemRI34PCRelOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 228:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 44, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 229:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 44, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 230:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 46, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 231:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 46, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 232:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 233:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 234:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 40, 8);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 8) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 235:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 32, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 40, 8);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 8) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 236:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (decodeVSRpEvenOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 34, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 237:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeACCRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 2, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (decodeVSRpEvenOperands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 1, 1) << 5;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    if (DecodeVSRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 36, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 34, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 238:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 239:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 240:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeUImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 241:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 242:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (decodeSImmOperand(MI, tmp, Address, Decoder, 5) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 243:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 244:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 245:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    if (DecodeCRRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 246:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 247:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 248:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPRCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 249:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePointerLikeRegClass1(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodePointerLikeRegClass0(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 250:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    if (decodeSPE8Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 251:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    if (decodeSPE2Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 252:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeSPERCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    if (decodeSPE4Operands(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  }\
}\

#define DecodeInstruction(fname, fieldname, decoder, InsnType) \
static DecodeStatus fname(const uint8_t DecodeTable[], MCInst *MI, \
           InsnType insn, uint64_t Address, MCRegisterInfo *MRI, int feature) \
{ \
  unsigned Start, Len, NumToSkip, PIdx, Opc, DecodeIdx; \
  InsnType Val, FieldValue, PositiveMask, NegativeMask; \
  bool Pred, Fail, DecodeComplete = true; \
  uint32_t ExpectedValue; \
  const uint8_t *Ptr = DecodeTable; \
  uint32_t CurFieldValue = 0; \
  DecodeStatus S = MCDisassembler_Success; \
  while (true) { \
    switch (*Ptr) { \
    default: \
      return MCDisassembler_Fail; \
    case MCD_OPC_ExtractField: { \
      Start = *++Ptr; \
      Len = *++Ptr; \
      ++Ptr; \
      CurFieldValue = fieldname(insn, Start, Len); \
      break; \
    } \
    case MCD_OPC_FilterValue: { \
      /* Decode the field value. */ \
      Val = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Perform the filter operation. */ \
      if (Val != CurFieldValue) \
        Ptr += NumToSkip; \
      break; \
    } \
    case MCD_OPC_CheckField: { \
      Start = *++Ptr; \
      Len = *++Ptr; \
      FieldValue = fieldname(insn, Start, Len); \
      /* Decode the field value. */ \
      ExpectedValue = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* If the actual and expected values don't match, skip. */ \
      if (ExpectedValue != FieldValue) \
        Ptr += NumToSkip; \
      break; \
    } \
    case MCD_OPC_CheckPredicate: { \
      /* Decode the Predicate Index value. */ \
      PIdx = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Check the predicate. */ \
      if (!(Pred = checkDecoderPredicate(PIdx, feature))) \
        Ptr += NumToSkip; \
		/* printf("55 PIdx = %u, Pred = %u\n", PIdx, Pred); */ \
      (void)Pred; \
      break; \
    } \
    case MCD_OPC_Decode: { \
      /* Decode the Opcode value. */ \
      Opc = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      DecodeIdx = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      MCInst_clear(MI); \
      MCInst_setOpcode(MI, Opc); \
      S = decoder(S, DecodeIdx, insn, MI, Address, &DecodeComplete); \
      /* assert(DecodeComplete); */ \
      return S; \
    } \
    case MCD_OPC_TryDecode: { \
      /* Decode the Opcode value. */ \
      Opc = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      DecodeIdx = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Perform the decode operation. */ \
      MCInst_setOpcode(MI, Opc); \
      S = decoder(S, DecodeIdx, insn, MI, Address, &DecodeComplete); \
      if (DecodeComplete) { \
        /* Decoding complete. */ \
        return S; \
      } else { \
        /* assert(S == MCDisassembler_Fail); */ \
        /* If the decoding was incomplete, skip. */ \
        Ptr += NumToSkip; \
        /* Reset decode status. This also drops a SoftFail status that could be */ \
        /* set before the decode attempt. */ \
        S = MCDisassembler_Success; \
      } \
      break; \
    } \
    case MCD_OPC_SoftFail: { \
      /* Decode the mask values. */ \
      PositiveMask = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      NegativeMask = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      Fail = (insn & PositiveMask) || (~insn & NegativeMask); \
      if (Fail) \
        S = MCDisassembler_SoftFail; \
      break; \
    } \
    case MCD_OPC_Fail: { \
      return MCDisassembler_Fail; \
    } \
    } \
  } \
  /* llvm_unreachable("bogosity detected in disassembler state machine!");*/  \
}

FieldFromInstruction(fieldFromInstruction, uint32_t)
DecodeToMCInst(decodeToMCInst, fieldFromInstruction, uint32_t)
DecodeInstruction(decodeInstruction, fieldFromInstruction, decodeToMCInst, uint32_t)

#endif // MIPS_GET_DISASSEMBLER
#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

#define PPC_BP 1
#define PPC_CARRY 2
#define PPC_CTR 3
#define PPC_FP 4
#define PPC_LR 5
#define PPC_RM 6
#define PPC_SPEFSCR 7
#define PPC_VRSAVE 8
#define PPC_XER 9
#define PPC_ZERO 10
#define PPC_ACC0 11
#define PPC_ACC1 12
#define PPC_ACC2 13
#define PPC_ACC3 14
#define PPC_ACC4 15
#define PPC_ACC5 16
#define PPC_ACC6 17
#define PPC_ACC7 18
#define PPC_BP8 19
#define PPC_CR0 20
#define PPC_CR1 21
#define PPC_CR2 22
#define PPC_CR3 23
#define PPC_CR4 24
#define PPC_CR5 25
#define PPC_CR6 26
#define PPC_CR7 27
#define PPC_CTR8 28
#define PPC_F0 29
#define PPC_F1 30
#define PPC_F2 31
#define PPC_F3 32
#define PPC_F4 33
#define PPC_F5 34
#define PPC_F6 35
#define PPC_F7 36
#define PPC_F8 37
#define PPC_F9 38
#define PPC_F10 39
#define PPC_F11 40
#define PPC_F12 41
#define PPC_F13 42
#define PPC_F14 43
#define PPC_F15 44
#define PPC_F16 45
#define PPC_F17 46
#define PPC_F18 47
#define PPC_F19 48
#define PPC_F20 49
#define PPC_F21 50
#define PPC_F22 51
#define PPC_F23 52
#define PPC_F24 53
#define PPC_F25 54
#define PPC_F26 55
#define PPC_F27 56
#define PPC_F28 57
#define PPC_F29 58
#define PPC_F30 59
#define PPC_F31 60
#define PPC_FP8 61
#define PPC_LR8 62
#define PPC_R0 63
#define PPC_R1 64
#define PPC_R2 65
#define PPC_R3 66
#define PPC_R4 67
#define PPC_R5 68
#define PPC_R6 69
#define PPC_R7 70
#define PPC_R8 71
#define PPC_R9 72
#define PPC_R10 73
#define PPC_R11 74
#define PPC_R12 75
#define PPC_R13 76
#define PPC_R14 77
#define PPC_R15 78
#define PPC_R16 79
#define PPC_R17 80
#define PPC_R18 81
#define PPC_R19 82
#define PPC_R20 83
#define PPC_R21 84
#define PPC_R22 85
#define PPC_R23 86
#define PPC_R24 87
#define PPC_R25 88
#define PPC_R26 89
#define PPC_R27 90
#define PPC_R28 91
#define PPC_R29 92
#define PPC_R30 93
#define PPC_R31 94
#define PPC_S0 95
#define PPC_S1 96
#define PPC_S2 97
#define PPC_S3 98
#define PPC_S4 99
#define PPC_S5 100
#define PPC_S6 101
#define PPC_S7 102
#define PPC_S8 103
#define PPC_S9 104
#define PPC_S10 105
#define PPC_S11 106
#define PPC_S12 107
#define PPC_S13 108
#define PPC_S14 109
#define PPC_S15 110
#define PPC_S16 111
#define PPC_S17 112
#define PPC_S18 113
#define PPC_S19 114
#define PPC_S20 115
#define PPC_S21 116
#define PPC_S22 117
#define PPC_S23 118
#define PPC_S24 119
#define PPC_S25 120
#define PPC_S26 121
#define PPC_S27 122
#define PPC_S28 123
#define PPC_S29 124
#define PPC_S30 125
#define PPC_S31 126
#define PPC_UACC0 127
#define PPC_UACC1 128
#define PPC_UACC2 129
#define PPC_UACC3 130
#define PPC_UACC4 131
#define PPC_UACC5 132
#define PPC_UACC6 133
#define PPC_UACC7 134
#define PPC_V0 135
#define PPC_V1 136
#define PPC_V2 137
#define PPC_V3 138
#define PPC_V4 139
#define PPC_V5 140
#define PPC_V6 141
#define PPC_V7 142
#define PPC_V8 143
#define PPC_V9 144
#define PPC_V10 145
#define PPC_V11 146
#define PPC_V12 147
#define PPC_V13 148
#define PPC_V14 149
#define PPC_V15 150
#define PPC_V16 151
#define PPC_V17 152
#define PPC_V18 153
#define PPC_V19 154
#define PPC_V20 155
#define PPC_V21 156
#define PPC_V22 157
#define PPC_V23 158
#define PPC_V24 159
#define PPC_V25 160
#define PPC_V26 161
#define PPC_V27 162
#define PPC_V28 163
#define PPC_V29 164
#define PPC_V30 165
#define PPC_V31 166
#define PPC_VF0 167
#define PPC_VF1 168
#define PPC_VF2 169
#define PPC_VF3 170
#define PPC_VF4 171
#define PPC_VF5 172
#define PPC_VF6 173
#define PPC_VF7 174
#define PPC_VF8 175
#define PPC_VF9 176
#define PPC_VF10 177
#define PPC_VF11 178
#define PPC_VF12 179
#define PPC_VF13 180
#define PPC_VF14 181
#define PPC_VF15 182
#define PPC_VF16 183
#define PPC_VF17 184
#define PPC_VF18 185
#define PPC_VF19 186
#define PPC_VF20 187
#define PPC_VF21 188
#define PPC_VF22 189
#define PPC_VF23 190
#define PPC_VF24 191
#define PPC_VF25 192
#define PPC_VF26 193
#define PPC_VF27 194
#define PPC_VF28 195
#define PPC_VF29 196
#define PPC_VF30 197
#define PPC_VF31 198
#define PPC_VSL0 199
#define PPC_VSL1 200
#define PPC_VSL2 201
#define PPC_VSL3 202
#define PPC_VSL4 203
#define PPC_VSL5 204
#define PPC_VSL6 205
#define PPC_VSL7 206
#define PPC_VSL8 207
#define PPC_VSL9 208
#define PPC_VSL10 209
#define PPC_VSL11 210
#define PPC_VSL12 211
#define PPC_VSL13 212
#define PPC_VSL14 213
#define PPC_VSL15 214
#define PPC_VSL16 215
#define PPC_VSL17 216
#define PPC_VSL18 217
#define PPC_VSL19 218
#define PPC_VSL20 219
#define PPC_VSL21 220
#define PPC_VSL22 221
#define PPC_VSL23 222
#define PPC_VSL24 223
#define PPC_VSL25 224
#define PPC_VSL26 225
#define PPC_VSL27 226
#define PPC_VSL28 227
#define PPC_VSL29 228
#define PPC_VSL30 229
#define PPC_VSL31 230
#define PPC_VSRp0 231
#define PPC_VSRp1 232
#define PPC_VSRp2 233
#define PPC_VSRp3 234
#define PPC_VSRp4 235
#define PPC_VSRp5 236
#define PPC_VSRp6 237
#define PPC_VSRp7 238
#define PPC_VSRp8 239
#define PPC_VSRp9 240
#define PPC_VSRp10 241
#define PPC_VSRp11 242
#define PPC_VSRp12 243
#define PPC_VSRp13 244
#define PPC_VSRp14 245
#define PPC_VSRp15 246
#define PPC_VSRp16 247
#define PPC_VSRp17 248
#define PPC_VSRp18 249
#define PPC_VSRp19 250
#define PPC_VSRp20 251
#define PPC_VSRp21 252
#define PPC_VSRp22 253
#define PPC_VSRp23 254
#define PPC_VSRp24 255
#define PPC_VSRp25 256
#define PPC_VSRp26 257
#define PPC_VSRp27 258
#define PPC_VSRp28 259
#define PPC_VSRp29 260
#define PPC_VSRp30 261
#define PPC_VSRp31 262
#define PPC_VSX32 263
#define PPC_VSX33 264
#define PPC_VSX34 265
#define PPC_VSX35 266
#define PPC_VSX36 267
#define PPC_VSX37 268
#define PPC_VSX38 269
#define PPC_VSX39 270
#define PPC_VSX40 271
#define PPC_VSX41 272
#define PPC_VSX42 273
#define PPC_VSX43 274
#define PPC_VSX44 275
#define PPC_VSX45 276
#define PPC_VSX46 277
#define PPC_VSX47 278
#define PPC_VSX48 279
#define PPC_VSX49 280
#define PPC_VSX50 281
#define PPC_VSX51 282
#define PPC_VSX52 283
#define PPC_VSX53 284
#define PPC_VSX54 285
#define PPC_VSX55 286
#define PPC_VSX56 287
#define PPC_VSX57 288
#define PPC_VSX58 289
#define PPC_VSX59 290
#define PPC_VSX60 291
#define PPC_VSX61 292
#define PPC_VSX62 293
#define PPC_VSX63 294
#define PPC_X0 295
#define PPC_X1 296
#define PPC_X2 297
#define PPC_X3 298
#define PPC_X4 299
#define PPC_X5 300
#define PPC_X6 301
#define PPC_X7 302
#define PPC_X8 303
#define PPC_X9 304
#define PPC_X10 305
#define PPC_X11 306
#define PPC_X12 307
#define PPC_X13 308
#define PPC_X14 309
#define PPC_X15 310
#define PPC_X16 311
#define PPC_X17 312
#define PPC_X18 313
#define PPC_X19 314
#define PPC_X20 315
#define PPC_X21 316
#define PPC_X22 317
#define PPC_X23 318
#define PPC_X24 319
#define PPC_X25 320
#define PPC_X26 321
#define PPC_X27 322
#define PPC_X28 323
#define PPC_X29 324
#define PPC_X30 325
#define PPC_X31 326
#define PPC_ZERO8 327
#define PPC_CR0EQ 328
#define PPC_CR1EQ 329
#define PPC_CR2EQ 330
#define PPC_CR3EQ 331
#define PPC_CR4EQ 332
#define PPC_CR5EQ 333
#define PPC_CR6EQ 334
#define PPC_CR7EQ 335
#define PPC_CR0GT 336
#define PPC_CR1GT 337
#define PPC_CR2GT 338
#define PPC_CR3GT 339
#define PPC_CR4GT 340
#define PPC_CR5GT 341
#define PPC_CR6GT 342
#define PPC_CR7GT 343
#define PPC_CR0LT 344
#define PPC_CR1LT 345
#define PPC_CR2LT 346
#define PPC_CR3LT 347
#define PPC_CR4LT 348
#define PPC_CR5LT 349
#define PPC_CR6LT 350
#define PPC_CR7LT 351
#define PPC_CR0UN 352
#define PPC_CR1UN 353
#define PPC_CR2UN 354
#define PPC_CR3UN 355
#define PPC_CR4UN 356
#define PPC_CR5UN 357
#define PPC_CR6UN 358
#define PPC_CR7UN 359
#define PPC_G8p0 360
#define PPC_G8p1 361
#define PPC_G8p2 362
#define PPC_G8p3 363
#define PPC_G8p4 364
#define PPC_G8p5 365
#define PPC_G8p6 366
#define PPC_G8p7 367
#define PPC_G8p8 368
#define PPC_G8p9 369
#define PPC_G8p10 370
#define PPC_G8p11 371
#define PPC_G8p12 372
#define PPC_G8p13 373
#define PPC_G8p14 374
#define PPC_G8p15 375
#define PPC_NUM_TARGET_REGS 376


// Register classes

#define PPC_VSSRCRegClassID 0
#define PPC_GPRCRegClassID 1
#define PPC_GPRC_NOR0RegClassID 2
#define PPC_GPRC_and_GPRC_NOR0RegClassID 3
#define PPC_CRBITRCRegClassID 4
#define PPC_F4RCRegClassID 5
#define PPC_CRRCRegClassID 6
#define PPC_CARRYRCRegClassID 7
#define PPC_CTRRCRegClassID 8
#define PPC_LRRCRegClassID 9
#define PPC_VRSAVERCRegClassID 10
#define PPC_SPILLTOVSRRCRegClassID 11
#define PPC_VSFRCRegClassID 12
#define PPC_G8RCRegClassID 13
#define PPC_G8RC_NOX0RegClassID 14
#define PPC_SPILLTOVSRRC_and_VSFRCRegClassID 15
#define PPC_G8RC_and_G8RC_NOX0RegClassID 16
#define PPC_F8RCRegClassID 17
#define PPC_SPERCRegClassID 18
#define PPC_VFRCRegClassID 19
#define PPC_SPERC_with_sub_32_in_GPRC_NOR0RegClassID 20
#define PPC_SPILLTOVSRRC_and_VFRCRegClassID 21
#define PPC_SPILLTOVSRRC_and_F4RCRegClassID 22
#define PPC_CTRRC8RegClassID 23
#define PPC_LR8RCRegClassID 24
#define PPC_VSRCRegClassID 25
#define PPC_VSRC_with_sub_64_in_SPILLTOVSRRCRegClassID 26
#define PPC_VRRCRegClassID 27
#define PPC_VSLRCRegClassID 28
#define PPC_VRRC_with_sub_64_in_SPILLTOVSRRCRegClassID 29
#define PPC_G8pRCRegClassID 30
#define PPC_G8pRC_with_sub_32_in_GPRC_NOR0RegClassID 31
#define PPC_VSLRC_with_sub_64_in_SPILLTOVSRRCRegClassID 32
#define PPC_VSRpRCRegClassID 33
#define PPC_VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClassID 34
#define PPC_VSRpRC_with_sub_64_in_F4RCRegClassID 35
#define PPC_VSRpRC_with_sub_64_in_VFRCRegClassID 36
#define PPC_VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClassID 37
#define PPC_VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClassID 38
#define PPC_ACCRCRegClassID 39
#define PPC_UACCRCRegClassID 40
#define PPC_ACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID 41
#define PPC_UACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID 42
#define PPC_ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID 43
#define PPC_UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID 44

#endif // GET_REGINFO_ENUM

#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
#define PPC_PHI	 0
#define PPC_INLINEASM	 1
#define PPC_INLINEASM_BR	 2
#define PPC_CFI_INSTRUCTION	 3
#define PPC_EH_LABEL	 4
#define PPC_GC_LABEL	 5
#define PPC_ANNOTATION_LABEL	 6
#define PPC_KILL	 7
#define PPC_EXTRACT_SUBREG	 8
#define PPC_INSERT_SUBREG	 9
#define PPC_IMPLICIT_DEF	 10
#define PPC_SUBREG_TO_REG	 11
#define PPC_COPY_TO_REGCLASS	 12
#define PPC_DBG_VALUE	 13
#define PPC_DBG_VALUE_LIST	 14
#define PPC_DBG_INSTR_REF	 15
#define PPC_DBG_PHI	 16
#define PPC_DBG_LABEL	 17
#define PPC_REG_SEQUENCE	 18
#define PPC_COPY	 19
#define PPC_BUNDLE	 20
#define PPC_LIFETIME_START	 21
#define PPC_LIFETIME_END	 22
#define PPC_PSEUDO_PROBE	 23
#define PPC_ARITH_FENCE	 24
#define PPC_STACKMAP	 25
#define PPC_FENTRY_CALL	 26
#define PPC_PATCHPOINT	 27
#define PPC_LOAD_STACK_GUARD	 28
#define PPC_PREALLOCATED_SETUP	 29
#define PPC_PREALLOCATED_ARG	 30
#define PPC_STATEPOINT	 31
#define PPC_LOCAL_ESCAPE	 32
#define PPC_FAULTING_OP	 33
#define PPC_PATCHABLE_OP	 34
#define PPC_PATCHABLE_FUNCTION_ENTER	 35
#define PPC_PATCHABLE_RET	 36
#define PPC_PATCHABLE_FUNCTION_EXIT	 37
#define PPC_PATCHABLE_TAIL_CALL	 38
#define PPC_PATCHABLE_EVENT_CALL	 39
#define PPC_PATCHABLE_TYPED_EVENT_CALL	 40
#define PPC_ICALL_BRANCH_FUNNEL	 41
#define PPC_G_ASSERT_SEXT	 42
#define PPC_G_ASSERT_ZEXT	 43
#define PPC_G_ADD	 44
#define PPC_G_SUB	 45
#define PPC_G_MUL	 46
#define PPC_G_SDIV	 47
#define PPC_G_UDIV	 48
#define PPC_G_SREM	 49
#define PPC_G_UREM	 50
#define PPC_G_SDIVREM	 51
#define PPC_G_UDIVREM	 52
#define PPC_G_AND	 53
#define PPC_G_OR	 54
#define PPC_G_XOR	 55
#define PPC_G_IMPLICIT_DEF	 56
#define PPC_G_PHI	 57
#define PPC_G_FRAME_INDEX	 58
#define PPC_G_GLOBAL_VALUE	 59
#define PPC_G_EXTRACT	 60
#define PPC_G_UNMERGE_VALUES	 61
#define PPC_G_INSERT	 62
#define PPC_G_MERGE_VALUES	 63
#define PPC_G_BUILD_VECTOR	 64
#define PPC_G_BUILD_VECTOR_TRUNC	 65
#define PPC_G_CONCAT_VECTORS	 66
#define PPC_G_PTRTOINT	 67
#define PPC_G_INTTOPTR	 68
#define PPC_G_BITCAST	 69
#define PPC_G_FREEZE	 70
#define PPC_G_INTRINSIC_TRUNC	 71
#define PPC_G_INTRINSIC_ROUND	 72
#define PPC_G_INTRINSIC_LRINT	 73
#define PPC_G_INTRINSIC_ROUNDEVEN	 74
#define PPC_G_READCYCLECOUNTER	 75
#define PPC_G_LOAD	 76
#define PPC_G_SEXTLOAD	 77
#define PPC_G_ZEXTLOAD	 78
#define PPC_G_INDEXED_LOAD	 79
#define PPC_G_INDEXED_SEXTLOAD	 80
#define PPC_G_INDEXED_ZEXTLOAD	 81
#define PPC_G_STORE	 82
#define PPC_G_INDEXED_STORE	 83
#define PPC_G_ATOMIC_CMPXCHG_WITH_SUCCESS	 84
#define PPC_G_ATOMIC_CMPXCHG	 85
#define PPC_G_ATOMICRMW_XCHG	 86
#define PPC_G_ATOMICRMW_ADD	 87
#define PPC_G_ATOMICRMW_SUB	 88
#define PPC_G_ATOMICRMW_AND	 89
#define PPC_G_ATOMICRMW_NAND	 90
#define PPC_G_ATOMICRMW_OR	 91
#define PPC_G_ATOMICRMW_XOR	 92
#define PPC_G_ATOMICRMW_MAX	 93
#define PPC_G_ATOMICRMW_MIN	 94
#define PPC_G_ATOMICRMW_UMAX	 95
#define PPC_G_ATOMICRMW_UMIN	 96
#define PPC_G_ATOMICRMW_FADD	 97
#define PPC_G_ATOMICRMW_FSUB	 98
#define PPC_G_FENCE	 99
#define PPC_G_BRCOND	 100
#define PPC_G_BRINDIRECT	 101
#define PPC_G_INTRINSIC	 102
#define PPC_G_INTRINSIC_W_SIDE_EFFECTS	 103
#define PPC_G_ANYEXT	 104
#define PPC_G_TRUNC	 105
#define PPC_G_CONSTANT	 106
#define PPC_G_FCONSTANT	 107
#define PPC_G_VASTART	 108
#define PPC_G_VAARG	 109
#define PPC_G_SEXT	 110
#define PPC_G_SEXT_INREG	 111
#define PPC_G_ZEXT	 112
#define PPC_G_SHL	 113
#define PPC_G_LSHR	 114
#define PPC_G_ASHR	 115
#define PPC_G_FSHL	 116
#define PPC_G_FSHR	 117
#define PPC_G_ROTR	 118
#define PPC_G_ROTL	 119
#define PPC_G_ICMP	 120
#define PPC_G_FCMP	 121
#define PPC_G_SELECT	 122
#define PPC_G_UADDO	 123
#define PPC_G_UADDE	 124
#define PPC_G_USUBO	 125
#define PPC_G_USUBE	 126
#define PPC_G_SADDO	 127
#define PPC_G_SADDE	 128
#define PPC_G_SSUBO	 129
#define PPC_G_SSUBE	 130
#define PPC_G_UMULO	 131
#define PPC_G_SMULO	 132
#define PPC_G_UMULH	 133
#define PPC_G_SMULH	 134
#define PPC_G_UADDSAT	 135
#define PPC_G_SADDSAT	 136
#define PPC_G_USUBSAT	 137
#define PPC_G_SSUBSAT	 138
#define PPC_G_USHLSAT	 139
#define PPC_G_SSHLSAT	 140
#define PPC_G_SMULFIX	 141
#define PPC_G_UMULFIX	 142
#define PPC_G_SMULFIXSAT	 143
#define PPC_G_UMULFIXSAT	 144
#define PPC_G_SDIVFIX	 145
#define PPC_G_UDIVFIX	 146
#define PPC_G_SDIVFIXSAT	 147
#define PPC_G_UDIVFIXSAT	 148
#define PPC_G_FADD	 149
#define PPC_G_FSUB	 150
#define PPC_G_FMUL	 151
#define PPC_G_FMA	 152
#define PPC_G_FMAD	 153
#define PPC_G_FDIV	 154
#define PPC_G_FREM	 155
#define PPC_G_FPOW	 156
#define PPC_G_FPOWI	 157
#define PPC_G_FEXP	 158
#define PPC_G_FEXP2	 159
#define PPC_G_FLOG	 160
#define PPC_G_FLOG2	 161
#define PPC_G_FLOG10	 162
#define PPC_G_FNEG	 163
#define PPC_G_FPEXT	 164
#define PPC_G_FPTRUNC	 165
#define PPC_G_FPTOSI	 166
#define PPC_G_FPTOUI	 167
#define PPC_G_SITOFP	 168
#define PPC_G_UITOFP	 169
#define PPC_G_FABS	 170
#define PPC_G_FCOPYSIGN	 171
#define PPC_G_FCANONICALIZE	 172
#define PPC_G_FMINNUM	 173
#define PPC_G_FMAXNUM	 174
#define PPC_G_FMINNUM_IEEE	 175
#define PPC_G_FMAXNUM_IEEE	 176
#define PPC_G_FMINIMUM	 177
#define PPC_G_FMAXIMUM	 178
#define PPC_G_PTR_ADD	 179
#define PPC_G_PTRMASK	 180
#define PPC_G_SMIN	 181
#define PPC_G_SMAX	 182
#define PPC_G_UMIN	 183
#define PPC_G_UMAX	 184
#define PPC_G_ABS	 185
#define PPC_G_LROUND	 186
#define PPC_G_LLROUND	 187
#define PPC_G_BR	 188
#define PPC_G_BRJT	 189
#define PPC_G_INSERT_VECTOR_ELT	 190
#define PPC_G_EXTRACT_VECTOR_ELT	 191
#define PPC_G_SHUFFLE_VECTOR	 192
#define PPC_G_CTTZ	 193
#define PPC_G_CTTZ_ZERO_UNDEF	 194
#define PPC_G_CTLZ	 195
#define PPC_G_CTLZ_ZERO_UNDEF	 196
#define PPC_G_CTPOP	 197
#define PPC_G_BSWAP	 198
#define PPC_G_BITREVERSE	 199
#define PPC_G_FCEIL	 200
#define PPC_G_FCOS	 201
#define PPC_G_FSIN	 202
#define PPC_G_FSQRT	 203
#define PPC_G_FFLOOR	 204
#define PPC_G_FRINT	 205
#define PPC_G_FNEARBYINT	 206
#define PPC_G_ADDRSPACE_CAST	 207
#define PPC_G_BLOCK_ADDR	 208
#define PPC_G_JUMP_TABLE	 209
#define PPC_G_DYN_STACKALLOC	 210
#define PPC_G_STRICT_FADD	 211
#define PPC_G_STRICT_FSUB	 212
#define PPC_G_STRICT_FMUL	 213
#define PPC_G_STRICT_FDIV	 214
#define PPC_G_STRICT_FREM	 215
#define PPC_G_STRICT_FMA	 216
#define PPC_G_STRICT_FSQRT	 217
#define PPC_G_READ_REGISTER	 218
#define PPC_G_WRITE_REGISTER	 219
#define PPC_G_MEMCPY	 220
#define PPC_G_MEMCPY_INLINE	 221
#define PPC_G_MEMMOVE	 222
#define PPC_G_MEMSET	 223
#define PPC_G_BZERO	 224
#define PPC_G_VECREDUCE_SEQ_FADD	 225
#define PPC_G_VECREDUCE_SEQ_FMUL	 226
#define PPC_G_VECREDUCE_FADD	 227
#define PPC_G_VECREDUCE_FMUL	 228
#define PPC_G_VECREDUCE_FMAX	 229
#define PPC_G_VECREDUCE_FMIN	 230
#define PPC_G_VECREDUCE_ADD	 231
#define PPC_G_VECREDUCE_MUL	 232
#define PPC_G_VECREDUCE_AND	 233
#define PPC_G_VECREDUCE_OR	 234
#define PPC_G_VECREDUCE_XOR	 235
#define PPC_G_VECREDUCE_SMAX	 236
#define PPC_G_VECREDUCE_SMIN	 237
#define PPC_G_VECREDUCE_UMAX	 238
#define PPC_G_VECREDUCE_UMIN	 239
#define PPC_G_SBFX	 240
#define PPC_G_UBFX	 241
#define PPC_ATOMIC_CMP_SWAP_I128	 242
#define PPC_ATOMIC_LOAD_ADD_I128	 243
#define PPC_ATOMIC_LOAD_AND_I128	 244
#define PPC_ATOMIC_LOAD_NAND_I128	 245
#define PPC_ATOMIC_LOAD_OR_I128	 246
#define PPC_ATOMIC_LOAD_SUB_I128	 247
#define PPC_ATOMIC_LOAD_XOR_I128	 248
#define PPC_ATOMIC_SWAP_I128	 249
#define PPC_BUILD_QUADWORD	 250
#define PPC_BUILD_UACC	 251
#define PPC_CFENCE8	 252
#define PPC_CLRLSLDI	 253
#define PPC_CLRLSLDI_rec	 254
#define PPC_CLRLSLWI	 255
#define PPC_CLRLSLWI_rec	 256
#define PPC_CLRRDI	 257
#define PPC_CLRRDI_rec	 258
#define PPC_CLRRWI	 259
#define PPC_CLRRWI_rec	 260
#define PPC_DCBFL	 261
#define PPC_DCBFLP	 262
#define PPC_DCBFPS	 263
#define PPC_DCBFx	 264
#define PPC_DCBSTPS	 265
#define PPC_DCBTCT	 266
#define PPC_DCBTDS	 267
#define PPC_DCBTSTCT	 268
#define PPC_DCBTSTDS	 269
#define PPC_DCBTSTT	 270
#define PPC_DCBTSTx	 271
#define PPC_DCBTT	 272
#define PPC_DCBTx	 273
#define PPC_DFLOADf32	 274
#define PPC_DFLOADf64	 275
#define PPC_DFSTOREf32	 276
#define PPC_DFSTOREf64	 277
#define PPC_EXTLDI	 278
#define PPC_EXTLDI_rec	 279
#define PPC_EXTLWI	 280
#define PPC_EXTLWI_rec	 281
#define PPC_EXTRDI	 282
#define PPC_EXTRDI_rec	 283
#define PPC_EXTRWI	 284
#define PPC_EXTRWI_rec	 285
#define PPC_INSLWI	 286
#define PPC_INSLWI_rec	 287
#define PPC_INSRDI	 288
#define PPC_INSRDI_rec	 289
#define PPC_INSRWI	 290
#define PPC_INSRWI_rec	 291
#define PPC_KILL_PAIR	 292
#define PPC_LAx	 293
#define PPC_LIWAX	 294
#define PPC_LIWZX	 295
#define PPC_RLWIMIbm	 296
#define PPC_RLWIMIbm_rec	 297
#define PPC_RLWINMbm	 298
#define PPC_RLWINMbm_rec	 299
#define PPC_RLWNMbm	 300
#define PPC_RLWNMbm_rec	 301
#define PPC_ROTRDI	 302
#define PPC_ROTRDI_rec	 303
#define PPC_ROTRWI	 304
#define PPC_ROTRWI_rec	 305
#define PPC_SLDI	 306
#define PPC_SLDI_rec	 307
#define PPC_SLWI	 308
#define PPC_SLWI_rec	 309
#define PPC_SPILLTOVSR_LD	 310
#define PPC_SPILLTOVSR_LDX	 311
#define PPC_SPILLTOVSR_ST	 312
#define PPC_SPILLTOVSR_STX	 313
#define PPC_SRDI	 314
#define PPC_SRDI_rec	 315
#define PPC_SRWI	 316
#define PPC_SRWI_rec	 317
#define PPC_STIWX	 318
#define PPC_SUBI	 319
#define PPC_SUBIC	 320
#define PPC_SUBIC_rec	 321
#define PPC_SUBIS	 322
#define PPC_SUBPCIS	 323
#define PPC_XFLOADf32	 324
#define PPC_XFLOADf64	 325
#define PPC_XFSTOREf32	 326
#define PPC_XFSTOREf64	 327
#define PPC_ADD4	 328
#define PPC_ADD4O	 329
#define PPC_ADD4O_rec	 330
#define PPC_ADD4TLS	 331
#define PPC_ADD4_rec	 332
#define PPC_ADD8	 333
#define PPC_ADD8O	 334
#define PPC_ADD8O_rec	 335
#define PPC_ADD8TLS	 336
#define PPC_ADD8TLS_	 337
#define PPC_ADD8_rec	 338
#define PPC_ADDC	 339
#define PPC_ADDC8	 340
#define PPC_ADDC8O	 341
#define PPC_ADDC8O_rec	 342
#define PPC_ADDC8_rec	 343
#define PPC_ADDCO	 344
#define PPC_ADDCO_rec	 345
#define PPC_ADDC_rec	 346
#define PPC_ADDE	 347
#define PPC_ADDE8	 348
#define PPC_ADDE8O	 349
#define PPC_ADDE8O_rec	 350
#define PPC_ADDE8_rec	 351
#define PPC_ADDEO	 352
#define PPC_ADDEO_rec	 353
#define PPC_ADDEX	 354
#define PPC_ADDEX8	 355
#define PPC_ADDE_rec	 356
#define PPC_ADDI	 357
#define PPC_ADDI8	 358
#define PPC_ADDIC	 359
#define PPC_ADDIC8	 360
#define PPC_ADDIC_rec	 361
#define PPC_ADDIS	 362
#define PPC_ADDIS8	 363
#define PPC_ADDISdtprelHA	 364
#define PPC_ADDISdtprelHA32	 365
#define PPC_ADDISgotTprelHA	 366
#define PPC_ADDIStlsgdHA	 367
#define PPC_ADDIStlsldHA	 368
#define PPC_ADDIStocHA	 369
#define PPC_ADDIStocHA8	 370
#define PPC_ADDIdtprelL	 371
#define PPC_ADDIdtprelL32	 372
#define PPC_ADDItlsgdL	 373
#define PPC_ADDItlsgdL32	 374
#define PPC_ADDItlsgdLADDR	 375
#define PPC_ADDItlsgdLADDR32	 376
#define PPC_ADDItlsldL	 377
#define PPC_ADDItlsldL32	 378
#define PPC_ADDItlsldLADDR	 379
#define PPC_ADDItlsldLADDR32	 380
#define PPC_ADDItoc	 381
#define PPC_ADDItocL	 382
#define PPC_ADDME	 383
#define PPC_ADDME8	 384
#define PPC_ADDME8O	 385
#define PPC_ADDME8O_rec	 386
#define PPC_ADDME8_rec	 387
#define PPC_ADDMEO	 388
#define PPC_ADDMEO_rec	 389
#define PPC_ADDME_rec	 390
#define PPC_ADDPCIS	 391
#define PPC_ADDZE	 392
#define PPC_ADDZE8	 393
#define PPC_ADDZE8O	 394
#define PPC_ADDZE8O_rec	 395
#define PPC_ADDZE8_rec	 396
#define PPC_ADDZEO	 397
#define PPC_ADDZEO_rec	 398
#define PPC_ADDZE_rec	 399
#define PPC_ADJCALLSTACKDOWN	 400
#define PPC_ADJCALLSTACKUP	 401
#define PPC_AND	 402
#define PPC_AND8	 403
#define PPC_AND8_rec	 404
#define PPC_ANDC	 405
#define PPC_ANDC8	 406
#define PPC_ANDC8_rec	 407
#define PPC_ANDC_rec	 408
#define PPC_ANDI8_rec	 409
#define PPC_ANDIS8_rec	 410
#define PPC_ANDIS_rec	 411
#define PPC_ANDI_rec	 412
#define PPC_ANDI_rec_1_EQ_BIT	 413
#define PPC_ANDI_rec_1_EQ_BIT8	 414
#define PPC_ANDI_rec_1_GT_BIT	 415
#define PPC_ANDI_rec_1_GT_BIT8	 416
#define PPC_AND_rec	 417
#define PPC_ATOMIC_CMP_SWAP_I16	 418
#define PPC_ATOMIC_CMP_SWAP_I32	 419
#define PPC_ATOMIC_CMP_SWAP_I64	 420
#define PPC_ATOMIC_CMP_SWAP_I8	 421
#define PPC_ATOMIC_LOAD_ADD_I16	 422
#define PPC_ATOMIC_LOAD_ADD_I32	 423
#define PPC_ATOMIC_LOAD_ADD_I64	 424
#define PPC_ATOMIC_LOAD_ADD_I8	 425
#define PPC_ATOMIC_LOAD_AND_I16	 426
#define PPC_ATOMIC_LOAD_AND_I32	 427
#define PPC_ATOMIC_LOAD_AND_I64	 428
#define PPC_ATOMIC_LOAD_AND_I8	 429
#define PPC_ATOMIC_LOAD_MAX_I16	 430
#define PPC_ATOMIC_LOAD_MAX_I32	 431
#define PPC_ATOMIC_LOAD_MAX_I64	 432
#define PPC_ATOMIC_LOAD_MAX_I8	 433
#define PPC_ATOMIC_LOAD_MIN_I16	 434
#define PPC_ATOMIC_LOAD_MIN_I32	 435
#define PPC_ATOMIC_LOAD_MIN_I64	 436
#define PPC_ATOMIC_LOAD_MIN_I8	 437
#define PPC_ATOMIC_LOAD_NAND_I16	 438
#define PPC_ATOMIC_LOAD_NAND_I32	 439
#define PPC_ATOMIC_LOAD_NAND_I64	 440
#define PPC_ATOMIC_LOAD_NAND_I8	 441
#define PPC_ATOMIC_LOAD_OR_I16	 442
#define PPC_ATOMIC_LOAD_OR_I32	 443
#define PPC_ATOMIC_LOAD_OR_I64	 444
#define PPC_ATOMIC_LOAD_OR_I8	 445
#define PPC_ATOMIC_LOAD_SUB_I16	 446
#define PPC_ATOMIC_LOAD_SUB_I32	 447
#define PPC_ATOMIC_LOAD_SUB_I64	 448
#define PPC_ATOMIC_LOAD_SUB_I8	 449
#define PPC_ATOMIC_LOAD_UMAX_I16	 450
#define PPC_ATOMIC_LOAD_UMAX_I32	 451
#define PPC_ATOMIC_LOAD_UMAX_I64	 452
#define PPC_ATOMIC_LOAD_UMAX_I8	 453
#define PPC_ATOMIC_LOAD_UMIN_I16	 454
#define PPC_ATOMIC_LOAD_UMIN_I32	 455
#define PPC_ATOMIC_LOAD_UMIN_I64	 456
#define PPC_ATOMIC_LOAD_UMIN_I8	 457
#define PPC_ATOMIC_LOAD_XOR_I16	 458
#define PPC_ATOMIC_LOAD_XOR_I32	 459
#define PPC_ATOMIC_LOAD_XOR_I64	 460
#define PPC_ATOMIC_LOAD_XOR_I8	 461
#define PPC_ATOMIC_SWAP_I16	 462
#define PPC_ATOMIC_SWAP_I32	 463
#define PPC_ATOMIC_SWAP_I64	 464
#define PPC_ATOMIC_SWAP_I8	 465
#define PPC_ATTN	 466
#define PPC_B	 467
#define PPC_BA	 468
#define PPC_BC	 469
#define PPC_BCC	 470
#define PPC_BCCA	 471
#define PPC_BCCCTR	 472
#define PPC_BCCCTR8	 473
#define PPC_BCCCTRL	 474
#define PPC_BCCCTRL8	 475
#define PPC_BCCL	 476
#define PPC_BCCLA	 477
#define PPC_BCCLR	 478
#define PPC_BCCLRL	 479
#define PPC_BCCTR	 480
#define PPC_BCCTR8	 481
#define PPC_BCCTR8n	 482
#define PPC_BCCTRL	 483
#define PPC_BCCTRL8	 484
#define PPC_BCCTRL8n	 485
#define PPC_BCCTRLn	 486
#define PPC_BCCTRn	 487
#define PPC_BCDCFN_rec	 488
#define PPC_BCDCFSQ_rec	 489
#define PPC_BCDCFZ_rec	 490
#define PPC_BCDCPSGN_rec	 491
#define PPC_BCDCTN_rec	 492
#define PPC_BCDCTSQ_rec	 493
#define PPC_BCDCTZ_rec	 494
#define PPC_BCDSETSGN_rec	 495
#define PPC_BCDSR_rec	 496
#define PPC_BCDS_rec	 497
#define PPC_BCDTRUNC_rec	 498
#define PPC_BCDUS_rec	 499
#define PPC_BCDUTRUNC_rec	 500
#define PPC_BCL	 501
#define PPC_BCLR	 502
#define PPC_BCLRL	 503
#define PPC_BCLRLn	 504
#define PPC_BCLRn	 505
#define PPC_BCLalways	 506
#define PPC_BCLn	 507
#define PPC_BCTR	 508
#define PPC_BCTR8	 509
#define PPC_BCTRL	 510
#define PPC_BCTRL8	 511
#define PPC_BCTRL8_LDinto_toc	 512
#define PPC_BCTRL8_LDinto_toc_RM	 513
#define PPC_BCTRL8_RM	 514
#define PPC_BCTRL_LWZinto_toc	 515
#define PPC_BCTRL_LWZinto_toc_RM	 516
#define PPC_BCTRL_RM	 517
#define PPC_BCn	 518
#define PPC_BDNZ	 519
#define PPC_BDNZ8	 520
#define PPC_BDNZA	 521
#define PPC_BDNZAm	 522
#define PPC_BDNZAp	 523
#define PPC_BDNZL	 524
#define PPC_BDNZLA	 525
#define PPC_BDNZLAm	 526
#define PPC_BDNZLAp	 527
#define PPC_BDNZLR	 528
#define PPC_BDNZLR8	 529
#define PPC_BDNZLRL	 530
#define PPC_BDNZLRLm	 531
#define PPC_BDNZLRLp	 532
#define PPC_BDNZLRm	 533
#define PPC_BDNZLRp	 534
#define PPC_BDNZLm	 535
#define PPC_BDNZLp	 536
#define PPC_BDNZm	 537
#define PPC_BDNZp	 538
#define PPC_BDZ	 539
#define PPC_BDZ8	 540
#define PPC_BDZA	 541
#define PPC_BDZAm	 542
#define PPC_BDZAp	 543
#define PPC_BDZL	 544
#define PPC_BDZLA	 545
#define PPC_BDZLAm	 546
#define PPC_BDZLAp	 547
#define PPC_BDZLR	 548
#define PPC_BDZLR8	 549
#define PPC_BDZLRL	 550
#define PPC_BDZLRLm	 551
#define PPC_BDZLRLp	 552
#define PPC_BDZLRm	 553
#define PPC_BDZLRp	 554
#define PPC_BDZLm	 555
#define PPC_BDZLp	 556
#define PPC_BDZm	 557
#define PPC_BDZp	 558
#define PPC_BL	 559
#define PPC_BL8	 560
#define PPC_BL8_NOP	 561
#define PPC_BL8_NOP_RM	 562
#define PPC_BL8_NOP_TLS	 563
#define PPC_BL8_NOTOC	 564
#define PPC_BL8_NOTOC_RM	 565
#define PPC_BL8_NOTOC_TLS	 566
#define PPC_BL8_RM	 567
#define PPC_BL8_TLS	 568
#define PPC_BL8_TLS_	 569
#define PPC_BLA	 570
#define PPC_BLA8	 571
#define PPC_BLA8_NOP	 572
#define PPC_BLA8_NOP_RM	 573
#define PPC_BLA8_RM	 574
#define PPC_BLA_RM	 575
#define PPC_BLR	 576
#define PPC_BLR8	 577
#define PPC_BLRL	 578
#define PPC_BL_NOP	 579
#define PPC_BL_NOP_RM	 580
#define PPC_BL_RM	 581
#define PPC_BL_TLS	 582
#define PPC_BPERMD	 583
#define PPC_BRINC	 584
#define PPC_CFUGED	 585
#define PPC_CLRBHRB	 586
#define PPC_CMPB	 587
#define PPC_CMPB8	 588
#define PPC_CMPD	 589
#define PPC_CMPDI	 590
#define PPC_CMPEQB	 591
#define PPC_CMPLD	 592
#define PPC_CMPLDI	 593
#define PPC_CMPLW	 594
#define PPC_CMPLWI	 595
#define PPC_CMPRB	 596
#define PPC_CMPRB8	 597
#define PPC_CMPW	 598
#define PPC_CMPWI	 599
#define PPC_CNTLZD	 600
#define PPC_CNTLZDM	 601
#define PPC_CNTLZD_rec	 602
#define PPC_CNTLZW	 603
#define PPC_CNTLZW8	 604
#define PPC_CNTLZW8_rec	 605
#define PPC_CNTLZW_rec	 606
#define PPC_CNTTZD	 607
#define PPC_CNTTZDM	 608
#define PPC_CNTTZD_rec	 609
#define PPC_CNTTZW	 610
#define PPC_CNTTZW8	 611
#define PPC_CNTTZW8_rec	 612
#define PPC_CNTTZW_rec	 613
#define PPC_CP_ABORT	 614
#define PPC_CP_COPY	 615
#define PPC_CP_COPY8	 616
#define PPC_CP_PASTE8_rec	 617
#define PPC_CP_PASTE_rec	 618
#define PPC_CR6SET	 619
#define PPC_CR6UNSET	 620
#define PPC_CRAND	 621
#define PPC_CRANDC	 622
#define PPC_CREQV	 623
#define PPC_CRNAND	 624
#define PPC_CRNOR	 625
#define PPC_CROR	 626
#define PPC_CRORC	 627
#define PPC_CRSET	 628
#define PPC_CRUNSET	 629
#define PPC_CRXOR	 630
#define PPC_CTRL_DEP	 631
#define PPC_DARN	 632
#define PPC_DCBA	 633
#define PPC_DCBF	 634
#define PPC_DCBFEP	 635
#define PPC_DCBI	 636
#define PPC_DCBST	 637
#define PPC_DCBSTEP	 638
#define PPC_DCBT	 639
#define PPC_DCBTEP	 640
#define PPC_DCBTST	 641
#define PPC_DCBTSTEP	 642
#define PPC_DCBZ	 643
#define PPC_DCBZEP	 644
#define PPC_DCBZL	 645
#define PPC_DCBZLEP	 646
#define PPC_DCCCI	 647
#define PPC_DIVD	 648
#define PPC_DIVDE	 649
#define PPC_DIVDEO	 650
#define PPC_DIVDEO_rec	 651
#define PPC_DIVDEU	 652
#define PPC_DIVDEUO	 653
#define PPC_DIVDEUO_rec	 654
#define PPC_DIVDEU_rec	 655
#define PPC_DIVDE_rec	 656
#define PPC_DIVDO	 657
#define PPC_DIVDO_rec	 658
#define PPC_DIVDU	 659
#define PPC_DIVDUO	 660
#define PPC_DIVDUO_rec	 661
#define PPC_DIVDU_rec	 662
#define PPC_DIVD_rec	 663
#define PPC_DIVW	 664
#define PPC_DIVWE	 665
#define PPC_DIVWEO	 666
#define PPC_DIVWEO_rec	 667
#define PPC_DIVWEU	 668
#define PPC_DIVWEUO	 669
#define PPC_DIVWEUO_rec	 670
#define PPC_DIVWEU_rec	 671
#define PPC_DIVWE_rec	 672
#define PPC_DIVWO	 673
#define PPC_DIVWO_rec	 674
#define PPC_DIVWU	 675
#define PPC_DIVWUO	 676
#define PPC_DIVWUO_rec	 677
#define PPC_DIVWU_rec	 678
#define PPC_DIVW_rec	 679
#define PPC_DSS	 680
#define PPC_DSSALL	 681
#define PPC_DST	 682
#define PPC_DST64	 683
#define PPC_DSTST	 684
#define PPC_DSTST64	 685
#define PPC_DSTSTT	 686
#define PPC_DSTSTT64	 687
#define PPC_DSTT	 688
#define PPC_DSTT64	 689
#define PPC_DYNALLOC	 690
#define PPC_DYNALLOC8	 691
#define PPC_DYNAREAOFFSET	 692
#define PPC_DYNAREAOFFSET8	 693
#define PPC_EFDABS	 694
#define PPC_EFDADD	 695
#define PPC_EFDCFS	 696
#define PPC_EFDCFSF	 697
#define PPC_EFDCFSI	 698
#define PPC_EFDCFSID	 699
#define PPC_EFDCFUF	 700
#define PPC_EFDCFUI	 701
#define PPC_EFDCFUID	 702
#define PPC_EFDCMPEQ	 703
#define PPC_EFDCMPGT	 704
#define PPC_EFDCMPLT	 705
#define PPC_EFDCTSF	 706
#define PPC_EFDCTSI	 707
#define PPC_EFDCTSIDZ	 708
#define PPC_EFDCTSIZ	 709
#define PPC_EFDCTUF	 710
#define PPC_EFDCTUI	 711
#define PPC_EFDCTUIDZ	 712
#define PPC_EFDCTUIZ	 713
#define PPC_EFDDIV	 714
#define PPC_EFDMUL	 715
#define PPC_EFDNABS	 716
#define PPC_EFDNEG	 717
#define PPC_EFDSUB	 718
#define PPC_EFDTSTEQ	 719
#define PPC_EFDTSTGT	 720
#define PPC_EFDTSTLT	 721
#define PPC_EFSABS	 722
#define PPC_EFSADD	 723
#define PPC_EFSCFD	 724
#define PPC_EFSCFSF	 725
#define PPC_EFSCFSI	 726
#define PPC_EFSCFUF	 727
#define PPC_EFSCFUI	 728
#define PPC_EFSCMPEQ	 729
#define PPC_EFSCMPGT	 730
#define PPC_EFSCMPLT	 731
#define PPC_EFSCTSF	 732
#define PPC_EFSCTSI	 733
#define PPC_EFSCTSIZ	 734
#define PPC_EFSCTUF	 735
#define PPC_EFSCTUI	 736
#define PPC_EFSCTUIZ	 737
#define PPC_EFSDIV	 738
#define PPC_EFSMUL	 739
#define PPC_EFSNABS	 740
#define PPC_EFSNEG	 741
#define PPC_EFSSUB	 742
#define PPC_EFSTSTEQ	 743
#define PPC_EFSTSTGT	 744
#define PPC_EFSTSTLT	 745
#define PPC_EH_SjLj_LongJmp32	 746
#define PPC_EH_SjLj_LongJmp64	 747
#define PPC_EH_SjLj_SetJmp32	 748
#define PPC_EH_SjLj_SetJmp64	 749
#define PPC_EH_SjLj_Setup	 750
#define PPC_EQV	 751
#define PPC_EQV8	 752
#define PPC_EQV8_rec	 753
#define PPC_EQV_rec	 754
#define PPC_EVABS	 755
#define PPC_EVADDIW	 756
#define PPC_EVADDSMIAAW	 757
#define PPC_EVADDSSIAAW	 758
#define PPC_EVADDUMIAAW	 759
#define PPC_EVADDUSIAAW	 760
#define PPC_EVADDW	 761
#define PPC_EVAND	 762
#define PPC_EVANDC	 763
#define PPC_EVCMPEQ	 764
#define PPC_EVCMPGTS	 765
#define PPC_EVCMPGTU	 766
#define PPC_EVCMPLTS	 767
#define PPC_EVCMPLTU	 768
#define PPC_EVCNTLSW	 769
#define PPC_EVCNTLZW	 770
#define PPC_EVDIVWS	 771
#define PPC_EVDIVWU	 772
#define PPC_EVEQV	 773
#define PPC_EVEXTSB	 774
#define PPC_EVEXTSH	 775
#define PPC_EVFSABS	 776
#define PPC_EVFSADD	 777
#define PPC_EVFSCFSF	 778
#define PPC_EVFSCFSI	 779
#define PPC_EVFSCFUF	 780
#define PPC_EVFSCFUI	 781
#define PPC_EVFSCMPEQ	 782
#define PPC_EVFSCMPGT	 783
#define PPC_EVFSCMPLT	 784
#define PPC_EVFSCTSF	 785
#define PPC_EVFSCTSI	 786
#define PPC_EVFSCTSIZ	 787
#define PPC_EVFSCTUF	 788
#define PPC_EVFSCTUI	 789
#define PPC_EVFSCTUIZ	 790
#define PPC_EVFSDIV	 791
#define PPC_EVFSMUL	 792
#define PPC_EVFSNABS	 793
#define PPC_EVFSNEG	 794
#define PPC_EVFSSUB	 795
#define PPC_EVFSTSTEQ	 796
#define PPC_EVFSTSTGT	 797
#define PPC_EVFSTSTLT	 798
#define PPC_EVLDD	 799
#define PPC_EVLDDX	 800
#define PPC_EVLDH	 801
#define PPC_EVLDHX	 802
#define PPC_EVLDW	 803
#define PPC_EVLDWX	 804
#define PPC_EVLHHESPLAT	 805
#define PPC_EVLHHESPLATX	 806
#define PPC_EVLHHOSSPLAT	 807
#define PPC_EVLHHOSSPLATX	 808
#define PPC_EVLHHOUSPLAT	 809
#define PPC_EVLHHOUSPLATX	 810
#define PPC_EVLWHE	 811
#define PPC_EVLWHEX	 812
#define PPC_EVLWHOS	 813
#define PPC_EVLWHOSX	 814
#define PPC_EVLWHOU	 815
#define PPC_EVLWHOUX	 816
#define PPC_EVLWHSPLAT	 817
#define PPC_EVLWHSPLATX	 818
#define PPC_EVLWWSPLAT	 819
#define PPC_EVLWWSPLATX	 820
#define PPC_EVMERGEHI	 821
#define PPC_EVMERGEHILO	 822
#define PPC_EVMERGELO	 823
#define PPC_EVMERGELOHI	 824
#define PPC_EVMHEGSMFAA	 825
#define PPC_EVMHEGSMFAN	 826
#define PPC_EVMHEGSMIAA	 827
#define PPC_EVMHEGSMIAN	 828
#define PPC_EVMHEGUMIAA	 829
#define PPC_EVMHEGUMIAN	 830
#define PPC_EVMHESMF	 831
#define PPC_EVMHESMFA	 832
#define PPC_EVMHESMFAAW	 833
#define PPC_EVMHESMFANW	 834
#define PPC_EVMHESMI	 835
#define PPC_EVMHESMIA	 836
#define PPC_EVMHESMIAAW	 837
#define PPC_EVMHESMIANW	 838
#define PPC_EVMHESSF	 839
#define PPC_EVMHESSFA	 840
#define PPC_EVMHESSFAAW	 841
#define PPC_EVMHESSFANW	 842
#define PPC_EVMHESSIAAW	 843
#define PPC_EVMHESSIANW	 844
#define PPC_EVMHEUMI	 845
#define PPC_EVMHEUMIA	 846
#define PPC_EVMHEUMIAAW	 847
#define PPC_EVMHEUMIANW	 848
#define PPC_EVMHEUSIAAW	 849
#define PPC_EVMHEUSIANW	 850
#define PPC_EVMHOGSMFAA	 851
#define PPC_EVMHOGSMFAN	 852
#define PPC_EVMHOGSMIAA	 853
#define PPC_EVMHOGSMIAN	 854
#define PPC_EVMHOGUMIAA	 855
#define PPC_EVMHOGUMIAN	 856
#define PPC_EVMHOSMF	 857
#define PPC_EVMHOSMFA	 858
#define PPC_EVMHOSMFAAW	 859
#define PPC_EVMHOSMFANW	 860
#define PPC_EVMHOSMI	 861
#define PPC_EVMHOSMIA	 862
#define PPC_EVMHOSMIAAW	 863
#define PPC_EVMHOSMIANW	 864
#define PPC_EVMHOSSF	 865
#define PPC_EVMHOSSFA	 866
#define PPC_EVMHOSSFAAW	 867
#define PPC_EVMHOSSFANW	 868
#define PPC_EVMHOSSIAAW	 869
#define PPC_EVMHOSSIANW	 870
#define PPC_EVMHOUMI	 871
#define PPC_EVMHOUMIA	 872
#define PPC_EVMHOUMIAAW	 873
#define PPC_EVMHOUMIANW	 874
#define PPC_EVMHOUSIAAW	 875
#define PPC_EVMHOUSIANW	 876
#define PPC_EVMRA	 877
#define PPC_EVMWHSMF	 878
#define PPC_EVMWHSMFA	 879
#define PPC_EVMWHSMI	 880
#define PPC_EVMWHSMIA	 881
#define PPC_EVMWHSSF	 882
#define PPC_EVMWHSSFA	 883
#define PPC_EVMWHUMI	 884
#define PPC_EVMWHUMIA	 885
#define PPC_EVMWLSMIAAW	 886
#define PPC_EVMWLSMIANW	 887
#define PPC_EVMWLSSIAAW	 888
#define PPC_EVMWLSSIANW	 889
#define PPC_EVMWLUMI	 890
#define PPC_EVMWLUMIA	 891
#define PPC_EVMWLUMIAAW	 892
#define PPC_EVMWLUMIANW	 893
#define PPC_EVMWLUSIAAW	 894
#define PPC_EVMWLUSIANW	 895
#define PPC_EVMWSMF	 896
#define PPC_EVMWSMFA	 897
#define PPC_EVMWSMFAA	 898
#define PPC_EVMWSMFAN	 899
#define PPC_EVMWSMI	 900
#define PPC_EVMWSMIA	 901
#define PPC_EVMWSMIAA	 902
#define PPC_EVMWSMIAN	 903
#define PPC_EVMWSSF	 904
#define PPC_EVMWSSFA	 905
#define PPC_EVMWSSFAA	 906
#define PPC_EVMWSSFAN	 907
#define PPC_EVMWUMI	 908
#define PPC_EVMWUMIA	 909
#define PPC_EVMWUMIAA	 910
#define PPC_EVMWUMIAN	 911
#define PPC_EVNAND	 912
#define PPC_EVNEG	 913
#define PPC_EVNOR	 914
#define PPC_EVOR	 915
#define PPC_EVORC	 916
#define PPC_EVRLW	 917
#define PPC_EVRLWI	 918
#define PPC_EVRNDW	 919
#define PPC_EVSEL	 920
#define PPC_EVSLW	 921
#define PPC_EVSLWI	 922
#define PPC_EVSPLATFI	 923
#define PPC_EVSPLATI	 924
#define PPC_EVSRWIS	 925
#define PPC_EVSRWIU	 926
#define PPC_EVSRWS	 927
#define PPC_EVSRWU	 928
#define PPC_EVSTDD	 929
#define PPC_EVSTDDX	 930
#define PPC_EVSTDH	 931
#define PPC_EVSTDHX	 932
#define PPC_EVSTDW	 933
#define PPC_EVSTDWX	 934
#define PPC_EVSTWHE	 935
#define PPC_EVSTWHEX	 936
#define PPC_EVSTWHO	 937
#define PPC_EVSTWHOX	 938
#define PPC_EVSTWWE	 939
#define PPC_EVSTWWEX	 940
#define PPC_EVSTWWO	 941
#define PPC_EVSTWWOX	 942
#define PPC_EVSUBFSMIAAW	 943
#define PPC_EVSUBFSSIAAW	 944
#define PPC_EVSUBFUMIAAW	 945
#define PPC_EVSUBFUSIAAW	 946
#define PPC_EVSUBFW	 947
#define PPC_EVSUBIFW	 948
#define PPC_EVXOR	 949
#define PPC_EXTSB	 950
#define PPC_EXTSB8	 951
#define PPC_EXTSB8_32_64	 952
#define PPC_EXTSB8_rec	 953
#define PPC_EXTSB_rec	 954
#define PPC_EXTSH	 955
#define PPC_EXTSH8	 956
#define PPC_EXTSH8_32_64	 957
#define PPC_EXTSH8_rec	 958
#define PPC_EXTSH_rec	 959
#define PPC_EXTSW	 960
#define PPC_EXTSWSLI	 961
#define PPC_EXTSWSLI_32_64	 962
#define PPC_EXTSWSLI_32_64_rec	 963
#define PPC_EXTSWSLI_rec	 964
#define PPC_EXTSW_32	 965
#define PPC_EXTSW_32_64	 966
#define PPC_EXTSW_32_64_rec	 967
#define PPC_EXTSW_rec	 968
#define PPC_EnforceIEIO	 969
#define PPC_FABSD	 970
#define PPC_FABSD_rec	 971
#define PPC_FABSS	 972
#define PPC_FABSS_rec	 973
#define PPC_FADD	 974
#define PPC_FADDS	 975
#define PPC_FADDS_rec	 976
#define PPC_FADD_rec	 977
#define PPC_FADDrtz	 978
#define PPC_FCFID	 979
#define PPC_FCFIDS	 980
#define PPC_FCFIDS_rec	 981
#define PPC_FCFIDU	 982
#define PPC_FCFIDUS	 983
#define PPC_FCFIDUS_rec	 984
#define PPC_FCFIDU_rec	 985
#define PPC_FCFID_rec	 986
#define PPC_FCMPOD	 987
#define PPC_FCMPOS	 988
#define PPC_FCMPUD	 989
#define PPC_FCMPUS	 990
#define PPC_FCPSGND	 991
#define PPC_FCPSGND_rec	 992
#define PPC_FCPSGNS	 993
#define PPC_FCPSGNS_rec	 994
#define PPC_FCTID	 995
#define PPC_FCTIDU	 996
#define PPC_FCTIDUZ	 997
#define PPC_FCTIDUZ_rec	 998
#define PPC_FCTIDU_rec	 999
#define PPC_FCTIDZ	 1000
#define PPC_FCTIDZ_rec	 1001
#define PPC_FCTID_rec	 1002
#define PPC_FCTIW	 1003
#define PPC_FCTIWU	 1004
#define PPC_FCTIWUZ	 1005
#define PPC_FCTIWUZ_rec	 1006
#define PPC_FCTIWU_rec	 1007
#define PPC_FCTIWZ	 1008
#define PPC_FCTIWZ_rec	 1009
#define PPC_FCTIW_rec	 1010
#define PPC_FDIV	 1011
#define PPC_FDIVS	 1012
#define PPC_FDIVS_rec	 1013
#define PPC_FDIV_rec	 1014
#define PPC_FMADD	 1015
#define PPC_FMADDS	 1016
#define PPC_FMADDS_rec	 1017
#define PPC_FMADD_rec	 1018
#define PPC_FMR	 1019
#define PPC_FMR_rec	 1020
#define PPC_FMSUB	 1021
#define PPC_FMSUBS	 1022
#define PPC_FMSUBS_rec	 1023
#define PPC_FMSUB_rec	 1024
#define PPC_FMUL	 1025
#define PPC_FMULS	 1026
#define PPC_FMULS_rec	 1027
#define PPC_FMUL_rec	 1028
#define PPC_FNABSD	 1029
#define PPC_FNABSD_rec	 1030
#define PPC_FNABSS	 1031
#define PPC_FNABSS_rec	 1032
#define PPC_FNEGD	 1033
#define PPC_FNEGD_rec	 1034
#define PPC_FNEGS	 1035
#define PPC_FNEGS_rec	 1036
#define PPC_FNMADD	 1037
#define PPC_FNMADDS	 1038
#define PPC_FNMADDS_rec	 1039
#define PPC_FNMADD_rec	 1040
#define PPC_FNMSUB	 1041
#define PPC_FNMSUBS	 1042
#define PPC_FNMSUBS_rec	 1043
#define PPC_FNMSUB_rec	 1044
#define PPC_FRE	 1045
#define PPC_FRES	 1046
#define PPC_FRES_rec	 1047
#define PPC_FRE_rec	 1048
#define PPC_FRIMD	 1049
#define PPC_FRIMD_rec	 1050
#define PPC_FRIMS	 1051
#define PPC_FRIMS_rec	 1052
#define PPC_FRIND	 1053
#define PPC_FRIND_rec	 1054
#define PPC_FRINS	 1055
#define PPC_FRINS_rec	 1056
#define PPC_FRIPD	 1057
#define PPC_FRIPD_rec	 1058
#define PPC_FRIPS	 1059
#define PPC_FRIPS_rec	 1060
#define PPC_FRIZD	 1061
#define PPC_FRIZD_rec	 1062
#define PPC_FRIZS	 1063
#define PPC_FRIZS_rec	 1064
#define PPC_FRSP	 1065
#define PPC_FRSP_rec	 1066
#define PPC_FRSQRTE	 1067
#define PPC_FRSQRTES	 1068
#define PPC_FRSQRTES_rec	 1069
#define PPC_FRSQRTE_rec	 1070
#define PPC_FSELD	 1071
#define PPC_FSELD_rec	 1072
#define PPC_FSELS	 1073
#define PPC_FSELS_rec	 1074
#define PPC_FSQRT	 1075
#define PPC_FSQRTS	 1076
#define PPC_FSQRTS_rec	 1077
#define PPC_FSQRT_rec	 1078
#define PPC_FSUB	 1079
#define PPC_FSUBS	 1080
#define PPC_FSUBS_rec	 1081
#define PPC_FSUB_rec	 1082
#define PPC_FTDIV	 1083
#define PPC_FTSQRT	 1084
#define PPC_GETtlsADDR	 1085
#define PPC_GETtlsADDR32	 1086
#define PPC_GETtlsADDR32AIX	 1087
#define PPC_GETtlsADDR64AIX	 1088
#define PPC_GETtlsADDRPCREL	 1089
#define PPC_GETtlsldADDR	 1090
#define PPC_GETtlsldADDR32	 1091
#define PPC_GETtlsldADDRPCREL	 1092
#define PPC_HASHCHK	 1093
#define PPC_HASHCHKP	 1094
#define PPC_HASHST	 1095
#define PPC_HASHSTP	 1096
#define PPC_HRFID	 1097
#define PPC_ICBI	 1098
#define PPC_ICBIEP	 1099
#define PPC_ICBLC	 1100
#define PPC_ICBLQ	 1101
#define PPC_ICBT	 1102
#define PPC_ICBTLS	 1103
#define PPC_ICCCI	 1104
#define PPC_ISEL	 1105
#define PPC_ISEL8	 1106
#define PPC_ISYNC	 1107
#define PPC_LA	 1108
#define PPC_LBARX	 1109
#define PPC_LBARXL	 1110
#define PPC_LBEPX	 1111
#define PPC_LBZ	 1112
#define PPC_LBZ8	 1113
#define PPC_LBZCIX	 1114
#define PPC_LBZU	 1115
#define PPC_LBZU8	 1116
#define PPC_LBZUX	 1117
#define PPC_LBZUX8	 1118
#define PPC_LBZX	 1119
#define PPC_LBZX8	 1120
#define PPC_LBZXTLS	 1121
#define PPC_LBZXTLS_	 1122
#define PPC_LBZXTLS_32	 1123
#define PPC_LD	 1124
#define PPC_LDARX	 1125
#define PPC_LDARXL	 1126
#define PPC_LDAT	 1127
#define PPC_LDBRX	 1128
#define PPC_LDCIX	 1129
#define PPC_LDMX	 1130
#define PPC_LDU	 1131
#define PPC_LDUX	 1132
#define PPC_LDX	 1133
#define PPC_LDXTLS	 1134
#define PPC_LDXTLS_	 1135
#define PPC_LDgotTprelL	 1136
#define PPC_LDgotTprelL32	 1137
#define PPC_LDtoc	 1138
#define PPC_LDtocBA	 1139
#define PPC_LDtocCPT	 1140
#define PPC_LDtocJTI	 1141
#define PPC_LDtocL	 1142
#define PPC_LFD	 1143
#define PPC_LFDEPX	 1144
#define PPC_LFDU	 1145
#define PPC_LFDUX	 1146
#define PPC_LFDX	 1147
#define PPC_LFIWAX	 1148
#define PPC_LFIWZX	 1149
#define PPC_LFS	 1150
#define PPC_LFSU	 1151
#define PPC_LFSUX	 1152
#define PPC_LFSX	 1153
#define PPC_LHA	 1154
#define PPC_LHA8	 1155
#define PPC_LHARX	 1156
#define PPC_LHARXL	 1157
#define PPC_LHAU	 1158
#define PPC_LHAU8	 1159
#define PPC_LHAUX	 1160
#define PPC_LHAUX8	 1161
#define PPC_LHAX	 1162
#define PPC_LHAX8	 1163
#define PPC_LHBRX	 1164
#define PPC_LHBRX8	 1165
#define PPC_LHEPX	 1166
#define PPC_LHZ	 1167
#define PPC_LHZ8	 1168
#define PPC_LHZCIX	 1169
#define PPC_LHZU	 1170
#define PPC_LHZU8	 1171
#define PPC_LHZUX	 1172
#define PPC_LHZUX8	 1173
#define PPC_LHZX	 1174
#define PPC_LHZX8	 1175
#define PPC_LHZXTLS	 1176
#define PPC_LHZXTLS_	 1177
#define PPC_LHZXTLS_32	 1178
#define PPC_LI	 1179
#define PPC_LI8	 1180
#define PPC_LIS	 1181
#define PPC_LIS8	 1182
#define PPC_LMW	 1183
#define PPC_LQ	 1184
#define PPC_LQARX	 1185
#define PPC_LQARXL	 1186
#define PPC_LQX_PSEUDO	 1187
#define PPC_LSWI	 1188
#define PPC_LVEBX	 1189
#define PPC_LVEHX	 1190
#define PPC_LVEWX	 1191
#define PPC_LVSL	 1192
#define PPC_LVSR	 1193
#define PPC_LVX	 1194
#define PPC_LVXL	 1195
#define PPC_LWA	 1196
#define PPC_LWARX	 1197
#define PPC_LWARXL	 1198
#define PPC_LWAT	 1199
#define PPC_LWAUX	 1200
#define PPC_LWAX	 1201
#define PPC_LWAX_32	 1202
#define PPC_LWA_32	 1203
#define PPC_LWBRX	 1204
#define PPC_LWBRX8	 1205
#define PPC_LWEPX	 1206
#define PPC_LWZ	 1207
#define PPC_LWZ8	 1208
#define PPC_LWZCIX	 1209
#define PPC_LWZU	 1210
#define PPC_LWZU8	 1211
#define PPC_LWZUX	 1212
#define PPC_LWZUX8	 1213
#define PPC_LWZX	 1214
#define PPC_LWZX8	 1215
#define PPC_LWZXTLS	 1216
#define PPC_LWZXTLS_	 1217
#define PPC_LWZXTLS_32	 1218
#define PPC_LWZtoc	 1219
#define PPC_LWZtocL	 1220
#define PPC_LXSD	 1221
#define PPC_LXSDX	 1222
#define PPC_LXSIBZX	 1223
#define PPC_LXSIHZX	 1224
#define PPC_LXSIWAX	 1225
#define PPC_LXSIWZX	 1226
#define PPC_LXSSP	 1227
#define PPC_LXSSPX	 1228
#define PPC_LXV	 1229
#define PPC_LXVB16X	 1230
#define PPC_LXVD2X	 1231
#define PPC_LXVDSX	 1232
#define PPC_LXVH8X	 1233
#define PPC_LXVL	 1234
#define PPC_LXVLL	 1235
#define PPC_LXVP	 1236
#define PPC_LXVPX	 1237
#define PPC_LXVRBX	 1238
#define PPC_LXVRDX	 1239
#define PPC_LXVRHX	 1240
#define PPC_LXVRWX	 1241
#define PPC_LXVW4X	 1242
#define PPC_LXVWSX	 1243
#define PPC_LXVX	 1244
#define PPC_MADDHD	 1245
#define PPC_MADDHDU	 1246
#define PPC_MADDLD	 1247
#define PPC_MADDLD8	 1248
#define PPC_MBAR	 1249
#define PPC_MCRF	 1250
#define PPC_MCRFS	 1251
#define PPC_MCRXRX	 1252
#define PPC_MFBHRBE	 1253
#define PPC_MFCR	 1254
#define PPC_MFCR8	 1255
#define PPC_MFCTR	 1256
#define PPC_MFCTR8	 1257
#define PPC_MFDCR	 1258
#define PPC_MFFS	 1259
#define PPC_MFFSCDRN	 1260
#define PPC_MFFSCDRNI	 1261
#define PPC_MFFSCE	 1262
#define PPC_MFFSCRN	 1263
#define PPC_MFFSCRNI	 1264
#define PPC_MFFSL	 1265
#define PPC_MFFS_rec	 1266
#define PPC_MFLR	 1267
#define PPC_MFLR8	 1268
#define PPC_MFMSR	 1269
#define PPC_MFOCRF	 1270
#define PPC_MFOCRF8	 1271
#define PPC_MFPMR	 1272
#define PPC_MFSPR	 1273
#define PPC_MFSPR8	 1274
#define PPC_MFSR	 1275
#define PPC_MFSRIN	 1276
#define PPC_MFTB	 1277
#define PPC_MFTB8	 1278
#define PPC_MFVRD	 1279
#define PPC_MFVRSAVE	 1280
#define PPC_MFVRSAVEv	 1281
#define PPC_MFVRWZ	 1282
#define PPC_MFVSCR	 1283
#define PPC_MFVSRD	 1284
#define PPC_MFVSRLD	 1285
#define PPC_MFVSRWZ	 1286
#define PPC_MODSD	 1287
#define PPC_MODSW	 1288
#define PPC_MODUD	 1289
#define PPC_MODUW	 1290
#define PPC_MSGSYNC	 1291
#define PPC_MSYNC	 1292
#define PPC_MTCRF	 1293
#define PPC_MTCRF8	 1294
#define PPC_MTCTR	 1295
#define PPC_MTCTR8	 1296
#define PPC_MTCTR8loop	 1297
#define PPC_MTCTRloop	 1298
#define PPC_MTDCR	 1299
#define PPC_MTFSB0	 1300
#define PPC_MTFSB1	 1301
#define PPC_MTFSF	 1302
#define PPC_MTFSFI	 1303
#define PPC_MTFSFI_rec	 1304
#define PPC_MTFSFIb	 1305
#define PPC_MTFSF_rec	 1306
#define PPC_MTFSFb	 1307
#define PPC_MTLR	 1308
#define PPC_MTLR8	 1309
#define PPC_MTMSR	 1310
#define PPC_MTMSRD	 1311
#define PPC_MTOCRF	 1312
#define PPC_MTOCRF8	 1313
#define PPC_MTPMR	 1314
#define PPC_MTSPR	 1315
#define PPC_MTSPR8	 1316
#define PPC_MTSR	 1317
#define PPC_MTSRIN	 1318
#define PPC_MTVRD	 1319
#define PPC_MTVRSAVE	 1320
#define PPC_MTVRSAVEv	 1321
#define PPC_MTVRWA	 1322
#define PPC_MTVRWZ	 1323
#define PPC_MTVSCR	 1324
#define PPC_MTVSRBM	 1325
#define PPC_MTVSRBMI	 1326
#define PPC_MTVSRD	 1327
#define PPC_MTVSRDD	 1328
#define PPC_MTVSRDM	 1329
#define PPC_MTVSRHM	 1330
#define PPC_MTVSRQM	 1331
#define PPC_MTVSRWA	 1332
#define PPC_MTVSRWM	 1333
#define PPC_MTVSRWS	 1334
#define PPC_MTVSRWZ	 1335
#define PPC_MULHD	 1336
#define PPC_MULHDU	 1337
#define PPC_MULHDU_rec	 1338
#define PPC_MULHD_rec	 1339
#define PPC_MULHW	 1340
#define PPC_MULHWU	 1341
#define PPC_MULHWU_rec	 1342
#define PPC_MULHW_rec	 1343
#define PPC_MULLD	 1344
#define PPC_MULLDO	 1345
#define PPC_MULLDO_rec	 1346
#define PPC_MULLD_rec	 1347
#define PPC_MULLI	 1348
#define PPC_MULLI8	 1349
#define PPC_MULLW	 1350
#define PPC_MULLWO	 1351
#define PPC_MULLWO_rec	 1352
#define PPC_MULLW_rec	 1353
#define PPC_MoveGOTtoLR	 1354
#define PPC_MovePCtoLR	 1355
#define PPC_MovePCtoLR8	 1356
#define PPC_NAND	 1357
#define PPC_NAND8	 1358
#define PPC_NAND8_rec	 1359
#define PPC_NAND_rec	 1360
#define PPC_NAP	 1361
#define PPC_NEG	 1362
#define PPC_NEG8	 1363
#define PPC_NEG8O	 1364
#define PPC_NEG8O_rec	 1365
#define PPC_NEG8_rec	 1366
#define PPC_NEGO	 1367
#define PPC_NEGO_rec	 1368
#define PPC_NEG_rec	 1369
#define PPC_NOP	 1370
#define PPC_NOP_GT_PWR6	 1371
#define PPC_NOP_GT_PWR7	 1372
#define PPC_NOR	 1373
#define PPC_NOR8	 1374
#define PPC_NOR8_rec	 1375
#define PPC_NOR_rec	 1376
#define PPC_OR	 1377
#define PPC_OR8	 1378
#define PPC_OR8_rec	 1379
#define PPC_ORC	 1380
#define PPC_ORC8	 1381
#define PPC_ORC8_rec	 1382
#define PPC_ORC_rec	 1383
#define PPC_ORI	 1384
#define PPC_ORI8	 1385
#define PPC_ORIS	 1386
#define PPC_ORIS8	 1387
#define PPC_OR_rec	 1388
#define PPC_PADDI	 1389
#define PPC_PADDI8	 1390
#define PPC_PADDI8pc	 1391
#define PPC_PADDIdtprel	 1392
#define PPC_PADDIpc	 1393
#define PPC_PDEPD	 1394
#define PPC_PEXTD	 1395
#define PPC_PLBZ	 1396
#define PPC_PLBZ8	 1397
#define PPC_PLBZ8pc	 1398
#define PPC_PLBZpc	 1399
#define PPC_PLD	 1400
#define PPC_PLDpc	 1401
#define PPC_PLFD	 1402
#define PPC_PLFDpc	 1403
#define PPC_PLFS	 1404
#define PPC_PLFSpc	 1405
#define PPC_PLHA	 1406
#define PPC_PLHA8	 1407
#define PPC_PLHA8pc	 1408
#define PPC_PLHApc	 1409
#define PPC_PLHZ	 1410
#define PPC_PLHZ8	 1411
#define PPC_PLHZ8pc	 1412
#define PPC_PLHZpc	 1413
#define PPC_PLI	 1414
#define PPC_PLI8	 1415
#define PPC_PLWA	 1416
#define PPC_PLWA8	 1417
#define PPC_PLWA8pc	 1418
#define PPC_PLWApc	 1419
#define PPC_PLWZ	 1420
#define PPC_PLWZ8	 1421
#define PPC_PLWZ8pc	 1422
#define PPC_PLWZpc	 1423
#define PPC_PLXSD	 1424
#define PPC_PLXSDpc	 1425
#define PPC_PLXSSP	 1426
#define PPC_PLXSSPpc	 1427
#define PPC_PLXV	 1428
#define PPC_PLXVP	 1429
#define PPC_PLXVPpc	 1430
#define PPC_PLXVpc	 1431
#define PPC_PMXVBF16GER2	 1432
#define PPC_PMXVBF16GER2NN	 1433
#define PPC_PMXVBF16GER2NP	 1434
#define PPC_PMXVBF16GER2PN	 1435
#define PPC_PMXVBF16GER2PP	 1436
#define PPC_PMXVF16GER2	 1437
#define PPC_PMXVF16GER2NN	 1438
#define PPC_PMXVF16GER2NP	 1439
#define PPC_PMXVF16GER2PN	 1440
#define PPC_PMXVF16GER2PP	 1441
#define PPC_PMXVF32GER	 1442
#define PPC_PMXVF32GERNN	 1443
#define PPC_PMXVF32GERNP	 1444
#define PPC_PMXVF32GERPN	 1445
#define PPC_PMXVF32GERPP	 1446
#define PPC_PMXVF64GER	 1447
#define PPC_PMXVF64GERNN	 1448
#define PPC_PMXVF64GERNP	 1449
#define PPC_PMXVF64GERPN	 1450
#define PPC_PMXVF64GERPP	 1451
#define PPC_PMXVI16GER2	 1452
#define PPC_PMXVI16GER2PP	 1453
#define PPC_PMXVI16GER2S	 1454
#define PPC_PMXVI16GER2SPP	 1455
#define PPC_PMXVI4GER8	 1456
#define PPC_PMXVI4GER8PP	 1457
#define PPC_PMXVI8GER4	 1458
#define PPC_PMXVI8GER4PP	 1459
#define PPC_PMXVI8GER4SPP	 1460
#define PPC_POPCNTB	 1461
#define PPC_POPCNTB8	 1462
#define PPC_POPCNTD	 1463
#define PPC_POPCNTW	 1464
#define PPC_PPC32GOT	 1465
#define PPC_PPC32PICGOT	 1466
#define PPC_PREPARE_PROBED_ALLOCA_32	 1467
#define PPC_PREPARE_PROBED_ALLOCA_64	 1468
#define PPC_PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32	 1469
#define PPC_PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64	 1470
#define PPC_PROBED_ALLOCA_32	 1471
#define PPC_PROBED_ALLOCA_64	 1472
#define PPC_PROBED_STACKALLOC_32	 1473
#define PPC_PROBED_STACKALLOC_64	 1474
#define PPC_PSTB	 1475
#define PPC_PSTB8	 1476
#define PPC_PSTB8pc	 1477
#define PPC_PSTBpc	 1478
#define PPC_PSTD	 1479
#define PPC_PSTDpc	 1480
#define PPC_PSTFD	 1481
#define PPC_PSTFDpc	 1482
#define PPC_PSTFS	 1483
#define PPC_PSTFSpc	 1484
#define PPC_PSTH	 1485
#define PPC_PSTH8	 1486
#define PPC_PSTH8pc	 1487
#define PPC_PSTHpc	 1488
#define PPC_PSTW	 1489
#define PPC_PSTW8	 1490
#define PPC_PSTW8pc	 1491
#define PPC_PSTWpc	 1492
#define PPC_PSTXSD	 1493
#define PPC_PSTXSDpc	 1494
#define PPC_PSTXSSP	 1495
#define PPC_PSTXSSPpc	 1496
#define PPC_PSTXV	 1497
#define PPC_PSTXVP	 1498
#define PPC_PSTXVPpc	 1499
#define PPC_PSTXVpc	 1500
#define PPC_PseudoEIEIO	 1501
#define PPC_RESTORE_ACC	 1502
#define PPC_RESTORE_CR	 1503
#define PPC_RESTORE_CRBIT	 1504
#define PPC_RESTORE_QUADWORD	 1505
#define PPC_RESTORE_UACC	 1506
#define PPC_RFCI	 1507
#define PPC_RFDI	 1508
#define PPC_RFEBB	 1509
#define PPC_RFI	 1510
#define PPC_RFID	 1511
#define PPC_RFMCI	 1512
#define PPC_RLDCL	 1513
#define PPC_RLDCL_rec	 1514
#define PPC_RLDCR	 1515
#define PPC_RLDCR_rec	 1516
#define PPC_RLDIC	 1517
#define PPC_RLDICL	 1518
#define PPC_RLDICL_32	 1519
#define PPC_RLDICL_32_64	 1520
#define PPC_RLDICL_32_rec	 1521
#define PPC_RLDICL_rec	 1522
#define PPC_RLDICR	 1523
#define PPC_RLDICR_32	 1524
#define PPC_RLDICR_rec	 1525
#define PPC_RLDIC_rec	 1526
#define PPC_RLDIMI	 1527
#define PPC_RLDIMI_rec	 1528
#define PPC_RLWIMI	 1529
#define PPC_RLWIMI8	 1530
#define PPC_RLWIMI8_rec	 1531
#define PPC_RLWIMI_rec	 1532
#define PPC_RLWINM	 1533
#define PPC_RLWINM8	 1534
#define PPC_RLWINM8_rec	 1535
#define PPC_RLWINM_rec	 1536
#define PPC_RLWNM	 1537
#define PPC_RLWNM8	 1538
#define PPC_RLWNM8_rec	 1539
#define PPC_RLWNM_rec	 1540
#define PPC_ReadTB	 1541
#define PPC_SC	 1542
#define PPC_SELECT_CC_F16	 1543
#define PPC_SELECT_CC_F4	 1544
#define PPC_SELECT_CC_F8	 1545
#define PPC_SELECT_CC_I4	 1546
#define PPC_SELECT_CC_I8	 1547
#define PPC_SELECT_CC_SPE	 1548
#define PPC_SELECT_CC_SPE4	 1549
#define PPC_SELECT_CC_VRRC	 1550
#define PPC_SELECT_CC_VSFRC	 1551
#define PPC_SELECT_CC_VSRC	 1552
#define PPC_SELECT_CC_VSSRC	 1553
#define PPC_SELECT_F16	 1554
#define PPC_SELECT_F4	 1555
#define PPC_SELECT_F8	 1556
#define PPC_SELECT_I4	 1557
#define PPC_SELECT_I8	 1558
#define PPC_SELECT_SPE	 1559
#define PPC_SELECT_SPE4	 1560
#define PPC_SELECT_VRRC	 1561
#define PPC_SELECT_VSFRC	 1562
#define PPC_SELECT_VSRC	 1563
#define PPC_SELECT_VSSRC	 1564
#define PPC_SETB	 1565
#define PPC_SETB8	 1566
#define PPC_SETBC	 1567
#define PPC_SETBC8	 1568
#define PPC_SETBCR	 1569
#define PPC_SETBCR8	 1570
#define PPC_SETFLM	 1571
#define PPC_SETNBC	 1572
#define PPC_SETNBC8	 1573
#define PPC_SETNBCR	 1574
#define PPC_SETNBCR8	 1575
#define PPC_SETRND	 1576
#define PPC_SETRNDi	 1577
#define PPC_SLBFEE_rec	 1578
#define PPC_SLBIA	 1579
#define PPC_SLBIE	 1580
#define PPC_SLBIEG	 1581
#define PPC_SLBMFEE	 1582
#define PPC_SLBMFEV	 1583
#define PPC_SLBMTE	 1584
#define PPC_SLBSYNC	 1585
#define PPC_SLD	 1586
#define PPC_SLD_rec	 1587
#define PPC_SLW	 1588
#define PPC_SLW8	 1589
#define PPC_SLW8_rec	 1590
#define PPC_SLW_rec	 1591
#define PPC_SPELWZ	 1592
#define PPC_SPELWZX	 1593
#define PPC_SPESTW	 1594
#define PPC_SPESTWX	 1595
#define PPC_SPILL_ACC	 1596
#define PPC_SPILL_CR	 1597
#define PPC_SPILL_CRBIT	 1598
#define PPC_SPILL_QUADWORD	 1599
#define PPC_SPILL_UACC	 1600
#define PPC_SPLIT_QUADWORD	 1601
#define PPC_SRAD	 1602
#define PPC_SRADI	 1603
#define PPC_SRADI_32	 1604
#define PPC_SRADI_rec	 1605
#define PPC_SRAD_rec	 1606
#define PPC_SRAW	 1607
#define PPC_SRAWI	 1608
#define PPC_SRAWI_rec	 1609
#define PPC_SRAW_rec	 1610
#define PPC_SRD	 1611
#define PPC_SRD_rec	 1612
#define PPC_SRW	 1613
#define PPC_SRW8	 1614
#define PPC_SRW8_rec	 1615
#define PPC_SRW_rec	 1616
#define PPC_STB	 1617
#define PPC_STB8	 1618
#define PPC_STBCIX	 1619
#define PPC_STBCX	 1620
#define PPC_STBEPX	 1621
#define PPC_STBU	 1622
#define PPC_STBU8	 1623
#define PPC_STBUX	 1624
#define PPC_STBUX8	 1625
#define PPC_STBX	 1626
#define PPC_STBX8	 1627
#define PPC_STBXTLS	 1628
#define PPC_STBXTLS_	 1629
#define PPC_STBXTLS_32	 1630
#define PPC_STD	 1631
#define PPC_STDAT	 1632
#define PPC_STDBRX	 1633
#define PPC_STDCIX	 1634
#define PPC_STDCX	 1635
#define PPC_STDU	 1636
#define PPC_STDUX	 1637
#define PPC_STDX	 1638
#define PPC_STDXTLS	 1639
#define PPC_STDXTLS_	 1640
#define PPC_STFD	 1641
#define PPC_STFDEPX	 1642
#define PPC_STFDU	 1643
#define PPC_STFDUX	 1644
#define PPC_STFDX	 1645
#define PPC_STFIWX	 1646
#define PPC_STFS	 1647
#define PPC_STFSU	 1648
#define PPC_STFSUX	 1649
#define PPC_STFSX	 1650
#define PPC_STH	 1651
#define PPC_STH8	 1652
#define PPC_STHBRX	 1653
#define PPC_STHCIX	 1654
#define PPC_STHCX	 1655
#define PPC_STHEPX	 1656
#define PPC_STHU	 1657
#define PPC_STHU8	 1658
#define PPC_STHUX	 1659
#define PPC_STHUX8	 1660
#define PPC_STHX	 1661
#define PPC_STHX8	 1662
#define PPC_STHXTLS	 1663
#define PPC_STHXTLS_	 1664
#define PPC_STHXTLS_32	 1665
#define PPC_STMW	 1666
#define PPC_STOP	 1667
#define PPC_STQ	 1668
#define PPC_STQCX	 1669
#define PPC_STQX_PSEUDO	 1670
#define PPC_STSWI	 1671
#define PPC_STVEBX	 1672
#define PPC_STVEHX	 1673
#define PPC_STVEWX	 1674
#define PPC_STVX	 1675
#define PPC_STVXL	 1676
#define PPC_STW	 1677
#define PPC_STW8	 1678
#define PPC_STWAT	 1679
#define PPC_STWBRX	 1680
#define PPC_STWCIX	 1681
#define PPC_STWCX	 1682
#define PPC_STWEPX	 1683
#define PPC_STWU	 1684
#define PPC_STWU8	 1685
#define PPC_STWUX	 1686
#define PPC_STWUX8	 1687
#define PPC_STWX	 1688
#define PPC_STWX8	 1689
#define PPC_STWXTLS	 1690
#define PPC_STWXTLS_	 1691
#define PPC_STWXTLS_32	 1692
#define PPC_STXSD	 1693
#define PPC_STXSDX	 1694
#define PPC_STXSIBX	 1695
#define PPC_STXSIBXv	 1696
#define PPC_STXSIHX	 1697
#define PPC_STXSIHXv	 1698
#define PPC_STXSIWX	 1699
#define PPC_STXSSP	 1700
#define PPC_STXSSPX	 1701
#define PPC_STXV	 1702
#define PPC_STXVB16X	 1703
#define PPC_STXVD2X	 1704
#define PPC_STXVH8X	 1705
#define PPC_STXVL	 1706
#define PPC_STXVLL	 1707
#define PPC_STXVP	 1708
#define PPC_STXVPX	 1709
#define PPC_STXVRBX	 1710
#define PPC_STXVRDX	 1711
#define PPC_STXVRHX	 1712
#define PPC_STXVRWX	 1713
#define PPC_STXVW4X	 1714
#define PPC_STXVX	 1715
#define PPC_SUBF	 1716
#define PPC_SUBF8	 1717
#define PPC_SUBF8O	 1718
#define PPC_SUBF8O_rec	 1719
#define PPC_SUBF8_rec	 1720
#define PPC_SUBFC	 1721
#define PPC_SUBFC8	 1722
#define PPC_SUBFC8O	 1723
#define PPC_SUBFC8O_rec	 1724
#define PPC_SUBFC8_rec	 1725
#define PPC_SUBFCO	 1726
#define PPC_SUBFCO_rec	 1727
#define PPC_SUBFC_rec	 1728
#define PPC_SUBFE	 1729
#define PPC_SUBFE8	 1730
#define PPC_SUBFE8O	 1731
#define PPC_SUBFE8O_rec	 1732
#define PPC_SUBFE8_rec	 1733
#define PPC_SUBFEO	 1734
#define PPC_SUBFEO_rec	 1735
#define PPC_SUBFE_rec	 1736
#define PPC_SUBFIC	 1737
#define PPC_SUBFIC8	 1738
#define PPC_SUBFME	 1739
#define PPC_SUBFME8	 1740
#define PPC_SUBFME8O	 1741
#define PPC_SUBFME8O_rec	 1742
#define PPC_SUBFME8_rec	 1743
#define PPC_SUBFMEO	 1744
#define PPC_SUBFMEO_rec	 1745
#define PPC_SUBFME_rec	 1746
#define PPC_SUBFO	 1747
#define PPC_SUBFO_rec	 1748
#define PPC_SUBFZE	 1749
#define PPC_SUBFZE8	 1750
#define PPC_SUBFZE8O	 1751
#define PPC_SUBFZE8O_rec	 1752
#define PPC_SUBFZE8_rec	 1753
#define PPC_SUBFZEO	 1754
#define PPC_SUBFZEO_rec	 1755
#define PPC_SUBFZE_rec	 1756
#define PPC_SUBF_rec	 1757
#define PPC_SYNC	 1758
#define PPC_TABORT	 1759
#define PPC_TABORTDC	 1760
#define PPC_TABORTDCI	 1761
#define PPC_TABORTWC	 1762
#define PPC_TABORTWCI	 1763
#define PPC_TAILB	 1764
#define PPC_TAILB8	 1765
#define PPC_TAILBA	 1766
#define PPC_TAILBA8	 1767
#define PPC_TAILBCTR	 1768
#define PPC_TAILBCTR8	 1769
#define PPC_TBEGIN	 1770
#define PPC_TBEGIN_RET	 1771
#define PPC_TCHECK	 1772
#define PPC_TCHECK_RET	 1773
#define PPC_TCRETURNai	 1774
#define PPC_TCRETURNai8	 1775
#define PPC_TCRETURNdi	 1776
#define PPC_TCRETURNdi8	 1777
#define PPC_TCRETURNri	 1778
#define PPC_TCRETURNri8	 1779
#define PPC_TD	 1780
#define PPC_TDI	 1781
#define PPC_TEND	 1782
#define PPC_TLBIA	 1783
#define PPC_TLBIE	 1784
#define PPC_TLBIEL	 1785
#define PPC_TLBIVAX	 1786
#define PPC_TLBLD	 1787
#define PPC_TLBLI	 1788
#define PPC_TLBRE	 1789
#define PPC_TLBRE2	 1790
#define PPC_TLBSX	 1791
#define PPC_TLBSX2	 1792
#define PPC_TLBSX2D	 1793
#define PPC_TLBSYNC	 1794
#define PPC_TLBWE	 1795
#define PPC_TLBWE2	 1796
#define PPC_TLSGDAIX	 1797
#define PPC_TLSGDAIX8	 1798
#define PPC_TRAP	 1799
#define PPC_TRECHKPT	 1800
#define PPC_TRECLAIM	 1801
#define PPC_TSR	 1802
#define PPC_TW	 1803
#define PPC_TWI	 1804
#define PPC_UNENCODED_NOP	 1805
#define PPC_UpdateGBR	 1806
#define PPC_VABSDUB	 1807
#define PPC_VABSDUH	 1808
#define PPC_VABSDUW	 1809
#define PPC_VADDCUQ	 1810
#define PPC_VADDCUW	 1811
#define PPC_VADDECUQ	 1812
#define PPC_VADDEUQM	 1813
#define PPC_VADDFP	 1814
#define PPC_VADDSBS	 1815
#define PPC_VADDSHS	 1816
#define PPC_VADDSWS	 1817
#define PPC_VADDUBM	 1818
#define PPC_VADDUBS	 1819
#define PPC_VADDUDM	 1820
#define PPC_VADDUHM	 1821
#define PPC_VADDUHS	 1822
#define PPC_VADDUQM	 1823
#define PPC_VADDUWM	 1824
#define PPC_VADDUWS	 1825
#define PPC_VAND	 1826
#define PPC_VANDC	 1827
#define PPC_VAVGSB	 1828
#define PPC_VAVGSH	 1829
#define PPC_VAVGSW	 1830
#define PPC_VAVGUB	 1831
#define PPC_VAVGUH	 1832
#define PPC_VAVGUW	 1833
#define PPC_VBPERMD	 1834
#define PPC_VBPERMQ	 1835
#define PPC_VCFSX	 1836
#define PPC_VCFSX_0	 1837
#define PPC_VCFUGED	 1838
#define PPC_VCFUX	 1839
#define PPC_VCFUX_0	 1840
#define PPC_VCIPHER	 1841
#define PPC_VCIPHERLAST	 1842
#define PPC_VCLRLB	 1843
#define PPC_VCLRRB	 1844
#define PPC_VCLZB	 1845
#define PPC_VCLZD	 1846
#define PPC_VCLZDM	 1847
#define PPC_VCLZH	 1848
#define PPC_VCLZLSBB	 1849
#define PPC_VCLZW	 1850
#define PPC_VCMPBFP	 1851
#define PPC_VCMPBFP_rec	 1852
#define PPC_VCMPEQFP	 1853
#define PPC_VCMPEQFP_rec	 1854
#define PPC_VCMPEQUB	 1855
#define PPC_VCMPEQUB_rec	 1856
#define PPC_VCMPEQUD	 1857
#define PPC_VCMPEQUD_rec	 1858
#define PPC_VCMPEQUH	 1859
#define PPC_VCMPEQUH_rec	 1860
#define PPC_VCMPEQUQ	 1861
#define PPC_VCMPEQUQ_rec	 1862
#define PPC_VCMPEQUW	 1863
#define PPC_VCMPEQUW_rec	 1864
#define PPC_VCMPGEFP	 1865
#define PPC_VCMPGEFP_rec	 1866
#define PPC_VCMPGTFP	 1867
#define PPC_VCMPGTFP_rec	 1868
#define PPC_VCMPGTSB	 1869
#define PPC_VCMPGTSB_rec	 1870
#define PPC_VCMPGTSD	 1871
#define PPC_VCMPGTSD_rec	 1872
#define PPC_VCMPGTSH	 1873
#define PPC_VCMPGTSH_rec	 1874
#define PPC_VCMPGTSQ	 1875
#define PPC_VCMPGTSQ_rec	 1876
#define PPC_VCMPGTSW	 1877
#define PPC_VCMPGTSW_rec	 1878
#define PPC_VCMPGTUB	 1879
#define PPC_VCMPGTUB_rec	 1880
#define PPC_VCMPGTUD	 1881
#define PPC_VCMPGTUD_rec	 1882
#define PPC_VCMPGTUH	 1883
#define PPC_VCMPGTUH_rec	 1884
#define PPC_VCMPGTUQ	 1885
#define PPC_VCMPGTUQ_rec	 1886
#define PPC_VCMPGTUW	 1887
#define PPC_VCMPGTUW_rec	 1888
#define PPC_VCMPNEB	 1889
#define PPC_VCMPNEB_rec	 1890
#define PPC_VCMPNEH	 1891
#define PPC_VCMPNEH_rec	 1892
#define PPC_VCMPNEW	 1893
#define PPC_VCMPNEW_rec	 1894
#define PPC_VCMPNEZB	 1895
#define PPC_VCMPNEZB_rec	 1896
#define PPC_VCMPNEZH	 1897
#define PPC_VCMPNEZH_rec	 1898
#define PPC_VCMPNEZW	 1899
#define PPC_VCMPNEZW_rec	 1900
#define PPC_VCMPSQ	 1901
#define PPC_VCMPUQ	 1902
#define PPC_VCNTMBB	 1903
#define PPC_VCNTMBD	 1904
#define PPC_VCNTMBH	 1905
#define PPC_VCNTMBW	 1906
#define PPC_VCTSXS	 1907
#define PPC_VCTSXS_0	 1908
#define PPC_VCTUXS	 1909
#define PPC_VCTUXS_0	 1910
#define PPC_VCTZB	 1911
#define PPC_VCTZD	 1912
#define PPC_VCTZDM	 1913
#define PPC_VCTZH	 1914
#define PPC_VCTZLSBB	 1915
#define PPC_VCTZW	 1916
#define PPC_VDIVESD	 1917
#define PPC_VDIVESQ	 1918
#define PPC_VDIVESW	 1919
#define PPC_VDIVEUD	 1920
#define PPC_VDIVEUQ	 1921
#define PPC_VDIVEUW	 1922
#define PPC_VDIVSD	 1923
#define PPC_VDIVSQ	 1924
#define PPC_VDIVSW	 1925
#define PPC_VDIVUD	 1926
#define PPC_VDIVUQ	 1927
#define PPC_VDIVUW	 1928
#define PPC_VEQV	 1929
#define PPC_VEXPANDBM	 1930
#define PPC_VEXPANDDM	 1931
#define PPC_VEXPANDHM	 1932
#define PPC_VEXPANDQM	 1933
#define PPC_VEXPANDWM	 1934
#define PPC_VEXPTEFP	 1935
#define PPC_VEXTDDVLX	 1936
#define PPC_VEXTDDVRX	 1937
#define PPC_VEXTDUBVLX	 1938
#define PPC_VEXTDUBVRX	 1939
#define PPC_VEXTDUHVLX	 1940
#define PPC_VEXTDUHVRX	 1941
#define PPC_VEXTDUWVLX	 1942
#define PPC_VEXTDUWVRX	 1943
#define PPC_VEXTRACTBM	 1944
#define PPC_VEXTRACTD	 1945
#define PPC_VEXTRACTDM	 1946
#define PPC_VEXTRACTHM	 1947
#define PPC_VEXTRACTQM	 1948
#define PPC_VEXTRACTUB	 1949
#define PPC_VEXTRACTUH	 1950
#define PPC_VEXTRACTUW	 1951
#define PPC_VEXTRACTWM	 1952
#define PPC_VEXTSB2D	 1953
#define PPC_VEXTSB2Ds	 1954
#define PPC_VEXTSB2W	 1955
#define PPC_VEXTSB2Ws	 1956
#define PPC_VEXTSD2Q	 1957
#define PPC_VEXTSH2D	 1958
#define PPC_VEXTSH2Ds	 1959
#define PPC_VEXTSH2W	 1960
#define PPC_VEXTSH2Ws	 1961
#define PPC_VEXTSW2D	 1962
#define PPC_VEXTSW2Ds	 1963
#define PPC_VEXTUBLX	 1964
#define PPC_VEXTUBRX	 1965
#define PPC_VEXTUHLX	 1966
#define PPC_VEXTUHRX	 1967
#define PPC_VEXTUWLX	 1968
#define PPC_VEXTUWRX	 1969
#define PPC_VGBBD	 1970
#define PPC_VGNB	 1971
#define PPC_VINSBLX	 1972
#define PPC_VINSBRX	 1973
#define PPC_VINSBVLX	 1974
#define PPC_VINSBVRX	 1975
#define PPC_VINSD	 1976
#define PPC_VINSDLX	 1977
#define PPC_VINSDRX	 1978
#define PPC_VINSERTB	 1979
#define PPC_VINSERTD	 1980
#define PPC_VINSERTH	 1981
#define PPC_VINSERTW	 1982
#define PPC_VINSHLX	 1983
#define PPC_VINSHRX	 1984
#define PPC_VINSHVLX	 1985
#define PPC_VINSHVRX	 1986
#define PPC_VINSW	 1987
#define PPC_VINSWLX	 1988
#define PPC_VINSWRX	 1989
#define PPC_VINSWVLX	 1990
#define PPC_VINSWVRX	 1991
#define PPC_VLOGEFP	 1992
#define PPC_VMADDFP	 1993
#define PPC_VMAXFP	 1994
#define PPC_VMAXSB	 1995
#define PPC_VMAXSD	 1996
#define PPC_VMAXSH	 1997
#define PPC_VMAXSW	 1998
#define PPC_VMAXUB	 1999
#define PPC_VMAXUD	 2000
#define PPC_VMAXUH	 2001
#define PPC_VMAXUW	 2002
#define PPC_VMHADDSHS	 2003
#define PPC_VMHRADDSHS	 2004
#define PPC_VMINFP	 2005
#define PPC_VMINSB	 2006
#define PPC_VMINSD	 2007
#define PPC_VMINSH	 2008
#define PPC_VMINSW	 2009
#define PPC_VMINUB	 2010
#define PPC_VMINUD	 2011
#define PPC_VMINUH	 2012
#define PPC_VMINUW	 2013
#define PPC_VMLADDUHM	 2014
#define PPC_VMODSD	 2015
#define PPC_VMODSQ	 2016
#define PPC_VMODSW	 2017
#define PPC_VMODUD	 2018
#define PPC_VMODUQ	 2019
#define PPC_VMODUW	 2020
#define PPC_VMRGEW	 2021
#define PPC_VMRGHB	 2022
#define PPC_VMRGHH	 2023
#define PPC_VMRGHW	 2024
#define PPC_VMRGLB	 2025
#define PPC_VMRGLH	 2026
#define PPC_VMRGLW	 2027
#define PPC_VMRGOW	 2028
#define PPC_VMSUMCUD	 2029
#define PPC_VMSUMMBM	 2030
#define PPC_VMSUMSHM	 2031
#define PPC_VMSUMSHS	 2032
#define PPC_VMSUMUBM	 2033
#define PPC_VMSUMUDM	 2034
#define PPC_VMSUMUHM	 2035
#define PPC_VMSUMUHS	 2036
#define PPC_VMUL10CUQ	 2037
#define PPC_VMUL10ECUQ	 2038
#define PPC_VMUL10EUQ	 2039
#define PPC_VMUL10UQ	 2040
#define PPC_VMULESB	 2041
#define PPC_VMULESD	 2042
#define PPC_VMULESH	 2043
#define PPC_VMULESW	 2044
#define PPC_VMULEUB	 2045
#define PPC_VMULEUD	 2046
#define PPC_VMULEUH	 2047
#define PPC_VMULEUW	 2048
#define PPC_VMULHSD	 2049
#define PPC_VMULHSW	 2050
#define PPC_VMULHUD	 2051
#define PPC_VMULHUW	 2052
#define PPC_VMULLD	 2053
#define PPC_VMULOSB	 2054
#define PPC_VMULOSD	 2055
#define PPC_VMULOSH	 2056
#define PPC_VMULOSW	 2057
#define PPC_VMULOUB	 2058
#define PPC_VMULOUD	 2059
#define PPC_VMULOUH	 2060
#define PPC_VMULOUW	 2061
#define PPC_VMULUWM	 2062
#define PPC_VNAND	 2063
#define PPC_VNCIPHER	 2064
#define PPC_VNCIPHERLAST	 2065
#define PPC_VNEGD	 2066
#define PPC_VNEGW	 2067
#define PPC_VNMSUBFP	 2068
#define PPC_VNOR	 2069
#define PPC_VOR	 2070
#define PPC_VORC	 2071
#define PPC_VPDEPD	 2072
#define PPC_VPERM	 2073
#define PPC_VPERMR	 2074
#define PPC_VPERMXOR	 2075
#define PPC_VPEXTD	 2076
#define PPC_VPKPX	 2077
#define PPC_VPKSDSS	 2078
#define PPC_VPKSDUS	 2079
#define PPC_VPKSHSS	 2080
#define PPC_VPKSHUS	 2081
#define PPC_VPKSWSS	 2082
#define PPC_VPKSWUS	 2083
#define PPC_VPKUDUM	 2084
#define PPC_VPKUDUS	 2085
#define PPC_VPKUHUM	 2086
#define PPC_VPKUHUS	 2087
#define PPC_VPKUWUM	 2088
#define PPC_VPKUWUS	 2089
#define PPC_VPMSUMB	 2090
#define PPC_VPMSUMD	 2091
#define PPC_VPMSUMH	 2092
#define PPC_VPMSUMW	 2093
#define PPC_VPOPCNTB	 2094
#define PPC_VPOPCNTD	 2095
#define PPC_VPOPCNTH	 2096
#define PPC_VPOPCNTW	 2097
#define PPC_VPRTYBD	 2098
#define PPC_VPRTYBQ	 2099
#define PPC_VPRTYBW	 2100
#define PPC_VREFP	 2101
#define PPC_VRFIM	 2102
#define PPC_VRFIN	 2103
#define PPC_VRFIP	 2104
#define PPC_VRFIZ	 2105
#define PPC_VRLB	 2106
#define PPC_VRLD	 2107
#define PPC_VRLDMI	 2108
#define PPC_VRLDNM	 2109
#define PPC_VRLH	 2110
#define PPC_VRLQ	 2111
#define PPC_VRLQMI	 2112
#define PPC_VRLQNM	 2113
#define PPC_VRLW	 2114
#define PPC_VRLWMI	 2115
#define PPC_VRLWNM	 2116
#define PPC_VRSQRTEFP	 2117
#define PPC_VSBOX	 2118
#define PPC_VSEL	 2119
#define PPC_VSHASIGMAD	 2120
#define PPC_VSHASIGMAW	 2121
#define PPC_VSL	 2122
#define PPC_VSLB	 2123
#define PPC_VSLD	 2124
#define PPC_VSLDBI	 2125
#define PPC_VSLDOI	 2126
#define PPC_VSLH	 2127
#define PPC_VSLO	 2128
#define PPC_VSLQ	 2129
#define PPC_VSLV	 2130
#define PPC_VSLW	 2131
#define PPC_VSPLTB	 2132
#define PPC_VSPLTBs	 2133
#define PPC_VSPLTH	 2134
#define PPC_VSPLTHs	 2135
#define PPC_VSPLTISB	 2136
#define PPC_VSPLTISH	 2137
#define PPC_VSPLTISW	 2138
#define PPC_VSPLTW	 2139
#define PPC_VSR	 2140
#define PPC_VSRAB	 2141
#define PPC_VSRAD	 2142
#define PPC_VSRAH	 2143
#define PPC_VSRAQ	 2144
#define PPC_VSRAW	 2145
#define PPC_VSRB	 2146
#define PPC_VSRD	 2147
#define PPC_VSRDBI	 2148
#define PPC_VSRH	 2149
#define PPC_VSRO	 2150
#define PPC_VSRQ	 2151
#define PPC_VSRV	 2152
#define PPC_VSRW	 2153
#define PPC_VSTRIBL	 2154
#define PPC_VSTRIBL_rec	 2155
#define PPC_VSTRIBR	 2156
#define PPC_VSTRIBR_rec	 2157
#define PPC_VSTRIHL	 2158
#define PPC_VSTRIHL_rec	 2159
#define PPC_VSTRIHR	 2160
#define PPC_VSTRIHR_rec	 2161
#define PPC_VSUBCUQ	 2162
#define PPC_VSUBCUW	 2163
#define PPC_VSUBECUQ	 2164
#define PPC_VSUBEUQM	 2165
#define PPC_VSUBFP	 2166
#define PPC_VSUBSBS	 2167
#define PPC_VSUBSHS	 2168
#define PPC_VSUBSWS	 2169
#define PPC_VSUBUBM	 2170
#define PPC_VSUBUBS	 2171
#define PPC_VSUBUDM	 2172
#define PPC_VSUBUHM	 2173
#define PPC_VSUBUHS	 2174
#define PPC_VSUBUQM	 2175
#define PPC_VSUBUWM	 2176
#define PPC_VSUBUWS	 2177
#define PPC_VSUM2SWS	 2178
#define PPC_VSUM4SBS	 2179
#define PPC_VSUM4SHS	 2180
#define PPC_VSUM4UBS	 2181
#define PPC_VSUMSWS	 2182
#define PPC_VUPKHPX	 2183
#define PPC_VUPKHSB	 2184
#define PPC_VUPKHSH	 2185
#define PPC_VUPKHSW	 2186
#define PPC_VUPKLPX	 2187
#define PPC_VUPKLSB	 2188
#define PPC_VUPKLSH	 2189
#define PPC_VUPKLSW	 2190
#define PPC_VXOR	 2191
#define PPC_V_SET0	 2192
#define PPC_V_SET0B	 2193
#define PPC_V_SET0H	 2194
#define PPC_V_SETALLONES	 2195
#define PPC_V_SETALLONESB	 2196
#define PPC_V_SETALLONESH	 2197
#define PPC_WAIT	 2198
#define PPC_WRTEE	 2199
#define PPC_WRTEEI	 2200
#define PPC_XOR	 2201
#define PPC_XOR8	 2202
#define PPC_XOR8_rec	 2203
#define PPC_XORI	 2204
#define PPC_XORI8	 2205
#define PPC_XORIS	 2206
#define PPC_XORIS8	 2207
#define PPC_XOR_rec	 2208
#define PPC_XSABSDP	 2209
#define PPC_XSABSQP	 2210
#define PPC_XSADDDP	 2211
#define PPC_XSADDQP	 2212
#define PPC_XSADDQPO	 2213
#define PPC_XSADDSP	 2214
#define PPC_XSCMPEQDP	 2215
#define PPC_XSCMPEXPDP	 2216
#define PPC_XSCMPEXPQP	 2217
#define PPC_XSCMPGEDP	 2218
#define PPC_XSCMPGTDP	 2219
#define PPC_XSCMPODP	 2220
#define PPC_XSCMPOQP	 2221
#define PPC_XSCMPUDP	 2222
#define PPC_XSCMPUQP	 2223
#define PPC_XSCPSGNDP	 2224
#define PPC_XSCPSGNQP	 2225
#define PPC_XSCVDPHP	 2226
#define PPC_XSCVDPQP	 2227
#define PPC_XSCVDPSP	 2228
#define PPC_XSCVDPSPN	 2229
#define PPC_XSCVDPSXDS	 2230
#define PPC_XSCVDPSXDSs	 2231
#define PPC_XSCVDPSXWS	 2232
#define PPC_XSCVDPSXWSs	 2233
#define PPC_XSCVDPUXDS	 2234
#define PPC_XSCVDPUXDSs	 2235
#define PPC_XSCVDPUXWS	 2236
#define PPC_XSCVDPUXWSs	 2237
#define PPC_XSCVHPDP	 2238
#define PPC_XSCVQPDP	 2239
#define PPC_XSCVQPDPO	 2240
#define PPC_XSCVQPSDZ	 2241
#define PPC_XSCVQPSQZ	 2242
#define PPC_XSCVQPSWZ	 2243
#define PPC_XSCVQPUDZ	 2244
#define PPC_XSCVQPUQZ	 2245
#define PPC_XSCVQPUWZ	 2246
#define PPC_XSCVSDQP	 2247
#define PPC_XSCVSPDP	 2248
#define PPC_XSCVSPDPN	 2249
#define PPC_XSCVSQQP	 2250
#define PPC_XSCVSXDDP	 2251
#define PPC_XSCVSXDSP	 2252
#define PPC_XSCVUDQP	 2253
#define PPC_XSCVUQQP	 2254
#define PPC_XSCVUXDDP	 2255
#define PPC_XSCVUXDSP	 2256
#define PPC_XSDIVDP	 2257
#define PPC_XSDIVQP	 2258
#define PPC_XSDIVQPO	 2259
#define PPC_XSDIVSP	 2260
#define PPC_XSIEXPDP	 2261
#define PPC_XSIEXPQP	 2262
#define PPC_XSMADDADP	 2263
#define PPC_XSMADDASP	 2264
#define PPC_XSMADDMDP	 2265
#define PPC_XSMADDMSP	 2266
#define PPC_XSMADDQP	 2267
#define PPC_XSMADDQPO	 2268
#define PPC_XSMAXCDP	 2269
#define PPC_XSMAXDP	 2270
#define PPC_XSMAXJDP	 2271
#define PPC_XSMINCDP	 2272
#define PPC_XSMINDP	 2273
#define PPC_XSMINJDP	 2274
#define PPC_XSMSUBADP	 2275
#define PPC_XSMSUBASP	 2276
#define PPC_XSMSUBMDP	 2277
#define PPC_XSMSUBMSP	 2278
#define PPC_XSMSUBQP	 2279
#define PPC_XSMSUBQPO	 2280
#define PPC_XSMULDP	 2281
#define PPC_XSMULQP	 2282
#define PPC_XSMULQPO	 2283
#define PPC_XSMULSP	 2284
#define PPC_XSNABSDP	 2285
#define PPC_XSNABSQP	 2286
#define PPC_XSNEGDP	 2287
#define PPC_XSNEGQP	 2288
#define PPC_XSNMADDADP	 2289
#define PPC_XSNMADDASP	 2290
#define PPC_XSNMADDMDP	 2291
#define PPC_XSNMADDMSP	 2292
#define PPC_XSNMADDQP	 2293
#define PPC_XSNMADDQPO	 2294
#define PPC_XSNMSUBADP	 2295
#define PPC_XSNMSUBASP	 2296
#define PPC_XSNMSUBMDP	 2297
#define PPC_XSNMSUBMSP	 2298
#define PPC_XSNMSUBQP	 2299
#define PPC_XSNMSUBQPO	 2300
#define PPC_XSRDPI	 2301
#define PPC_XSRDPIC	 2302
#define PPC_XSRDPIM	 2303
#define PPC_XSRDPIP	 2304
#define PPC_XSRDPIZ	 2305
#define PPC_XSREDP	 2306
#define PPC_XSRESP	 2307
#define PPC_XSRQPI	 2308
#define PPC_XSRQPIX	 2309
#define PPC_XSRQPXP	 2310
#define PPC_XSRSP	 2311
#define PPC_XSRSQRTEDP	 2312
#define PPC_XSRSQRTESP	 2313
#define PPC_XSSQRTDP	 2314
#define PPC_XSSQRTQP	 2315
#define PPC_XSSQRTQPO	 2316
#define PPC_XSSQRTSP	 2317
#define PPC_XSSUBDP	 2318
#define PPC_XSSUBQP	 2319
#define PPC_XSSUBQPO	 2320
#define PPC_XSSUBSP	 2321
#define PPC_XSTDIVDP	 2322
#define PPC_XSTSQRTDP	 2323
#define PPC_XSTSTDCDP	 2324
#define PPC_XSTSTDCQP	 2325
#define PPC_XSTSTDCSP	 2326
#define PPC_XSXEXPDP	 2327
#define PPC_XSXEXPQP	 2328
#define PPC_XSXSIGDP	 2329
#define PPC_XSXSIGQP	 2330
#define PPC_XVABSDP	 2331
#define PPC_XVABSSP	 2332
#define PPC_XVADDDP	 2333
#define PPC_XVADDSP	 2334
#define PPC_XVBF16GER2	 2335
#define PPC_XVBF16GER2NN	 2336
#define PPC_XVBF16GER2NP	 2337
#define PPC_XVBF16GER2PN	 2338
#define PPC_XVBF16GER2PP	 2339
#define PPC_XVCMPEQDP	 2340
#define PPC_XVCMPEQDP_rec	 2341
#define PPC_XVCMPEQSP	 2342
#define PPC_XVCMPEQSP_rec	 2343
#define PPC_XVCMPGEDP	 2344
#define PPC_XVCMPGEDP_rec	 2345
#define PPC_XVCMPGESP	 2346
#define PPC_XVCMPGESP_rec	 2347
#define PPC_XVCMPGTDP	 2348
#define PPC_XVCMPGTDP_rec	 2349
#define PPC_XVCMPGTSP	 2350
#define PPC_XVCMPGTSP_rec	 2351
#define PPC_XVCPSGNDP	 2352
#define PPC_XVCPSGNSP	 2353
#define PPC_XVCVBF16SPN	 2354
#define PPC_XVCVDPSP	 2355
#define PPC_XVCVDPSXDS	 2356
#define PPC_XVCVDPSXWS	 2357
#define PPC_XVCVDPUXDS	 2358
#define PPC_XVCVDPUXWS	 2359
#define PPC_XVCVHPSP	 2360
#define PPC_XVCVSPBF16	 2361
#define PPC_XVCVSPDP	 2362
#define PPC_XVCVSPHP	 2363
#define PPC_XVCVSPSXDS	 2364
#define PPC_XVCVSPSXWS	 2365
#define PPC_XVCVSPUXDS	 2366
#define PPC_XVCVSPUXWS	 2367
#define PPC_XVCVSXDDP	 2368
#define PPC_XVCVSXDSP	 2369
#define PPC_XVCVSXWDP	 2370
#define PPC_XVCVSXWSP	 2371
#define PPC_XVCVUXDDP	 2372
#define PPC_XVCVUXDSP	 2373
#define PPC_XVCVUXWDP	 2374
#define PPC_XVCVUXWSP	 2375
#define PPC_XVDIVDP	 2376
#define PPC_XVDIVSP	 2377
#define PPC_XVF16GER2	 2378
#define PPC_XVF16GER2NN	 2379
#define PPC_XVF16GER2NP	 2380
#define PPC_XVF16GER2PN	 2381
#define PPC_XVF16GER2PP	 2382
#define PPC_XVF32GER	 2383
#define PPC_XVF32GERNN	 2384
#define PPC_XVF32GERNP	 2385
#define PPC_XVF32GERPN	 2386
#define PPC_XVF32GERPP	 2387
#define PPC_XVF64GER	 2388
#define PPC_XVF64GERNN	 2389
#define PPC_XVF64GERNP	 2390
#define PPC_XVF64GERPN	 2391
#define PPC_XVF64GERPP	 2392
#define PPC_XVI16GER2	 2393
#define PPC_XVI16GER2PP	 2394
#define PPC_XVI16GER2S	 2395
#define PPC_XVI16GER2SPP	 2396
#define PPC_XVI4GER8	 2397
#define PPC_XVI4GER8PP	 2398
#define PPC_XVI8GER4	 2399
#define PPC_XVI8GER4PP	 2400
#define PPC_XVI8GER4SPP	 2401
#define PPC_XVIEXPDP	 2402
#define PPC_XVIEXPSP	 2403
#define PPC_XVMADDADP	 2404
#define PPC_XVMADDASP	 2405
#define PPC_XVMADDMDP	 2406
#define PPC_XVMADDMSP	 2407
#define PPC_XVMAXDP	 2408
#define PPC_XVMAXSP	 2409
#define PPC_XVMINDP	 2410
#define PPC_XVMINSP	 2411
#define PPC_XVMSUBADP	 2412
#define PPC_XVMSUBASP	 2413
#define PPC_XVMSUBMDP	 2414
#define PPC_XVMSUBMSP	 2415
#define PPC_XVMULDP	 2416
#define PPC_XVMULSP	 2417
#define PPC_XVNABSDP	 2418
#define PPC_XVNABSSP	 2419
#define PPC_XVNEGDP	 2420
#define PPC_XVNEGSP	 2421
#define PPC_XVNMADDADP	 2422
#define PPC_XVNMADDASP	 2423
#define PPC_XVNMADDMDP	 2424
#define PPC_XVNMADDMSP	 2425
#define PPC_XVNMSUBADP	 2426
#define PPC_XVNMSUBASP	 2427
#define PPC_XVNMSUBMDP	 2428
#define PPC_XVNMSUBMSP	 2429
#define PPC_XVRDPI	 2430
#define PPC_XVRDPIC	 2431
#define PPC_XVRDPIM	 2432
#define PPC_XVRDPIP	 2433
#define PPC_XVRDPIZ	 2434
#define PPC_XVREDP	 2435
#define PPC_XVRESP	 2436
#define PPC_XVRSPI	 2437
#define PPC_XVRSPIC	 2438
#define PPC_XVRSPIM	 2439
#define PPC_XVRSPIP	 2440
#define PPC_XVRSPIZ	 2441
#define PPC_XVRSQRTEDP	 2442
#define PPC_XVRSQRTESP	 2443
#define PPC_XVSQRTDP	 2444
#define PPC_XVSQRTSP	 2445
#define PPC_XVSUBDP	 2446
#define PPC_XVSUBSP	 2447
#define PPC_XVTDIVDP	 2448
#define PPC_XVTDIVSP	 2449
#define PPC_XVTLSBB	 2450
#define PPC_XVTSQRTDP	 2451
#define PPC_XVTSQRTSP	 2452
#define PPC_XVTSTDCDP	 2453
#define PPC_XVTSTDCSP	 2454
#define PPC_XVXEXPDP	 2455
#define PPC_XVXEXPSP	 2456
#define PPC_XVXSIGDP	 2457
#define PPC_XVXSIGSP	 2458
#define PPC_XXBLENDVB	 2459
#define PPC_XXBLENDVD	 2460
#define PPC_XXBLENDVH	 2461
#define PPC_XXBLENDVW	 2462
#define PPC_XXBRD	 2463
#define PPC_XXBRH	 2464
#define PPC_XXBRQ	 2465
#define PPC_XXBRW	 2466
#define PPC_XXEVAL	 2467
#define PPC_XXEXTRACTUW	 2468
#define PPC_XXGENPCVBM	 2469
#define PPC_XXGENPCVDM	 2470
#define PPC_XXGENPCVHM	 2471
#define PPC_XXGENPCVWM	 2472
#define PPC_XXINSERTW	 2473
#define PPC_XXLAND	 2474
#define PPC_XXLANDC	 2475
#define PPC_XXLEQV	 2476
#define PPC_XXLEQVOnes	 2477
#define PPC_XXLNAND	 2478
#define PPC_XXLNOR	 2479
#define PPC_XXLOR	 2480
#define PPC_XXLORC	 2481
#define PPC_XXLORf	 2482
#define PPC_XXLXOR	 2483
#define PPC_XXLXORdpz	 2484
#define PPC_XXLXORspz	 2485
#define PPC_XXLXORz	 2486
#define PPC_XXMFACC	 2487
#define PPC_XXMRGHW	 2488
#define PPC_XXMRGLW	 2489
#define PPC_XXMTACC	 2490
#define PPC_XXPERM	 2491
#define PPC_XXPERMDI	 2492
#define PPC_XXPERMDIs	 2493
#define PPC_XXPERMR	 2494
#define PPC_XXPERMX	 2495
#define PPC_XXSEL	 2496
#define PPC_XXSETACCZ	 2497
#define PPC_XXSLDWI	 2498
#define PPC_XXSLDWIs	 2499
#define PPC_XXSPLTI32DX	 2500
#define PPC_XXSPLTIB	 2501
#define PPC_XXSPLTIDP	 2502
#define PPC_XXSPLTIW	 2503
#define PPC_XXSPLTW	 2504
#define PPC_XXSPLTWs	 2505
#define PPC_gBC	 2506
#define PPC_gBCA	 2507
#define PPC_gBCAat	 2508
#define PPC_gBCCTR	 2509
#define PPC_gBCCTRL	 2510
#define PPC_gBCL	 2511
#define PPC_gBCLA	 2512
#define PPC_gBCLAat	 2513
#define PPC_gBCLR	 2514
#define PPC_gBCLRL	 2515
#define PPC_gBCLat	 2516
#define PPC_gBCat	 2517
#endif // GET_INSTRINFO_ENUM

#ifdef GET_REGINFO_EXTRA
#undef GET_REGINFO_EXTRA

// Subregister indices

enum {
  NoSubRegister,
  PPC_sub_32,	// 1
    PPC_sub_64,	// 2
    PPC_sub_eq,	// 3
    PPC_sub_gp8_x0,	// 4
    PPC_sub_gp8_x1,	// 5
    PPC_sub_gt,	// 6
    PPC_sub_lt,	// 7
    PPC_sub_pair0,	// 8
    PPC_sub_pair1,	// 9
    PPC_sub_un,	// 10
    PPC_sub_vsx0,	// 11
    PPC_sub_vsx1,	// 12
    PPC_sub_vsx1_then_sub_64,	// 13
    PPC_sub_pair1_then_sub_64,	// 14
    PPC_sub_pair1_then_sub_vsx0,	// 15
    PPC_sub_pair1_then_sub_vsx1,	// 16
    PPC_sub_pair1_then_sub_vsx1_then_sub_64,	// 17
    PPC_sub_gp8_x1_then_sub_32,	// 18
  PPC_NUM_TARGET_SUBREGS
};
#endif // GET_REGINFO_EXTRA


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC



static const MCPhysReg PPCRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 65037, 1, 1, 1, 0,
  /* 7 */ 65497, 1, 1, 1, 0,
  /* 12 */ 65501, 1, 1, 1, 0,
  /* 17 */ 64891, 1, 0,
  /* 20 */ 65083, 1, 0,
  /* 23 */ 65149, 1, 0,
  /* 26 */ 3, 0,
  /* 28 */ 8, 0,
  /* 30 */ 12, 0,
  /* 32 */ 18, 0,
  /* 34 */ 324, 65528, 65528, 24, 0,
  /* 39 */ 65424, 32, 65505, 32, 0,
  /* 44 */ 65425, 32, 65505, 32, 0,
  /* 49 */ 65426, 32, 65505, 32, 0,
  /* 54 */ 65427, 32, 65505, 32, 0,
  /* 59 */ 65428, 32, 65505, 32, 0,
  /* 64 */ 65429, 32, 65505, 32, 0,
  /* 69 */ 65430, 32, 65505, 32, 0,
  /* 74 */ 65431, 32, 65505, 32, 0,
  /* 79 */ 65432, 32, 65505, 32, 0,
  /* 84 */ 65433, 32, 65505, 32, 0,
  /* 89 */ 65434, 32, 65505, 32, 0,
  /* 94 */ 65435, 32, 65505, 32, 0,
  /* 99 */ 65436, 32, 65505, 32, 0,
  /* 104 */ 65437, 32, 65505, 32, 0,
  /* 109 */ 65438, 32, 65505, 32, 0,
  /* 114 */ 65439, 32, 65505, 32, 0,
  /* 119 */ 32, 200, 49, 0,
  /* 123 */ 32, 200, 50, 0,
  /* 127 */ 32, 200, 51, 0,
  /* 131 */ 32, 200, 52, 0,
  /* 135 */ 32, 200, 53, 0,
  /* 139 */ 32, 200, 54, 0,
  /* 143 */ 32, 200, 55, 0,
  /* 147 */ 32, 200, 56, 0,
  /* 151 */ 32, 200, 57, 0,
  /* 155 */ 32, 200, 58, 0,
  /* 159 */ 32, 200, 59, 0,
  /* 163 */ 32, 200, 60, 0,
  /* 167 */ 32, 200, 61, 0,
  /* 171 */ 32, 200, 62, 0,
  /* 175 */ 32, 200, 63, 0,
  /* 179 */ 32, 200, 64, 0,
  /* 183 */ 32, 200, 65, 0,
  /* 187 */ 73, 0,
  /* 189 */ 65504, 96, 0,
  /* 192 */ 65504, 97, 0,
  /* 195 */ 65504, 98, 0,
  /* 198 */ 65504, 99, 0,
  /* 201 */ 65504, 100, 0,
  /* 204 */ 65504, 101, 0,
  /* 207 */ 65504, 102, 0,
  /* 210 */ 65504, 103, 0,
  /* 213 */ 65504, 104, 0,
  /* 216 */ 65504, 105, 0,
  /* 219 */ 65504, 106, 0,
  /* 222 */ 65504, 107, 0,
  /* 225 */ 65504, 108, 0,
  /* 228 */ 65504, 109, 0,
  /* 231 */ 65504, 110, 0,
  /* 234 */ 65504, 111, 0,
  /* 237 */ 65504, 112, 0,
  /* 240 */ 170, 16, 65308, 116, 0,
  /* 245 */ 170, 17, 65308, 116, 0,
  /* 250 */ 170, 17, 65309, 116, 0,
  /* 255 */ 170, 18, 65309, 116, 0,
  /* 260 */ 170, 19, 65309, 116, 0,
  /* 265 */ 170, 19, 65310, 116, 0,
  /* 270 */ 170, 20, 65310, 116, 0,
  /* 275 */ 170, 21, 65310, 116, 0,
  /* 280 */ 170, 21, 65311, 116, 0,
  /* 285 */ 170, 22, 65311, 116, 0,
  /* 290 */ 170, 23, 65311, 116, 0,
  /* 295 */ 170, 23, 65312, 116, 0,
  /* 300 */ 170, 24, 65312, 116, 0,
  /* 305 */ 170, 25, 65312, 116, 0,
  /* 310 */ 170, 25, 65313, 116, 0,
  /* 315 */ 170, 26, 65313, 116, 0,
  /* 320 */ 170, 27, 65313, 116, 0,
  /* 325 */ 170, 27, 65314, 116, 0,
  /* 330 */ 170, 28, 65314, 116, 0,
  /* 335 */ 170, 29, 65314, 116, 0,
  /* 340 */ 170, 29, 65315, 116, 0,
  /* 345 */ 170, 30, 65315, 116, 0,
  /* 350 */ 170, 31, 65315, 116, 0,
  /* 355 */ 170, 31, 65316, 116, 0,
  /* 360 */ 170, 32, 65316, 116, 0,
  /* 365 */ 317, 0,
  /* 367 */ 64172, 0,
  /* 369 */ 64201, 0,
  /* 371 */ 64234, 0,
  /* 373 */ 64267, 0,
  /* 375 */ 65204, 0,
  /* 377 */ 65212, 0,
  /* 379 */ 65219, 0,
  /* 381 */ 65220, 0,
  /* 383 */ 65228, 0,
  /* 385 */ 65471, 65304, 233, 65304, 0,
  /* 390 */ 65472, 65304, 233, 65304, 0,
  /* 395 */ 65473, 65304, 233, 65304, 0,
  /* 400 */ 65474, 65304, 233, 65304, 0,
  /* 405 */ 65475, 65304, 233, 65304, 0,
  /* 410 */ 65476, 65304, 233, 65304, 0,
  /* 415 */ 65477, 65304, 233, 65304, 0,
  /* 420 */ 65478, 65304, 233, 65304, 0,
  /* 425 */ 65479, 65304, 233, 65304, 0,
  /* 430 */ 65480, 65304, 233, 65304, 0,
  /* 435 */ 65481, 65304, 233, 65304, 0,
  /* 440 */ 65482, 65304, 233, 65304, 0,
  /* 445 */ 65483, 65304, 233, 65304, 0,
  /* 450 */ 65484, 65304, 233, 65304, 0,
  /* 455 */ 65485, 65304, 233, 65304, 0,
  /* 460 */ 65486, 65304, 233, 65304, 0,
  /* 465 */ 65316, 0,
  /* 467 */ 65346, 0,
  /* 469 */ 65504, 65366, 171, 65366, 0,
  /* 474 */ 104, 65504, 65366, 171, 65366, 202, 65505, 65366, 171, 65366, 0,
  /* 485 */ 220, 65504, 65366, 171, 65366, 202, 65505, 65366, 171, 65366, 0,
  /* 496 */ 65506, 65366, 171, 65366, 0,
  /* 501 */ 105, 65506, 65366, 171, 65366, 200, 65507, 65366, 171, 65366, 0,
  /* 512 */ 221, 65506, 65366, 171, 65366, 200, 65507, 65366, 171, 65366, 0,
  /* 523 */ 65508, 65366, 171, 65366, 0,
  /* 528 */ 106, 65508, 65366, 171, 65366, 198, 65509, 65366, 171, 65366, 0,
  /* 539 */ 222, 65508, 65366, 171, 65366, 198, 65509, 65366, 171, 65366, 0,
  /* 550 */ 65510, 65366, 171, 65366, 0,
  /* 555 */ 107, 65510, 65366, 171, 65366, 196, 65511, 65366, 171, 65366, 0,
  /* 566 */ 223, 65510, 65366, 171, 65366, 196, 65511, 65366, 171, 65366, 0,
  /* 577 */ 65512, 65366, 171, 65366, 0,
  /* 582 */ 108, 65512, 65366, 171, 65366, 194, 65513, 65366, 171, 65366, 0,
  /* 593 */ 224, 65512, 65366, 171, 65366, 194, 65513, 65366, 171, 65366, 0,
  /* 604 */ 65514, 65366, 171, 65366, 0,
  /* 609 */ 109, 65514, 65366, 171, 65366, 192, 65515, 65366, 171, 65366, 0,
  /* 620 */ 225, 65514, 65366, 171, 65366, 192, 65515, 65366, 171, 65366, 0,
  /* 631 */ 65516, 65366, 171, 65366, 0,
  /* 636 */ 110, 65516, 65366, 171, 65366, 190, 65517, 65366, 171, 65366, 0,
  /* 647 */ 226, 65516, 65366, 171, 65366, 190, 65517, 65366, 171, 65366, 0,
  /* 658 */ 65518, 65366, 171, 65366, 0,
  /* 663 */ 111, 65518, 65366, 171, 65366, 188, 65519, 65366, 171, 65366, 0,
  /* 674 */ 227, 65518, 65366, 171, 65366, 188, 65519, 65366, 171, 65366, 0,
  /* 685 */ 65412, 0,
  /* 687 */ 65474, 0,
  /* 689 */ 65476, 0,
  /* 691 */ 65479, 0,
  /* 693 */ 65504, 0,
  /* 695 */ 65508, 0,
  /* 697 */ 65516, 0,
  /* 699 */ 65518, 0,
  /* 701 */ 65535, 0,
};

static const uint16_t PPCSubRegIdxLists[] = {
  /* 0 */ 1, 0,
  /* 2 */ 2, 0,
  /* 4 */ 7, 6, 3, 10, 0,
  /* 9 */ 11, 2, 12, 13, 0,
  /* 14 */ 8, 11, 2, 12, 13, 9, 15, 14, 16, 17, 0,
  /* 25 */ 4, 1, 5, 18, 0,
};


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
static const char PPCRegStrings[] = {
  /* 0 */ "VF10\0"
  /* 5 */ "VSL10\0"
  /* 11 */ "R10\0"
  /* 15 */ "S10\0"
  /* 19 */ "V10\0"
  /* 23 */ "X10\0"
  /* 27 */ "G8p10\0"
  /* 33 */ "VSRp10\0"
  /* 40 */ "VF20\0"
  /* 45 */ "VSL20\0"
  /* 51 */ "R20\0"
  /* 55 */ "S20\0"
  /* 59 */ "V20\0"
  /* 63 */ "X20\0"
  /* 67 */ "VSRp20\0"
  /* 74 */ "VF30\0"
  /* 79 */ "VSL30\0"
  /* 85 */ "R30\0"
  /* 89 */ "S30\0"
  /* 93 */ "V30\0"
  /* 97 */ "X30\0"
  /* 101 */ "VSRp30\0"
  /* 108 */ "VSX40\0"
  /* 114 */ "VSX50\0"
  /* 120 */ "VSX60\0"
  /* 126 */ "UACC0\0"
  /* 132 */ "VF0\0"
  /* 136 */ "VSL0\0"
  /* 141 */ "CR0\0"
  /* 145 */ "S0\0"
  /* 148 */ "V0\0"
  /* 151 */ "X0\0"
  /* 154 */ "G8p0\0"
  /* 159 */ "VSRp0\0"
  /* 165 */ "VF11\0"
  /* 170 */ "VSL11\0"
  /* 176 */ "R11\0"
  /* 180 */ "S11\0"
  /* 184 */ "V11\0"
  /* 188 */ "X11\0"
  /* 192 */ "G8p11\0"
  /* 198 */ "VSRp11\0"
  /* 205 */ "VF21\0"
  /* 210 */ "VSL21\0"
  /* 216 */ "R21\0"
  /* 220 */ "S21\0"
  /* 224 */ "V21\0"
  /* 228 */ "X21\0"
  /* 232 */ "VSRp21\0"
  /* 239 */ "VF31\0"
  /* 244 */ "VSL31\0"
  /* 250 */ "R31\0"
  /* 254 */ "S31\0"
  /* 258 */ "V31\0"
  /* 262 */ "X31\0"
  /* 266 */ "VSRp31\0"
  /* 273 */ "VSX41\0"
  /* 279 */ "VSX51\0"
  /* 285 */ "VSX61\0"
  /* 291 */ "UACC1\0"
  /* 297 */ "VF1\0"
  /* 301 */ "VSL1\0"
  /* 306 */ "CR1\0"
  /* 310 */ "S1\0"
  /* 313 */ "V1\0"
  /* 316 */ "X1\0"
  /* 319 */ "G8p1\0"
  /* 324 */ "VSRp1\0"
  /* 330 */ "VF12\0"
  /* 335 */ "VSL12\0"
  /* 341 */ "R12\0"
  /* 345 */ "S12\0"
  /* 349 */ "V12\0"
  /* 353 */ "X12\0"
  /* 357 */ "G8p12\0"
  /* 363 */ "VSRp12\0"
  /* 370 */ "VF22\0"
  /* 375 */ "VSL22\0"
  /* 381 */ "R22\0"
  /* 385 */ "S22\0"
  /* 389 */ "V22\0"
  /* 393 */ "X22\0"
  /* 397 */ "VSRp22\0"
  /* 404 */ "VSX32\0"
  /* 410 */ "VSX42\0"
  /* 416 */ "VSX52\0"
  /* 422 */ "VSX62\0"
  /* 428 */ "UACC2\0"
  /* 434 */ "VF2\0"
  /* 438 */ "VSL2\0"
  /* 443 */ "CR2\0"
  /* 447 */ "S2\0"
  /* 450 */ "V2\0"
  /* 453 */ "X2\0"
  /* 456 */ "G8p2\0"
  /* 461 */ "VSRp2\0"
  /* 467 */ "VF13\0"
  /* 472 */ "VSL13\0"
  /* 478 */ "R13\0"
  /* 482 */ "S13\0"
  /* 486 */ "V13\0"
  /* 490 */ "X13\0"
  /* 494 */ "G8p13\0"
  /* 500 */ "VSRp13\0"
  /* 507 */ "VF23\0"
  /* 512 */ "VSL23\0"
  /* 518 */ "R23\0"
  /* 522 */ "S23\0"
  /* 526 */ "V23\0"
  /* 530 */ "X23\0"
  /* 534 */ "VSRp23\0"
  /* 541 */ "VSX33\0"
  /* 547 */ "VSX43\0"
  /* 553 */ "VSX53\0"
  /* 559 */ "VSX63\0"
  /* 565 */ "UACC3\0"
  /* 571 */ "VF3\0"
  /* 575 */ "VSL3\0"
  /* 580 */ "CR3\0"
  /* 584 */ "S3\0"
  /* 587 */ "V3\0"
  /* 590 */ "X3\0"
  /* 593 */ "G8p3\0"
  /* 598 */ "VSRp3\0"
  /* 604 */ "VF14\0"
  /* 609 */ "VSL14\0"
  /* 615 */ "R14\0"
  /* 619 */ "S14\0"
  /* 623 */ "V14\0"
  /* 627 */ "X14\0"
  /* 631 */ "G8p14\0"
  /* 637 */ "VSRp14\0"
  /* 644 */ "VF24\0"
  /* 649 */ "VSL24\0"
  /* 655 */ "R24\0"
  /* 659 */ "S24\0"
  /* 663 */ "V24\0"
  /* 667 */ "X24\0"
  /* 671 */ "VSRp24\0"
  /* 678 */ "VSX34\0"
  /* 684 */ "VSX44\0"
  /* 690 */ "VSX54\0"
  /* 696 */ "UACC4\0"
  /* 702 */ "VF4\0"
  /* 706 */ "VSL4\0"
  /* 711 */ "CR4\0"
  /* 715 */ "S4\0"
  /* 718 */ "V4\0"
  /* 721 */ "X4\0"
  /* 724 */ "G8p4\0"
  /* 729 */ "VSRp4\0"
  /* 735 */ "VF15\0"
  /* 740 */ "VSL15\0"
  /* 746 */ "R15\0"
  /* 750 */ "S15\0"
  /* 754 */ "V15\0"
  /* 758 */ "X15\0"
  /* 762 */ "G8p15\0"
  /* 768 */ "VSRp15\0"
  /* 775 */ "VF25\0"
  /* 780 */ "VSL25\0"
  /* 786 */ "R25\0"
  /* 790 */ "S25\0"
  /* 794 */ "V25\0"
  /* 798 */ "X25\0"
  /* 802 */ "VSRp25\0"
  /* 809 */ "VSX35\0"
  /* 815 */ "VSX45\0"
  /* 821 */ "VSX55\0"
  /* 827 */ "UACC5\0"
  /* 833 */ "VF5\0"
  /* 837 */ "VSL5\0"
  /* 842 */ "CR5\0"
  /* 846 */ "S5\0"
  /* 849 */ "V5\0"
  /* 852 */ "X5\0"
  /* 855 */ "G8p5\0"
  /* 860 */ "VSRp5\0"
  /* 866 */ "VF16\0"
  /* 871 */ "VSL16\0"
  /* 877 */ "R16\0"
  /* 881 */ "S16\0"
  /* 885 */ "V16\0"
  /* 889 */ "X16\0"
  /* 893 */ "VSRp16\0"
  /* 900 */ "VF26\0"
  /* 905 */ "VSL26\0"
  /* 911 */ "R26\0"
  /* 915 */ "S26\0"
  /* 919 */ "V26\0"
  /* 923 */ "X26\0"
  /* 927 */ "VSRp26\0"
  /* 934 */ "VSX36\0"
  /* 940 */ "VSX46\0"
  /* 946 */ "VSX56\0"
  /* 952 */ "UACC6\0"
  /* 958 */ "VF6\0"
  /* 962 */ "VSL6\0"
  /* 967 */ "CR6\0"
  /* 971 */ "S6\0"
  /* 974 */ "V6\0"
  /* 977 */ "X6\0"
  /* 980 */ "G8p6\0"
  /* 985 */ "VSRp6\0"
  /* 991 */ "VF17\0"
  /* 996 */ "VSL17\0"
  /* 1002 */ "R17\0"
  /* 1006 */ "S17\0"
  /* 1010 */ "V17\0"
  /* 1014 */ "X17\0"
  /* 1018 */ "VSRp17\0"
  /* 1025 */ "VF27\0"
  /* 1030 */ "VSL27\0"
  /* 1036 */ "R27\0"
  /* 1040 */ "S27\0"
  /* 1044 */ "V27\0"
  /* 1048 */ "X27\0"
  /* 1052 */ "VSRp27\0"
  /* 1059 */ "VSX37\0"
  /* 1065 */ "VSX47\0"
  /* 1071 */ "VSX57\0"
  /* 1077 */ "UACC7\0"
  /* 1083 */ "VF7\0"
  /* 1087 */ "VSL7\0"
  /* 1092 */ "CR7\0"
  /* 1096 */ "S7\0"
  /* 1099 */ "V7\0"
  /* 1102 */ "X7\0"
  /* 1105 */ "G8p7\0"
  /* 1110 */ "VSRp7\0"
  /* 1116 */ "VF18\0"
  /* 1121 */ "VSL18\0"
  /* 1127 */ "R18\0"
  /* 1131 */ "S18\0"
  /* 1135 */ "V18\0"
  /* 1139 */ "X18\0"
  /* 1143 */ "VSRp18\0"
  /* 1150 */ "VF28\0"
  /* 1155 */ "VSL28\0"
  /* 1161 */ "R28\0"
  /* 1165 */ "S28\0"
  /* 1169 */ "V28\0"
  /* 1173 */ "X28\0"
  /* 1177 */ "VSRp28\0"
  /* 1184 */ "VSX38\0"
  /* 1190 */ "VSX48\0"
  /* 1196 */ "VSX58\0"
  /* 1202 */ "VF8\0"
  /* 1206 */ "VSL8\0"
  /* 1211 */ "ZERO8\0"
  /* 1217 */ "BP8\0"
  /* 1221 */ "FP8\0"
  /* 1225 */ "LR8\0"
  /* 1229 */ "CTR8\0"
  /* 1234 */ "S8\0"
  /* 1237 */ "V8\0"
  /* 1240 */ "X8\0"
  /* 1243 */ "G8p8\0"
  /* 1248 */ "VSRp8\0"
  /* 1254 */ "VF19\0"
  /* 1259 */ "VSL19\0"
  /* 1265 */ "R19\0"
  /* 1269 */ "S19\0"
  /* 1273 */ "V19\0"
  /* 1277 */ "X19\0"
  /* 1281 */ "VSRp19\0"
  /* 1288 */ "VF29\0"
  /* 1293 */ "VSL29\0"
  /* 1299 */ "R29\0"
  /* 1303 */ "S29\0"
  /* 1307 */ "V29\0"
  /* 1311 */ "X29\0"
  /* 1315 */ "VSRp29\0"
  /* 1322 */ "VSX39\0"
  /* 1328 */ "VSX49\0"
  /* 1334 */ "VSX59\0"
  /* 1340 */ "VF9\0"
  /* 1344 */ "VSL9\0"
  /* 1349 */ "R9\0"
  /* 1352 */ "S9\0"
  /* 1355 */ "V9\0"
  /* 1358 */ "X9\0"
  /* 1361 */ "G8p9\0"
  /* 1366 */ "VSRp9\0"
  /* 1372 */ "VRSAVE\0"
  /* 1379 */ "RM\0"
  /* 1382 */ "CR0UN\0"
  /* 1388 */ "CR1UN\0"
  /* 1394 */ "CR2UN\0"
  /* 1400 */ "CR3UN\0"
  /* 1406 */ "CR4UN\0"
  /* 1412 */ "CR5UN\0"
  /* 1418 */ "CR6UN\0"
  /* 1424 */ "CR7UN\0"
  /* 1430 */ "ZERO\0"
  /* 1435 */ "BP\0"
  /* 1438 */ "FP\0"
  /* 1441 */ "CR0EQ\0"
  /* 1447 */ "CR1EQ\0"
  /* 1453 */ "CR2EQ\0"
  /* 1459 */ "CR3EQ\0"
  /* 1465 */ "CR4EQ\0"
  /* 1471 */ "CR5EQ\0"
  /* 1477 */ "CR6EQ\0"
  /* 1483 */ "CR7EQ\0"
  /* 1489 */ "SPEFSCR\0"
  /* 1497 */ "XER\0"
  /* 1501 */ "LR\0"
  /* 1504 */ "CTR\0"
  /* 1508 */ "CR0GT\0"
  /* 1514 */ "CR1GT\0"
  /* 1520 */ "CR2GT\0"
  /* 1526 */ "CR3GT\0"
  /* 1532 */ "CR4GT\0"
  /* 1538 */ "CR5GT\0"
  /* 1544 */ "CR6GT\0"
  /* 1550 */ "CR7GT\0"
  /* 1556 */ "CR0LT\0"
  /* 1562 */ "CR1LT\0"
  /* 1568 */ "CR2LT\0"
  /* 1574 */ "CR3LT\0"
  /* 1580 */ "CR4LT\0"
  /* 1586 */ "CR5LT\0"
  /* 1592 */ "CR6LT\0"
  /* 1598 */ "CR7LT\0"
  /* 1604 */ "CARRY\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

static const MCRegisterDesc PPCRegDesc[] = { // Descriptors
  { 4, 0, 0, 0, 0, 0 },
  { 1435, 1, 32, 1, 11217, 493 },
  { 1604, 1, 1, 1, 11217, 141 },
  { 1504, 1, 1, 1, 11217, 3 },
  { 1438, 1, 153, 1, 11217, 325 },
  { 1501, 1, 1, 1, 11217, 491 },
  { 1379, 1, 1, 1, 11217, 141 },
  { 1489, 1, 1, 1, 11217, 22 },
  { 1372, 1, 1, 1, 11217, 179 },
  { 1497, 1, 1, 1, 10999, 271 },
  { 1430, 1, 365, 1, 10999, 269 },
  { 127, 485, 1, 14, 196, 148 },
  { 292, 512, 1, 14, 196, 229 },
  { 429, 539, 1, 14, 196, 216 },
  { 566, 566, 1, 14, 196, 158 },
  { 697, 593, 1, 14, 196, 76 },
  { 828, 620, 1, 14, 196, 11 },
  { 953, 647, 1, 14, 196, 58 },
  { 1078, 674, 1, 14, 196, 153 },
  { 1217, 699, 1, 0, 0, 177 },
  { 141, 34, 1, 4, 116, 181 },
  { 306, 34, 1, 4, 116, 186 },
  { 443, 34, 1, 4, 116, 153 },
  { 580, 34, 1, 4, 116, 153 },
  { 711, 34, 1, 4, 116, 153 },
  { 842, 34, 1, 4, 116, 172 },
  { 967, 34, 1, 4, 116, 260 },
  { 1092, 34, 1, 4, 116, 33 },
  { 1229, 1, 1, 1, 2992, 170 },
  { 133, 1, 360, 1, 11153, 426 },
  { 298, 1, 355, 1, 11153, 141 },
  { 435, 1, 350, 1, 11153, 141 },
  { 572, 1, 345, 1, 11153, 236 },
  { 703, 1, 345, 1, 11153, 141 },
  { 834, 1, 340, 1, 11153, 317 },
  { 959, 1, 335, 1, 11153, 406 },
  { 1084, 1, 330, 1, 11153, 470 },
  { 1203, 1, 330, 1, 11153, 168 },
  { 1341, 1, 325, 1, 11153, 141 },
  { 1, 1, 320, 1, 11153, 66 },
  { 166, 1, 315, 1, 11153, 424 },
  { 331, 1, 315, 1, 11153, 3 },
  { 468, 1, 310, 1, 11153, 400 },
  { 605, 1, 305, 1, 11153, 212 },
  { 736, 1, 300, 1, 11153, 24 },
  { 867, 1, 300, 1, 11153, 323 },
  { 992, 1, 295, 1, 11153, 221 },
  { 1117, 1, 290, 1, 11153, 193 },
  { 1255, 1, 285, 1, 11153, 202 },
  { 41, 1, 285, 1, 11153, 132 },
  { 206, 1, 280, 1, 11153, 410 },
  { 371, 1, 275, 1, 11153, 491 },
  { 508, 1, 270, 1, 11153, 31 },
  { 645, 1, 270, 1, 11153, 3 },
  { 776, 1, 265, 1, 11153, 422 },
  { 901, 1, 260, 1, 11153, 14 },
  { 1026, 1, 255, 1, 11153, 130 },
  { 1151, 1, 255, 1, 11153, 141 },
  { 1289, 1, 250, 1, 11153, 141 },
  { 75, 1, 245, 1, 11153, 466 },
  { 240, 1, 240, 1, 11153, 119 },
  { 1221, 691, 1, 0, 416, 223 },
  { 1225, 1, 1, 1, 481, 420 },
  { 142, 1, 183, 1, 481, 3 },
  { 307, 1, 179, 1, 481, 446 },
  { 444, 1, 179, 1, 481, 418 },
  { 581, 1, 175, 1, 481, 455 },
  { 712, 1, 175, 1, 481, 66 },
  { 843, 1, 171, 1, 481, 462 },
  { 968, 1, 171, 1, 481, 3 },
  { 1093, 1, 167, 1, 481, 141 },
  { 1226, 1, 167, 1, 481, 141 },
  { 1349, 1, 163, 1, 481, 24 },
  { 11, 1, 163, 1, 481, 491 },
  { 176, 1, 159, 1, 481, 122 },
  { 341, 1, 159, 1, 481, 225 },
  { 478, 1, 155, 1, 481, 3 },
  { 615, 1, 155, 1, 481, 491 },
  { 746, 1, 151, 1, 481, 119 },
  { 877, 1, 151, 1, 481, 18 },
  { 1002, 1, 147, 1, 481, 141 },
  { 1127, 1, 147, 1, 481, 141 },
  { 1265, 1, 143, 1, 481, 329 },
  { 51, 1, 143, 1, 481, 402 },
  { 216, 1, 139, 1, 481, 400 },
  { 381, 1, 139, 1, 481, 408 },
  { 518, 1, 135, 1, 481, 404 },
  { 655, 1, 135, 1, 481, 3 },
  { 786, 1, 131, 1, 481, 3 },
  { 911, 1, 131, 1, 481, 3 },
  { 1036, 1, 127, 1, 481, 141 },
  { 1161, 1, 127, 1, 481, 491 },
  { 1299, 1, 123, 1, 481, 491 },
  { 85, 1, 123, 1, 481, 491 },
  { 250, 1, 119, 1, 481, 319 },
  { 145, 693, 1, 0, 11153, 141 },
  { 310, 693, 1, 0, 11153, 474 },
  { 447, 693, 1, 0, 11153, 141 },
  { 584, 693, 1, 0, 11153, 501 },
  { 715, 693, 1, 0, 11153, 204 },
  { 846, 693, 1, 0, 11153, 206 },
  { 971, 693, 1, 0, 11153, 141 },
  { 1096, 693, 1, 0, 11153, 141 },
  { 1234, 693, 1, 0, 11153, 141 },
  { 1352, 693, 1, 0, 11153, 3 },
  { 15, 693, 1, 0, 11153, 141 },
  { 180, 693, 1, 0, 11153, 119 },
  { 345, 693, 1, 0, 11153, 227 },
  { 482, 693, 1, 0, 11153, 212 },
  { 619, 693, 1, 0, 11153, 18 },
  { 750, 693, 1, 0, 11153, 20 },
  { 881, 693, 1, 0, 11153, 141 },
  { 1006, 693, 1, 0, 11153, 416 },
  { 1131, 693, 1, 0, 11153, 414 },
  { 1269, 693, 1, 0, 11153, 122 },
  { 55, 693, 1, 0, 11153, 141 },
  { 220, 693, 1, 0, 11153, 141 },
  { 385, 693, 1, 0, 11153, 141 },
  { 522, 693, 1, 0, 11153, 267 },
  { 659, 693, 1, 0, 11153, 444 },
  { 790, 693, 1, 0, 11153, 442 },
  { 915, 693, 1, 0, 11153, 3 },
  { 1040, 693, 1, 0, 11153, 14 },
  { 1165, 693, 1, 0, 11153, 141 },
  { 1303, 693, 1, 0, 11153, 141 },
  { 89, 693, 1, 0, 11153, 141 },
  { 254, 693, 1, 0, 11153, 3 },
  { 126, 474, 1, 14, 36, 450 },
  { 291, 501, 1, 14, 36, 38 },
  { 428, 528, 1, 14, 36, 153 },
  { 565, 555, 1, 14, 36, 45 },
  { 696, 582, 1, 14, 36, 0 },
  { 827, 609, 1, 14, 36, 480 },
  { 952, 636, 1, 14, 36, 457 },
  { 1077, 663, 1, 14, 36, 143 },
  { 148, 42, 238, 2, 11121, 141 },
  { 313, 42, 235, 2, 11121, 141 },
  { 450, 42, 235, 2, 11121, 210 },
  { 587, 42, 232, 2, 11121, 3 },
  { 718, 42, 232, 2, 11121, 141 },
  { 849, 42, 229, 2, 11121, 141 },
  { 974, 42, 229, 2, 11121, 464 },
  { 1099, 42, 226, 2, 11121, 141 },
  { 1237, 42, 226, 2, 11121, 3 },
  { 1355, 42, 223, 2, 11121, 214 },
  { 19, 42, 223, 2, 11121, 3 },
  { 184, 42, 220, 2, 11121, 115 },
  { 349, 42, 220, 2, 11121, 476 },
  { 486, 42, 217, 2, 11121, 212 },
  { 623, 42, 217, 2, 11121, 16 },
  { 754, 42, 214, 2, 11121, 141 },
  { 885, 42, 214, 2, 11121, 122 },
  { 1010, 42, 211, 2, 11121, 478 },
  { 1135, 42, 211, 2, 11121, 3 },
  { 1273, 42, 208, 2, 11121, 468 },
  { 59, 42, 208, 2, 11121, 491 },
  { 224, 42, 205, 2, 11121, 240 },
  { 389, 42, 205, 2, 11121, 238 },
  { 526, 42, 202, 2, 11121, 141 },
  { 663, 42, 202, 2, 11121, 66 },
  { 794, 42, 199, 2, 11121, 242 },
  { 919, 42, 199, 2, 11121, 244 },
  { 1044, 42, 196, 2, 11121, 141 },
  { 1169, 42, 196, 2, 11121, 246 },
  { 1307, 42, 193, 2, 11121, 141 },
  { 93, 42, 193, 2, 11121, 396 },
  { 258, 42, 190, 2, 11121, 191 },
  { 132, 1, 237, 1, 11025, 200 },
  { 297, 1, 234, 1, 11025, 248 },
  { 434, 1, 234, 1, 11025, 31 },
  { 571, 1, 231, 1, 11025, 14 },
  { 702, 1, 231, 1, 11025, 250 },
  { 833, 1, 228, 1, 11025, 119 },
  { 958, 1, 228, 1, 11025, 252 },
  { 1083, 1, 225, 1, 11025, 141 },
  { 1202, 1, 225, 1, 11025, 3 },
  { 1340, 1, 222, 1, 11025, 119 },
  { 0, 1, 222, 1, 11025, 3 },
  { 165, 1, 219, 1, 11025, 412 },
  { 330, 1, 219, 1, 11025, 256 },
  { 467, 1, 216, 1, 11025, 258 },
  { 604, 1, 216, 1, 11025, 491 },
  { 735, 1, 213, 1, 11025, 141 },
  { 866, 1, 213, 1, 11025, 3 },
  { 991, 1, 210, 1, 11025, 254 },
  { 1116, 1, 210, 1, 11025, 141 },
  { 1254, 1, 207, 1, 11025, 141 },
  { 40, 1, 207, 1, 11025, 265 },
  { 205, 1, 204, 1, 11025, 3 },
  { 370, 1, 204, 1, 11025, 43 },
  { 507, 1, 201, 1, 11025, 3 },
  { 644, 1, 201, 1, 11025, 141 },
  { 775, 1, 198, 1, 11025, 141 },
  { 900, 1, 198, 1, 11025, 501 },
  { 1025, 1, 195, 1, 11025, 204 },
  { 1150, 1, 195, 1, 11025, 501 },
  { 1288, 1, 192, 1, 11025, 208 },
  { 74, 1, 192, 1, 11025, 501 },
  { 239, 1, 189, 1, 11025, 501 },
  { 136, 472, 361, 2, 7473, 3 },
  { 301, 472, 356, 2, 7473, 430 },
  { 438, 472, 351, 2, 7473, 432 },
  { 575, 472, 346, 2, 7473, 28 },
  { 706, 472, 346, 2, 7473, 26 },
  { 837, 472, 341, 2, 7473, 3 },
  { 962, 472, 336, 2, 7473, 434 },
  { 1087, 472, 331, 2, 7473, 3 },
  { 1206, 472, 331, 2, 7473, 436 },
  { 1344, 472, 326, 2, 7473, 491 },
  { 5, 472, 321, 2, 7473, 122 },
  { 170, 472, 316, 2, 7473, 3 },
  { 335, 472, 316, 2, 7473, 440 },
  { 472, 472, 311, 2, 7473, 472 },
  { 609, 472, 306, 2, 7473, 3 },
  { 740, 472, 301, 2, 7473, 398 },
  { 871, 472, 301, 2, 7473, 321 },
  { 996, 472, 296, 2, 7473, 448 },
  { 1121, 472, 291, 2, 7473, 438 },
  { 1259, 472, 286, 2, 7473, 141 },
  { 45, 472, 286, 2, 7473, 141 },
  { 210, 472, 281, 2, 7473, 66 },
  { 375, 472, 276, 2, 7473, 3 },
  { 512, 472, 271, 2, 7473, 119 },
  { 649, 472, 271, 2, 7473, 68 },
  { 780, 472, 266, 2, 7473, 491 },
  { 905, 472, 261, 2, 7473, 3 },
  { 1030, 472, 256, 2, 7473, 111 },
  { 1155, 472, 256, 2, 7473, 3 },
  { 1293, 472, 251, 2, 7473, 331 },
  { 79, 472, 246, 2, 7473, 141 },
  { 244, 472, 241, 2, 7473, 333 },
  { 159, 469, 357, 9, 322, 2 },
  { 324, 480, 342, 9, 322, 145 },
  { 461, 496, 342, 9, 322, 30 },
  { 598, 507, 327, 9, 322, 50 },
  { 729, 523, 327, 9, 322, 2 },
  { 860, 534, 312, 9, 322, 63 },
  { 985, 550, 312, 9, 322, 73 },
  { 1110, 561, 297, 9, 322, 5 },
  { 1248, 577, 297, 9, 322, 8 },
  { 1366, 588, 282, 9, 322, 145 },
  { 33, 604, 282, 9, 322, 137 },
  { 198, 615, 267, 9, 322, 134 },
  { 363, 631, 267, 9, 322, 485 },
  { 500, 642, 252, 9, 322, 100 },
  { 637, 658, 252, 9, 322, 124 },
  { 768, 669, 242, 9, 322, 163 },
  { 893, 39, 1, 9, 370, 163 },
  { 1018, 44, 1, 9, 370, 145 },
  { 1143, 49, 1, 9, 370, 97 },
  { 1281, 54, 1, 9, 370, 335 },
  { 67, 59, 1, 9, 370, 145 },
  { 232, 64, 1, 9, 370, 106 },
  { 397, 69, 1, 9, 370, 145 },
  { 534, 74, 1, 9, 370, 55 },
  { 671, 79, 1, 9, 370, 70 },
  { 802, 84, 1, 9, 370, 340 },
  { 927, 89, 1, 9, 370, 498 },
  { 1052, 94, 1, 9, 370, 495 },
  { 1177, 99, 1, 9, 370, 87 },
  { 1315, 104, 1, 9, 370, 343 },
  { 101, 109, 1, 9, 370, 127 },
  { 266, 114, 1, 9, 370, 488 },
  { 404, 1, 1, 1, 10961, 348 },
  { 541, 1, 1, 1, 10961, 198 },
  { 678, 1, 1, 1, 10961, 3 },
  { 809, 1, 1, 1, 10961, 491 },
  { 934, 1, 1, 1, 10961, 346 },
  { 1059, 1, 1, 1, 10961, 352 },
  { 1184, 1, 1, 1, 10961, 350 },
  { 1322, 1, 1, 1, 10961, 92 },
  { 108, 1, 1, 1, 10961, 3 },
  { 273, 1, 1, 1, 10961, 234 },
  { 410, 1, 1, 1, 10961, 3 },
  { 547, 1, 1, 1, 10961, 119 },
  { 684, 1, 1, 1, 10961, 327 },
  { 815, 1, 1, 1, 10961, 354 },
  { 940, 1, 1, 1, 10961, 141 },
  { 1065, 1, 1, 1, 10961, 356 },
  { 1190, 1, 1, 1, 10961, 360 },
  { 1328, 1, 1, 1, 10961, 16 },
  { 114, 1, 1, 1, 10961, 364 },
  { 279, 1, 1, 1, 10961, 358 },
  { 416, 1, 1, 1, 10961, 338 },
  { 553, 1, 1, 1, 10961, 3 },
  { 690, 1, 1, 1, 10961, 366 },
  { 821, 1, 1, 1, 10961, 141 },
  { 946, 1, 1, 1, 10961, 370 },
  { 1071, 1, 1, 1, 10961, 362 },
  { 1196, 1, 1, 1, 10961, 368 },
  { 1334, 1, 1, 1, 10961, 14 },
  { 120, 1, 1, 1, 10961, 3 },
  { 285, 1, 1, 1, 10961, 66 },
  { 422, 1, 1, 1, 10961, 113 },
  { 559, 1, 1, 1, 10961, 372 },
  { 151, 388, 185, 0, 7441, 3 },
  { 316, 388, 181, 0, 7441, 3 },
  { 453, 388, 181, 0, 7441, 491 },
  { 590, 388, 177, 0, 7441, 376 },
  { 721, 388, 177, 0, 7441, 141 },
  { 852, 388, 173, 0, 7441, 3 },
  { 977, 388, 173, 0, 7441, 3 },
  { 1102, 388, 169, 0, 7441, 390 },
  { 1240, 388, 169, 0, 7441, 3 },
  { 1358, 388, 165, 0, 7441, 141 },
  { 23, 388, 165, 0, 7441, 3 },
  { 188, 388, 161, 0, 7441, 14 },
  { 353, 388, 161, 0, 7441, 141 },
  { 490, 388, 157, 0, 7441, 378 },
  { 627, 388, 157, 0, 7441, 3 },
  { 758, 388, 153, 0, 7441, 374 },
  { 889, 388, 153, 0, 7441, 382 },
  { 1014, 388, 149, 0, 7441, 20 },
  { 1139, 388, 149, 0, 7441, 394 },
  { 1277, 388, 145, 0, 7441, 384 },
  { 63, 388, 145, 0, 7441, 117 },
  { 228, 388, 141, 0, 7441, 392 },
  { 393, 388, 141, 0, 7441, 386 },
  { 530, 388, 137, 0, 7441, 388 },
  { 667, 388, 137, 0, 7441, 234 },
  { 798, 388, 133, 0, 7441, 380 },
  { 923, 388, 133, 0, 7441, 3 },
  { 1048, 388, 129, 0, 7441, 141 },
  { 1173, 388, 129, 0, 7441, 3 },
  { 1311, 388, 125, 0, 7441, 428 },
  { 97, 388, 125, 0, 7441, 90 },
  { 262, 388, 121, 0, 7441, 273 },
  { 1211, 379, 1, 0, 448, 3 },
  { 1441, 1, 383, 1, 5972, 18 },
  { 1447, 1, 383, 1, 5972, 53 },
  { 1453, 1, 383, 1, 5972, 3 },
  { 1459, 1, 383, 1, 5972, 166 },
  { 1465, 1, 383, 1, 5972, 277 },
  { 1471, 1, 383, 1, 5972, 275 },
  { 1477, 1, 383, 1, 5972, 81 },
  { 1483, 1, 383, 1, 5972, 281 },
  { 1508, 1, 381, 1, 5940, 81 },
  { 1514, 1, 381, 1, 5940, 315 },
  { 1520, 1, 381, 1, 5940, 85 },
  { 1526, 1, 381, 1, 5940, 279 },
  { 1532, 1, 381, 1, 5940, 283 },
  { 1538, 1, 381, 1, 5940, 287 },
  { 1544, 1, 381, 1, 5940, 289 },
  { 1550, 1, 381, 1, 5940, 285 },
  { 1556, 1, 377, 1, 5908, 141 },
  { 1562, 1, 377, 1, 5908, 141 },
  { 1568, 1, 377, 1, 5908, 66 },
  { 1574, 1, 377, 1, 5908, 3 },
  { 1580, 1, 377, 1, 5908, 109 },
  { 1586, 1, 377, 1, 5908, 291 },
  { 1592, 1, 377, 1, 5908, 3 },
  { 1598, 1, 377, 1, 5908, 141 },
  { 1382, 1, 375, 1, 5876, 83 },
  { 1388, 1, 375, 1, 5876, 141 },
  { 1394, 1, 375, 1, 5876, 3 },
  { 1400, 1, 375, 1, 5876, 119 },
  { 1406, 1, 375, 1, 5876, 3 },
  { 1412, 1, 375, 1, 5876, 293 },
  { 1418, 1, 375, 1, 5876, 66 },
  { 1424, 1, 375, 1, 5876, 295 },
  { 154, 385, 1, 25, 274, 94 },
  { 319, 390, 1, 25, 274, 297 },
  { 456, 395, 1, 25, 274, 300 },
  { 593, 400, 1, 25, 274, 306 },
  { 724, 405, 1, 25, 274, 103 },
  { 855, 410, 1, 25, 274, 2 },
  { 980, 415, 1, 25, 274, 309 },
  { 1105, 420, 1, 25, 274, 78 },
  { 1243, 425, 1, 25, 274, 121 },
  { 1361, 430, 1, 25, 274, 145 },
  { 27, 435, 1, 25, 274, 140 },
  { 192, 440, 1, 25, 274, 2 },
  { 357, 445, 1, 25, 274, 195 },
  { 494, 450, 1, 25, 274, 303 },
  { 631, 455, 1, 25, 274, 312 },
  { 762, 460, 1, 25, 274, 145 },
};

  // VSSRC Register Class...
  static const MCPhysReg VSSRC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_F31, PPC_F30, PPC_F29, PPC_F28, PPC_F27, PPC_F26, PPC_F25, PPC_F24, PPC_F23, PPC_F22, PPC_F21, PPC_F20, PPC_F19, PPC_F18, PPC_F17, PPC_F16, PPC_F15, PPC_F14, PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, PPC_VF31, PPC_VF30, PPC_VF29, PPC_VF28, PPC_VF27, PPC_VF26, PPC_VF25, PPC_VF24, PPC_VF23, PPC_VF22, PPC_VF21, PPC_VF20, 
  };

  // VSSRC Bit set.
  static const uint8_t VSSRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC Register Class...
  static const MCPhysReg GPRC[] = {
    PPC_R2, PPC_R3, PPC_R4, PPC_R5, PPC_R6, PPC_R7, PPC_R8, PPC_R9, PPC_R10, PPC_R11, PPC_R12, PPC_R30, PPC_R29, PPC_R28, PPC_R27, PPC_R26, PPC_R25, PPC_R24, PPC_R23, PPC_R22, PPC_R21, PPC_R20, PPC_R19, PPC_R18, PPC_R17, PPC_R16, PPC_R15, PPC_R14, PPC_R13, PPC_R31, PPC_R0, PPC_R1, PPC_FP, PPC_BP, 
  };

  // GPRC Bit set.
  static const uint8_t GPRCBits[] = {
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC_NOR0 Register Class...
  static const MCPhysReg GPRC_NOR0[] = {
    PPC_R2, PPC_R3, PPC_R4, PPC_R5, PPC_R6, PPC_R7, PPC_R8, PPC_R9, PPC_R10, PPC_R11, PPC_R12, PPC_R30, PPC_R29, PPC_R28, PPC_R27, PPC_R26, PPC_R25, PPC_R24, PPC_R23, PPC_R22, PPC_R21, PPC_R20, PPC_R19, PPC_R18, PPC_R17, PPC_R16, PPC_R15, PPC_R14, PPC_R13, PPC_R31, PPC_R1, PPC_FP, PPC_BP, PPC_ZERO, 
  };

  // GPRC_NOR0 Bit set.
  static const uint8_t GPRC_NOR0Bits[] = {
    0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC_and_GPRC_NOR0 Register Class...
  static const MCPhysReg GPRC_and_GPRC_NOR0[] = {
    PPC_R2, PPC_R3, PPC_R4, PPC_R5, PPC_R6, PPC_R7, PPC_R8, PPC_R9, PPC_R10, PPC_R11, PPC_R12, PPC_R30, PPC_R29, PPC_R28, PPC_R27, PPC_R26, PPC_R25, PPC_R24, PPC_R23, PPC_R22, PPC_R21, PPC_R20, PPC_R19, PPC_R18, PPC_R17, PPC_R16, PPC_R15, PPC_R14, PPC_R13, PPC_R31, PPC_R1, PPC_FP, PPC_BP, 
  };

  // GPRC_and_GPRC_NOR0 Bit set.
  static const uint8_t GPRC_and_GPRC_NOR0Bits[] = {
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // CRBITRC Register Class...
  static const MCPhysReg CRBITRC[] = {
    PPC_CR2LT, PPC_CR2GT, PPC_CR2EQ, PPC_CR2UN, PPC_CR3LT, PPC_CR3GT, PPC_CR3EQ, PPC_CR3UN, PPC_CR4LT, PPC_CR4GT, PPC_CR4EQ, PPC_CR4UN, PPC_CR5LT, PPC_CR5GT, PPC_CR5EQ, PPC_CR5UN, PPC_CR6LT, PPC_CR6GT, PPC_CR6EQ, PPC_CR6UN, PPC_CR7LT, PPC_CR7GT, PPC_CR7EQ, PPC_CR7UN, PPC_CR1LT, PPC_CR1GT, PPC_CR1EQ, PPC_CR1UN, PPC_CR0LT, PPC_CR0GT, PPC_CR0EQ, PPC_CR0UN, 
  };

  // CRBITRC Bit set.
  static const uint8_t CRBITRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // F4RC Register Class...
  static const MCPhysReg F4RC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_F31, PPC_F30, PPC_F29, PPC_F28, PPC_F27, PPC_F26, PPC_F25, PPC_F24, PPC_F23, PPC_F22, PPC_F21, PPC_F20, PPC_F19, PPC_F18, PPC_F17, PPC_F16, PPC_F15, PPC_F14, 
  };

  // F4RC Bit set.
  static const uint8_t F4RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // CRRC Register Class...
  static const MCPhysReg CRRC[] = {
    PPC_CR0, PPC_CR1, PPC_CR5, PPC_CR6, PPC_CR7, PPC_CR2, PPC_CR3, PPC_CR4, 
  };

  // CRRC Bit set.
  static const uint8_t CRRCBits[] = {
    0x00, 0x00, 0xf0, 0x0f, 
  };

  // CARRYRC Register Class...
  static const MCPhysReg CARRYRC[] = {
    PPC_CARRY, PPC_XER, 
  };

  // CARRYRC Bit set.
  static const uint8_t CARRYRCBits[] = {
    0x04, 0x02, 
  };

  // CTRRC Register Class...
  static const MCPhysReg CTRRC[] = {
    PPC_CTR, 
  };

  // CTRRC Bit set.
  static const uint8_t CTRRCBits[] = {
    0x08, 
  };

  // LRRC Register Class...
  static const MCPhysReg LRRC[] = {
    PPC_LR, 
  };

  // LRRC Bit set.
  static const uint8_t LRRCBits[] = {
    0x20, 
  };

  // VRSAVERC Register Class...
  static const MCPhysReg VRSAVERC[] = {
    PPC_VRSAVE, 
  };

  // VRSAVERC Bit set.
  static const uint8_t VRSAVERCBits[] = {
    0x00, 0x01, 
  };

  // SPILLTOVSRRC Register Class...
  static const MCPhysReg SPILLTOVSRRC[] = {
    PPC_X2, PPC_X3, PPC_X4, PPC_X5, PPC_X6, PPC_X7, PPC_X8, PPC_X9, PPC_X10, PPC_X11, PPC_X12, PPC_X30, PPC_X29, PPC_X28, PPC_X27, PPC_X26, PPC_X25, PPC_X24, PPC_X23, PPC_X22, PPC_X21, PPC_X20, PPC_X19, PPC_X18, PPC_X17, PPC_X16, PPC_X15, PPC_X14, PPC_X31, PPC_X13, PPC_X0, PPC_X1, PPC_FP8, PPC_BP8, PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, 
  };

  // SPILLTOVSRRC Bit set.
  static const uint8_t SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x08, 0xe0, 0xff, 0x07, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSFRC Register Class...
  static const MCPhysReg VSFRC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_F31, PPC_F30, PPC_F29, PPC_F28, PPC_F27, PPC_F26, PPC_F25, PPC_F24, PPC_F23, PPC_F22, PPC_F21, PPC_F20, PPC_F19, PPC_F18, PPC_F17, PPC_F16, PPC_F15, PPC_F14, PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, PPC_VF31, PPC_VF30, PPC_VF29, PPC_VF28, PPC_VF27, PPC_VF26, PPC_VF25, PPC_VF24, PPC_VF23, PPC_VF22, PPC_VF21, PPC_VF20, 
  };

  // VSFRC Bit set.
  static const uint8_t VSFRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // G8RC Register Class...
  static const MCPhysReg G8RC[] = {
    PPC_X2, PPC_X3, PPC_X4, PPC_X5, PPC_X6, PPC_X7, PPC_X8, PPC_X9, PPC_X10, PPC_X11, PPC_X12, PPC_X30, PPC_X29, PPC_X28, PPC_X27, PPC_X26, PPC_X25, PPC_X24, PPC_X23, PPC_X22, PPC_X21, PPC_X20, PPC_X19, PPC_X18, PPC_X17, PPC_X16, PPC_X15, PPC_X14, PPC_X31, PPC_X13, PPC_X0, PPC_X1, PPC_FP8, PPC_BP8, 
  };

  // G8RC Bit set.
  static const uint8_t G8RCBits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // G8RC_NOX0 Register Class...
  static const MCPhysReg G8RC_NOX0[] = {
    PPC_X2, PPC_X3, PPC_X4, PPC_X5, PPC_X6, PPC_X7, PPC_X8, PPC_X9, PPC_X10, PPC_X11, PPC_X12, PPC_X30, PPC_X29, PPC_X28, PPC_X27, PPC_X26, PPC_X25, PPC_X24, PPC_X23, PPC_X22, PPC_X21, PPC_X20, PPC_X19, PPC_X18, PPC_X17, PPC_X16, PPC_X15, PPC_X14, PPC_X31, PPC_X13, PPC_X1, PPC_FP8, PPC_BP8, PPC_ZERO8, 
  };

  // G8RC_NOX0 Bit set.
  static const uint8_t G8RC_NOX0Bits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // SPILLTOVSRRC_and_VSFRC Register Class...
  static const MCPhysReg SPILLTOVSRRC_and_VSFRC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, 
  };

  // SPILLTOVSRRC_and_VSFRC Bit set.
  static const uint8_t SPILLTOVSRRC_and_VSFRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // G8RC_and_G8RC_NOX0 Register Class...
  static const MCPhysReg G8RC_and_G8RC_NOX0[] = {
    PPC_X2, PPC_X3, PPC_X4, PPC_X5, PPC_X6, PPC_X7, PPC_X8, PPC_X9, PPC_X10, PPC_X11, PPC_X12, PPC_X30, PPC_X29, PPC_X28, PPC_X27, PPC_X26, PPC_X25, PPC_X24, PPC_X23, PPC_X22, PPC_X21, PPC_X20, PPC_X19, PPC_X18, PPC_X17, PPC_X16, PPC_X15, PPC_X14, PPC_X31, PPC_X13, PPC_X1, PPC_FP8, PPC_BP8, 
  };

  // G8RC_and_G8RC_NOX0 Bit set.
  static const uint8_t G8RC_and_G8RC_NOX0Bits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // F8RC Register Class...
  static const MCPhysReg F8RC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, PPC_F31, PPC_F30, PPC_F29, PPC_F28, PPC_F27, PPC_F26, PPC_F25, PPC_F24, PPC_F23, PPC_F22, PPC_F21, PPC_F20, PPC_F19, PPC_F18, PPC_F17, PPC_F16, PPC_F15, PPC_F14, 
  };

  // F8RC Bit set.
  static const uint8_t F8RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // SPERC Register Class...
  static const MCPhysReg SPERC[] = {
    PPC_S2, PPC_S3, PPC_S4, PPC_S5, PPC_S6, PPC_S7, PPC_S8, PPC_S9, PPC_S10, PPC_S11, PPC_S12, PPC_S30, PPC_S29, PPC_S28, PPC_S27, PPC_S26, PPC_S25, PPC_S24, PPC_S23, PPC_S22, PPC_S21, PPC_S20, PPC_S19, PPC_S18, PPC_S17, PPC_S16, PPC_S15, PPC_S14, PPC_S13, PPC_S31, PPC_S0, PPC_S1, 
  };

  // SPERC Bit set.
  static const uint8_t SPERCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VFRC Register Class...
  static const MCPhysReg VFRC[] = {
    PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, PPC_VF31, PPC_VF30, PPC_VF29, PPC_VF28, PPC_VF27, PPC_VF26, PPC_VF25, PPC_VF24, PPC_VF23, PPC_VF22, PPC_VF21, PPC_VF20, 
  };

  // VFRC Bit set.
  static const uint8_t VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // SPERC_with_sub_32_in_GPRC_NOR0 Register Class...
  static const MCPhysReg SPERC_with_sub_32_in_GPRC_NOR0[] = {
    PPC_S2, PPC_S3, PPC_S4, PPC_S5, PPC_S6, PPC_S7, PPC_S8, PPC_S9, PPC_S10, PPC_S11, PPC_S12, PPC_S30, PPC_S29, PPC_S28, PPC_S27, PPC_S26, PPC_S25, PPC_S24, PPC_S23, PPC_S22, PPC_S21, PPC_S20, PPC_S19, PPC_S18, PPC_S17, PPC_S16, PPC_S15, PPC_S14, PPC_S13, PPC_S31, PPC_S1, 
  };

  // SPERC_with_sub_32_in_GPRC_NOR0 Bit set.
  static const uint8_t SPERC_with_sub_32_in_GPRC_NOR0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // SPILLTOVSRRC_and_VFRC Register Class...
  static const MCPhysReg SPILLTOVSRRC_and_VFRC[] = {
    PPC_VF2, PPC_VF3, PPC_VF4, PPC_VF5, PPC_VF0, PPC_VF1, PPC_VF6, PPC_VF7, PPC_VF8, PPC_VF9, PPC_VF10, PPC_VF11, PPC_VF12, PPC_VF13, PPC_VF14, PPC_VF15, PPC_VF16, PPC_VF17, PPC_VF18, PPC_VF19, 
  };

  // SPILLTOVSRRC_and_VFRC Bit set.
  static const uint8_t SPILLTOVSRRC_and_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // SPILLTOVSRRC_and_F4RC Register Class...
  static const MCPhysReg SPILLTOVSRRC_and_F4RC[] = {
    PPC_F0, PPC_F1, PPC_F2, PPC_F3, PPC_F4, PPC_F5, PPC_F6, PPC_F7, PPC_F8, PPC_F9, PPC_F10, PPC_F11, PPC_F12, PPC_F13, 
  };

  // SPILLTOVSRRC_and_F4RC Bit set.
  static const uint8_t SPILLTOVSRRC_and_F4RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 
  };

  // CTRRC8 Register Class...
  static const MCPhysReg CTRRC8[] = {
    PPC_CTR8, 
  };

  // CTRRC8 Bit set.
  static const uint8_t CTRRC8Bits[] = {
    0x00, 0x00, 0x00, 0x10, 
  };

  // LR8RC Register Class...
  static const MCPhysReg LR8RC[] = {
    PPC_LR8, 
  };

  // LR8RC Bit set.
  static const uint8_t LR8RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // VSRC Register Class...
  static const MCPhysReg VSRC[] = {
    PPC_VSL0, PPC_VSL1, PPC_VSL2, PPC_VSL3, PPC_VSL4, PPC_VSL5, PPC_VSL6, PPC_VSL7, PPC_VSL8, PPC_VSL9, PPC_VSL10, PPC_VSL11, PPC_VSL12, PPC_VSL13, PPC_VSL31, PPC_VSL30, PPC_VSL29, PPC_VSL28, PPC_VSL27, PPC_VSL26, PPC_VSL25, PPC_VSL24, PPC_VSL23, PPC_VSL22, PPC_VSL21, PPC_VSL20, PPC_VSL19, PPC_VSL18, PPC_VSL17, PPC_VSL16, PPC_VSL15, PPC_VSL14, PPC_V2, PPC_V3, PPC_V4, PPC_V5, PPC_V0, PPC_V1, PPC_V6, PPC_V7, PPC_V8, PPC_V9, PPC_V10, PPC_V11, PPC_V12, PPC_V13, PPC_V14, PPC_V15, PPC_V16, PPC_V17, PPC_V18, PPC_V19, PPC_V31, PPC_V30, PPC_V29, PPC_V28, PPC_V27, PPC_V26, PPC_V25, PPC_V24, PPC_V23, PPC_V22, PPC_V21, PPC_V20, 
  };

  // VSRC Bit set.
  static const uint8_t VSRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg VSRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_VSL0, PPC_VSL1, PPC_VSL2, PPC_VSL3, PPC_VSL4, PPC_VSL5, PPC_VSL6, PPC_VSL7, PPC_VSL8, PPC_VSL9, PPC_VSL10, PPC_VSL11, PPC_VSL12, PPC_VSL13, PPC_V2, PPC_V3, PPC_V4, PPC_V5, PPC_V0, PPC_V1, PPC_V6, PPC_V7, PPC_V8, PPC_V9, PPC_V10, PPC_V11, PPC_V12, PPC_V13, PPC_V14, PPC_V15, PPC_V16, PPC_V17, PPC_V18, PPC_V19, 
  };

  // VSRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t VSRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // VRRC Register Class...
  static const MCPhysReg VRRC[] = {
    PPC_V2, PPC_V3, PPC_V4, PPC_V5, PPC_V0, PPC_V1, PPC_V6, PPC_V7, PPC_V8, PPC_V9, PPC_V10, PPC_V11, PPC_V12, PPC_V13, PPC_V14, PPC_V15, PPC_V16, PPC_V17, PPC_V18, PPC_V19, PPC_V31, PPC_V30, PPC_V29, PPC_V28, PPC_V27, PPC_V26, PPC_V25, PPC_V24, PPC_V23, PPC_V22, PPC_V21, PPC_V20, 
  };

  // VRRC Bit set.
  static const uint8_t VRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSLRC Register Class...
  static const MCPhysReg VSLRC[] = {
    PPC_VSL0, PPC_VSL1, PPC_VSL2, PPC_VSL3, PPC_VSL4, PPC_VSL5, PPC_VSL6, PPC_VSL7, PPC_VSL8, PPC_VSL9, PPC_VSL10, PPC_VSL11, PPC_VSL12, PPC_VSL13, PPC_VSL31, PPC_VSL30, PPC_VSL29, PPC_VSL28, PPC_VSL27, PPC_VSL26, PPC_VSL25, PPC_VSL24, PPC_VSL23, PPC_VSL22, PPC_VSL21, PPC_VSL20, PPC_VSL19, PPC_VSL18, PPC_VSL17, PPC_VSL16, PPC_VSL15, PPC_VSL14, 
  };

  // VSLRC Bit set.
  static const uint8_t VSLRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VRRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg VRRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_V2, PPC_V3, PPC_V4, PPC_V5, PPC_V0, PPC_V1, PPC_V6, PPC_V7, PPC_V8, PPC_V9, PPC_V10, PPC_V11, PPC_V12, PPC_V13, PPC_V14, PPC_V15, PPC_V16, PPC_V17, PPC_V18, PPC_V19, 
  };

  // VRRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t VRRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // G8pRC Register Class...
  static const MCPhysReg G8pRC[] = {
    PPC_G8p1, PPC_G8p2, PPC_G8p3, PPC_G8p4, PPC_G8p5, PPC_G8p14, PPC_G8p13, PPC_G8p12, PPC_G8p11, PPC_G8p10, PPC_G8p9, PPC_G8p8, PPC_G8p7, PPC_G8p15, PPC_G8p6, PPC_G8p0, 
  };

  // G8pRC Bit set.
  static const uint8_t G8pRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
  };

  // G8pRC_with_sub_32_in_GPRC_NOR0 Register Class...
  static const MCPhysReg G8pRC_with_sub_32_in_GPRC_NOR0[] = {
    PPC_G8p1, PPC_G8p2, PPC_G8p3, PPC_G8p4, PPC_G8p5, PPC_G8p14, PPC_G8p13, PPC_G8p12, PPC_G8p11, PPC_G8p10, PPC_G8p9, PPC_G8p8, PPC_G8p7, PPC_G8p15, PPC_G8p6, 
  };

  // G8pRC_with_sub_32_in_GPRC_NOR0 Bit set.
  static const uint8_t G8pRC_with_sub_32_in_GPRC_NOR0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 
  };

  // VSLRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg VSLRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_VSL0, PPC_VSL1, PPC_VSL2, PPC_VSL3, PPC_VSL4, PPC_VSL5, PPC_VSL6, PPC_VSL7, PPC_VSL8, PPC_VSL9, PPC_VSL10, PPC_VSL11, PPC_VSL12, PPC_VSL13, 
  };

  // VSLRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t VSLRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // VSRpRC Register Class...
  static const MCPhysReg VSRpRC[] = {
    PPC_VSRp17, PPC_VSRp18, PPC_VSRp16, PPC_VSRp19, PPC_VSRp20, PPC_VSRp21, PPC_VSRp22, PPC_VSRp23, PPC_VSRp24, PPC_VSRp25, PPC_VSRp31, PPC_VSRp30, PPC_VSRp29, PPC_VSRp28, PPC_VSRp27, PPC_VSRp26, PPC_VSRp0, PPC_VSRp1, PPC_VSRp2, PPC_VSRp3, PPC_VSRp4, PPC_VSRp5, PPC_VSRp6, PPC_VSRp15, PPC_VSRp14, PPC_VSRp13, PPC_VSRp12, PPC_VSRp11, PPC_VSRp10, PPC_VSRp9, PPC_VSRp8, PPC_VSRp7, 
  };

  // VSRpRC Bit set.
  static const uint8_t VSRpRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_VSRp17, PPC_VSRp18, PPC_VSRp16, PPC_VSRp19, PPC_VSRp20, PPC_VSRp21, PPC_VSRp22, PPC_VSRp23, PPC_VSRp24, PPC_VSRp25, PPC_VSRp0, PPC_VSRp1, PPC_VSRp2, PPC_VSRp3, PPC_VSRp4, PPC_VSRp5, PPC_VSRp6, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x80, 0xff, 0x01, 
  };

  // VSRpRC_with_sub_64_in_F4RC Register Class...
  static const MCPhysReg VSRpRC_with_sub_64_in_F4RC[] = {
    PPC_VSRp0, PPC_VSRp1, PPC_VSRp2, PPC_VSRp3, PPC_VSRp4, PPC_VSRp5, PPC_VSRp6, PPC_VSRp15, PPC_VSRp14, PPC_VSRp13, PPC_VSRp12, PPC_VSRp11, PPC_VSRp10, PPC_VSRp9, PPC_VSRp8, PPC_VSRp7, 
  };

  // VSRpRC_with_sub_64_in_F4RC Bit set.
  static const uint8_t VSRpRC_with_sub_64_in_F4RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_VFRC Register Class...
  static const MCPhysReg VSRpRC_with_sub_64_in_VFRC[] = {
    PPC_VSRp17, PPC_VSRp18, PPC_VSRp16, PPC_VSRp19, PPC_VSRp20, PPC_VSRp21, PPC_VSRp22, PPC_VSRp23, PPC_VSRp24, PPC_VSRp25, PPC_VSRp31, PPC_VSRp30, PPC_VSRp29, PPC_VSRp28, PPC_VSRp27, PPC_VSRp26, 
  };

  // VSRpRC_with_sub_64_in_VFRC Bit set.
  static const uint8_t VSRpRC_with_sub_64_in_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC Register Class...
  static const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC[] = {
    PPC_VSRp17, PPC_VSRp18, PPC_VSRp16, PPC_VSRp19, PPC_VSRp20, PPC_VSRp21, PPC_VSRp22, PPC_VSRp23, PPC_VSRp24, PPC_VSRp25, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC Bit set.
  static const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC Register Class...
  static const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC[] = {
    PPC_VSRp0, PPC_VSRp1, PPC_VSRp2, PPC_VSRp3, PPC_VSRp4, PPC_VSRp5, PPC_VSRp6, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC Bit set.
  static const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // ACCRC Register Class...
  static const MCPhysReg ACCRC[] = {
    PPC_ACC0, PPC_ACC1, PPC_ACC2, PPC_ACC3, PPC_ACC4, PPC_ACC5, PPC_ACC6, PPC_ACC7, 
  };

  // ACCRC Bit set.
  static const uint8_t ACCRCBits[] = {
    0x00, 0xf8, 0x07, 
  };

  // UACCRC Register Class...
  static const MCPhysReg UACCRC[] = {
    PPC_UACC0, PPC_UACC1, PPC_UACC2, PPC_UACC3, PPC_UACC4, PPC_UACC5, PPC_UACC6, PPC_UACC7, 
  };

  // UACCRC Bit set.
  static const uint8_t UACCRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 
  };

  // ACCRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg ACCRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_ACC0, PPC_ACC1, PPC_ACC2, PPC_ACC3, 
  };

  // ACCRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t ACCRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x78, 
  };

  // UACCRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg UACCRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC_UACC0, PPC_UACC1, PPC_UACC2, PPC_UACC3, 
  };

  // UACCRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t UACCRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  };

  // ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC[] = {
    PPC_ACC0, PPC_ACC1, PPC_ACC2, 
  };

  // ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x38, 
  };

  // UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Register Class...
  static const MCPhysReg UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC[] = {
    PPC_UACC0, PPC_UACC1, PPC_UACC2, 
  };

  // UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Bit set.
  static const uint8_t UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

// end of register classes misc


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
static const char PPCRegClassStrings[] = {
  /* 0 */ "GPRC_and_GPRC_NOR0\0"
  /* 19 */ "SPERC_with_sub_32_in_GPRC_NOR0\0"
  /* 50 */ "G8pRC_with_sub_32_in_GPRC_NOR0\0"
  /* 81 */ "G8RC_and_G8RC_NOX0\0"
  /* 100 */ "CTRRC8\0"
  /* 107 */ "VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC\0"
  /* 151 */ "VSRpRC_with_sub_64_in_F4RC\0"
  /* 178 */ "F8RC\0"
  /* 183 */ "G8RC\0"
  /* 188 */ "LR8RC\0"
  /* 194 */ "UACCRC\0"
  /* 201 */ "SPERC\0"
  /* 207 */ "VRSAVERC\0"
  /* 216 */ "SPILLTOVSRRC_and_VSFRC\0"
  /* 239 */ "VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC\0"
  /* 283 */ "VSRpRC_with_sub_64_in_VFRC\0"
  /* 310 */ "VSLRC\0"
  /* 316 */ "GPRC\0"
  /* 321 */ "CRRC\0"
  /* 326 */ "LRRC\0"
  /* 331 */ "UACCRC_with_sub_64_in_SPILLTOVSRRC\0"
  /* 366 */ "VSLRC_with_sub_64_in_SPILLTOVSRRC\0"
  /* 400 */ "VRRC_with_sub_64_in_SPILLTOVSRRC\0"
  /* 433 */ "VSRC_with_sub_64_in_SPILLTOVSRRC\0"
  /* 466 */ "VSRpRC_with_sub_64_in_SPILLTOVSRRC\0"
  /* 501 */ "UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC\0"
  /* 551 */ "CTRRC\0"
  /* 557 */ "VRRC\0"
  /* 562 */ "VSSRC\0"
  /* 568 */ "VSRC\0"
  /* 573 */ "CRBITRC\0"
  /* 581 */ "CARRYRC\0"
  /* 589 */ "G8pRC\0"
  /* 595 */ "VSRpRC\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

static const MCRegisterClass PPCMCRegisterClasses[] = {
  { VSSRC, VSSRCBits, sizeof(VSSRCBits) },
  { GPRC, GPRCBits, sizeof(GPRCBits) },
  { GPRC_NOR0, GPRC_NOR0Bits, sizeof(GPRC_NOR0Bits) },
  { GPRC_and_GPRC_NOR0, GPRC_and_GPRC_NOR0Bits, sizeof(GPRC_and_GPRC_NOR0Bits) },
  { CRBITRC, CRBITRCBits, sizeof(CRBITRCBits) },
  { F4RC, F4RCBits, sizeof(F4RCBits) },
  { CRRC, CRRCBits, sizeof(CRRCBits) },
  { CARRYRC, CARRYRCBits, sizeof(CARRYRCBits) },
  { CTRRC, CTRRCBits, sizeof(CTRRCBits) },
  { LRRC, LRRCBits, sizeof(LRRCBits) },
  { VRSAVERC, VRSAVERCBits, sizeof(VRSAVERCBits) },
  { SPILLTOVSRRC, SPILLTOVSRRCBits, sizeof(SPILLTOVSRRCBits) },
  { VSFRC, VSFRCBits, sizeof(VSFRCBits) },
  { G8RC, G8RCBits, sizeof(G8RCBits) },
  { G8RC_NOX0, G8RC_NOX0Bits, sizeof(G8RC_NOX0Bits) },
  { SPILLTOVSRRC_and_VSFRC, SPILLTOVSRRC_and_VSFRCBits, sizeof(SPILLTOVSRRC_and_VSFRCBits) },
  { G8RC_and_G8RC_NOX0, G8RC_and_G8RC_NOX0Bits, sizeof(G8RC_and_G8RC_NOX0Bits) },
  { F8RC, F8RCBits, sizeof(F8RCBits) },
  { SPERC, SPERCBits, sizeof(SPERCBits) },
  { VFRC, VFRCBits, sizeof(VFRCBits) },
  { SPERC_with_sub_32_in_GPRC_NOR0, SPERC_with_sub_32_in_GPRC_NOR0Bits, sizeof(SPERC_with_sub_32_in_GPRC_NOR0Bits) },
  { SPILLTOVSRRC_and_VFRC, SPILLTOVSRRC_and_VFRCBits, sizeof(SPILLTOVSRRC_and_VFRCBits) },
  { SPILLTOVSRRC_and_F4RC, SPILLTOVSRRC_and_F4RCBits, sizeof(SPILLTOVSRRC_and_F4RCBits) },
  { CTRRC8, CTRRC8Bits, sizeof(CTRRC8Bits) },
  { LR8RC, LR8RCBits, sizeof(LR8RCBits) },
  { VSRC, VSRCBits, sizeof(VSRCBits) },
  { VSRC_with_sub_64_in_SPILLTOVSRRC, VSRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(VSRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { VRRC, VRRCBits, sizeof(VRRCBits) },
  { VSLRC, VSLRCBits, sizeof(VSLRCBits) },
  { VRRC_with_sub_64_in_SPILLTOVSRRC, VRRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(VRRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { G8pRC, G8pRCBits, sizeof(G8pRCBits) },
  { G8pRC_with_sub_32_in_GPRC_NOR0, G8pRC_with_sub_32_in_GPRC_NOR0Bits, sizeof(G8pRC_with_sub_32_in_GPRC_NOR0Bits) },
  { VSLRC_with_sub_64_in_SPILLTOVSRRC, VSLRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(VSLRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { VSRpRC, VSRpRCBits, sizeof(VSRpRCBits) },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC, VSRpRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { VSRpRC_with_sub_64_in_F4RC, VSRpRC_with_sub_64_in_F4RCBits, sizeof(VSRpRC_with_sub_64_in_F4RCBits) },
  { VSRpRC_with_sub_64_in_VFRC, VSRpRC_with_sub_64_in_VFRCBits, sizeof(VSRpRC_with_sub_64_in_VFRCBits) },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC, VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits) },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC, VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits) },
  { ACCRC, ACCRCBits, sizeof(ACCRCBits) },
  { UACCRC, UACCRCBits, sizeof(UACCRCBits) },
  { ACCRC_with_sub_64_in_SPILLTOVSRRC, ACCRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(ACCRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { UACCRC_with_sub_64_in_SPILLTOVSRRC, UACCRC_with_sub_64_in_SPILLTOVSRRCBits, sizeof(UACCRC_with_sub_64_in_SPILLTOVSRRCBits) },
  { ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC, ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits, sizeof(ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits) },
  { UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC, UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits, sizeof(UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits) },
};

#endif // GET_REGINFO_MC_DESC

#ifdef GET_ASM_WRITER
#undef GET_ASM_WRITER

static void llvm_unreachable(const char * info) {}
static void assert(int val) {}
typedef struct MCMnemonic {
    const char *first;
    uint64_t second;
} MCMnemonic;

static MCMnemonic createMnemonic(const char* first, uint64_t second) {
    MCMnemonic mnemonic;
    mnemonic.first = first;
    mnemonic.second = second;
    return mnemonic;
}

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MCMnemonic PPC_getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "#EH_SjLj_Setup\t\0"
  /* 16 */ "bdzla+ \0"
  /* 24 */ "bdnzla+ \0"
  /* 33 */ "bdza+ \0"
  /* 40 */ "bdnza+ \0"
  /* 48 */ "bdzl+ \0"
  /* 55 */ "bdnzl+ \0"
  /* 63 */ "bdz+ \0"
  /* 69 */ "bdnz+ \0"
  /* 76 */ "bcl 20, 31, \0"
  /* 89 */ "bctrl\n\tld 2, \0"
  /* 103 */ "bctrl\n\tlwz 2, \0"
  /* 118 */ "bc 12, \0"
  /* 126 */ "bcl 12, \0"
  /* 135 */ "bclrl 12, \0"
  /* 146 */ "bcctrl 12, \0"
  /* 158 */ "bclr 12, \0"
  /* 168 */ "bcctr 12, \0"
  /* 179 */ "bc 4, \0"
  /* 186 */ "bcl 4, \0"
  /* 194 */ "bclrl 4, \0"
  /* 204 */ "bcctrl 4, \0"
  /* 215 */ "bclr 4, \0"
  /* 224 */ "bcctr 4, \0"
  /* 234 */ "mtspr 256, \0"
  /* 246 */ "bdzla- \0"
  /* 254 */ "bdnzla- \0"
  /* 263 */ "bdza- \0"
  /* 270 */ "bdnza- \0"
  /* 278 */ "bdzl- \0"
  /* 285 */ "bdnzl- \0"
  /* 293 */ "bdz- \0"
  /* 299 */ "bdnz- \0"
  /* 306 */ "vcmpneb. \0"
  /* 316 */ "vcmpgtsb. \0"
  /* 327 */ "extsb. \0"
  /* 335 */ "vcmpequb. \0"
  /* 346 */ "fsub. \0"
  /* 353 */ "fmsub. \0"
  /* 361 */ "fnmsub. \0"
  /* 370 */ "vcmpgtub. \0"
  /* 381 */ "vcmpnezb. \0"
  /* 392 */ "addc. \0"
  /* 399 */ "andc. \0"
  /* 406 */ "tabortdc. \0"
  /* 417 */ "subfc. \0"
  /* 425 */ "subic. \0"
  /* 433 */ "addic. \0"
  /* 441 */ "rldic. \0"
  /* 449 */ "bcdtrunc. \0"
  /* 460 */ "bcdutrunc. \0"
  /* 472 */ "orc. \0"
  /* 478 */ "tabortwc. \0"
  /* 489 */ "srad. \0"
  /* 496 */ "fadd. \0"
  /* 503 */ "fmadd. \0"
  /* 511 */ "fnmadd. \0"
  /* 520 */ "mulhd. \0"
  /* 528 */ "fcfid. \0"
  /* 536 */ "fctid. \0"
  /* 544 */ "mulld. \0"
  /* 552 */ "sld. \0"
  /* 558 */ "nand. \0"
  /* 565 */ "tend. \0"
  /* 572 */ "srd. \0"
  /* 578 */ "vcmpgtsd. \0"
  /* 589 */ "vcmpequd. \0"
  /* 600 */ "vcmpgtud. \0"
  /* 611 */ "divd. \0"
  /* 618 */ "cntlzd. \0"
  /* 627 */ "cnttzd. \0"
  /* 636 */ "adde. \0"
  /* 643 */ "divde. \0"
  /* 651 */ "slbfee. \0"
  /* 660 */ "subfe. \0"
  /* 668 */ "addme. \0"
  /* 676 */ "subfme. \0"
  /* 685 */ "fre. \0"
  /* 691 */ "frsqrte. \0"
  /* 701 */ "paste. \0"
  /* 709 */ "divwe. \0"
  /* 717 */ "addze. \0"
  /* 725 */ "subfze. \0"
  /* 734 */ "subf. \0"
  /* 741 */ "mtfsf. \0"
  /* 749 */ "fneg. \0"
  /* 756 */ "vcmpneh. \0"
  /* 766 */ "vcmpgtsh. \0"
  /* 777 */ "extsh. \0"
  /* 785 */ "vcmpequh. \0"
  /* 796 */ "vcmpgtuh. \0"
  /* 807 */ "vcmpnezh. \0"
  /* 818 */ "tabortdci. \0"
  /* 830 */ "tabortwci. \0"
  /* 842 */ "sradi. \0"
  /* 850 */ "clrlsldi. \0"
  /* 861 */ "extldi. \0"
  /* 870 */ "andi. \0"
  /* 877 */ "clrrdi. \0"
  /* 886 */ "insrdi. \0"
  /* 895 */ "rotrdi. \0"
  /* 904 */ "extrdi. \0"
  /* 913 */ "mtfsfi. \0"
  /* 922 */ "extswsli. \0"
  /* 933 */ "rldimi. \0"
  /* 942 */ "rlwimi. \0"
  /* 951 */ "srawi. \0"
  /* 959 */ "clrlslwi. \0"
  /* 970 */ "inslwi. \0"
  /* 979 */ "extlwi. \0"
  /* 988 */ "clrrwi. \0"
  /* 997 */ "insrwi. \0"
  /* 1006 */ "rotrwi. \0"
  /* 1015 */ "extrwi. \0"
  /* 1024 */ "vstribl. \0"
  /* 1034 */ "rldcl. \0"
  /* 1042 */ "rldicl. \0"
  /* 1051 */ "fsel. \0"
  /* 1058 */ "vstrihl. \0"
  /* 1068 */ "fmul. \0"
  /* 1075 */ "treclaim. \0"
  /* 1086 */ "frim. \0"
  /* 1093 */ "rlwinm. \0"
  /* 1102 */ "rlwnm. \0"
  /* 1110 */ "bcdcfn. \0"
  /* 1119 */ "bcdcpsgn. \0"
  /* 1130 */ "fcpsgn. \0"
  /* 1139 */ "bcdsetsgn. \0"
  /* 1151 */ "tbegin. \0"
  /* 1160 */ "frin. \0"
  /* 1167 */ "bcdctn. \0"
  /* 1176 */ "addco. \0"
  /* 1184 */ "subfco. \0"
  /* 1193 */ "addo. \0"
  /* 1200 */ "mulldo. \0"
  /* 1209 */ "divdo. \0"
  /* 1217 */ "addeo. \0"
  /* 1225 */ "divdeo. \0"
  /* 1234 */ "subfeo. \0"
  /* 1243 */ "addmeo. \0"
  /* 1252 */ "subfmeo. \0"
  /* 1262 */ "divweo. \0"
  /* 1271 */ "addzeo. \0"
  /* 1280 */ "subfzeo. \0"
  /* 1290 */ "subfo. \0"
  /* 1298 */ "nego. \0"
  /* 1305 */ "divduo. \0"
  /* 1314 */ "divdeuo. \0"
  /* 1324 */ "divweuo. \0"
  /* 1334 */ "divwuo. \0"
  /* 1343 */ "mullwo. \0"
  /* 1352 */ "divwo. \0"
  /* 1360 */ "xvcmpgedp. \0"
  /* 1372 */ "xvcmpeqdp. \0"
  /* 1384 */ "xvcmpgtdp. \0"
  /* 1396 */ "vcmpbfp. \0"
  /* 1406 */ "vcmpgefp. \0"
  /* 1417 */ "vcmpeqfp. \0"
  /* 1428 */ "vcmpgtfp. \0"
  /* 1439 */ "frip. \0"
  /* 1446 */ "xvcmpgesp. \0"
  /* 1458 */ "xvcmpeqsp. \0"
  /* 1470 */ "frsp. \0"
  /* 1477 */ "xvcmpgtsp. \0"
  /* 1489 */ "icblq. \0"
  /* 1497 */ "bcdcfsq. \0"
  /* 1507 */ "bcdctsq. \0"
  /* 1517 */ "vcmpgtsq. \0"
  /* 1528 */ "vcmpequq. \0"
  /* 1539 */ "vcmpgtuq. \0"
  /* 1550 */ "vstribr. \0"
  /* 1560 */ "rldcr. \0"
  /* 1568 */ "rldicr. \0"
  /* 1577 */ "vstrihr. \0"
  /* 1587 */ "fmr. \0"
  /* 1593 */ "nor. \0"
  /* 1599 */ "xor. \0"
  /* 1605 */ "bcdsr. \0"
  /* 1613 */ "tsr. \0"
  /* 1619 */ "fabs. \0"
  /* 1626 */ "fnabs. \0"
  /* 1634 */ "fsubs. \0"
  /* 1642 */ "fmsubs. \0"
  /* 1651 */ "fnmsubs. \0"
  /* 1661 */ "bcds. \0"
  /* 1668 */ "fadds. \0"
  /* 1676 */ "fmadds. \0"
  /* 1685 */ "fnmadds. \0"
  /* 1695 */ "fcfids. \0"
  /* 1704 */ "fres. \0"
  /* 1711 */ "frsqrtes. \0"
  /* 1722 */ "mffs. \0"
  /* 1729 */ "andis. \0"
  /* 1737 */ "fmuls. \0"
  /* 1745 */ "fsqrts. \0"
  /* 1754 */ "bcdus. \0"
  /* 1762 */ "fcfidus. \0"
  /* 1772 */ "fdivs. \0"
  /* 1780 */ "tabort. \0"
  /* 1789 */ "fsqrt. \0"
  /* 1797 */ "mulhdu. \0"
  /* 1806 */ "fcfidu. \0"
  /* 1815 */ "fctidu. \0"
  /* 1824 */ "divdu. \0"
  /* 1832 */ "divdeu. \0"
  /* 1841 */ "divweu. \0"
  /* 1850 */ "mulhwu. \0"
  /* 1859 */ "fctiwu. \0"
  /* 1868 */ "divwu. \0"
  /* 1876 */ "fdiv. \0"
  /* 1883 */ "eqv. \0"
  /* 1889 */ "sraw. \0"
  /* 1896 */ "vcmpnew. \0"
  /* 1906 */ "mulhw. \0"
  /* 1914 */ "fctiw. \0"
  /* 1922 */ "mullw. \0"
  /* 1930 */ "slw. \0"
  /* 1936 */ "srw. \0"
  /* 1942 */ "vcmpgtsw. \0"
  /* 1953 */ "extsw. \0"
  /* 1961 */ "vcmpequw. \0"
  /* 1972 */ "vcmpgtuw. \0"
  /* 1983 */ "divw. \0"
  /* 1990 */ "vcmpnezw. \0"
  /* 2001 */ "cntlzw. \0"
  /* 2010 */ "cnttzw. \0"
  /* 2019 */ "stbcx. \0"
  /* 2027 */ "stdcx. \0"
  /* 2035 */ "sthcx. \0"
  /* 2043 */ "stqcx. \0"
  /* 2051 */ "stwcx. \0"
  /* 2059 */ "tlbsx. \0"
  /* 2067 */ "fctidz. \0"
  /* 2076 */ "bcdcfz. \0"
  /* 2085 */ "friz. \0"
  /* 2092 */ "bcdctz. \0"
  /* 2101 */ "fctiduz. \0"
  /* 2111 */ "fctiwuz. \0"
  /* 2121 */ "fctiwz. \0"
  /* 2130 */ "mtfsb0 \0"
  /* 2138 */ "mtfsb1 \0"
  /* 2146 */ "#ATOMIC_CMP_SWAP_I32 \0"
  /* 2168 */ "pmxvbf16ger2 \0"
  /* 2182 */ "pmxvf16ger2 \0"
  /* 2195 */ "pmxvi16ger2 \0"
  /* 2208 */ "pmxvi8ger4 \0"
  /* 2220 */ "#ATOMIC_CMP_SWAP_I16 \0"
  /* 2242 */ "xvcvspbf16 \0"
  /* 2254 */ "#TC_RETURNa8 \0"
  /* 2268 */ "#TC_RETURNd8 \0"
  /* 2282 */ "#TC_RETURNr8 \0"
  /* 2296 */ "pmxvi4ger8 \0"
  /* 2308 */ "#BUILD_UACC \0"
  /* 2321 */ "#ADJCALLSTACKDOWN \0"
  /* 2340 */ "#ADJCALLSTACKUP \0"
  /* 2357 */ "#TC_RETURNa \0"
  /* 2370 */ "evmhegsmfaa \0"
  /* 2383 */ "evmhogsmfaa \0"
  /* 2396 */ "evmwsmfaa \0"
  /* 2407 */ "evmwssfaa \0"
  /* 2418 */ "evmhegsmiaa \0"
  /* 2431 */ "evmhogsmiaa \0"
  /* 2444 */ "evmwsmiaa \0"
  /* 2455 */ "evmhegumiaa \0"
  /* 2468 */ "evmhogumiaa \0"
  /* 2481 */ "evmwumiaa \0"
  /* 2492 */ "dcba \0"
  /* 2498 */ "bca \0"
  /* 2503 */ "evmhesmfa \0"
  /* 2514 */ "evmwhsmfa \0"
  /* 2525 */ "evmhosmfa \0"
  /* 2536 */ "evmwsmfa \0"
  /* 2546 */ "evmhessfa \0"
  /* 2557 */ "evmwhssfa \0"
  /* 2568 */ "evmhossfa \0"
  /* 2579 */ "evmwssfa \0"
  /* 2589 */ "plha \0"
  /* 2595 */ "evmhesmia \0"
  /* 2606 */ "evmwhsmia \0"
  /* 2617 */ "evmhosmia \0"
  /* 2628 */ "evmwsmia \0"
  /* 2638 */ "evmheumia \0"
  /* 2649 */ "evmwhumia \0"
  /* 2660 */ "evmwlumia \0"
  /* 2671 */ "evmhoumia \0"
  /* 2682 */ "evmwumia \0"
  /* 2692 */ "bla \0"
  /* 2697 */ "bcla \0"
  /* 2703 */ "bdzla \0"
  /* 2710 */ "bdnzla \0"
  /* 2718 */ "evmra \0"
  /* 2725 */ "plwa \0"
  /* 2731 */ "mtvsrwa \0"
  /* 2740 */ "bdza \0"
  /* 2746 */ "bdnza \0"
  /* 2753 */ "vsrab \0"
  /* 2760 */ "rfebb \0"
  /* 2767 */ "vcntmbb \0"
  /* 2776 */ "xvtlsbb \0"
  /* 2785 */ "vclzlsbb \0"
  /* 2795 */ "vctzlsbb \0"
  /* 2805 */ "vcmpneb \0"
  /* 2814 */ "vmrghb \0"
  /* 2822 */ "xxspltib \0"
  /* 2832 */ "vmrglb \0"
  /* 2840 */ "vclrlb \0"
  /* 2848 */ "vrlb \0"
  /* 2854 */ "vslb \0"
  /* 2860 */ "vpmsumb \0"
  /* 2869 */ "vgnb \0"
  /* 2875 */ "cmpb \0"
  /* 2881 */ "cmpeqb \0"
  /* 2889 */ "cmprb \0"
  /* 2896 */ "vclrrb \0"
  /* 2904 */ "vsrb \0"
  /* 2910 */ "vmulesb \0"
  /* 2919 */ "vavgsb \0"
  /* 2927 */ "vupkhsb \0"
  /* 2936 */ "vspltisb \0"
  /* 2946 */ "vupklsb \0"
  /* 2955 */ "vminsb \0"
  /* 2963 */ "vmulosb \0"
  /* 2972 */ "vcmpgtsb \0"
  /* 2982 */ "evextsb \0"
  /* 2991 */ "vmaxsb \0"
  /* 2999 */ "setb \0"
  /* 3005 */ "mftb \0"
  /* 3011 */ "vspltb \0"
  /* 3019 */ "vpopcntb \0"
  /* 3029 */ "vinsertb \0"
  /* 3039 */ "pstb \0"
  /* 3045 */ "vabsdub \0"
  /* 3054 */ "vmuleub \0"
  /* 3063 */ "vavgub \0"
  /* 3071 */ "vminub \0"
  /* 3079 */ "vmuloub \0"
  /* 3088 */ "vcmpequb \0"
  /* 3098 */ "efdsub \0"
  /* 3106 */ "fsub \0"
  /* 3112 */ "fmsub \0"
  /* 3119 */ "fnmsub \0"
  /* 3127 */ "efssub \0"
  /* 3135 */ "evfssub \0"
  /* 3144 */ "vextractub \0"
  /* 3156 */ "vcmpgtub \0"
  /* 3166 */ "vmaxub \0"
  /* 3174 */ "xxblendvb \0"
  /* 3185 */ "vcmpnezb \0"
  /* 3195 */ "vclzb \0"
  /* 3202 */ "vctzb \0"
  /* 3209 */ "setnbc \0"
  /* 3217 */ "setbc \0"
  /* 3224 */ "xxmfacc \0"
  /* 3233 */ "xxmtacc \0"
  /* 3242 */ "addc \0"
  /* 3248 */ "xxlandc \0"
  /* 3257 */ "crandc \0"
  /* 3265 */ "evandc \0"
  /* 3273 */ "subfc \0"
  /* 3280 */ "subic \0"
  /* 3287 */ "addic \0"
  /* 3294 */ "rldic \0"
  /* 3301 */ "subfic \0"
  /* 3309 */ "xsrdpic \0"
  /* 3318 */ "xvrdpic \0"
  /* 3327 */ "xvrspic \0"
  /* 3336 */ "icblc \0"
  /* 3343 */ "brinc \0"
  /* 3350 */ "sync \0"
  /* 3356 */ "xxlorc \0"
  /* 3364 */ "crorc \0"
  /* 3371 */ "evorc \0"
  /* 3378 */ "sc \0"
  /* 3382 */ "vextsb2d \0"
  /* 3392 */ "vextsh2d \0"
  /* 3402 */ "vextsw2d \0"
  /* 3412 */ "#TC_RETURNd \0"
  /* 3425 */ "vshasigmad \0"
  /* 3437 */ "vsrad \0"
  /* 3444 */ "vgbbd \0"
  /* 3451 */ "vcntmbd \0"
  /* 3460 */ "vprtybd \0"
  /* 3469 */ "efdadd \0"
  /* 3477 */ "fadd \0"
  /* 3483 */ "fmadd \0"
  /* 3490 */ "fnmadd \0"
  /* 3498 */ "efsadd \0"
  /* 3506 */ "evfsadd \0"
  /* 3515 */ "evldd \0"
  /* 3522 */ "mtvsrdd \0"
  /* 3531 */ "evstdd \0"
  /* 3539 */ "vcfuged \0"
  /* 3548 */ "efscfd \0"
  /* 3556 */ "plfd \0"
  /* 3562 */ "pstfd \0"
  /* 3569 */ "vnegd \0"
  /* 3576 */ "maddhd \0"
  /* 3584 */ "mulhd \0"
  /* 3591 */ "fcfid \0"
  /* 3598 */ "efdcfsid \0"
  /* 3608 */ "fctid \0"
  /* 3615 */ "efdcfuid \0"
  /* 3625 */ "tlbld \0"
  /* 3632 */ "maddld \0"
  /* 3640 */ "vmulld \0"
  /* 3648 */ "cmpld \0"
  /* 3655 */ "mfvsrld \0"
  /* 3664 */ "vrld \0"
  /* 3670 */ "vsld \0"
  /* 3676 */ "vbpermd \0"
  /* 3685 */ "vpmsumd \0"
  /* 3694 */ "xxland \0"
  /* 3702 */ "xxlnand \0"
  /* 3711 */ "crnand \0"
  /* 3719 */ "evnand \0"
  /* 3727 */ "crand \0"
  /* 3734 */ "evand \0"
  /* 3741 */ "vpdepd \0"
  /* 3749 */ "cmpd \0"
  /* 3755 */ "xxbrd \0"
  /* 3762 */ "mtmsrd \0"
  /* 3770 */ "mfvsrd \0"
  /* 3778 */ "mtvsrd \0"
  /* 3786 */ "vmodsd \0"
  /* 3794 */ "vmulesd \0"
  /* 3803 */ "vdivesd \0"
  /* 3812 */ "vmulhsd \0"
  /* 3821 */ "vminsd \0"
  /* 3829 */ "vinsd \0"
  /* 3836 */ "vmulosd \0"
  /* 3845 */ "vcmpgtsd \0"
  /* 3855 */ "vdivsd \0"
  /* 3863 */ "vmaxsd \0"
  /* 3871 */ "plxsd \0"
  /* 3878 */ "pstxsd \0"
  /* 3886 */ "vextractd \0"
  /* 3897 */ "vpopcntd \0"
  /* 3907 */ "vinsertd \0"
  /* 3917 */ "pstd \0"
  /* 3923 */ "vpextd \0"
  /* 3931 */ "vmsumcud \0"
  /* 3941 */ "vmodud \0"
  /* 3949 */ "vmuleud \0"
  /* 3958 */ "vdiveud \0"
  /* 3967 */ "vmulhud \0"
  /* 3976 */ "vminud \0"
  /* 3984 */ "vmuloud \0"
  /* 3993 */ "vcmpequd \0"
  /* 4003 */ "vcmpgtud \0"
  /* 4013 */ "vdivud \0"
  /* 4021 */ "vmaxud \0"
  /* 4029 */ "xxblendvd \0"
  /* 4040 */ "divd \0"
  /* 4046 */ "vclzd \0"
  /* 4053 */ "cntlzd \0"
  /* 4061 */ "vctzd \0"
  /* 4068 */ "cnttzd \0"
  /* 4076 */ "mfbhrbe \0"
  /* 4085 */ "mffsce \0"
  /* 4093 */ "adde \0"
  /* 4099 */ "divde \0"
  /* 4106 */ "slbmfee \0"
  /* 4115 */ "wrtee \0"
  /* 4122 */ "subfe \0"
  /* 4129 */ "evlwhe \0"
  /* 4137 */ "evstwhe \0"
  /* 4146 */ "slbie \0"
  /* 4153 */ "tlbie \0"
  /* 4160 */ "addme \0"
  /* 4167 */ "subfme \0"
  /* 4175 */ "tlbre \0"
  /* 4182 */ "fre \0"
  /* 4187 */ "slbmte \0"
  /* 4195 */ "frsqrte \0"
  /* 4204 */ "tlbwe \0"
  /* 4211 */ "divwe \0"
  /* 4218 */ "evstwwe \0"
  /* 4227 */ "addze \0"
  /* 4234 */ "subfze \0"
  /* 4242 */ "dcbf \0"
  /* 4248 */ "subf \0"
  /* 4254 */ "evmhesmf \0"
  /* 4264 */ "evmwhsmf \0"
  /* 4274 */ "evmhosmf \0"
  /* 4284 */ "evmwsmf \0"
  /* 4293 */ "mcrf \0"
  /* 4299 */ "mfocrf \0"
  /* 4307 */ "mtocrf \0"
  /* 4315 */ "mtcrf \0"
  /* 4322 */ "efdcfsf \0"
  /* 4331 */ "efscfsf \0"
  /* 4340 */ "evfscfsf \0"
  /* 4350 */ "mtfsf \0"
  /* 4357 */ "evmhessf \0"
  /* 4367 */ "evmwhssf \0"
  /* 4377 */ "evmhossf \0"
  /* 4387 */ "evmwssf \0"
  /* 4396 */ "efdctsf \0"
  /* 4405 */ "efsctsf \0"
  /* 4414 */ "evfsctsf \0"
  /* 4424 */ "efdcfuf \0"
  /* 4433 */ "efscfuf \0"
  /* 4442 */ "evfscfuf \0"
  /* 4452 */ "efdctuf \0"
  /* 4461 */ "efsctuf \0"
  /* 4470 */ "slbieg \0"
  /* 4478 */ "efdneg \0"
  /* 4486 */ "fneg \0"
  /* 4492 */ "efsneg \0"
  /* 4500 */ "evfsneg \0"
  /* 4509 */ "evneg \0"
  /* 4516 */ "vsrah \0"
  /* 4523 */ "vcntmbh \0"
  /* 4532 */ "evldh \0"
  /* 4539 */ "evstdh \0"
  /* 4547 */ "vcmpneh \0"
  /* 4556 */ "vmrghh \0"
  /* 4564 */ "vmrglh \0"
  /* 4572 */ "vrlh \0"
  /* 4578 */ "vslh \0"
  /* 4584 */ "vpmsumh \0"
  /* 4593 */ "xxbrh \0"
  /* 4600 */ "vsrh \0"
  /* 4606 */ "vmulesh \0"
  /* 4615 */ "vavgsh \0"
  /* 4623 */ "vupkhsh \0"
  /* 4632 */ "vspltish \0"
  /* 4642 */ "vupklsh \0"
  /* 4651 */ "vminsh \0"
  /* 4659 */ "vmulosh \0"
  /* 4668 */ "vcmpgtsh \0"
  /* 4678 */ "evextsh \0"
  /* 4687 */ "vmaxsh \0"
  /* 4695 */ "vsplth \0"
  /* 4703 */ "vpopcnth \0"
  /* 4713 */ "vinserth \0"
  /* 4723 */ "psth \0"
  /* 4729 */ "vabsduh \0"
  /* 4738 */ "vmuleuh \0"
  /* 4747 */ "vavguh \0"
  /* 4755 */ "vminuh \0"
  /* 4763 */ "vmulouh \0"
  /* 4772 */ "vcmpequh \0"
  /* 4782 */ "vextractuh \0"
  /* 4794 */ "vcmpgtuh \0"
  /* 4804 */ "vmaxuh \0"
  /* 4812 */ "xxblendvh \0"
  /* 4823 */ "vcmpnezh \0"
  /* 4833 */ "vclzh \0"
  /* 4840 */ "vctzh \0"
  /* 4847 */ "dcbi \0"
  /* 4853 */ "icbi \0"
  /* 4859 */ "vsldbi \0"
  /* 4867 */ "vsrdbi \0"
  /* 4875 */ "subi \0"
  /* 4881 */ "dccci \0"
  /* 4888 */ "iccci \0"
  /* 4895 */ "sradi \0"
  /* 4902 */ "paddi \0"
  /* 4909 */ "cmpldi \0"
  /* 4917 */ "clrlsldi \0"
  /* 4927 */ "extldi \0"
  /* 4935 */ "xxpermdi \0"
  /* 4945 */ "cmpdi \0"
  /* 4952 */ "clrrdi \0"
  /* 4960 */ "insrdi \0"
  /* 4968 */ "rotrdi \0"
  /* 4976 */ "extrdi \0"
  /* 4984 */ "tdi \0"
  /* 4989 */ "wrteei \0"
  /* 4997 */ "mtfsfi \0"
  /* 5005 */ "evsplatfi \0"
  /* 5016 */ "evmergehi \0"
  /* 5027 */ "evmergelohi \0"
  /* 5040 */ "tlbli \0"
  /* 5047 */ "mulli \0"
  /* 5054 */ "pli \0"
  /* 5059 */ "extswsli \0"
  /* 5069 */ "mtvsrbmi \0"
  /* 5079 */ "vrldmi \0"
  /* 5087 */ "rldimi \0"
  /* 5095 */ "rlwimi \0"
  /* 5103 */ "vrlqmi \0"
  /* 5111 */ "evmhesmi \0"
  /* 5121 */ "evmwhsmi \0"
  /* 5131 */ "evmhosmi \0"
  /* 5141 */ "evmwsmi \0"
  /* 5150 */ "evmheumi \0"
  /* 5160 */ "evmwhumi \0"
  /* 5170 */ "evmwlumi \0"
  /* 5180 */ "evmhoumi \0"
  /* 5190 */ "evmwumi \0"
  /* 5199 */ "vrlwmi \0"
  /* 5207 */ "mffscrni \0"
  /* 5217 */ "mffscdrni \0"
  /* 5228 */ "vsldoi \0"
  /* 5236 */ "xsrdpi \0"
  /* 5244 */ "xvrdpi \0"
  /* 5252 */ "xsrqpi \0"
  /* 5260 */ "xvrspi \0"
  /* 5268 */ "xori \0"
  /* 5274 */ "efdcfsi \0"
  /* 5283 */ "efscfsi \0"
  /* 5292 */ "evfscfsi \0"
  /* 5302 */ "efdctsi \0"
  /* 5311 */ "efsctsi \0"
  /* 5320 */ "evfsctsi \0"
  /* 5330 */ "evsplati \0"
  /* 5340 */ "efdcfui \0"
  /* 5349 */ "efscfui \0"
  /* 5358 */ "evfscfui \0"
  /* 5368 */ "efdctui \0"
  /* 5377 */ "efsctui \0"
  /* 5386 */ "evfsctui \0"
  /* 5396 */ "srawi \0"
  /* 5403 */ "xxsldwi \0"
  /* 5412 */ "cmplwi \0"
  /* 5420 */ "evrlwi \0"
  /* 5428 */ "clrlslwi \0"
  /* 5438 */ "inslwi \0"
  /* 5446 */ "evslwi \0"
  /* 5454 */ "extlwi \0"
  /* 5462 */ "cmpwi \0"
  /* 5469 */ "clrrwi \0"
  /* 5477 */ "insrwi \0"
  /* 5485 */ "rotrwi \0"
  /* 5493 */ "extrwi \0"
  /* 5501 */ "lswi \0"
  /* 5507 */ "stswi \0"
  /* 5514 */ "twi \0"
  /* 5519 */ "tcheck \0"
  /* 5527 */ "hashchk \0"
  /* 5536 */ "xxeval \0"
  /* 5544 */ "vstribl \0"
  /* 5553 */ "bcl \0"
  /* 5558 */ "rldcl \0"
  /* 5565 */ "rldicl \0"
  /* 5573 */ "tlbiel \0"
  /* 5581 */ "fsel \0"
  /* 5587 */ "isel \0"
  /* 5593 */ "vsel \0"
  /* 5599 */ "xxsel \0"
  /* 5606 */ "dcbfl \0"
  /* 5613 */ "vstrihl \0"
  /* 5622 */ "lxvll \0"
  /* 5629 */ "stxvll \0"
  /* 5637 */ "bclrl \0"
  /* 5644 */ "bcctrl \0"
  /* 5652 */ "mffsl \0"
  /* 5659 */ "lvsl \0"
  /* 5665 */ "efdmul \0"
  /* 5673 */ "fmul \0"
  /* 5679 */ "efsmul \0"
  /* 5687 */ "evfsmul \0"
  /* 5696 */ "lxvl \0"
  /* 5702 */ "stxvl \0"
  /* 5709 */ "lvxl \0"
  /* 5715 */ "stvxl \0"
  /* 5722 */ "dcbzl \0"
  /* 5729 */ "bdzl \0"
  /* 5735 */ "bdnzl \0"
  /* 5742 */ "vexpandbm \0"
  /* 5753 */ "vmsummbm \0"
  /* 5763 */ "mtvsrbm \0"
  /* 5772 */ "vextractbm \0"
  /* 5784 */ "vsububm \0"
  /* 5793 */ "vaddubm \0"
  /* 5802 */ "vmsumubm \0"
  /* 5812 */ "xxgenpcvbm \0"
  /* 5824 */ "vexpanddm \0"
  /* 5835 */ "mtvsrdm \0"
  /* 5844 */ "vextractdm \0"
  /* 5856 */ "vsubudm \0"
  /* 5865 */ "vaddudm \0"
  /* 5874 */ "vmsumudm \0"
  /* 5884 */ "xxgenpcvdm \0"
  /* 5896 */ "vclzdm \0"
  /* 5904 */ "cntlzdm \0"
  /* 5913 */ "vctzdm \0"
  /* 5921 */ "cnttzdm \0"
  /* 5930 */ "vexpandhm \0"
  /* 5941 */ "mtvsrhm \0"
  /* 5950 */ "vmsumshm \0"
  /* 5960 */ "vextracthm \0"
  /* 5972 */ "vsubuhm \0"
  /* 5981 */ "vmladduhm \0"
  /* 5992 */ "vadduhm \0"
  /* 6001 */ "vmsumuhm \0"
  /* 6011 */ "xxgenpcvhm \0"
  /* 6023 */ "vrfim \0"
  /* 6030 */ "xsrdpim \0"
  /* 6039 */ "xvrdpim \0"
  /* 6048 */ "xvrspim \0"
  /* 6057 */ "frim \0"
  /* 6063 */ "vrldnm \0"
  /* 6071 */ "rlwinm \0"
  /* 6079 */ "vrlqnm \0"
  /* 6087 */ "vrlwnm \0"
  /* 6095 */ "vexpandqm \0"
  /* 6106 */ "mtvsrqm \0"
  /* 6115 */ "vextractqm \0"
  /* 6127 */ "vsubuqm \0"
  /* 6136 */ "vadduqm \0"
  /* 6145 */ "vsubeuqm \0"
  /* 6155 */ "vaddeuqm \0"
  /* 6165 */ "vperm \0"
  /* 6172 */ "xxperm \0"
  /* 6180 */ "vpkudum \0"
  /* 6189 */ "vpkuhum \0"
  /* 6198 */ "vpkuwum \0"
  /* 6207 */ "vexpandwm \0"
  /* 6218 */ "mtvsrwm \0"
  /* 6227 */ "vextractwm \0"
  /* 6239 */ "vsubuwm \0"
  /* 6248 */ "vadduwm \0"
  /* 6257 */ "vmuluwm \0"
  /* 6266 */ "xxgenpcvwm \0"
  /* 6278 */ "evmhegsmfan \0"
  /* 6291 */ "evmhogsmfan \0"
  /* 6304 */ "evmwsmfan \0"
  /* 6315 */ "evmwssfan \0"
  /* 6326 */ "evmhegsmian \0"
  /* 6339 */ "evmhogsmian \0"
  /* 6352 */ "evmwsmian \0"
  /* 6363 */ "evmhegumian \0"
  /* 6376 */ "evmhogumian \0"
  /* 6389 */ "evmwumian \0"
  /* 6400 */ "fcpsgn \0"
  /* 6408 */ "vrfin \0"
  /* 6415 */ "frin \0"
  /* 6421 */ "mfsrin \0"
  /* 6429 */ "mtsrin \0"
  /* 6437 */ "pmxvbf16ger2nn \0"
  /* 6453 */ "pmxvf16ger2nn \0"
  /* 6468 */ "pmxvf32gernn \0"
  /* 6482 */ "pmxvf64gernn \0"
  /* 6496 */ "pmxvbf16ger2pn \0"
  /* 6512 */ "pmxvf16ger2pn \0"
  /* 6527 */ "xscvspdpn \0"
  /* 6538 */ "pmxvf32gerpn \0"
  /* 6552 */ "pmxvf64gerpn \0"
  /* 6566 */ "xvcvbf16spn \0"
  /* 6579 */ "xscvdpspn \0"
  /* 6590 */ "darn \0"
  /* 6596 */ "mffscrn \0"
  /* 6605 */ "mffscdrn \0"
  /* 6615 */ "addco \0"
  /* 6622 */ "subfco \0"
  /* 6630 */ "addo \0"
  /* 6636 */ "mulldo \0"
  /* 6644 */ "divdo \0"
  /* 6651 */ "addeo \0"
  /* 6658 */ "divdeo \0"
  /* 6666 */ "subfeo \0"
  /* 6674 */ "addmeo \0"
  /* 6682 */ "subfmeo \0"
  /* 6691 */ "divweo \0"
  /* 6699 */ "addzeo \0"
  /* 6707 */ "subfzeo \0"
  /* 6716 */ "subfo \0"
  /* 6723 */ "nego \0"
  /* 6729 */ "evstwho \0"
  /* 6738 */ "evmergelo \0"
  /* 6749 */ "evmergehilo \0"
  /* 6762 */ "vslo \0"
  /* 6768 */ "xscvqpdpo \0"
  /* 6779 */ "fcmpo \0"
  /* 6786 */ "xsnmsubqpo \0"
  /* 6798 */ "xsmsubqpo \0"
  /* 6809 */ "xssubqpo \0"
  /* 6819 */ "xsnmaddqpo \0"
  /* 6831 */ "xsmaddqpo \0"
  /* 6842 */ "xsaddqpo \0"
  /* 6852 */ "xsmulqpo \0"
  /* 6862 */ "xssqrtqpo \0"
  /* 6873 */ "xsdivqpo \0"
  /* 6883 */ "vsro \0"
  /* 6889 */ "divduo \0"
  /* 6897 */ "divdeuo \0"
  /* 6906 */ "divweuo \0"
  /* 6915 */ "divwuo \0"
  /* 6923 */ "mullwo \0"
  /* 6931 */ "divwo \0"
  /* 6938 */ "evstwwo \0"
  /* 6947 */ "xsnmsubadp \0"
  /* 6959 */ "xvnmsubadp \0"
  /* 6971 */ "xsmsubadp \0"
  /* 6982 */ "xvmsubadp \0"
  /* 6993 */ "xsnmaddadp \0"
  /* 7005 */ "xvnmaddadp \0"
  /* 7017 */ "xsmaddadp \0"
  /* 7028 */ "xvmaddadp \0"
  /* 7039 */ "xssubdp \0"
  /* 7048 */ "xvsubdp \0"
  /* 7057 */ "xststdcdp \0"
  /* 7068 */ "xvtstdcdp \0"
  /* 7079 */ "xsmincdp \0"
  /* 7089 */ "xsmaxcdp \0"
  /* 7099 */ "xsadddp \0"
  /* 7108 */ "xvadddp \0"
  /* 7117 */ "xscvsxddp \0"
  /* 7128 */ "xvcvsxddp \0"
  /* 7139 */ "xscvuxddp \0"
  /* 7150 */ "xvcvuxddp \0"
  /* 7161 */ "xscmpgedp \0"
  /* 7172 */ "xvcmpgedp \0"
  /* 7183 */ "xsredp \0"
  /* 7191 */ "xvredp \0"
  /* 7199 */ "xsrsqrtedp \0"
  /* 7211 */ "xvrsqrtedp \0"
  /* 7223 */ "xsnegdp \0"
  /* 7232 */ "xvnegdp \0"
  /* 7241 */ "xsxsigdp \0"
  /* 7251 */ "xvxsigdp \0"
  /* 7261 */ "xxspltidp \0"
  /* 7272 */ "xsminjdp \0"
  /* 7282 */ "xsmaxjdp \0"
  /* 7292 */ "xsmuldp \0"
  /* 7301 */ "xvmuldp \0"
  /* 7310 */ "xsnmsubmdp \0"
  /* 7322 */ "xvnmsubmdp \0"
  /* 7334 */ "xsmsubmdp \0"
  /* 7345 */ "xvmsubmdp \0"
  /* 7356 */ "xsnmaddmdp \0"
  /* 7368 */ "xvnmaddmdp \0"
  /* 7380 */ "xsmaddmdp \0"
  /* 7391 */ "xvmaddmdp \0"
  /* 7402 */ "xscpsgndp \0"
  /* 7413 */ "xvcpsgndp \0"
  /* 7424 */ "xsmindp \0"
  /* 7433 */ "xvmindp \0"
  /* 7442 */ "xscmpodp \0"
  /* 7452 */ "xscvhpdp \0"
  /* 7462 */ "xscvqpdp \0"
  /* 7472 */ "xscvspdp \0"
  /* 7482 */ "xvcvspdp \0"
  /* 7492 */ "xsiexpdp \0"
  /* 7502 */ "xviexpdp \0"
  /* 7512 */ "xscmpexpdp \0"
  /* 7524 */ "xsxexpdp \0"
  /* 7534 */ "xvxexpdp \0"
  /* 7544 */ "xscmpeqdp \0"
  /* 7555 */ "xvcmpeqdp \0"
  /* 7566 */ "xsnabsdp \0"
  /* 7576 */ "xvnabsdp \0"
  /* 7586 */ "xsabsdp \0"
  /* 7595 */ "xvabsdp \0"
  /* 7604 */ "xscmpgtdp \0"
  /* 7615 */ "xvcmpgtdp \0"
  /* 7626 */ "xssqrtdp \0"
  /* 7636 */ "xstsqrtdp \0"
  /* 7647 */ "xvtsqrtdp \0"
  /* 7658 */ "xvsqrtdp \0"
  /* 7668 */ "xscmpudp \0"
  /* 7678 */ "xsdivdp \0"
  /* 7687 */ "xstdivdp \0"
  /* 7697 */ "xvtdivdp \0"
  /* 7707 */ "xvdivdp \0"
  /* 7716 */ "xvcvsxwdp \0"
  /* 7727 */ "xvcvuxwdp \0"
  /* 7738 */ "xsmaxdp \0"
  /* 7747 */ "xvmaxdp \0"
  /* 7756 */ "dcbfep \0"
  /* 7764 */ "icbiep \0"
  /* 7772 */ "dcbzlep \0"
  /* 7781 */ "dcbtep \0"
  /* 7789 */ "dcbstep \0"
  /* 7798 */ "dcbtstep \0"
  /* 7808 */ "dcbzep \0"
  /* 7816 */ "vcmpbfp \0"
  /* 7825 */ "vnmsubfp \0"
  /* 7835 */ "vsubfp \0"
  /* 7843 */ "vmaddfp \0"
  /* 7852 */ "vaddfp \0"
  /* 7860 */ "vlogefp \0"
  /* 7869 */ "vcmpgefp \0"
  /* 7879 */ "vrefp \0"
  /* 7886 */ "vexptefp \0"
  /* 7896 */ "vrsqrtefp \0"
  /* 7907 */ "vminfp \0"
  /* 7915 */ "vcmpeqfp \0"
  /* 7925 */ "vcmpgtfp \0"
  /* 7935 */ "vmaxfp \0"
  /* 7943 */ "xscvdphp \0"
  /* 7953 */ "xvcvsphp \0"
  /* 7963 */ "vrfip \0"
  /* 7970 */ "xsrdpip \0"
  /* 7979 */ "xvrdpip \0"
  /* 7988 */ "xvrspip \0"
  /* 7997 */ "frip \0"
  /* 8003 */ "hashchkp \0"
  /* 8013 */ "dcbflp \0"
  /* 8021 */ "pmxvbf16ger2np \0"
  /* 8037 */ "pmxvf16ger2np \0"
  /* 8052 */ "pmxvf32gernp \0"
  /* 8066 */ "pmxvf64gernp \0"
  /* 8080 */ "pmxvbf16ger2pp \0"
  /* 8096 */ "pmxvf16ger2pp \0"
  /* 8111 */ "pmxvi16ger2pp \0"
  /* 8126 */ "pmxvi8ger4pp \0"
  /* 8140 */ "pmxvi4ger8pp \0"
  /* 8154 */ "pmxvf32gerpp \0"
  /* 8168 */ "pmxvf64gerpp \0"
  /* 8182 */ "pmxvi16ger2spp \0"
  /* 8198 */ "pmxvi8ger4spp \0"
  /* 8213 */ "xsnmsubqp \0"
  /* 8224 */ "xsmsubqp \0"
  /* 8234 */ "xssubqp \0"
  /* 8243 */ "xststdcqp \0"
  /* 8254 */ "xsnmaddqp \0"
  /* 8265 */ "xsmaddqp \0"
  /* 8275 */ "xsaddqp \0"
  /* 8284 */ "xscvsdqp \0"
  /* 8294 */ "xscvudqp \0"
  /* 8304 */ "xsnegqp \0"
  /* 8313 */ "xsxsigqp \0"
  /* 8323 */ "xsmulqp \0"
  /* 8332 */ "xscpsgnqp \0"
  /* 8343 */ "xscmpoqp \0"
  /* 8353 */ "xscvdpqp \0"
  /* 8363 */ "xsiexpqp \0"
  /* 8373 */ "xscmpexpqp \0"
  /* 8385 */ "xsxexpqp \0"
  /* 8395 */ "xscvsqqp \0"
  /* 8405 */ "xscvuqqp \0"
  /* 8415 */ "xsnabsqp \0"
  /* 8425 */ "xsabsqp \0"
  /* 8434 */ "xssqrtqp \0"
  /* 8444 */ "xscmpuqp \0"
  /* 8454 */ "xsdivqp \0"
  /* 8463 */ "xsnmsubasp \0"
  /* 8475 */ "xvnmsubasp \0"
  /* 8487 */ "xsmsubasp \0"
  /* 8498 */ "xvmsubasp \0"
  /* 8509 */ "xsnmaddasp \0"
  /* 8521 */ "xvnmaddasp \0"
  /* 8533 */ "xsmaddasp \0"
  /* 8544 */ "xvmaddasp \0"
  /* 8555 */ "xssubsp \0"
  /* 8564 */ "xvsubsp \0"
  /* 8573 */ "xststdcsp \0"
  /* 8584 */ "xvtstdcsp \0"
  /* 8595 */ "xsaddsp \0"
  /* 8604 */ "xvaddsp \0"
  /* 8613 */ "xscvsxdsp \0"
  /* 8624 */ "xvcvsxdsp \0"
  /* 8635 */ "xscvuxdsp \0"
  /* 8646 */ "xvcvuxdsp \0"
  /* 8657 */ "xvcmpgesp \0"
  /* 8668 */ "xsresp \0"
  /* 8676 */ "xvresp \0"
  /* 8684 */ "xsrsqrtesp \0"
  /* 8696 */ "xvrsqrtesp \0"
  /* 8708 */ "xvnegsp \0"
  /* 8717 */ "xvxsigsp \0"
  /* 8727 */ "xsmulsp \0"
  /* 8736 */ "xvmulsp \0"
  /* 8745 */ "xsnmsubmsp \0"
  /* 8757 */ "xvnmsubmsp \0"
  /* 8769 */ "xsmsubmsp \0"
  /* 8780 */ "xvmsubmsp \0"
  /* 8791 */ "xsnmaddmsp \0"
  /* 8803 */ "xvnmaddmsp \0"
  /* 8815 */ "xsmaddmsp \0"
  /* 8826 */ "xvmaddmsp \0"
  /* 8837 */ "xvcpsgnsp \0"
  /* 8848 */ "xvminsp \0"
  /* 8857 */ "xscvdpsp \0"
  /* 8867 */ "xvcvdpsp \0"
  /* 8877 */ "xvcvhpsp \0"
  /* 8887 */ "xviexpsp \0"
  /* 8897 */ "xvxexpsp \0"
  /* 8907 */ "xvcmpeqsp \0"
  /* 8918 */ "frsp \0"
  /* 8924 */ "xsrsp \0"
  /* 8931 */ "xvnabssp \0"
  /* 8941 */ "xvabssp \0"
  /* 8950 */ "plxssp \0"
  /* 8958 */ "pstxssp \0"
  /* 8967 */ "xvcmpgtsp \0"
  /* 8978 */ "xssqrtsp \0"
  /* 8988 */ "xvtsqrtsp \0"
  /* 8999 */ "xvsqrtsp \0"
  /* 9009 */ "xsdivsp \0"
  /* 9018 */ "xvtdivsp \0"
  /* 9028 */ "xvdivsp \0"
  /* 9037 */ "xvcvsxwsp \0"
  /* 9048 */ "xvcvuxwsp \0"
  /* 9059 */ "xvmaxsp \0"
  /* 9068 */ "hashstp \0"
  /* 9077 */ "plxvp \0"
  /* 9084 */ "pstxvp \0"
  /* 9092 */ "xsrqpxp \0"
  /* 9101 */ "vextsd2q \0"
  /* 9111 */ "vsraq \0"
  /* 9118 */ "vprtybq \0"
  /* 9127 */ "efdcmpeq \0"
  /* 9137 */ "efscmpeq \0"
  /* 9147 */ "evfscmpeq \0"
  /* 9158 */ "evcmpeq \0"
  /* 9167 */ "efdtsteq \0"
  /* 9177 */ "efststeq \0"
  /* 9187 */ "evfststeq \0"
  /* 9198 */ "vrlq \0"
  /* 9204 */ "vslq \0"
  /* 9210 */ "vbpermq \0"
  /* 9219 */ "xxbrq \0"
  /* 9226 */ "vsrq \0"
  /* 9232 */ "vmodsq \0"
  /* 9240 */ "vdivesq \0"
  /* 9249 */ "vcmpsq \0"
  /* 9257 */ "vcmpgtsq \0"
  /* 9267 */ "vdivsq \0"
  /* 9275 */ "stq \0"
  /* 9280 */ "vmul10uq \0"
  /* 9290 */ "vmul10cuq \0"
  /* 9301 */ "vsubcuq \0"
  /* 9310 */ "vaddcuq \0"
  /* 9319 */ "vmul10ecuq \0"
  /* 9331 */ "vsubecuq \0"
  /* 9341 */ "vaddecuq \0"
  /* 9351 */ "vmoduq \0"
  /* 9359 */ "vmul10euq \0"
  /* 9370 */ "vdiveuq \0"
  /* 9379 */ "vcmpuq \0"
  /* 9387 */ "vcmpequq \0"
  /* 9397 */ "vcmpgtuq \0"
  /* 9407 */ "vdivuq \0"
  /* 9415 */ "#TC_RETURNr \0"
  /* 9428 */ "mbar \0"
  /* 9434 */ "vstribr \0"
  /* 9443 */ "setnbcr \0"
  /* 9452 */ "setbcr \0"
  /* 9460 */ "mfdcr \0"
  /* 9467 */ "rldcr \0"
  /* 9474 */ "mtdcr \0"
  /* 9481 */ "mfcr \0"
  /* 9487 */ "rldicr \0"
  /* 9495 */ "mfvscr \0"
  /* 9503 */ "mtvscr \0"
  /* 9511 */ "pmxvf32ger \0"
  /* 9523 */ "pmxvf64ger \0"
  /* 9535 */ "vncipher \0"
  /* 9545 */ "vcipher \0"
  /* 9554 */ "vstrihr \0"
  /* 9563 */ "bclr \0"
  /* 9569 */ "mflr \0"
  /* 9575 */ "mtlr \0"
  /* 9581 */ "fmr \0"
  /* 9586 */ "mfpmr \0"
  /* 9593 */ "mtpmr \0"
  /* 9600 */ "vpermr \0"
  /* 9608 */ "xxpermr \0"
  /* 9617 */ "xxlor \0"
  /* 9624 */ "xxlnor \0"
  /* 9632 */ "crnor \0"
  /* 9639 */ "evnor \0"
  /* 9646 */ "cror \0"
  /* 9652 */ "evor \0"
  /* 9658 */ "xxlxor \0"
  /* 9666 */ "vpermxor \0"
  /* 9676 */ "crxor \0"
  /* 9683 */ "evxor \0"
  /* 9690 */ "mfspr \0"
  /* 9697 */ "mtspr \0"
  /* 9704 */ "mfsr \0"
  /* 9710 */ "mfmsr \0"
  /* 9717 */ "mtmsr \0"
  /* 9724 */ "mtsr \0"
  /* 9730 */ "lvsr \0"
  /* 9736 */ "bcctr \0"
  /* 9743 */ "mfctr \0"
  /* 9750 */ "mtctr \0"
  /* 9757 */ "pmxvi16ger2s \0"
  /* 9771 */ "efdabs \0"
  /* 9779 */ "fabs \0"
  /* 9785 */ "efdnabs \0"
  /* 9794 */ "fnabs \0"
  /* 9801 */ "efsnabs \0"
  /* 9810 */ "evfsnabs \0"
  /* 9820 */ "efsabs \0"
  /* 9828 */ "evfsabs \0"
  /* 9837 */ "evabs \0"
  /* 9844 */ "vsum4sbs \0"
  /* 9854 */ "vsubsbs \0"
  /* 9863 */ "vaddsbs \0"
  /* 9872 */ "vsum4ubs \0"
  /* 9882 */ "vsububs \0"
  /* 9891 */ "vaddubs \0"
  /* 9900 */ "fsubs \0"
  /* 9907 */ "fmsubs \0"
  /* 9915 */ "fnmsubs \0"
  /* 9924 */ "fadds \0"
  /* 9931 */ "fmadds \0"
  /* 9939 */ "fnmadds \0"
  /* 9948 */ "fcfids \0"
  /* 9956 */ "dcbtds \0"
  /* 9964 */ "dcbtstds \0"
  /* 9974 */ "xscvdpsxds \0"
  /* 9986 */ "xvcvdpsxds \0"
  /* 9998 */ "xvcvspsxds \0"
  /* 10010 */ "xscvdpuxds \0"
  /* 10022 */ "xvcvdpuxds \0"
  /* 10034 */ "xvcvspuxds \0"
  /* 10046 */ "fres \0"
  /* 10052 */ "frsqrtes \0"
  /* 10062 */ "efdcfs \0"
  /* 10070 */ "mffs \0"
  /* 10076 */ "plfs \0"
  /* 10082 */ "mcrfs \0"
  /* 10089 */ "pstfs \0"
  /* 10096 */ "vsum4shs \0"
  /* 10106 */ "vsubshs \0"
  /* 10115 */ "vmhaddshs \0"
  /* 10126 */ "vmhraddshs \0"
  /* 10138 */ "vaddshs \0"
  /* 10147 */ "vmsumshs \0"
  /* 10157 */ "vsubuhs \0"
  /* 10166 */ "vadduhs \0"
  /* 10175 */ "vmsumuhs \0"
  /* 10185 */ "subis \0"
  /* 10192 */ "subpcis \0"
  /* 10201 */ "addpcis \0"
  /* 10210 */ "addis \0"
  /* 10217 */ "lis \0"
  /* 10222 */ "xoris \0"
  /* 10229 */ "evsrwis \0"
  /* 10238 */ "icbtls \0"
  /* 10246 */ "fmuls \0"
  /* 10253 */ "evlwhos \0"
  /* 10262 */ "dcbfps \0"
  /* 10270 */ "dcbstps \0"
  /* 10279 */ "vpksdss \0"
  /* 10288 */ "vpkshss \0"
  /* 10297 */ "vpkswss \0"
  /* 10306 */ "evcmpgts \0"
  /* 10316 */ "evcmplts \0"
  /* 10326 */ "fsqrts \0"
  /* 10334 */ "fcfidus \0"
  /* 10343 */ "vpksdus \0"
  /* 10352 */ "vpkudus \0"
  /* 10361 */ "vpkshus \0"
  /* 10370 */ "vpkuhus \0"
  /* 10379 */ "vpkswus \0"
  /* 10388 */ "vpkuwus \0"
  /* 10397 */ "fdivs \0"
  /* 10404 */ "evsrws \0"
  /* 10412 */ "mtvsrws \0"
  /* 10421 */ "vsum2sws \0"
  /* 10431 */ "vsubsws \0"
  /* 10440 */ "vaddsws \0"
  /* 10449 */ "vsumsws \0"
  /* 10458 */ "vsubuws \0"
  /* 10467 */ "vadduws \0"
  /* 10476 */ "evdivws \0"
  /* 10485 */ "xscvdpsxws \0"
  /* 10497 */ "xvcvdpsxws \0"
  /* 10509 */ "xvcvspsxws \0"
  /* 10521 */ "xscvdpuxws \0"
  /* 10533 */ "xvcvdpuxws \0"
  /* 10545 */ "xvcvspuxws \0"
  /* 10557 */ "vctsxs \0"
  /* 10565 */ "vctuxs \0"
  /* 10573 */ "ldat \0"
  /* 10579 */ "stdat \0"
  /* 10586 */ "evlhhesplat \0"
  /* 10599 */ "evlwhsplat \0"
  /* 10611 */ "evlhhossplat \0"
  /* 10625 */ "evlhhousplat \0"
  /* 10639 */ "evlwwsplat \0"
  /* 10651 */ "lwat \0"
  /* 10657 */ "stwat \0"
  /* 10664 */ "dcbt \0"
  /* 10670 */ "icbt \0"
  /* 10676 */ "dcbtct \0"
  /* 10684 */ "dcbtstct \0"
  /* 10694 */ "efdcmpgt \0"
  /* 10704 */ "efscmpgt \0"
  /* 10714 */ "evfscmpgt \0"
  /* 10725 */ "efdtstgt \0"
  /* 10735 */ "efststgt \0"
  /* 10745 */ "evfststgt \0"
  /* 10756 */ "wait \0"
  /* 10762 */ "efdcmplt \0"
  /* 10772 */ "efscmplt \0"
  /* 10782 */ "evfscmplt \0"
  /* 10793 */ "efdtstlt \0"
  /* 10803 */ "efststlt \0"
  /* 10813 */ "evfststlt \0"
  /* 10824 */ "fsqrt \0"
  /* 10831 */ "ftsqrt \0"
  /* 10839 */ "vncipherlast \0"
  /* 10853 */ "vcipherlast \0"
  /* 10866 */ "dcbst \0"
  /* 10873 */ "dst \0"
  /* 10878 */ "hashst \0"
  /* 10886 */ "dcbtst \0"
  /* 10894 */ "dstst \0"
  /* 10901 */ "dcbtt \0"
  /* 10908 */ "dstt \0"
  /* 10914 */ "dcbtstt \0"
  /* 10923 */ "dststt \0"
  /* 10931 */ "lhau \0"
  /* 10937 */ "stbu \0"
  /* 10943 */ "lfdu \0"
  /* 10949 */ "stfdu \0"
  /* 10956 */ "maddhdu \0"
  /* 10965 */ "mulhdu \0"
  /* 10973 */ "fcfidu \0"
  /* 10981 */ "fctidu \0"
  /* 10989 */ "ldu \0"
  /* 10994 */ "stdu \0"
  /* 11000 */ "divdu \0"
  /* 11007 */ "divdeu \0"
  /* 11015 */ "divweu \0"
  /* 11023 */ "sthu \0"
  /* 11029 */ "evsrwiu \0"
  /* 11038 */ "evlwhou \0"
  /* 11047 */ "fcmpu \0"
  /* 11054 */ "lfsu \0"
  /* 11060 */ "stfsu \0"
  /* 11067 */ "evcmpgtu \0"
  /* 11077 */ "evcmpltu \0"
  /* 11087 */ "mulhwu \0"
  /* 11095 */ "fctiwu \0"
  /* 11103 */ "evsrwu \0"
  /* 11111 */ "stwu \0"
  /* 11117 */ "evdivwu \0"
  /* 11126 */ "lbzu \0"
  /* 11132 */ "lhzu \0"
  /* 11138 */ "lwzu \0"
  /* 11144 */ "slbmfev \0"
  /* 11153 */ "efddiv \0"
  /* 11161 */ "fdiv \0"
  /* 11167 */ "efsdiv \0"
  /* 11175 */ "evfsdiv \0"
  /* 11184 */ "ftdiv \0"
  /* 11191 */ "vslv \0"
  /* 11197 */ "xxleqv \0"
  /* 11205 */ "creqv \0"
  /* 11212 */ "eveqv \0"
  /* 11219 */ "vsrv \0"
  /* 11225 */ "plxv \0"
  /* 11231 */ "pstxv \0"
  /* 11238 */ "vextsb2w \0"
  /* 11248 */ "vextsh2w \0"
  /* 11258 */ "evmhesmfaaw \0"
  /* 11271 */ "evmhosmfaaw \0"
  /* 11284 */ "evmhessfaaw \0"
  /* 11297 */ "evmhossfaaw \0"
  /* 11310 */ "evaddsmiaaw \0"
  /* 11323 */ "evmhesmiaaw \0"
  /* 11336 */ "evsubfsmiaaw \0"
  /* 11350 */ "evmwlsmiaaw \0"
  /* 11363 */ "evmhosmiaaw \0"
  /* 11376 */ "evaddumiaaw \0"
  /* 11389 */ "evmheumiaaw \0"
  /* 11402 */ "evsubfumiaaw \0"
  /* 11416 */ "evmwlumiaaw \0"
  /* 11429 */ "evmhoumiaaw \0"
  /* 11442 */ "evaddssiaaw \0"
  /* 11455 */ "evmhessiaaw \0"
  /* 11468 */ "evsubfssiaaw \0"
  /* 11482 */ "evmwlssiaaw \0"
  /* 11495 */ "evmhossiaaw \0"
  /* 11508 */ "evaddusiaaw \0"
  /* 11521 */ "evmheusiaaw \0"
  /* 11534 */ "evsubfusiaaw \0"
  /* 11548 */ "evmwlusiaaw \0"
  /* 11561 */ "evmhousiaaw \0"
  /* 11574 */ "vshasigmaw \0"
  /* 11586 */ "vsraw \0"
  /* 11593 */ "vcntmbw \0"
  /* 11602 */ "vprtybw \0"
  /* 11611 */ "evaddw \0"
  /* 11619 */ "evldw \0"
  /* 11626 */ "evrndw \0"
  /* 11634 */ "evstdw \0"
  /* 11642 */ "vmrgew \0"
  /* 11650 */ "vcmpnew \0"
  /* 11659 */ "evsubfw \0"
  /* 11668 */ "evsubifw \0"
  /* 11678 */ "vnegw \0"
  /* 11685 */ "vmrghw \0"
  /* 11693 */ "xxmrghw \0"
  /* 11702 */ "mulhw \0"
  /* 11709 */ "evaddiw \0"
  /* 11718 */ "fctiw \0"
  /* 11725 */ "xxspltiw \0"
  /* 11735 */ "vmrglw \0"
  /* 11743 */ "xxmrglw \0"
  /* 11752 */ "mullw \0"
  /* 11759 */ "cmplw \0"
  /* 11766 */ "evrlw \0"
  /* 11773 */ "evslw \0"
  /* 11780 */ "lmw \0"
  /* 11785 */ "stmw \0"
  /* 11791 */ "vpmsumw \0"
  /* 11800 */ "evmhesmfanw \0"
  /* 11813 */ "evmhosmfanw \0"
  /* 11826 */ "evmhessfanw \0"
  /* 11839 */ "evmhossfanw \0"
  /* 11852 */ "evmhesmianw \0"
  /* 11865 */ "evmwlsmianw \0"
  /* 11878 */ "evmhosmianw \0"
  /* 11891 */ "evmheumianw \0"
  /* 11904 */ "evmwlumianw \0"
  /* 11917 */ "evmhoumianw \0"
  /* 11930 */ "evmhessianw \0"
  /* 11943 */ "evmwlssianw \0"
  /* 11956 */ "evmhossianw \0"
  /* 11969 */ "evmheusianw \0"
  /* 11982 */ "evmwlusianw \0"
  /* 11995 */ "evmhousianw \0"
  /* 12008 */ "vmrgow \0"
  /* 12016 */ "cmpw \0"
  /* 12022 */ "xxbrw \0"
  /* 12029 */ "vsrw \0"
  /* 12035 */ "vmodsw \0"
  /* 12043 */ "vmulesw \0"
  /* 12052 */ "vdivesw \0"
  /* 12061 */ "vavgsw \0"
  /* 12069 */ "vupkhsw \0"
  /* 12078 */ "vmulhsw \0"
  /* 12087 */ "vspltisw \0"
  /* 12097 */ "vupklsw \0"
  /* 12106 */ "evcntlsw \0"
  /* 12116 */ "vminsw \0"
  /* 12124 */ "vinsw \0"
  /* 12131 */ "vmulosw \0"
  /* 12140 */ "vcmpgtsw \0"
  /* 12150 */ "extsw \0"
  /* 12157 */ "vdivsw \0"
  /* 12165 */ "vmaxsw \0"
  /* 12173 */ "vspltw \0"
  /* 12181 */ "xxspltw \0"
  /* 12190 */ "vpopcntw \0"
  /* 12200 */ "vinsertw \0"
  /* 12210 */ "xxinsertw \0"
  /* 12221 */ "pstw \0"
  /* 12227 */ "vsubcuw \0"
  /* 12236 */ "vaddcuw \0"
  /* 12245 */ "vmoduw \0"
  /* 12253 */ "vabsduw \0"
  /* 12262 */ "vmuleuw \0"
  /* 12271 */ "vdiveuw \0"
  /* 12280 */ "vavguw \0"
  /* 12288 */ "vmulhuw \0"
  /* 12297 */ "vminuw \0"
  /* 12305 */ "vmulouw \0"
  /* 12314 */ "vcmpequw \0"
  /* 12324 */ "vextractuw \0"
  /* 12336 */ "xxextractuw \0"
  /* 12349 */ "vcmpgtuw \0"
  /* 12359 */ "vdivuw \0"
  /* 12367 */ "vmaxuw \0"
  /* 12375 */ "xxblendvw \0"
  /* 12386 */ "divw \0"
  /* 12392 */ "vcmpnezw \0"
  /* 12402 */ "vclzw \0"
  /* 12409 */ "evcntlzw \0"
  /* 12419 */ "vctzw \0"
  /* 12426 */ "cnttzw \0"
  /* 12434 */ "lxvd2x \0"
  /* 12442 */ "stxvd2x \0"
  /* 12451 */ "lxvw4x \0"
  /* 12459 */ "stxvw4x \0"
  /* 12468 */ "lxvb16x \0"
  /* 12477 */ "stxvb16x \0"
  /* 12487 */ "lxvh8x \0"
  /* 12495 */ "stxvh8x \0"
  /* 12504 */ "lhax \0"
  /* 12510 */ "tlbivax \0"
  /* 12519 */ "lfiwax \0"
  /* 12527 */ "lxsiwax \0"
  /* 12536 */ "lwax \0"
  /* 12542 */ "lvebx \0"
  /* 12549 */ "stvebx \0"
  /* 12557 */ "stxsibx \0"
  /* 12566 */ "lxvrbx \0"
  /* 12574 */ "stxvrbx \0"
  /* 12583 */ "stbx \0"
  /* 12589 */ "xxsplti32dx \0"
  /* 12602 */ "evlddx \0"
  /* 12610 */ "evstddx \0"
  /* 12619 */ "lfdx \0"
  /* 12625 */ "stfdx \0"
  /* 12632 */ "ldx \0"
  /* 12637 */ "lxvrdx \0"
  /* 12645 */ "stxvrdx \0"
  /* 12654 */ "lxsdx \0"
  /* 12661 */ "stxsdx \0"
  /* 12669 */ "stdx \0"
  /* 12675 */ "addex \0"
  /* 12682 */ "evlwhex \0"
  /* 12691 */ "evstwhex \0"
  /* 12701 */ "evstwwex \0"
  /* 12711 */ "evldhx \0"
  /* 12719 */ "evstdhx \0"
  /* 12728 */ "lvehx \0"
  /* 12735 */ "stvehx \0"
  /* 12743 */ "stxsihx \0"
  /* 12752 */ "lxvrhx \0"
  /* 12760 */ "stxvrhx \0"
  /* 12769 */ "sthx \0"
  /* 12775 */ "stbcix \0"
  /* 12783 */ "ldcix \0"
  /* 12790 */ "stdcix \0"
  /* 12798 */ "sthcix \0"
  /* 12806 */ "stwcix \0"
  /* 12814 */ "lbzcix \0"
  /* 12822 */ "lhzcix \0"
  /* 12830 */ "lwzcix \0"
  /* 12838 */ "xsrqpix \0"
  /* 12847 */ "vinsblx \0"
  /* 12856 */ "vextublx \0"
  /* 12866 */ "vinsdlx \0"
  /* 12875 */ "vinshlx \0"
  /* 12884 */ "vextuhlx \0"
  /* 12894 */ "vinsbvlx \0"
  /* 12904 */ "vextdubvlx \0"
  /* 12916 */ "vextddvlx \0"
  /* 12927 */ "vinshvlx \0"
  /* 12937 */ "vextduhvlx \0"
  /* 12949 */ "vinswvlx \0"
  /* 12959 */ "vextduwvlx \0"
  /* 12971 */ "vinswlx \0"
  /* 12980 */ "vextuwlx \0"
  /* 12990 */ "ldmx \0"
  /* 12996 */ "xxpermx \0"
  /* 13005 */ "vsbox \0"
  /* 13012 */ "evstwhox \0"
  /* 13022 */ "evstwwox \0"
  /* 13032 */ "lbepx \0"
  /* 13039 */ "stbepx \0"
  /* 13047 */ "lfdepx \0"
  /* 13055 */ "stfdepx \0"
  /* 13064 */ "lhepx \0"
  /* 13071 */ "sthepx \0"
  /* 13079 */ "lwepx \0"
  /* 13086 */ "stwepx \0"
  /* 13094 */ "vupkhpx \0"
  /* 13103 */ "vpkpx \0"
  /* 13110 */ "vupklpx \0"
  /* 13119 */ "lxsspx \0"
  /* 13127 */ "stxsspx \0"
  /* 13136 */ "lxvpx \0"
  /* 13143 */ "stxvpx \0"
  /* 13151 */ "lbarx \0"
  /* 13158 */ "ldarx \0"
  /* 13165 */ "lharx \0"
  /* 13172 */ "lqarx \0"
  /* 13179 */ "lwarx \0"
  /* 13186 */ "ldbrx \0"
  /* 13193 */ "stdbrx \0"
  /* 13201 */ "lhbrx \0"
  /* 13208 */ "sthbrx \0"
  /* 13216 */ "vinsbrx \0"
  /* 13225 */ "vextubrx \0"
  /* 13235 */ "lwbrx \0"
  /* 13242 */ "stwbrx \0"
  /* 13250 */ "vinsdrx \0"
  /* 13259 */ "vinshrx \0"
  /* 13268 */ "vextuhrx \0"
  /* 13278 */ "vinsbvrx \0"
  /* 13288 */ "vextdubvrx \0"
  /* 13300 */ "vextddvrx \0"
  /* 13311 */ "vinshvrx \0"
  /* 13321 */ "vextduhvrx \0"
  /* 13333 */ "vinswvrx \0"
  /* 13343 */ "vextduwvrx \0"
  /* 13355 */ "vinswrx \0"
  /* 13364 */ "vextuwrx \0"
  /* 13374 */ "mcrxrx \0"
  /* 13382 */ "tlbsx \0"
  /* 13389 */ "lxvdsx \0"
  /* 13397 */ "vcfsx \0"
  /* 13404 */ "lfsx \0"
  /* 13410 */ "stfsx \0"
  /* 13417 */ "evlwhosx \0"
  /* 13427 */ "lxvwsx \0"
  /* 13435 */ "evlhhesplatx \0"
  /* 13449 */ "evlwhsplatx \0"
  /* 13462 */ "evlhhossplatx \0"
  /* 13477 */ "evlhhousplatx \0"
  /* 13492 */ "evlwwsplatx \0"
  /* 13505 */ "lhaux \0"
  /* 13512 */ "lwaux \0"
  /* 13519 */ "stbux \0"
  /* 13526 */ "lfdux \0"
  /* 13533 */ "stfdux \0"
  /* 13541 */ "ldux \0"
  /* 13547 */ "stdux \0"
  /* 13554 */ "vcfux \0"
  /* 13561 */ "sthux \0"
  /* 13568 */ "evlwhoux \0"
  /* 13578 */ "lfsux \0"
  /* 13585 */ "stfsux \0"
  /* 13593 */ "stwux \0"
  /* 13600 */ "lbzux \0"
  /* 13607 */ "lhzux \0"
  /* 13614 */ "lwzux \0"
  /* 13621 */ "lvx \0"
  /* 13626 */ "stvx \0"
  /* 13632 */ "lxvx \0"
  /* 13638 */ "stxvx \0"
  /* 13645 */ "evldwx \0"
  /* 13653 */ "evstdwx \0"
  /* 13662 */ "lvewx \0"
  /* 13669 */ "stvewx \0"
  /* 13677 */ "stfiwx \0"
  /* 13685 */ "stxsiwx \0"
  /* 13694 */ "lxvrwx \0"
  /* 13702 */ "stxvrwx \0"
  /* 13711 */ "stwx \0"
  /* 13717 */ "lxsibzx \0"
  /* 13726 */ "lbzx \0"
  /* 13732 */ "lxsihzx \0"
  /* 13741 */ "lhzx \0"
  /* 13747 */ "lfiwzx \0"
  /* 13755 */ "lxsiwzx \0"
  /* 13764 */ "lwzx \0"
  /* 13770 */ "copy \0"
  /* 13776 */ "dcbz \0"
  /* 13782 */ "plbz \0"
  /* 13788 */ "xxsetaccz \0"
  /* 13799 */ "bdz \0"
  /* 13804 */ "efdctsidz \0"
  /* 13815 */ "fctidz \0"
  /* 13823 */ "efdctuidz \0"
  /* 13834 */ "xscvqpsdz \0"
  /* 13845 */ "xscvqpudz \0"
  /* 13856 */ "plhz \0"
  /* 13862 */ "vrfiz \0"
  /* 13869 */ "xsrdpiz \0"
  /* 13878 */ "xvrdpiz \0"
  /* 13887 */ "xvrspiz \0"
  /* 13896 */ "friz \0"
  /* 13902 */ "efdctsiz \0"
  /* 13912 */ "efsctsiz \0"
  /* 13922 */ "evfsctsiz \0"
  /* 13933 */ "efdctuiz \0"
  /* 13943 */ "efsctuiz \0"
  /* 13953 */ "bdnz \0"
  /* 13959 */ "xscvqpsqz \0"
  /* 13970 */ "xscvqpuqz \0"
  /* 13981 */ "fctiduz \0"
  /* 13990 */ "fctiwuz \0"
  /* 13999 */ "fctiwz \0"
  /* 14007 */ "plwz \0"
  /* 14013 */ "mfvsrwz \0"
  /* 14022 */ "mtvsrwz \0"
  /* 14031 */ "xscvqpswz \0"
  /* 14042 */ "xscvqpuwz \0"
  /* 14053 */ "bdzlrl+\0"
  /* 14061 */ "bdnzlrl+\0"
  /* 14070 */ "bdzlr+\0"
  /* 14077 */ "bdnzlr+\0"
  /* 14085 */ "evsel crD,\0"
  /* 14096 */ "bdzlrl-\0"
  /* 14104 */ "bdnzlrl-\0"
  /* 14113 */ "bdzlr-\0"
  /* 14120 */ "bdnzlr-\0"
  /* 14128 */ "# XRay Function Patchable RET.\0"
  /* 14159 */ "# XRay Typed Event Log.\0"
  /* 14183 */ "# XRay Custom Event Log.\0"
  /* 14208 */ "# XRay Function Enter.\0"
  /* 14231 */ "# XRay Tail Call Exit.\0"
  /* 14254 */ "# XRay Function Exit.\0"
  /* 14276 */ "trechkpt.\0"
  /* 14286 */ "ori 1, 1, 0\0"
  /* 14298 */ "ori 2, 2, 0\0"
  /* 14310 */ "#ADDISdtprelHA32\0"
  /* 14327 */ "#ATOMIC_LOAD_SUB_I32\0"
  /* 14348 */ "#ATOMIC_LOAD_ADD_I32\0"
  /* 14369 */ "#ATOMIC_LOAD_NAND_I32\0"
  /* 14391 */ "#ATOMIC_LOAD_AND_I32\0"
  /* 14412 */ "#ATOMIC_LOAD_UMIN_I32\0"
  /* 14434 */ "#ATOMIC_LOAD_MIN_I32\0"
  /* 14455 */ "#ATOMIC_SWAP_I32\0"
  /* 14472 */ "#ATOMIC_LOAD_XOR_I32\0"
  /* 14493 */ "#ATOMIC_LOAD_OR_I32\0"
  /* 14513 */ "#ATOMIC_LOAD_UMAX_I32\0"
  /* 14535 */ "#ATOMIC_LOAD_MAX_I32\0"
  /* 14556 */ "#ADDItlsgdL32\0"
  /* 14570 */ "#ADDItlsldL32\0"
  /* 14584 */ "#LDgotTprelL32\0"
  /* 14599 */ "#ADDIdtprelL32\0"
  /* 14614 */ "#EH_SJLJ_LONGJMP32\0"
  /* 14633 */ "#EH_SJLJ_SETJMP32\0"
  /* 14651 */ "#ADDItlsgdLADDR32\0"
  /* 14669 */ "#ADDItlsldLADDR32\0"
  /* 14687 */ "GETtlsldADDR32\0"
  /* 14702 */ "GETtlsADDR32\0"
  /* 14715 */ "#PROBED_ALLOCA_32\0"
  /* 14733 */ "#PREPARE_PROBED_ALLOCA_32\0"
  /* 14759 */ "#PROBED_STACKALLOC_32\0"
  /* 14781 */ "#PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32\0"
  /* 14824 */ "#DFLOADf32\0"
  /* 14835 */ "#XFLOADf32\0"
  /* 14846 */ "#DFSTOREf32\0"
  /* 14858 */ "#XFSTOREf32\0"
  /* 14870 */ "#ATOMIC_LOAD_SUB_I64\0"
  /* 14891 */ "#ATOMIC_LOAD_ADD_I64\0"
  /* 14912 */ "#ATOMIC_LOAD_NAND_I64\0"
  /* 14934 */ "#ATOMIC_LOAD_UMIN_I64\0"
  /* 14956 */ "#ATOMIC_LOAD_MIN_I64\0"
  /* 14977 */ "#ATOMIC_SWAP_I64\0"
  /* 14994 */ "#ATOMIC_CMP_SWAP_I64\0"
  /* 15015 */ "#ATOMIC_LOAD_XOR_I64\0"
  /* 15036 */ "#ATOMIC_LOAD_OR_I64\0"
  /* 15056 */ "#ATOMIC_LOAD_UMAX_I64\0"
  /* 15078 */ "#ATOMIC_LOAD_MAX_I64\0"
  /* 15099 */ "#EH_SJLJ_LONGJMP64\0"
  /* 15118 */ "#EH_SJLJ_SETJMP64\0"
  /* 15136 */ "#PROBED_ALLOCA_64\0"
  /* 15154 */ "#PREPARE_PROBED_ALLOCA_64\0"
  /* 15180 */ "#PROBED_STACKALLOC_64\0"
  /* 15202 */ "#PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64\0"
  /* 15245 */ "#DFLOADf64\0"
  /* 15256 */ "#XFLOADf64\0"
  /* 15267 */ "#DFSTOREf64\0"
  /* 15279 */ "#XFSTOREf64\0"
  /* 15291 */ "#ATOMIC_LOAD_AND_i64\0"
  /* 15312 */ "#SELECT_CC_SPE4\0"
  /* 15328 */ "#SELECT_SPE4\0"
  /* 15341 */ "#SELECT_CC_F4\0"
  /* 15355 */ "#SELECT_F4\0"
  /* 15366 */ "#SELECT_CC_I4\0"
  /* 15380 */ "#SELECT_I4\0"
  /* 15391 */ "crxor 6, 6, 6\0"
  /* 15405 */ "creqv 6, 6, 6\0"
  /* 15419 */ "#SELECT_CC_F16\0"
  /* 15434 */ "#SELECT_F16\0"
  /* 15446 */ "#ATOMIC_LOAD_SUB_I16\0"
  /* 15467 */ "#ATOMIC_LOAD_ADD_I16\0"
  /* 15488 */ "#ATOMIC_LOAD_NAND_I16\0"
  /* 15510 */ "#ATOMIC_LOAD_AND_I16\0"
  /* 15531 */ "#ATOMIC_LOAD_UMIN_I16\0"
  /* 15553 */ "#ATOMIC_LOAD_MIN_I16\0"
  /* 15574 */ "#ATOMIC_SWAP_I16\0"
  /* 15591 */ "#ATOMIC_LOAD_XOR_I16\0"
  /* 15612 */ "#ATOMIC_LOAD_OR_I16\0"
  /* 15632 */ "#ATOMIC_LOAD_UMAX_I16\0"
  /* 15654 */ "#ATOMIC_LOAD_MAX_I16\0"
  /* 15675 */ "#ATOMIC_LOAD_SUB_I128\0"
  /* 15697 */ "#ATOMIC_LOAD_ADD_I128\0"
  /* 15719 */ "#ATOMIC_LOAD_NAND_I128\0"
  /* 15742 */ "#ATOMIC_LOAD_AND_I128\0"
  /* 15764 */ "#ATOMIC_SWAP_I128\0"
  /* 15782 */ "#ATOMIC_CMP_SWAP_I128\0"
  /* 15804 */ "#ATOMIC_LOAD_XOR_I128\0"
  /* 15826 */ "#ATOMIC_LOAD_OR_I128\0"
  /* 15847 */ "#ADDIStocHA8\0"
  /* 15860 */ "#DYNALLOC8\0"
  /* 15871 */ "#CFENCE8\0"
  /* 15880 */ "#SELECT_CC_F8\0"
  /* 15894 */ "#SELECT_F8\0"
  /* 15905 */ "#ATOMIC_LOAD_SUB_I8\0"
  /* 15925 */ "#SELECT_CC_I8\0"
  /* 15939 */ "#ATOMIC_LOAD_ADD_I8\0"
  /* 15959 */ "#ATOMIC_LOAD_NAND_I8\0"
  /* 15980 */ "#ATOMIC_LOAD_AND_I8\0"
  /* 16000 */ "#ATOMIC_LOAD_UMIN_I8\0"
  /* 16021 */ "#ATOMIC_LOAD_MIN_I8\0"
  /* 16041 */ "#ATOMIC_CMP_SWAP_I8\0"
  /* 16061 */ "ATOMIC_LOAD_XOR_I8\0"
  /* 16080 */ "#ATOMIC_LOAD_OR_I8\0"
  /* 16099 */ "#SELECT_I8\0"
  /* 16110 */ "#ATOMIC_LOAD_UMAX_I8\0"
  /* 16131 */ "#ATOMIC_LOAD_MAX_I8\0"
  /* 16151 */ "#MovePCtoLR8\0"
  /* 16164 */ "#DYNAREAOFFSET8\0"
  /* 16180 */ "#ANDI_rec_1_EQ_BIT8\0"
  /* 16200 */ "#ANDI_rec_1_GT_BIT8\0"
  /* 16220 */ "#TLSGDAIX8\0"
  /* 16231 */ "#ATOMIC_SWAP_i8\0"
  /* 16247 */ "#ADDIStocHA\0"
  /* 16259 */ "#ADDIStlsgdHA\0"
  /* 16273 */ "#ADDIStlsldHA\0"
  /* 16287 */ "#ADDISgotTprelHA\0"
  /* 16304 */ "#ADDISdtprelHA\0"
  /* 16319 */ "#ReadTB\0"
  /* 16327 */ "#RESTORE_UACC\0"
  /* 16341 */ "#SPILL_UACC\0"
  /* 16353 */ "#RESTORE_ACC\0"
  /* 16366 */ "#SPILL_ACC\0"
  /* 16377 */ "#DYNALLOC\0"
  /* 16387 */ "#SELECT_CC_VSFRC\0"
  /* 16404 */ "#SELECT_VSFRC\0"
  /* 16418 */ "#SELECT_CC_VRRC\0"
  /* 16434 */ "#SELECT_VRRC\0"
  /* 16447 */ "#SELECT_CC_VSSRC\0"
  /* 16464 */ "#SELECT_VSSRC\0"
  /* 16478 */ "#SELECT_CC_VSRC\0"
  /* 16494 */ "#SELECT_VSRC\0"
  /* 16507 */ "#SPILLTOVSR_LD\0"
  /* 16522 */ "LIFETIME_END\0"
  /* 16535 */ "#SETRND\0"
  /* 16543 */ "#BUILD_QUADWORD\0"
  /* 16559 */ "#RESTORE_QUADWORD\0"
  /* 16577 */ "#SPILL_QUADWORD\0"
  /* 16593 */ "#SPLIT_QUADWORD\0"
  /* 16609 */ "PSEUDO_PROBE\0"
  /* 16622 */ "BUNDLE\0"
  /* 16629 */ "#SELECT_CC_SPE\0"
  /* 16644 */ "#SELECT_SPE\0"
  /* 16656 */ "DBG_VALUE\0"
  /* 16666 */ "DBG_INSTR_REF\0"
  /* 16680 */ "DBG_PHI\0"
  /* 16688 */ "#LDtocJTI\0"
  /* 16698 */ "DBG_LABEL\0"
  /* 16708 */ "#GETtlsldADDRPCREL\0"
  /* 16727 */ "#GETtlsADDRPCREL\0"
  /* 16744 */ "#LDtocL\0"
  /* 16752 */ "#ADDItocL\0"
  /* 16762 */ "#LWZtocL\0"
  /* 16771 */ "#ADDItlsgdL\0"
  /* 16783 */ "#ADDItlsldL\0"
  /* 16795 */ "#LDgotTprelL\0"
  /* 16808 */ "#ADDIdtprelL\0"
  /* 16821 */ "#SETFLM\0"
  /* 16829 */ "#LQX_PSEUDO\0"
  /* 16841 */ "#STQX_PSEUDO\0"
  /* 16854 */ "#PPCEIEIO\0"
  /* 16864 */ "#UNENCODED_NOP\0"
  /* 16879 */ "#UpdateGBR\0"
  /* 16890 */ "#RESTORE_CR\0"
  /* 16902 */ "#SPILL_CR\0"
  /* 16912 */ "#ADDItlsgdLADDR\0"
  /* 16928 */ "#ADDItlsldLADDR\0"
  /* 16944 */ "#GETtlsldADDR\0"
  /* 16958 */ "#GETtlsADDR\0"
  /* 16970 */ "#KILL_PAIR\0"
  /* 16981 */ "#MovePCtoLR\0"
  /* 16993 */ "#MoveGOTtoLR\0"
  /* 17006 */ "#TCHECK_RET\0"
  /* 17018 */ "#TBEGIN_RET\0"
  /* 17030 */ "#DYNAREAOFFSET\0"
  /* 17045 */ "#RESTORE_CRBIT\0"
  /* 17060 */ "#SPILL_CRBIT\0"
  /* 17073 */ "#ANDI_rec_1_EQ_BIT\0"
  /* 17092 */ "#ANDI_rec_1_GT_BIT\0"
  /* 17111 */ "#PPC32GOT\0"
  /* 17121 */ "#PPC32PICGOT\0"
  /* 17134 */ "#LDtocCPT\0"
  /* 17144 */ "LIFETIME_START\0"
  /* 17159 */ "DBG_VALUE_LIST\0"
  /* 17174 */ "#SPILLTOVSR_ST\0"
  /* 17189 */ "#LIWAX\0"
  /* 17196 */ "#SPILLTOVSR_LDX\0"
  /* 17212 */ "GETtlsADDR32AIX\0"
  /* 17228 */ "GETtlsADDR64AIX\0"
  /* 17244 */ "#TLSGDAIX\0"
  /* 17254 */ "#SPILLTOVSR_STX\0"
  /* 17270 */ "#STIWX\0"
  /* 17277 */ "#LIWZX\0"
  /* 17284 */ "bca\0"
  /* 17288 */ "slbia\0"
  /* 17294 */ "tlbia\0"
  /* 17300 */ "bcla\0"
  /* 17305 */ "clrbhrb\0"
  /* 17313 */ "bc\0"
  /* 17316 */ "slbsync\0"
  /* 17324 */ "tlbsync\0"
  /* 17332 */ "msgsync\0"
  /* 17340 */ "isync\0"
  /* 17346 */ "msync\0"
  /* 17352 */ "#LDtoc\0"
  /* 17359 */ "#ADDItoc\0"
  /* 17368 */ "#LWZtoc\0"
  /* 17376 */ "hrfid\0"
  /* 17382 */ "tlbre\0"
  /* 17388 */ "tlbwe\0"
  /* 17394 */ "#SETRNDi\0"
  /* 17403 */ "rfci\0"
  /* 17408 */ "rfmci\0"
  /* 17414 */ "rfdi\0"
  /* 17419 */ "rfi\0"
  /* 17423 */ "bcl\0"
  /* 17427 */ "#PADDIdtprel\0"
  /* 17440 */ "# FEntry call\0"
  /* 17454 */ "dssall\0"
  /* 17461 */ "blrl\0"
  /* 17466 */ "bdzlrl\0"
  /* 17473 */ "bdnzlrl\0"
  /* 17481 */ "bctrl\0"
  /* 17487 */ "attn\0"
  /* 17492 */ "eieio\0"
  /* 17498 */ "nap\0"
  /* 17502 */ "trap\0"
  /* 17507 */ "nop\0"
  /* 17511 */ "stop\0"
  /* 17516 */ "blr\0"
  /* 17520 */ "bdzlr\0"
  /* 17526 */ "bdnzlr\0"
  /* 17533 */ "bctr\0"
  /* 17538 */ "cpabort\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    16657U,	// DBG_VALUE
    17160U,	// DBG_VALUE_LIST
    16667U,	// DBG_INSTR_REF
    16681U,	// DBG_PHI
    16699U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    16623U,	// BUNDLE
    17145U,	// LIFETIME_START
    16523U,	// LIFETIME_END
    16610U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    17441U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    14209U,	// PATCHABLE_FUNCTION_ENTER
    14129U,	// PATCHABLE_RET
    14255U,	// PATCHABLE_FUNCTION_EXIT
    14232U,	// PATCHABLE_TAIL_CALL
    14184U,	// PATCHABLE_EVENT_CALL
    14160U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    15783U,	// ATOMIC_CMP_SWAP_I128
    15698U,	// ATOMIC_LOAD_ADD_I128
    15743U,	// ATOMIC_LOAD_AND_I128
    15720U,	// ATOMIC_LOAD_NAND_I128
    15827U,	// ATOMIC_LOAD_OR_I128
    15676U,	// ATOMIC_LOAD_SUB_I128
    15805U,	// ATOMIC_LOAD_XOR_I128
    15765U,	// ATOMIC_SWAP_I128
    16544U,	// BUILD_QUADWORD
    35077U,	// BUILD_UACC
    15872U,	// CFENCE8
    1073779510U,	// CLRLSLDI
    1073775443U,	// CLRLSLDI_rec
    1073780021U,	// CLRLSLWI
    1073775552U,	// CLRLSLWI_rec
    1073779545U,	// CLRRDI
    1073775470U,	// CLRRDI_rec
    1073780062U,	// CLRRWI
    1073775581U,	// CLRRWI_rec
    1119719U,	// DCBFL
    1122126U,	// DCBFLP
    1124375U,	// DCBFPS
    1118355U,	// DCBFx
    1124383U,	// DCBSTPS
    33630645U,	// DCBTCT
    33629925U,	// DCBTDS
    33630653U,	// DCBTSTCT
    33629933U,	// DCBTSTDS
    1125027U,	// DCBTSTT
    1124999U,	// DCBTSTx
    1125014U,	// DCBTT
    1124777U,	// DCBTx
    14825U,	// DFLOADf32
    15246U,	// DFLOADf64
    14847U,	// DFSTOREf32
    15268U,	// DFSTOREf64
    1073779520U,	// EXTLDI
    1073775454U,	// EXTLDI_rec
    1073780047U,	// EXTLWI
    1073775572U,	// EXTLWI_rec
    1073779569U,	// EXTRDI
    1073775497U,	// EXTRDI_rec
    1073780086U,	// EXTRWI
    1073775608U,	// EXTRWI_rec
    1073780031U,	// INSLWI
    1073775563U,	// INSLWI_rec
    1073779553U,	// INSRDI
    1073775479U,	// INSRDI_rec
    1073780070U,	// INSRWI
    1073775590U,	// INSRWI_rec
    16971U,	// KILL_PAIR
    67144326U,	// LAx
    17190U,	// LIWAX
    17278U,	// LIWZX
    1073779688U,	// RLWIMIbm
    1073775535U,	// RLWIMIbm_rec
    1073780664U,	// RLWINMbm
    1073775686U,	// RLWINMbm_rec
    1073780681U,	// RLWNMbm
    1073775695U,	// RLWNMbm_rec
    1073779561U,	// ROTRDI
    1073775488U,	// ROTRDI_rec
    1073780078U,	// ROTRWI
    1073775599U,	// ROTRWI_rec
    1073779514U,	// SLDI
    1073775447U,	// SLDI_rec
    1073780025U,	// SLWI
    1073775556U,	// SLWI_rec
    16508U,	// SPILLTOVSR_LD
    17197U,	// SPILLTOVSR_LDX
    17175U,	// SPILLTOVSR_ST
    17255U,	// SPILLTOVSR_STX
    1073779555U,	// SRDI
    1073775481U,	// SRDI_rec
    1073780072U,	// SRWI
    1073775592U,	// SRWI_rec
    17271U,	// STIWX
    1073779468U,	// SUBI
    1073777873U,	// SUBIC
    1073775018U,	// SUBIC_rec
    1073784778U,	// SUBIS
    100706257U,	// SUBPCIS
    14836U,	// XFLOADf32
    15257U,	// XFLOADf64
    14859U,	// XFSTOREf32
    15280U,	// XFSTOREf64
    1073778065U,	// ADD4
    1073781223U,	// ADD4O
    1073775786U,	// ADD4O_rec
    1073778065U,	// ADD4TLS
    1073775090U,	// ADD4_rec
    1073778065U,	// ADD8
    1073781223U,	// ADD8O
    1073775786U,	// ADD8O_rec
    1073778065U,	// ADD8TLS
    1073778065U,	// ADD8TLS_
    1073775090U,	// ADD8_rec
    1073777835U,	// ADDC
    1073777835U,	// ADDC8
    1073781208U,	// ADDC8O
    1073775769U,	// ADDC8O_rec
    1073774985U,	// ADDC8_rec
    1073781208U,	// ADDCO
    1073775769U,	// ADDCO_rec
    1073774985U,	// ADDC_rec
    1073778686U,	// ADDE
    1073778686U,	// ADDE8
    1073781244U,	// ADDE8O
    1073775810U,	// ADDE8O_rec
    1073775229U,	// ADDE8_rec
    1073781244U,	// ADDEO
    1073775810U,	// ADDEO_rec
    1073787268U,	// ADDEX
    1073787268U,	// ADDEX8
    1073775229U,	// ADDE_rec
    1073779496U,	// ADDI
    1073779496U,	// ADDI8
    1073777880U,	// ADDIC
    1073777880U,	// ADDIC8
    1073775026U,	// ADDIC_rec
    1073784803U,	// ADDIS
    1073784803U,	// ADDIS8
    16305U,	// ADDISdtprelHA
    14311U,	// ADDISdtprelHA32
    16288U,	// ADDISgotTprelHA
    16260U,	// ADDIStlsgdHA
    16274U,	// ADDIStlsldHA
    16248U,	// ADDIStocHA
    15848U,	// ADDIStocHA8
    16809U,	// ADDIdtprelL
    14600U,	// ADDIdtprelL32
    16772U,	// ADDItlsgdL
    14557U,	// ADDItlsgdL32
    16913U,	// ADDItlsgdLADDR
    14652U,	// ADDItlsgdLADDR32
    16784U,	// ADDItlsldL
    14571U,	// ADDItlsldL32
    16929U,	// ADDItlsldLADDR
    14670U,	// ADDItlsldLADDR32
    17360U,	// ADDItoc
    16753U,	// ADDItocL
    36929U,	// ADDME
    36929U,	// ADDME8
    39443U,	// ADDME8O
    34012U,	// ADDME8O_rec
    33437U,	// ADDME8_rec
    39443U,	// ADDMEO
    34012U,	// ADDMEO_rec
    33437U,	// ADDME_rec
    42970U,	// ADDPCIS
    36996U,	// ADDZE
    36996U,	// ADDZE8
    39468U,	// ADDZE8O
    34040U,	// ADDZE8O_rec
    33486U,	// ADDZE8_rec
    39468U,	// ADDZEO
    34040U,	// ADDZEO_rec
    33486U,	// ADDZE_rec
    100626U,	// ADJCALLSTACKDOWN
    100645U,	// ADJCALLSTACKUP
    1073778290U,	// AND
    1073778290U,	// AND8
    1073775152U,	// AND8_rec
    1073777844U,	// ANDC
    1073777844U,	// ANDC8
    1073774992U,	// ANDC8_rec
    1073774992U,	// ANDC_rec
    1073775463U,	// ANDI8_rec
    1073776322U,	// ANDIS8_rec
    1073776322U,	// ANDIS_rec
    1073775463U,	// ANDI_rec
    17074U,	// ANDI_rec_1_EQ_BIT
    16181U,	// ANDI_rec_1_EQ_BIT8
    17093U,	// ANDI_rec_1_GT_BIT
    16201U,	// ANDI_rec_1_GT_BIT8
    1073775152U,	// AND_rec
    2283833517U,	// ATOMIC_CMP_SWAP_I16
    2283833443U,	// ATOMIC_CMP_SWAP_I32
    14995U,	// ATOMIC_CMP_SWAP_I64
    16042U,	// ATOMIC_CMP_SWAP_I8
    15468U,	// ATOMIC_LOAD_ADD_I16
    14349U,	// ATOMIC_LOAD_ADD_I32
    14892U,	// ATOMIC_LOAD_ADD_I64
    15940U,	// ATOMIC_LOAD_ADD_I8
    15511U,	// ATOMIC_LOAD_AND_I16
    14392U,	// ATOMIC_LOAD_AND_I32
    15292U,	// ATOMIC_LOAD_AND_I64
    15981U,	// ATOMIC_LOAD_AND_I8
    15655U,	// ATOMIC_LOAD_MAX_I16
    14536U,	// ATOMIC_LOAD_MAX_I32
    15079U,	// ATOMIC_LOAD_MAX_I64
    16132U,	// ATOMIC_LOAD_MAX_I8
    15554U,	// ATOMIC_LOAD_MIN_I16
    14435U,	// ATOMIC_LOAD_MIN_I32
    14957U,	// ATOMIC_LOAD_MIN_I64
    16022U,	// ATOMIC_LOAD_MIN_I8
    15489U,	// ATOMIC_LOAD_NAND_I16
    14370U,	// ATOMIC_LOAD_NAND_I32
    14913U,	// ATOMIC_LOAD_NAND_I64
    15960U,	// ATOMIC_LOAD_NAND_I8
    15613U,	// ATOMIC_LOAD_OR_I16
    14494U,	// ATOMIC_LOAD_OR_I32
    15037U,	// ATOMIC_LOAD_OR_I64
    16081U,	// ATOMIC_LOAD_OR_I8
    15447U,	// ATOMIC_LOAD_SUB_I16
    14328U,	// ATOMIC_LOAD_SUB_I32
    14871U,	// ATOMIC_LOAD_SUB_I64
    15906U,	// ATOMIC_LOAD_SUB_I8
    15633U,	// ATOMIC_LOAD_UMAX_I16
    14514U,	// ATOMIC_LOAD_UMAX_I32
    15057U,	// ATOMIC_LOAD_UMAX_I64
    16111U,	// ATOMIC_LOAD_UMAX_I8
    15532U,	// ATOMIC_LOAD_UMIN_I16
    14413U,	// ATOMIC_LOAD_UMIN_I32
    14935U,	// ATOMIC_LOAD_UMIN_I64
    16001U,	// ATOMIC_LOAD_UMIN_I8
    15592U,	// ATOMIC_LOAD_XOR_I16
    14473U,	// ATOMIC_LOAD_XOR_I32
    15016U,	// ATOMIC_LOAD_XOR_I64
    16062U,	// ATOMIC_LOAD_XOR_I8
    15575U,	// ATOMIC_SWAP_I16
    14456U,	// ATOMIC_SWAP_I32
    14978U,	// ATOMIC_SWAP_I64
    16232U,	// ATOMIC_SWAP_I8
    17488U,	// ATTN
    1182406U,	// B
    1214911U,	// BA
    167805047U,	// BC
    3359648U,	// BCC
    4408224U,	// BCCA
    5456800U,	// BCCCTR
    5456800U,	// BCCCTR8
    6505376U,	// BCCCTRL
    6505376U,	// BCCCTRL8
    7553952U,	// BCCL
    8602528U,	// BCCLA
    9651104U,	// BCCLR
    10699680U,	// BCCLRL
    11567273U,	// BCCTR
    11567273U,	// BCCTR8
    11567329U,	// BCCTR8n
    11567251U,	// BCCTRL
    11567251U,	// BCCTRL8
    11567309U,	// BCCTRL8n
    11567309U,	// BCCTRLn
    11567329U,	// BCCTRn
    1073775703U,	// BCDCFN_rec
    1073776090U,	// BCDCFSQ_rec
    1073776669U,	// BCDCFZ_rec
    1073775712U,	// BCDCPSGN_rec
    33936U,	// BCDCTN_rec
    34276U,	// BCDCTSQ_rec
    1073776685U,	// BCDCTZ_rec
    1073775732U,	// BCDSETSGN_rec
    1073776198U,	// BCDSR_rec
    1073776254U,	// BCDS_rec
    1073775042U,	// BCDTRUNC_rec
    1073776347U,	// BCDUS_rec
    1073775053U,	// BCDUTRUNC_rec
    167805055U,	// BCL
    11567263U,	// BCLR
    11567240U,	// BCLRL
    11567299U,	// BCLRLn
    11567320U,	// BCLRn
    1179725U,	// BCLalways
    167805115U,	// BCLn
    17534U,	// BCTR
    17534U,	// BCTR8
    17482U,	// BCTRL
    17482U,	// BCTRL8
    229466U,	// BCTRL8_LDinto_toc
    229466U,	// BCTRL8_LDinto_toc_RM
    17482U,	// BCTRL8_RM
    229480U,	// BCTRL_LWZinto_toc
    229480U,	// BCTRL_LWZinto_toc_RM
    17482U,	// BCTRL_RM
    167805108U,	// BCn
    1193602U,	// BDNZ
    1193602U,	// BDNZ8
    1215163U,	// BDNZA
    1212687U,	// BDNZAm
    1212457U,	// BDNZAp
    1185384U,	// BDNZL
    1215127U,	// BDNZLA
    1212671U,	// BDNZLAm
    1212441U,	// BDNZLAp
    17527U,	// BDNZLR
    17527U,	// BDNZLR8
    17474U,	// BDNZLRL
    14105U,	// BDNZLRLm
    14062U,	// BDNZLRLp
    14121U,	// BDNZLRm
    14078U,	// BDNZLRp
    1179934U,	// BDNZLm
    1179704U,	// BDNZLp
    1179948U,	// BDNZm
    1179718U,	// BDNZp
    1193448U,	// BDZ
    1193448U,	// BDZ8
    1215157U,	// BDZA
    1212680U,	// BDZAm
    1212450U,	// BDZAp
    1185378U,	// BDZL
    1215120U,	// BDZLA
    1212663U,	// BDZLAm
    1212433U,	// BDZLAp
    17521U,	// BDZLR
    17521U,	// BDZLR8
    17467U,	// BDZLRL
    14097U,	// BDZLRLm
    14054U,	// BDZLRLp
    14114U,	// BDZLRm
    14071U,	// BDZLRp
    1179927U,	// BDZLm
    1179697U,	// BDZLp
    1179942U,	// BDZm
    1179712U,	// BDZp
    1185198U,	// BL
    1185198U,	// BL8
    12719534U,	// BL8_NOP
    12719534U,	// BL8_NOP_RM
    12850606U,	// BL8_NOP_TLS
    1185198U,	// BL8_NOTOC
    1185198U,	// BL8_NOTOC_RM
    1316270U,	// BL8_NOTOC_TLS
    1185198U,	// BL8_RM
    1316270U,	// BL8_TLS
    1316270U,	// BL8_TLS_
    1215109U,	// BLA
    1215109U,	// BLA8
    12749445U,	// BLA8_NOP
    12749445U,	// BLA8_NOP_RM
    1215109U,	// BLA8_RM
    1215109U,	// BLA_RM
    17517U,	// BLR
    17517U,	// BLR8
    17462U,	// BLRL
    12719534U,	// BL_NOP
    12719534U,	// BL_NOP_RM
    1185198U,	// BL_RM
    1316270U,	// BL_TLS
    1073778270U,	// BPERMD
    1073777936U,	// BRINC
    1073778133U,	// CFUGED
    17306U,	// CLRBHRB
    1073777468U,	// CMPB
    1073777468U,	// CMPB8
    1073778342U,	// CMPD
    1073779538U,	// CMPDI
    1073777474U,	// CMPEQB
    1073778241U,	// CMPLD
    1073779502U,	// CMPLDI
    1073786352U,	// CMPLW
    1073780005U,	// CMPLWI
    1275104074U,	// CMPRB
    1275104074U,	// CMPRB8
    1073786609U,	// CMPW
    1073780055U,	// CMPWI
    36822U,	// CNTLZD
    1073780497U,	// CNTLZDM
    33387U,	// CNTLZD_rec
    45180U,	// CNTLZW
    45180U,	// CNTLZW8
    34770U,	// CNTLZW8_rec
    34770U,	// CNTLZW_rec
    36837U,	// CNTTZD
    1073780514U,	// CNTTZDM
    33396U,	// CNTTZD_rec
    45195U,	// CNTTZW
    45195U,	// CNTTZW8
    34779U,	// CNTTZW8_rec
    34779U,	// CNTTZW_rec
    17539U,	// CP_ABORT
    46539U,	// CP_COPY
    46539U,	// CP_COPY8
    1073775294U,	// CP_PASTE8_rec
    1073775294U,	// CP_PASTE_rec
    15406U,	// CR6SET
    15392U,	// CR6UNSET
    1073778320U,	// CRAND
    1073777850U,	// CRANDC
    1073785798U,	// CREQV
    1073778304U,	// CRNAND
    1073784225U,	// CRNOR
    1073784239U,	// CROR
    1073777957U,	// CRORC
    1308666822U,	// CRSET
    1308665293U,	// CRUNSET
    1073784269U,	// CRXOR
    3359648U,	// CTRL_DEP
    268474815U,	// DARN
    1116605U,	// DCBA
    13930643U,	// DCBF
    1121869U,	// DCBFEP
    1118960U,	// DCBI
    1124979U,	// DCBST
    1121902U,	// DCBSTEP
    14985641U,	// DCBT
    335462U,	// DCBTEP
    14985863U,	// DCBTST
    335479U,	// DCBTSTEP
    1127889U,	// DCBZ
    1121921U,	// DCBZEP
    1119835U,	// DCBZL
    1121885U,	// DCBZLEP
    37650U,	// DCCCI
    1073778633U,	// DIVD
    1073778692U,	// DIVDE
    1073781251U,	// DIVDEO
    1073775818U,	// DIVDEO_rec
    1073785600U,	// DIVDEU
    1073781490U,	// DIVDEUO
    1073775907U,	// DIVDEUO_rec
    1073776425U,	// DIVDEU_rec
    1073775236U,	// DIVDE_rec
    1073781237U,	// DIVDO
    1073775802U,	// DIVDO_rec
    1073785593U,	// DIVDU
    1073781482U,	// DIVDUO
    1073775898U,	// DIVDUO_rec
    1073776417U,	// DIVDU_rec
    1073775204U,	// DIVD_rec
    1073786979U,	// DIVW
    1073778804U,	// DIVWE
    1073781284U,	// DIVWEO
    1073775855U,	// DIVWEO_rec
    1073785608U,	// DIVWEU
    1073781499U,	// DIVWEUO
    1073775917U,	// DIVWEUO_rec
    1073776434U,	// DIVWEU_rec
    1073775302U,	// DIVWE_rec
    1073781524U,	// DIVWO
    1073775945U,	// DIVWO_rec
    1073785712U,	// DIVWU
    1073781508U,	// DIVWUO
    1073775927U,	// DIVWUO_rec
    1073776461U,	// DIVWU_rec
    1073776576U,	// DIVW_rec
    1419308U,	// DSS
    17455U,	// DSSALL
    1376135802U,	// DST
    1376135802U,	// DST64
    1376135823U,	// DSTST
    1376135823U,	// DSTST64
    1376135852U,	// DSTSTT
    1376135852U,	// DSTSTT64
    1376135837U,	// DSTT
    1376135837U,	// DSTT64
    16378U,	// DYNALLOC
    15861U,	// DYNALLOC8
    17031U,	// DYNAREAOFFSET
    16165U,	// DYNAREAOFFSET8
    42540U,	// EFDABS
    1073778062U,	// EFDADD
    42831U,	// EFDCFS
    37091U,	// EFDCFSF
    38043U,	// EFDCFSI
    36367U,	// EFDCFSID
    37193U,	// EFDCFUF
    38109U,	// EFDCFUI
    36384U,	// EFDCFUID
    1073783720U,	// EFDCMPEQ
    1073785287U,	// EFDCMPGT
    1073785355U,	// EFDCMPLT
    37165U,	// EFDCTSF
    38071U,	// EFDCTSI
    46573U,	// EFDCTSIDZ
    46671U,	// EFDCTSIZ
    37221U,	// EFDCTUF
    38137U,	// EFDCTUI
    46592U,	// EFDCTUIDZ
    46702U,	// EFDCTUIZ
    1073785746U,	// EFDDIV
    1073780258U,	// EFDMUL
    42554U,	// EFDNABS
    37247U,	// EFDNEG
    1073777691U,	// EFDSUB
    1073783760U,	// EFDTSTEQ
    1073785318U,	// EFDTSTGT
    1073785386U,	// EFDTSTLT
    42589U,	// EFSABS
    1073778091U,	// EFSADD
    36317U,	// EFSCFD
    37100U,	// EFSCFSF
    38052U,	// EFSCFSI
    37202U,	// EFSCFUF
    38118U,	// EFSCFUI
    1073783730U,	// EFSCMPEQ
    1073785297U,	// EFSCMPGT
    1073785365U,	// EFSCMPLT
    37174U,	// EFSCTSF
    38080U,	// EFSCTSI
    46681U,	// EFSCTSIZ
    37230U,	// EFSCTUF
    38146U,	// EFSCTUI
    46712U,	// EFSCTUIZ
    1073785760U,	// EFSDIV
    1073780272U,	// EFSMUL
    42570U,	// EFSNABS
    37261U,	// EFSNEG
    1073777720U,	// EFSSUB
    1073783770U,	// EFSTSTEQ
    1073785328U,	// EFSTSTGT
    1073785396U,	// EFSTSTLT
    14615U,	// EH_SjLj_LongJmp32
    15100U,	// EH_SjLj_LongJmp64
    14634U,	// EH_SjLj_SetJmp32
    15119U,	// EH_SjLj_SetJmp64
    1179649U,	// EH_SjLj_Setup
    1073785793U,	// EQV
    1073785793U,	// EQV8
    1073776476U,	// EQV8_rec
    1073776476U,	// EQV_rec
    42606U,	// EVABS
    1107340734U,	// EVADDIW
    44079U,	// EVADDSMIAAW
    44211U,	// EVADDSSIAAW
    44145U,	// EVADDUMIAAW
    44277U,	// EVADDUSIAAW
    1073786204U,	// EVADDW
    1073778327U,	// EVAND
    1073777858U,	// EVANDC
    1073783751U,	// EVCMPEQ
    1073784899U,	// EVCMPGTS
    1073785660U,	// EVCMPGTU
    1073784909U,	// EVCMPLTS
    1073785670U,	// EVCMPLTU
    44875U,	// EVCNTLSW
    45178U,	// EVCNTLZW
    1073785069U,	// EVDIVWS
    1073785710U,	// EVDIVWU
    1073785805U,	// EVEQV
    35751U,	// EVEXTSB
    37447U,	// EVEXTSH
    42597U,	// EVFSABS
    1073778099U,	// EVFSADD
    37109U,	// EVFSCFSF
    38061U,	// EVFSCFSI
    37211U,	// EVFSCFUF
    38127U,	// EVFSCFUI
    1073783740U,	// EVFSCMPEQ
    1073785307U,	// EVFSCMPGT
    1073785375U,	// EVFSCMPLT
    37183U,	// EVFSCTSF
    38089U,	// EVFSCTSI
    46691U,	// EVFSCTSIZ
    37183U,	// EVFSCTUF
    38155U,	// EVFSCTUI
    46691U,	// EVFSCTUIZ
    1073785768U,	// EVFSDIV
    1073780280U,	// EVFSMUL
    42579U,	// EVFSNABS
    37269U,	// EVFSNEG
    1073777728U,	// EVFSSUB
    1073783780U,	// EVFSTSTEQ
    1073785338U,	// EVFSTSTGT
    1073785406U,	// EVFSTSTLT
    67145148U,	// EVLDD
    134263099U,	// EVLDDX
    67146165U,	// EVLDH
    134263208U,	// EVLDHX
    67153252U,	// EVLDW
    134264142U,	// EVLDWX
    67152219U,	// EVLHHESPLAT
    134263932U,	// EVLHHESPLATX
    67152244U,	// EVLHHOSSPLAT
    134263959U,	// EVLHHOSSPLATX
    67152258U,	// EVLHHOUSPLAT
    134263974U,	// EVLHHOUSPLATX
    67145762U,	// EVLWHE
    134263179U,	// EVLWHEX
    67151886U,	// EVLWHOS
    134263914U,	// EVLWHOSX
    67152671U,	// EVLWHOU
    134264065U,	// EVLWHOUX
    67152232U,	// EVLWHSPLAT
    134263946U,	// EVLWHSPLATX
    67152272U,	// EVLWWSPLAT
    134263989U,	// EVLWWSPLATX
    1073779609U,	// EVMERGEHI
    1073781342U,	// EVMERGEHILO
    1073781331U,	// EVMERGELO
    1073779620U,	// EVMERGELOHI
    1073776963U,	// EVMHEGSMFAA
    1073780871U,	// EVMHEGSMFAN
    1073777011U,	// EVMHEGSMIAA
    1073780919U,	// EVMHEGSMIAN
    1073777048U,	// EVMHEGUMIAA
    1073780956U,	// EVMHEGUMIAN
    1073778847U,	// EVMHESMF
    1073777096U,	// EVMHESMFA
    1073785851U,	// EVMHESMFAAW
    1073786393U,	// EVMHESMFANW
    1073779704U,	// EVMHESMI
    1073777188U,	// EVMHESMIA
    1073785916U,	// EVMHESMIAAW
    1073786445U,	// EVMHESMIANW
    1073778950U,	// EVMHESSF
    1073777139U,	// EVMHESSFA
    1073785877U,	// EVMHESSFAAW
    1073786419U,	// EVMHESSFANW
    1073786048U,	// EVMHESSIAAW
    1073786523U,	// EVMHESSIANW
    1073779743U,	// EVMHEUMI
    1073777231U,	// EVMHEUMIA
    1073785982U,	// EVMHEUMIAAW
    1073786484U,	// EVMHEUMIANW
    1073786114U,	// EVMHEUSIAAW
    1073786562U,	// EVMHEUSIANW
    1073776976U,	// EVMHOGSMFAA
    1073780884U,	// EVMHOGSMFAN
    1073777024U,	// EVMHOGSMIAA
    1073780932U,	// EVMHOGSMIAN
    1073777061U,	// EVMHOGUMIAA
    1073780969U,	// EVMHOGUMIAN
    1073778867U,	// EVMHOSMF
    1073777118U,	// EVMHOSMFA
    1073785864U,	// EVMHOSMFAAW
    1073786406U,	// EVMHOSMFANW
    1073779724U,	// EVMHOSMI
    1073777210U,	// EVMHOSMIA
    1073785956U,	// EVMHOSMIAAW
    1073786471U,	// EVMHOSMIANW
    1073778970U,	// EVMHOSSF
    1073777161U,	// EVMHOSSFA
    1073785890U,	// EVMHOSSFAAW
    1073786432U,	// EVMHOSSFANW
    1073786088U,	// EVMHOSSIAAW
    1073786549U,	// EVMHOSSIANW
    1073779773U,	// EVMHOUMI
    1073777264U,	// EVMHOUMIA
    1073786022U,	// EVMHOUMIAAW
    1073786510U,	// EVMHOUMIANW
    1073786154U,	// EVMHOUSIAAW
    1073786588U,	// EVMHOUSIANW
    35487U,	// EVMRA
    1073778857U,	// EVMWHSMF
    1073777107U,	// EVMWHSMFA
    1073779714U,	// EVMWHSMI
    1073777199U,	// EVMWHSMIA
    1073778960U,	// EVMWHSSF
    1073777150U,	// EVMWHSSFA
    1073779753U,	// EVMWHUMI
    1073777242U,	// EVMWHUMIA
    1073785943U,	// EVMWLSMIAAW
    1073786458U,	// EVMWLSMIANW
    1073786075U,	// EVMWLSSIAAW
    1073786536U,	// EVMWLSSIANW
    1073779763U,	// EVMWLUMI
    1073777253U,	// EVMWLUMIA
    1073786009U,	// EVMWLUMIAAW
    1073786497U,	// EVMWLUMIANW
    1073786141U,	// EVMWLUSIAAW
    1073786575U,	// EVMWLUSIANW
    1073778877U,	// EVMWSMF
    1073777129U,	// EVMWSMFA
    1073776989U,	// EVMWSMFAA
    1073780897U,	// EVMWSMFAN
    1073779734U,	// EVMWSMI
    1073777221U,	// EVMWSMIA
    1073777037U,	// EVMWSMIAA
    1073780945U,	// EVMWSMIAN
    1073778980U,	// EVMWSSF
    1073777172U,	// EVMWSSFA
    1073777000U,	// EVMWSSFAA
    1073780908U,	// EVMWSSFAN
    1073779783U,	// EVMWUMI
    1073777275U,	// EVMWUMIA
    1073777074U,	// EVMWUMIAA
    1073780982U,	// EVMWUMIAN
    1073778312U,	// EVNAND
    37278U,	// EVNEG
    1073784232U,	// EVNOR
    1073784245U,	// EVOR
    1073777964U,	// EVORC
    1073786359U,	// EVRLW
    1073780013U,	// EVRLWI
    44395U,	// EVRNDW
    3237000966U,	// EVSEL
    1073786366U,	// EVSLW
    1073780039U,	// EVSLWI
    335582094U,	// EVSPLATFI
    335582419U,	// EVSPLATI
    1073784822U,	// EVSRWIS
    1073785622U,	// EVSRWIU
    1073784997U,	// EVSRWS
    1073785696U,	// EVSRWU
    67145164U,	// EVSTDD
    134263107U,	// EVSTDDX
    67146172U,	// EVSTDH
    134263216U,	// EVSTDHX
    67153267U,	// EVSTDW
    134264150U,	// EVSTDWX
    67145770U,	// EVSTWHE
    134263188U,	// EVSTWHEX
    67148362U,	// EVSTWHO
    134263509U,	// EVSTWHOX
    67145851U,	// EVSTWWE
    134263198U,	// EVSTWWEX
    67148571U,	// EVSTWWO
    134263519U,	// EVSTWWOX
    44105U,	// EVSUBFSMIAAW
    44237U,	// EVSUBFSSIAAW
    44171U,	// EVSUBFUMIAAW
    44303U,	// EVSUBFUSIAAW
    1073786252U,	// EVSUBFW
    369143189U,	// EVSUBIFW
    1073784276U,	// EVXOR
    35753U,	// EXTSB
    35753U,	// EXTSB8
    35753U,	// EXTSB8_32_64
    33096U,	// EXTSB8_rec
    33096U,	// EXTSB_rec
    37449U,	// EXTSH
    37449U,	// EXTSH8
    37449U,	// EXTSH8_32_64
    33546U,	// EXTSH8_rec
    33546U,	// EXTSH_rec
    44919U,	// EXTSW
    1073779652U,	// EXTSWSLI
    1073779652U,	// EXTSWSLI_32_64
    1073775515U,	// EXTSWSLI_32_64_rec
    1073775515U,	// EXTSWSLI_rec
    44919U,	// EXTSW_32
    44919U,	// EXTSW_32_64
    34722U,	// EXTSW_32_64_rec
    34722U,	// EXTSW_rec
    17493U,	// EnforceIEIO
    42548U,	// FABSD
    34388U,	// FABSD_rec
    42548U,	// FABSS
    34388U,	// FABSS_rec
    1073778070U,	// FADD
    1073784517U,	// FADDS
    1073776261U,	// FADDS_rec
    1073775089U,	// FADD_rec
    0U,	// FADDrtz
    36360U,	// FCFID
    42717U,	// FCFIDS
    34464U,	// FCFIDS_rec
    43742U,	// FCFIDU
    43103U,	// FCFIDUS
    34531U,	// FCFIDUS_rec
    34575U,	// FCFIDU_rec
    33297U,	// FCFID_rec
    1073781372U,	// FCMPOD
    1073781372U,	// FCMPOS
    1073785640U,	// FCMPUD
    1073785640U,	// FCMPUS
    1073780993U,	// FCPSGND
    1073775723U,	// FCPSGND_rec
    1073780993U,	// FCPSGNS
    1073775723U,	// FCPSGNS_rec
    36377U,	// FCTID
    43750U,	// FCTIDU
    46750U,	// FCTIDUZ
    34870U,	// FCTIDUZ_rec
    34584U,	// FCTIDU_rec
    46584U,	// FCTIDZ
    34836U,	// FCTIDZ_rec
    33305U,	// FCTID_rec
    44487U,	// FCTIW
    43864U,	// FCTIWU
    46759U,	// FCTIWUZ
    34880U,	// FCTIWUZ_rec
    34628U,	// FCTIWU_rec
    46768U,	// FCTIWZ
    34890U,	// FCTIWZ_rec
    34683U,	// FCTIW_rec
    1073785754U,	// FDIV
    1073784990U,	// FDIVS
    1073776365U,	// FDIVS_rec
    1073776469U,	// FDIV_rec
    1073778076U,	// FMADD
    1073784524U,	// FMADDS
    1073776269U,	// FMADDS_rec
    1073775096U,	// FMADD_rec
    42350U,	// FMR
    34356U,	// FMR_rec
    1073777705U,	// FMSUB
    1073784500U,	// FMSUBS
    1073776235U,	// FMSUBS_rec
    1073774946U,	// FMSUB_rec
    1073780266U,	// FMUL
    1073784839U,	// FMULS
    1073776330U,	// FMULS_rec
    1073775661U,	// FMUL_rec
    42563U,	// FNABSD
    34395U,	// FNABSD_rec
    42563U,	// FNABSS
    34395U,	// FNABSS_rec
    37255U,	// FNEGD
    33518U,	// FNEGD_rec
    37255U,	// FNEGS
    33518U,	// FNEGS_rec
    1073778083U,	// FNMADD
    1073784532U,	// FNMADDS
    1073776278U,	// FNMADDS_rec
    1073775104U,	// FNMADD_rec
    1073777712U,	// FNMSUB
    1073784508U,	// FNMSUBS
    1073776244U,	// FNMSUBS_rec
    1073774954U,	// FNMSUB_rec
    36951U,	// FRE
    42815U,	// FRES
    34473U,	// FRES_rec
    33454U,	// FRE_rec
    38826U,	// FRIMD
    33855U,	// FRIMD_rec
    38826U,	// FRIMS
    33855U,	// FRIMS_rec
    39184U,	// FRIND
    33929U,	// FRIND_rec
    39184U,	// FRINS
    33929U,	// FRINS_rec
    40766U,	// FRIPD
    34208U,	// FRIPD_rec
    40766U,	// FRIPS
    34208U,	// FRIPS_rec
    46665U,	// FRIZD
    34854U,	// FRIZD_rec
    46665U,	// FRIZS
    34854U,	// FRIZS_rec
    41687U,	// FRSP
    34239U,	// FRSP_rec
    36964U,	// FRSQRTE
    42821U,	// FRSQRTES
    34480U,	// FRSQRTES_rec
    33460U,	// FRSQRTE_rec
    1073780174U,	// FSELD
    1073775644U,	// FSELD_rec
    1073780174U,	// FSELS
    1073775644U,	// FSELS_rec
    43593U,	// FSQRT
    43095U,	// FSQRTS
    34514U,	// FSQRTS_rec
    34558U,	// FSQRT_rec
    1073777699U,	// FSUB
    1073784493U,	// FSUBS
    1073776227U,	// FSUBS_rec
    1073774939U,	// FSUB_rec
    1073785777U,	// FTDIV
    43600U,	// FTSQRT
    16959U,	// GETtlsADDR
    14703U,	// GETtlsADDR32
    17213U,	// GETtlsADDR32AIX
    17229U,	// GETtlsADDR64AIX
    16728U,	// GETtlsADDRPCREL
    16945U,	// GETtlsldADDR
    14688U,	// GETtlsldADDR32
    16709U,	// GETtlsldADDRPCREL
    402691480U,	// HASHCHK
    402693956U,	// HASHCHKP
    402696831U,	// HASHST
    402695021U,	// HASHSTP
    17377U,	// HRFID
    1118966U,	// ICBI
    1121877U,	// ICBIEP
    429321U,	// ICBLC
    427474U,	// ICBLQ
    436655U,	// ICBT
    436223U,	// ICBTLS
    37657U,	// ICCCI
    1073780180U,	// ISEL
    1073780180U,	// ISEL8
    17341U,	// ISYNC
    436243078U,	// LA
    134263648U,	// LBARX
    134263648U,	// LBARXL
    134263529U,	// LBEPX
    67155416U,	// LBZ
    67155416U,	// LBZ8
    1073787407U,	// LBZCIX
    469805943U,	// LBZU
    469805943U,	// LBZU8
    503362849U,	// LBZUX
    503362849U,	// LBZUX8
    134264223U,	// LBZX
    134264223U,	// LBZX8
    1073788319U,	// LBZXTLS
    1073788319U,	// LBZXTLS_
    1073788319U,	// LBZXTLS_32
    67145261U,	// LD
    134263655U,	// LDARX
    134263655U,	// LDARXL
    1073785166U,	// LDAT
    134263683U,	// LDBRX
    1073787376U,	// LDCIX
    134263487U,	// LDMX
    469805806U,	// LDU
    503362790U,	// LDUX
    134263129U,	// LDX
    1073787225U,	// LDXTLS
    1073787225U,	// LDXTLS_
    16796U,	// LDgotTprelL
    14585U,	// LDgotTprelL32
    17353U,	// LDtoc
    17135U,	// LDtocBA
    17135U,	// LDtocCPT
    16689U,	// LDtocJTI
    16745U,	// LDtocL
    67145190U,	// LFD
    134263544U,	// LFDEPX
    469805760U,	// LFDU
    503362775U,	// LFDUX
    134263116U,	// LFDX
    134263016U,	// LFIWAX
    134264244U,	// LFIWZX
    67151710U,	// LFS
    469805871U,	// LFSU
    503362827U,	// LFSUX
    134263901U,	// LFSX
    67144223U,	// LHA
    67144223U,	// LHA8
    134263662U,	// LHARX
    134263662U,	// LHARXL
    469805748U,	// LHAU
    469805748U,	// LHAU8
    503362754U,	// LHAUX
    503362754U,	// LHAUX8
    134263001U,	// LHAX
    134263001U,	// LHAX8
    134263698U,	// LHBRX
    134263698U,	// LHBRX8
    134263561U,	// LHEPX
    67155490U,	// LHZ
    67155490U,	// LHZ8
    1073787415U,	// LHZCIX
    469805949U,	// LHZU
    469805949U,	// LHZU8
    503362856U,	// LHZUX
    503362856U,	// LHZUX8
    134264238U,	// LHZX
    134264238U,	// LHZX8
    1073788334U,	// LHZXTLS
    1073788334U,	// LHZXTLS_
    1073788334U,	// LHZXTLS_32
    100701108U,	// LI
    100701108U,	// LI8
    100706282U,	// LIS
    100706282U,	// LIS8
    67153413U,	// LMW
    67150833U,	// LQ
    134263669U,	// LQARX
    134263669U,	// LQARXL
    16830U,	// LQX_PSEUDO
    1073780094U,	// LSWI
    134263039U,	// LVEBX
    134263225U,	// LVEHX
    134264159U,	// LVEWX
    134256156U,	// LVSL
    134260227U,	// LVSR
    134264118U,	// LVX
    134256206U,	// LVXL
    67144359U,	// LWA
    134263676U,	// LWARX
    134263676U,	// LWARXL
    1073785244U,	// LWAT
    503362761U,	// LWAUX
    134263033U,	// LWAX
    134263033U,	// LWAX_32
    67144359U,	// LWA_32
    134263732U,	// LWBRX
    134263732U,	// LWBRX8
    134263576U,	// LWEPX
    67155641U,	// LWZ
    67155641U,	// LWZ8
    1073787423U,	// LWZCIX
    469805955U,	// LWZU
    469805955U,	// LWZU8
    503362863U,	// LWZUX
    503362863U,	// LWZUX8
    134264261U,	// LWZX
    134264261U,	// LWZX8
    1073788357U,	// LWZXTLS
    1073788357U,	// LWZXTLS_
    1073788357U,	// LWZXTLS_32
    17369U,	// LWZtoc
    16763U,	// LWZtocL
    67145505U,	// LXSD
    134263151U,	// LXSDX
    134264214U,	// LXSIBZX
    134264229U,	// LXSIHZX
    134263024U,	// LXSIWAX
    134264252U,	// LXSIWZX
    67150584U,	// LXSSP
    134263616U,	// LXSSPX
    67152859U,	// LXV
    134262965U,	// LXVB16X
    134262931U,	// LXVD2X
    134263886U,	// LXVDSX
    134262984U,	// LXVH8X
    1073780289U,	// LXVL
    1073780215U,	// LXVLL
    67150711U,	// LXVP
    134263633U,	// LXVPX
    134263063U,	// LXVRBX
    134263134U,	// LXVRDX
    134263249U,	// LXVRHX
    134264191U,	// LXVRWX
    134262948U,	// LXVW4X
    134263924U,	// LXVWSX
    134264129U,	// LXVX
    1073778169U,	// MADDHD
    1073785549U,	// MADDHDU
    1073778225U,	// MADDLD
    1073778225U,	// MADDLD8
    1418453U,	// MBAR
    37062U,	// MCRF
    42851U,	// MCRFS
    1094719U,	// MCRXRX
    536907757U,	// MFBHRBE
    1090826U,	// MFCR
    1090826U,	// MFCR8
    1091088U,	// MFCTR
    1091088U,	// MFCTR8
    42229U,	// MFDCR
    1091415U,	// MFFS
    39374U,	// MFFSCDRN
    570463330U,	// MFFSCDRNI
    1085430U,	// MFFSCE
    39365U,	// MFFSCRN
    268473432U,	// MFFSCRNI
    1086997U,	// MFFSL
    1083067U,	// MFFS_rec
    1090914U,	// MFLR
    1090914U,	// MFLR8
    1091055U,	// MFMSR
    604016844U,	// MFOCRF
    604016844U,	// MFOCRF8
    42355U,	// MFPMR
    42459U,	// MFSPR
    42459U,	// MFSPR8
    637576681U,	// MFSR
    39190U,	// MFSRIN
    35774U,	// MFTB
    16819675U,	// MFTB8
    36539U,	// MFVRD
    17868251U,	// MFVRSAVE
    17868251U,	// MFVRSAVEv
    46782U,	// MFVRWZ
    1090840U,	// MFVSCR
    36539U,	// MFVSRD
    36424U,	// MFVSRLD
    46782U,	// MFVSRWZ
    1073778380U,	// MODSD
    1073786629U,	// MODSW
    1073778535U,	// MODUD
    1073786839U,	// MODUW
    17333U,	// MSGSYNC
    17347U,	// MSYNC
    37084U,	// MTCRF
    37084U,	// MTCRF8
    1091095U,	// MTCTR
    1091095U,	// MTCTR8
    1091095U,	// MTCTR8loop
    1091095U,	// MTCTRloop
    235283715U,	// MTDCR
    1411155U,	// MTFSB0
    1411163U,	// MTFSB1
    1073778943U,	// MTFSF
    302453638U,	// MTFSFI
    671548306U,	// MTFSFI_rec
    1512326U,	// MTFSFIb
    1073775334U,	// MTFSF_rec
    37119U,	// MTFSFb
    1090920U,	// MTLR
    1090920U,	// MTLR8
    201369078U,	// MTMSR
    201363123U,	// MTMSRD
    495828U,	// MTOCRF
    495828U,	// MTOCRF8
    42362U,	// MTPMR
    42466U,	// MTSPR
    42466U,	// MTSPR8
    534013U,	// MTSR
    39198U,	// MTSRIN
    36547U,	// MTVRD
    1081579U,	// MTVRSAVE
    1442027U,	// MTVRSAVEv
    35500U,	// MTVRWA
    46791U,	// MTVRWZ
    1090848U,	// MTVSCR
    38532U,	// MTVSRBM
    704680910U,	// MTVSRBMI
    36547U,	// MTVSRD
    1073778115U,	// MTVSRDD
    38604U,	// MTVSRDM
    38710U,	// MTVSRHM
    38875U,	// MTVSRQM
    35500U,	// MTVSRWA
    38987U,	// MTVSRWM
    43181U,	// MTVSRWS
    46791U,	// MTVSRWZ
    1073778177U,	// MULHD
    1073785558U,	// MULHDU
    1073776390U,	// MULHDU_rec
    1073775113U,	// MULHD_rec
    1073786295U,	// MULHW
    1073785680U,	// MULHWU
    1073776443U,	// MULHWU_rec
    1073776499U,	// MULHW_rec
    1073778234U,	// MULLD
    1073781229U,	// MULLDO
    1073775793U,	// MULLDO_rec
    1073775137U,	// MULLD_rec
    1073779640U,	// MULLI
    1073779640U,	// MULLI8
    1073786345U,	// MULLW
    1073781516U,	// MULLWO
    1073775936U,	// MULLWO_rec
    1073776515U,	// MULLW_rec
    16994U,	// MoveGOTtoLR
    16982U,	// MovePCtoLR
    16152U,	// MovePCtoLR8
    1073778298U,	// NAND
    1073778298U,	// NAND8
    1073775151U,	// NAND8_rec
    1073775151U,	// NAND_rec
    17499U,	// NAP
    37250U,	// NEG
    37250U,	// NEG8
    39492U,	// NEG8O
    34067U,	// NEG8O_rec
    33519U,	// NEG8_rec
    39492U,	// NEGO
    34067U,	// NEGO_rec
    33519U,	// NEG_rec
    17508U,	// NOP
    14287U,	// NOP_GT_PWR6
    14299U,	// NOP_GT_PWR7
    1073784220U,	// NOR
    1073784220U,	// NOR8
    1073776186U,	// NOR8_rec
    1073776186U,	// NOR_rec
    1073784213U,	// OR
    1073784213U,	// OR8
    1073776187U,	// OR8_rec
    1073777952U,	// ORC
    1073777952U,	// ORC8
    1073775065U,	// ORC8_rec
    1073775065U,	// ORC_rec
    1073779862U,	// ORI
    1073779862U,	// ORI8
    1073784816U,	// ORIS
    1073784816U,	// ORIS8
    1073776187U,	// OR_rec
    1073779495U,	// PADDI
    1073779495U,	// PADDI8
    738235175U,	// PADDI8pc
    17428U,	// PADDIdtprel
    738235175U,	// PADDIpc
    1073778335U,	// PDEPD
    1073778517U,	// PEXTD
    771798487U,	// PLBZ
    771798487U,	// PLBZ8
    805352919U,	// PLBZ8pc
    805352919U,	// PLBZpc
    771788355U,	// PLD
    805342787U,	// PLDpc
    771788261U,	// PLFD
    805342693U,	// PLFDpc
    771794781U,	// PLFS
    805349213U,	// PLFSpc
    771787294U,	// PLHA
    771787294U,	// PLHA8
    805341726U,	// PLHA8pc
    805341726U,	// PLHApc
    771798561U,	// PLHZ
    771798561U,	// PLHZ8
    805352993U,	// PLHZ8pc
    805352993U,	// PLHZpc
    838898623U,	// PLI
    838898623U,	// PLI8
    771787430U,	// PLWA
    771787430U,	// PLWA8
    805341862U,	// PLWA8pc
    805341862U,	// PLWApc
    771798712U,	// PLWZ
    771798712U,	// PLWZ8
    805353144U,	// PLWZ8pc
    805353144U,	// PLWZpc
    771788576U,	// PLXSD
    805343008U,	// PLXSDpc
    771793655U,	// PLXSSP
    805348087U,	// PLXSSPpc
    771795930U,	// PLXV
    771793782U,	// PLXVP
    805348214U,	// PLXVPpc
    805350362U,	// PLXVpc
    1073776761U,	// PMXVBF16GER2
    1375770918U,	// PMXVBF16GER2NN
    1375772502U,	// PMXVBF16GER2NP
    1375770977U,	// PMXVBF16GER2PN
    1375772561U,	// PMXVBF16GER2PP
    1073776775U,	// PMXVF16GER2
    1375770934U,	// PMXVF16GER2NN
    1375772518U,	// PMXVF16GER2NP
    1375770993U,	// PMXVF16GER2PN
    1375772577U,	// PMXVF16GER2PP
    1073784104U,	// PMXVF32GER
    1375770949U,	// PMXVF32GERNN
    1375772533U,	// PMXVF32GERNP
    1375771019U,	// PMXVF32GERPN
    1375772635U,	// PMXVF32GERPP
    1073784116U,	// PMXVF64GER
    1375770963U,	// PMXVF64GERNN
    1375772547U,	// PMXVF64GERNP
    1375771033U,	// PMXVF64GERPN
    1375772649U,	// PMXVF64GERPP
    1073776788U,	// PMXVI16GER2
    1375772592U,	// PMXVI16GER2PP
    1073784350U,	// PMXVI16GER2S
    1375772663U,	// PMXVI16GER2SPP
    1073776889U,	// PMXVI4GER8
    1375772621U,	// PMXVI4GER8PP
    1073776801U,	// PMXVI8GER4
    1375772607U,	// PMXVI8GER4PP
    1375772679U,	// PMXVI8GER4SPP
    35789U,	// POPCNTB
    35789U,	// POPCNTB8
    36667U,	// POPCNTD
    44960U,	// POPCNTW
    17112U,	// PPC32GOT
    17122U,	// PPC32PICGOT
    14734U,	// PREPARE_PROBED_ALLOCA_32
    15155U,	// PREPARE_PROBED_ALLOCA_64
    14782U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    15203U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    14716U,	// PROBED_ALLOCA_32
    15137U,	// PROBED_ALLOCA_64
    14760U,	// PROBED_STACKALLOC_32
    15181U,	// PROBED_STACKALLOC_64
    771787744U,	// PSTB
    771787744U,	// PSTB8
    805342176U,	// PSTB8pc
    805342176U,	// PSTBpc
    771788622U,	// PSTD
    805343054U,	// PSTDpc
    771788267U,	// PSTFD
    805342699U,	// PSTFDpc
    771794794U,	// PSTFS
    805349226U,	// PSTFSpc
    771789428U,	// PSTH
    771789428U,	// PSTH8
    805343860U,	// PSTH8pc
    805343860U,	// PSTHpc
    771796926U,	// PSTW
    771796926U,	// PSTW8
    805351358U,	// PSTW8pc
    805351358U,	// PSTWpc
    771788583U,	// PSTXSD
    805343015U,	// PSTXSDpc
    771793663U,	// PSTXSSP
    805348095U,	// PSTXSSPpc
    771795936U,	// PSTXV
    771793789U,	// PSTXVP
    805348221U,	// PSTXVPpc
    805350368U,	// PSTXVpc
    16855U,	// PseudoEIEIO
    16354U,	// RESTORE_ACC
    16891U,	// RESTORE_CR
    17046U,	// RESTORE_CRBIT
    16560U,	// RESTORE_QUADWORD
    16328U,	// RESTORE_UACC
    17404U,	// RFCI
    17415U,	// RFDI
    559817U,	// RFEBB
    17420U,	// RFI
    17378U,	// RFID
    17409U,	// RFMCI
    1073780151U,	// RLDCL
    1073775627U,	// RLDCL_rec
    1073784060U,	// RLDCR
    1073776153U,	// RLDCR_rec
    1073777887U,	// RLDIC
    1073780158U,	// RLDICL
    1073780158U,	// RLDICL_32
    1073780158U,	// RLDICL_32_64
    1073775635U,	// RLDICL_32_rec
    1073775635U,	// RLDICL_rec
    1073784080U,	// RLDICR
    1073784080U,	// RLDICR_32
    1073776161U,	// RLDICR_rec
    1073775034U,	// RLDIC_rec
    1375769568U,	// RLDIMI
    1375765414U,	// RLDIMI_rec
    1375769576U,	// RLWIMI
    1375769576U,	// RLWIMI8
    1375765423U,	// RLWIMI8_rec
    1375765423U,	// RLWIMI_rec
    1073780664U,	// RLWINM
    1073780664U,	// RLWINM8
    1073775686U,	// RLWINM8_rec
    1073775686U,	// RLWINM_rec
    1073780681U,	// RLWNM
    1073780681U,	// RLWNM8
    1073775695U,	// RLWNM8_rec
    1073775695U,	// RLWNM_rec
    16320U,	// ReadTB
    1084723U,	// SC
    15420U,	// SELECT_CC_F16
    15342U,	// SELECT_CC_F4
    15881U,	// SELECT_CC_F8
    15367U,	// SELECT_CC_I4
    15926U,	// SELECT_CC_I8
    16630U,	// SELECT_CC_SPE
    15313U,	// SELECT_CC_SPE4
    16419U,	// SELECT_CC_VRRC
    16388U,	// SELECT_CC_VSFRC
    16479U,	// SELECT_CC_VSRC
    16448U,	// SELECT_CC_VSSRC
    15435U,	// SELECT_F16
    15356U,	// SELECT_F4
    15895U,	// SELECT_F8
    15381U,	// SELECT_I4
    16100U,	// SELECT_I8
    16645U,	// SELECT_SPE
    15329U,	// SELECT_SPE4
    16435U,	// SELECT_VRRC
    16405U,	// SELECT_VSFRC
    16495U,	// SELECT_VSRC
    16465U,	// SELECT_VSSRC
    35768U,	// SETB
    35768U,	// SETB8
    35986U,	// SETBC
    35986U,	// SETBC8
    42221U,	// SETBCR
    42221U,	// SETBCR8
    16822U,	// SETFLM
    35978U,	// SETNBC
    35978U,	// SETNBC8
    42212U,	// SETNBCR
    42212U,	// SETNBCR8
    16536U,	// SETRND
    17395U,	// SETRNDi
    33420U,	// SLBFEE_rec
    17289U,	// SLBIA
    1085491U,	// SLBIE
    37239U,	// SLBIEG
    36875U,	// SLBMFEE
    43913U,	// SLBMFEV
    36956U,	// SLBMTE
    17317U,	// SLBSYNC
    1073778264U,	// SLD
    1073775145U,	// SLD_rec
    1073786368U,	// SLW
    1073786368U,	// SLW8
    1073776523U,	// SLW8_rec
    1073776523U,	// SLW_rec
    67155641U,	// SPELWZ
    134264261U,	// SPELWZX
    67153855U,	// SPESTW
    134264208U,	// SPESTWX
    16367U,	// SPILL_ACC
    16903U,	// SPILL_CR
    17061U,	// SPILL_CRBIT
    16578U,	// SPILL_QUADWORD
    16342U,	// SPILL_UACC
    16594U,	// SPLIT_QUADWORD
    1073778031U,	// SRAD
    1073779488U,	// SRADI
    1073779488U,	// SRADI_32
    1073775435U,	// SRADI_rec
    1073775082U,	// SRAD_rec
    1073786180U,	// SRAW
    1073779989U,	// SRAWI
    1073775544U,	// SRAWI_rec
    1073776482U,	// SRAW_rec
    1073778358U,	// SRD
    1073775165U,	// SRD_rec
    1073786623U,	// SRW
    1073786623U,	// SRW8
    1073776529U,	// SRW8_rec
    1073776529U,	// SRW_rec
    67144673U,	// STB
    67144673U,	// STB8
    1073787368U,	// STBCIX
    134252516U,	// STBCX
    134263536U,	// STBEPX
    470166202U,	// STBU
    470166202U,	// STBU8
    503723216U,	// STBUX
    503723216U,	// STBUX8
    134263080U,	// STBX
    134263080U,	// STBX8
    1073787176U,	// STBXTLS
    1073787176U,	// STBXTLS_
    1073787176U,	// STBXTLS_32
    67145551U,	// STD
    1073785172U,	// STDAT
    134263690U,	// STDBRX
    1073787383U,	// STDCIX
    134252524U,	// STDCX
    470166259U,	// STDU
    503723244U,	// STDUX
    134263166U,	// STDX
    1073787262U,	// STDXTLS
    1073787262U,	// STDXTLS_
    67145196U,	// STFD
    134263552U,	// STFDEPX
    470166214U,	// STFDU
    503723230U,	// STFDUX
    134263122U,	// STFDX
    134264174U,	// STFIWX
    67151723U,	// STFS
    470166325U,	// STFSU
    503723282U,	// STFSUX
    134263907U,	// STFSX
    67146357U,	// STH
    67146357U,	// STH8
    134263705U,	// STHBRX
    1073787391U,	// STHCIX
    134252532U,	// STHCX
    134263568U,	// STHEPX
    470166288U,	// STHU
    470166288U,	// STHU8
    503723258U,	// STHUX
    503723258U,	// STHUX8
    134263266U,	// STHX
    134263266U,	// STHX8
    1073787362U,	// STHXTLS
    1073787362U,	// STHXTLS_
    1073787362U,	// STHXTLS_32
    67153418U,	// STMW
    17512U,	// STOP
    67150908U,	// STQ
    134252540U,	// STQCX
    16842U,	// STQX_PSEUDO
    1073780100U,	// STSWI
    134263046U,	// STVEBX
    134263232U,	// STVEHX
    134264166U,	// STVEWX
    134264123U,	// STVX
    134256212U,	// STVXL
    67153855U,	// STW
    67153855U,	// STW8
    1073785250U,	// STWAT
    134263739U,	// STWBRX
    1073787399U,	// STWCIX
    134252548U,	// STWCX
    134263583U,	// STWEPX
    470166376U,	// STWU
    470166376U,	// STWU8
    503723290U,	// STWUX
    503723290U,	// STWUX8
    134264208U,	// STWX
    134264208U,	// STWX8
    1073788304U,	// STWXTLS
    1073788304U,	// STWXTLS_
    1073788304U,	// STWXTLS_32
    67145512U,	// STXSD
    134263158U,	// STXSDX
    134263054U,	// STXSIBX
    134263054U,	// STXSIBXv
    134263240U,	// STXSIHX
    134263240U,	// STXSIHXv
    134264182U,	// STXSIWX
    67150592U,	// STXSSP
    134263624U,	// STXSSPX
    67152865U,	// STXV
    134262974U,	// STXVB16X
    134262939U,	// STXVD2X
    134262992U,	// STXVH8X
    1073780295U,	// STXVL
    1073780222U,	// STXVLL
    67150718U,	// STXVP
    134263640U,	// STXVPX
    134263071U,	// STXVRBX
    134263142U,	// STXVRDX
    134263257U,	// STXVRHX
    134264199U,	// STXVRWX
    134262956U,	// STXVW4X
    134264135U,	// STXVX
    1073778841U,	// SUBF
    1073778841U,	// SUBF8
    1073781309U,	// SUBF8O
    1073775883U,	// SUBF8O_rec
    1073775327U,	// SUBF8_rec
    1073777866U,	// SUBFC
    1073777866U,	// SUBFC8
    1073781215U,	// SUBFC8O
    1073775777U,	// SUBFC8O_rec
    1073775010U,	// SUBFC8_rec
    1073781215U,	// SUBFCO
    1073775777U,	// SUBFCO_rec
    1073775010U,	// SUBFC_rec
    1073778715U,	// SUBFE
    1073778715U,	// SUBFE8
    1073781259U,	// SUBFE8O
    1073775827U,	// SUBFE8O_rec
    1073775253U,	// SUBFE8_rec
    1073781259U,	// SUBFEO
    1073775827U,	// SUBFEO_rec
    1073775253U,	// SUBFE_rec
    1073777894U,	// SUBFIC
    1073777894U,	// SUBFIC8
    36936U,	// SUBFME
    36936U,	// SUBFME8
    39451U,	// SUBFME8O
    34021U,	// SUBFME8O_rec
    33445U,	// SUBFME8_rec
    39451U,	// SUBFMEO
    34021U,	// SUBFMEO_rec
    33445U,	// SUBFME_rec
    1073781309U,	// SUBFO
    1073775883U,	// SUBFO_rec
    37003U,	// SUBFZE
    37003U,	// SUBFZE8
    39476U,	// SUBFZE8O
    34049U,	// SUBFZE8O_rec
    33494U,	// SUBFZE8_rec
    39476U,	// SUBFZEO
    34049U,	// SUBFZEO_rec
    33494U,	// SUBFZE_rec
    1073775327U,	// SUBF_rec
    593175U,	// SYNC
    1083125U,	// TABORT
    1074102679U,	// TABORTDC
    1074103091U,	// TABORTDCI
    1074102751U,	// TABORTWC
    1074103103U,	// TABORTWCI
    1182406U,	// TAILB
    1182406U,	// TAILB8
    1214911U,	// TAILBA
    1214911U,	// TAILBA8
    17534U,	// TAILBCTR
    17534U,	// TAILBCTR8
    558208U,	// TBEGIN
    17019U,	// TBEGIN_RET
    1086864U,	// TCHECK
    17007U,	// TCHECK_RET
    2263350U,	// TCRETURNai
    2263247U,	// TCRETURNai8
    2231637U,	// TCRETURNdi
    2230493U,	// TCRETURNdi8
    2139336U,	// TCRETURNri
    2132203U,	// TCRETURNri8
    1074106166U,	// TD
    1074107257U,	// TDI
    557622U,	// TEND
    17295U,	// TLBIA
    251007034U,	// TLBIE
    1086918U,	// TLBIEL
    45279U,	// TLBIVAX
    1084970U,	// TLBLD
    1086385U,	// TLBLI
    17383U,	// TLBRE
    1073778768U,	// TLBRE2
    46151U,	// TLBSX
    1073787975U,	// TLBSX2
    1073776652U,	// TLBSX2D
    17325U,	// TLBSYNC
    17389U,	// TLBWE
    1073778797U,	// TLBWE2
    17245U,	// TLSGDAIX
    16221U,	// TLSGDAIX8
    17503U,	// TRAP
    14277U,	// TRECHKPT
    1082420U,	// TRECLAIM
    558670U,	// TSR
    1074114450U,	// TW
    1074107787U,	// TWI
    16865U,	// UNENCODED_NOP
    16880U,	// UpdateGBR
    1073777638U,	// VABSDUB
    1073779322U,	// VABSDUH
    1073786846U,	// VABSDUW
    1073783903U,	// VADDCUQ
    1073786829U,	// VADDCUW
    1073783934U,	// VADDECUQ
    1073780748U,	// VADDEUQM
    1073782445U,	// VADDFP
    1073784456U,	// VADDSBS
    1073784731U,	// VADDSHS
    1073785033U,	// VADDSWS
    1073780386U,	// VADDUBM
    1073784484U,	// VADDUBS
    1073780458U,	// VADDUDM
    1073780585U,	// VADDUHM
    1073784759U,	// VADDUHS
    1073780729U,	// VADDUQM
    1073780841U,	// VADDUWM
    1073785060U,	// VADDUWS
    1073778328U,	// VAND
    1073777859U,	// VANDC
    1073777512U,	// VAVGSB
    1073779208U,	// VAVGSH
    1073786654U,	// VAVGSW
    1073777656U,	// VAVGUB
    1073779340U,	// VAVGUH
    1073786873U,	// VAVGUW
    1073778269U,	// VBPERMD
    1073783803U,	// VBPERMQ
    1375777878U,	// VCFSX
    1073787990U,	// VCFSX_0
    1073778132U,	// VCFUGED
    1375778035U,	// VCFUX
    1073788147U,	// VCFUX_0
    1073784138U,	// VCIPHER
    1073785446U,	// VCIPHERLAST
    1073777433U,	// VCLRLB
    1073777489U,	// VCLRRB
    35964U,	// VCLZB
    36815U,	// VCLZD
    1073780489U,	// VCLZDM
    37602U,	// VCLZH
    35554U,	// VCLZLSBB
    45171U,	// VCLZW
    1073782409U,	// VCMPBFP
    1073775989U,	// VCMPBFP_rec
    1073782508U,	// VCMPEQFP
    1073776010U,	// VCMPEQFP_rec
    1073777681U,	// VCMPEQUB
    1073774928U,	// VCMPEQUB_rec
    1073778586U,	// VCMPEQUD
    1073775182U,	// VCMPEQUD_rec
    1073779365U,	// VCMPEQUH
    1073775378U,	// VCMPEQUH_rec
    1073783980U,	// VCMPEQUQ
    1073776121U,	// VCMPEQUQ_rec
    1073786907U,	// VCMPEQUW
    1073776554U,	// VCMPEQUW_rec
    1073782462U,	// VCMPGEFP
    1073775999U,	// VCMPGEFP_rec
    1073782518U,	// VCMPGTFP
    1073776021U,	// VCMPGTFP_rec
    1073777565U,	// VCMPGTSB
    1073774909U,	// VCMPGTSB_rec
    1073778438U,	// VCMPGTSD
    1073775171U,	// VCMPGTSD_rec
    1073779261U,	// VCMPGTSH
    1073775359U,	// VCMPGTSH_rec
    1073783850U,	// VCMPGTSQ
    1073776110U,	// VCMPGTSQ_rec
    1073786733U,	// VCMPGTSW
    1073776535U,	// VCMPGTSW_rec
    1073777749U,	// VCMPGTUB
    1073774963U,	// VCMPGTUB_rec
    1073778596U,	// VCMPGTUD
    1073775193U,	// VCMPGTUD_rec
    1073779387U,	// VCMPGTUH
    1073775389U,	// VCMPGTUH_rec
    1073783990U,	// VCMPGTUQ
    1073776132U,	// VCMPGTUQ_rec
    1073786942U,	// VCMPGTUW
    1073776565U,	// VCMPGTUW_rec
    1073777398U,	// VCMPNEB
    1073774899U,	// VCMPNEB_rec
    1073779140U,	// VCMPNEH
    1073775349U,	// VCMPNEH_rec
    1073786243U,	// VCMPNEW
    1073776489U,	// VCMPNEW_rec
    1073777778U,	// VCMPNEZB
    1073774974U,	// VCMPNEZB_rec
    1073779416U,	// VCMPNEZH
    1073775400U,	// VCMPNEZH_rec
    1073786985U,	// VCMPNEZW
    1073776583U,	// VCMPNEZW_rec
    1073783842U,	// VCMPSQ
    1073783972U,	// VCMPUQ
    1073777360U,	// VCNTMBB
    1073778044U,	// VCNTMBD
    1073779116U,	// VCNTMBH
    1073786186U,	// VCNTMBW
    1375775038U,	// VCTSXS
    1073785150U,	// VCTSXS_0
    1375775046U,	// VCTUXS
    1073785158U,	// VCTUXS_0
    35971U,	// VCTZB
    36830U,	// VCTZD
    1073780506U,	// VCTZDM
    37609U,	// VCTZH
    35564U,	// VCTZLSBB
    45188U,	// VCTZW
    1073778396U,	// VDIVESD
    1073783833U,	// VDIVESQ
    1073786645U,	// VDIVESW
    1073778551U,	// VDIVEUD
    1073783963U,	// VDIVEUQ
    1073786864U,	// VDIVEUW
    1073778448U,	// VDIVSD
    1073783860U,	// VDIVSQ
    1073786750U,	// VDIVSW
    1073778606U,	// VDIVUD
    1073784000U,	// VDIVUQ
    1073786952U,	// VDIVUW
    1073785806U,	// VEQV
    38511U,	// VEXPANDBM
    38593U,	// VEXPANDDM
    38699U,	// VEXPANDHM
    38864U,	// VEXPANDQM
    38976U,	// VEXPANDWM
    40655U,	// VEXPTEFP
    1073787509U,	// VEXTDDVLX
    1073787893U,	// VEXTDDVRX
    1073787497U,	// VEXTDUBVLX
    1073787881U,	// VEXTDUBVRX
    1073787530U,	// VEXTDUHVLX
    1073787914U,	// VEXTDUHVRX
    1073787552U,	// VEXTDUWVLX
    1073787936U,	// VEXTDUWVRX
    38541U,	// VEXTRACTBM
    1375768367U,	// VEXTRACTD
    38613U,	// VEXTRACTDM
    38729U,	// VEXTRACTHM
    38884U,	// VEXTRACTQM
    1375767625U,	// VEXTRACTUB
    1375769263U,	// VEXTRACTUH
    1375776805U,	// VEXTRACTUW
    38996U,	// VEXTRACTWM
    36151U,	// VEXTSB2D
    36151U,	// VEXTSB2Ds
    44007U,	// VEXTSB2W
    44007U,	// VEXTSB2Ws
    41870U,	// VEXTSD2Q
    36161U,	// VEXTSH2D
    36161U,	// VEXTSH2Ds
    44017U,	// VEXTSH2W
    44017U,	// VEXTSH2Ws
    36171U,	// VEXTSW2D
    36171U,	// VEXTSW2Ds
    1073787449U,	// VEXTUBLX
    1073787818U,	// VEXTUBRX
    1073787477U,	// VEXTUHLX
    1073787861U,	// VEXTUHRX
    1073787573U,	// VEXTUWLX
    1073787957U,	// VEXTUWRX
    36213U,	// VGBBD
    1073777462U,	// VGNB
    1375777328U,	// VINSBLX
    1375777697U,	// VINSBRX
    1375777375U,	// VINSBVLX
    1375777759U,	// VINSBVRX
    872451830U,	// VINSD
    1375777347U,	// VINSDLX
    1375777731U,	// VINSDRX
    872451030U,	// VINSERTB
    1375768388U,	// VINSERTD
    872452714U,	// VINSERTH
    1375776681U,	// VINSERTW
    1375777356U,	// VINSHLX
    1375777740U,	// VINSHRX
    1375777408U,	// VINSHVLX
    1375777792U,	// VINSHVRX
    872460125U,	// VINSW
    1375777452U,	// VINSWLX
    1375777836U,	// VINSWRX
    1375777430U,	// VINSWVLX
    1375777814U,	// VINSWVRX
    40629U,	// VLOGEFP
    1073782436U,	// VMADDFP
    1073782528U,	// VMAXFP
    1073777584U,	// VMAXSB
    1073778456U,	// VMAXSD
    1073779280U,	// VMAXSH
    1073786758U,	// VMAXSW
    1073777759U,	// VMAXUB
    1073778614U,	// VMAXUD
    1073779397U,	// VMAXUH
    1073786960U,	// VMAXUW
    1073784708U,	// VMHADDSHS
    1073784719U,	// VMHRADDSHS
    1073782500U,	// VMINFP
    1073777548U,	// VMINSB
    1073778414U,	// VMINSD
    1073779244U,	// VMINSH
    1073786709U,	// VMINSW
    1073777664U,	// VMINUB
    1073778569U,	// VMINUD
    1073779348U,	// VMINUH
    1073786890U,	// VMINUW
    1073780574U,	// VMLADDUHM
    1073778379U,	// VMODSD
    1073783825U,	// VMODSQ
    1073786628U,	// VMODSW
    1073778534U,	// VMODUD
    1073783944U,	// VMODUQ
    1073786838U,	// VMODUW
    1073786235U,	// VMRGEW
    1073777407U,	// VMRGHB
    1073779149U,	// VMRGHH
    1073786278U,	// VMRGHW
    1073777425U,	// VMRGLB
    1073779157U,	// VMRGLH
    1073786328U,	// VMRGLW
    1073786601U,	// VMRGOW
    1073778524U,	// VMSUMCUD
    1073780346U,	// VMSUMMBM
    1073780543U,	// VMSUMSHM
    1073784740U,	// VMSUMSHS
    1073780395U,	// VMSUMUBM
    1073780467U,	// VMSUMUDM
    1073780594U,	// VMSUMUHM
    1073784768U,	// VMSUMUHS
    42059U,	// VMUL10CUQ
    1073783912U,	// VMUL10ECUQ
    1073783952U,	// VMUL10EUQ
    42049U,	// VMUL10UQ
    1073777503U,	// VMULESB
    1073778387U,	// VMULESD
    1073779199U,	// VMULESH
    1073786636U,	// VMULESW
    1073777647U,	// VMULEUB
    1073778542U,	// VMULEUD
    1073779331U,	// VMULEUH
    1073786855U,	// VMULEUW
    1073778405U,	// VMULHSD
    1073786671U,	// VMULHSW
    1073778560U,	// VMULHUD
    1073786881U,	// VMULHUW
    1073778233U,	// VMULLD
    1073777556U,	// VMULOSB
    1073778429U,	// VMULOSD
    1073779252U,	// VMULOSH
    1073786724U,	// VMULOSW
    1073777672U,	// VMULOUB
    1073778577U,	// VMULOUD
    1073779356U,	// VMULOUH
    1073786898U,	// VMULOUW
    1073780850U,	// VMULUWM
    1073778313U,	// VNAND
    1073784128U,	// VNCIPHER
    1073785432U,	// VNCIPHERLAST
    36338U,	// VNEGD
    44447U,	// VNEGW
    1073782418U,	// VNMSUBFP
    1073784233U,	// VNOR
    1073784246U,	// VOR
    1073777965U,	// VORC
    1073778334U,	// VPDEPD
    1073780758U,	// VPERM
    1073784193U,	// VPERMR
    1073784259U,	// VPERMXOR
    1073778516U,	// VPEXTD
    1073787696U,	// VPKPX
    1073784872U,	// VPKSDSS
    1073784936U,	// VPKSDUS
    1073784881U,	// VPKSHSS
    1073784954U,	// VPKSHUS
    1073784890U,	// VPKSWSS
    1073784972U,	// VPKSWUS
    1073780773U,	// VPKUDUM
    1073784945U,	// VPKUDUS
    1073780782U,	// VPKUHUM
    1073784963U,	// VPKUHUS
    1073780791U,	// VPKUWUM
    1073784981U,	// VPKUWUS
    1073777453U,	// VPMSUMB
    1073778278U,	// VPMSUMD
    1073779177U,	// VPMSUMH
    1073786384U,	// VPMSUMW
    35788U,	// VPOPCNTB
    36666U,	// VPOPCNTD
    37472U,	// VPOPCNTH
    44959U,	// VPOPCNTW
    36229U,	// VPRTYBD
    41887U,	// VPRTYBQ
    44371U,	// VPRTYBW
    40648U,	// VREFP
    38792U,	// VRFIM
    39177U,	// VRFIN
    40732U,	// VRFIP
    46631U,	// VRFIZ
    1073777441U,	// VRLB
    1073778257U,	// VRLD
    1073779672U,	// VRLDMI
    1073780656U,	// VRLDNM
    1073779165U,	// VRLH
    1073783791U,	// VRLQ
    1073779696U,	// VRLQMI
    1073780672U,	// VRLQNM
    1073786360U,	// VRLW
    1073779792U,	// VRLWMI
    1073780680U,	// VRLWNM
    40665U,	// VRSQRTEFP
    45774U,	// VSBOX
    1073780186U,	// VSEL
    1073778018U,	// VSHASIGMAD
    1073786167U,	// VSHASIGMAW
    1073780253U,	// VSL
    1073777447U,	// VSLB
    1073778263U,	// VSLD
    1073779452U,	// VSLDBI
    1073779821U,	// VSLDOI
    1073779171U,	// VSLH
    1073781355U,	// VSLO
    1073783797U,	// VSLQ
    1073785784U,	// VSLV
    1073786367U,	// VSLW
    1375767492U,	// VSPLTB
    1375767492U,	// VSPLTBs
    1375769176U,	// VSPLTH
    1375769176U,	// VSPLTHs
    335580025U,	// VSPLTISB
    335581721U,	// VSPLTISH
    335589176U,	// VSPLTISW
    1375776654U,	// VSPLTW
    1073784324U,	// VSR
    1073777346U,	// VSRAB
    1073778030U,	// VSRAD
    1073779109U,	// VSRAH
    1073783704U,	// VSRAQ
    1073786179U,	// VSRAW
    1073777497U,	// VSRB
    1073778365U,	// VSRD
    1073779460U,	// VSRDBI
    1073779193U,	// VSRH
    1073781476U,	// VSRO
    1073783819U,	// VSRQ
    1073785812U,	// VSRV
    1073786622U,	// VSRW
    38313U,	// VSTRIBL
    33793U,	// VSTRIBL_rec
    42203U,	// VSTRIBR
    34319U,	// VSTRIBR_rec
    38382U,	// VSTRIHL
    33827U,	// VSTRIHL_rec
    42323U,	// VSTRIHR
    34346U,	// VSTRIHR_rec
    1073783894U,	// VSUBCUQ
    1073786820U,	// VSUBCUW
    1073783924U,	// VSUBECUQ
    1073780738U,	// VSUBEUQM
    1073782428U,	// VSUBFP
    1073784447U,	// VSUBSBS
    1073784699U,	// VSUBSHS
    1073785024U,	// VSUBSWS
    1073780377U,	// VSUBUBM
    1073784475U,	// VSUBUBS
    1073780449U,	// VSUBUDM
    1073780565U,	// VSUBUHM
    1073784750U,	// VSUBUHS
    1073780720U,	// VSUBUQM
    1073780832U,	// VSUBUWM
    1073785051U,	// VSUBUWS
    1073785014U,	// VSUM2SWS
    1073784437U,	// VSUM4SBS
    1073784689U,	// VSUM4SHS
    1073784465U,	// VSUM4UBS
    1073785042U,	// VSUMSWS
    45863U,	// VUPKHPX
    35696U,	// VUPKHSB
    37392U,	// VUPKHSH
    44838U,	// VUPKHSW
    45879U,	// VUPKLPX
    35715U,	// VUPKLSB
    37411U,	// VUPKLSH
    44866U,	// VUPKLSW
    1073784277U,	// VXOR
    1308665301U,	// V_SET0
    1308665301U,	// V_SET0B
    1308665301U,	// V_SET0H
    18919224U,	// V_SETALLONES
    18919224U,	// V_SETALLONESB
    18919224U,	// V_SETALLONESH
    600581U,	// WAIT
    1085460U,	// WRTEE
    1086334U,	// WRTEEI
    1073784254U,	// XOR
    1073784254U,	// XOR8
    1073776192U,	// XOR8_rec
    1073779861U,	// XORI
    1073779861U,	// XORI8
    1073784815U,	// XORIS
    1073784815U,	// XORIS8
    1073776192U,	// XOR_rec
    40355U,	// XSABSDP
    41194U,	// XSABSQP
    1073781692U,	// XSADDDP
    1073782868U,	// XSADDQP
    1073781435U,	// XSADDQPO
    1073783188U,	// XSADDSP
    1073782137U,	// XSCMPEQDP
    1073782105U,	// XSCMPEXPDP
    1073782966U,	// XSCMPEXPQP
    1073781754U,	// XSCMPGEDP
    1073782197U,	// XSCMPGTDP
    1073782035U,	// XSCMPODP
    1073782936U,	// XSCMPOQP
    1073782261U,	// XSCMPUDP
    1073783037U,	// XSCMPUQP
    1073781995U,	// XSCPSGNDP
    1073782925U,	// XSCPSGNQP
    40712U,	// XSCVDPHP
    41122U,	// XSCVDPQP
    41626U,	// XSCVDPSP
    39348U,	// XSCVDPSPN
    42743U,	// XSCVDPSXDS
    42743U,	// XSCVDPSXDSs
    43254U,	// XSCVDPSXWS
    43254U,	// XSCVDPSXWSs
    42779U,	// XSCVDPUXDS
    42779U,	// XSCVDPUXDSs
    43290U,	// XSCVDPUXWS
    43290U,	// XSCVDPUXWSs
    40221U,	// XSCVHPDP
    40231U,	// XSCVQPDP
    39537U,	// XSCVQPDPO
    46603U,	// XSCVQPSDZ
    46728U,	// XSCVQPSQZ
    46800U,	// XSCVQPSWZ
    46614U,	// XSCVQPUDZ
    46739U,	// XSCVQPUQZ
    46811U,	// XSCVQPUWZ
    41053U,	// XSCVSDQP
    40241U,	// XSCVSPDP
    39296U,	// XSCVSPDPN
    41164U,	// XSCVSQQP
    39886U,	// XSCVSXDDP
    41382U,	// XSCVSXDSP
    41063U,	// XSCVUDQP
    41174U,	// XSCVUQQP
    39908U,	// XSCVUXDDP
    41404U,	// XSCVUXDSP
    1073782271U,	// XSDIVDP
    1073783047U,	// XSDIVQP
    1073781466U,	// XSDIVQPO
    1073783602U,	// XSDIVSP
    1073782085U,	// XSIEXPDP
    1073782956U,	// XSIEXPQP
    1375771498U,	// XSMADDADP
    1375773014U,	// XSMADDASP
    1375771861U,	// XSMADDMDP
    1375773296U,	// XSMADDMSP
    1375772746U,	// XSMADDQP
    1375771312U,	// XSMADDQPO
    1073781682U,	// XSMAXCDP
    1073782331U,	// XSMAXDP
    1073781875U,	// XSMAXJDP
    1073781672U,	// XSMINCDP
    1073782017U,	// XSMINDP
    1073781865U,	// XSMINJDP
    1375771452U,	// XSMSUBADP
    1375772968U,	// XSMSUBASP
    1375771815U,	// XSMSUBMDP
    1375773250U,	// XSMSUBMSP
    1375772705U,	// XSMSUBQP
    1375771279U,	// XSMSUBQPO
    1073781885U,	// XSMULDP
    1073782916U,	// XSMULQP
    1073781445U,	// XSMULQPO
    1073783320U,	// XSMULSP
    40335U,	// XSNABSDP
    41184U,	// XSNABSQP
    39992U,	// XSNEGDP
    41073U,	// XSNEGQP
    1375771474U,	// XSNMADDADP
    1375772990U,	// XSNMADDASP
    1375771837U,	// XSNMADDMDP
    1375773272U,	// XSNMADDMSP
    1375772735U,	// XSNMADDQP
    1375771300U,	// XSNMADDQPO
    1375771428U,	// XSNMSUBADP
    1375772944U,	// XSNMSUBASP
    1375771791U,	// XSNMSUBMDP
    1375773226U,	// XSNMSUBMSP
    1375772694U,	// XSNMSUBQP
    1375771267U,	// XSNMSUBQPO
    38005U,	// XSRDPI
    36078U,	// XSRDPIC
    38799U,	// XSRDPIM
    40739U,	// XSRDPIP
    46638U,	// XSRDPIZ
    39952U,	// XSREDP
    41437U,	// XSRESP
    627845U,	// XSRQPI
    635431U,	// XSRQPIX
    631685U,	// XSRQPXP
    41693U,	// XSRSP
    39968U,	// XSRSQRTEDP
    41453U,	// XSRSQRTESP
    40395U,	// XSSQRTDP
    41203U,	// XSSQRTQP
    39631U,	// XSSQRTQPO
    41747U,	// XSSQRTSP
    1073781632U,	// XSSUBDP
    1073782827U,	// XSSUBQP
    1073781402U,	// XSSUBQPO
    1073783148U,	// XSSUBSP
    1073782280U,	// XSTDIVDP
    40405U,	// XSTSQRTDP
    1375771538U,	// XSTSTDCDP
    1375772724U,	// XSTSTDCQP
    1375773054U,	// XSTSTDCSP
    40293U,	// XSXEXPDP
    41154U,	// XSXEXPQP
    40010U,	// XSXSIGDP
    41082U,	// XSXSIGQP
    40364U,	// XVABSDP
    41710U,	// XVABSSP
    1073781701U,	// XVADDDP
    1073783197U,	// XVADDSP
    1073776763U,	// XVBF16GER2
    1375770920U,	// XVBF16GER2NN
    1375772504U,	// XVBF16GER2NP
    1375770979U,	// XVBF16GER2PN
    1375772563U,	// XVBF16GER2PP
    1073782148U,	// XVCMPEQDP
    1073775965U,	// XVCMPEQDP_rec
    1073783500U,	// XVCMPEQSP
    1073776051U,	// XVCMPEQSP_rec
    1073781765U,	// XVCMPGEDP
    1073775953U,	// XVCMPGEDP_rec
    1073783250U,	// XVCMPGESP
    1073776039U,	// XVCMPGESP_rec
    1073782208U,	// XVCMPGTDP
    1073775977U,	// XVCMPGTDP_rec
    1073783560U,	// XVCMPGTSP
    1073776070U,	// XVCMPGTSP_rec
    1073782006U,	// XVCPSGNDP
    1073783430U,	// XVCPSGNSP
    39335U,	// XVCVBF16SPN
    41636U,	// XVCVDPSP
    42755U,	// XVCVDPSXDS
    43266U,	// XVCVDPSXWS
    42791U,	// XVCVDPUXDS
    43302U,	// XVCVDPUXWS
    41646U,	// XVCVHPSP
    35011U,	// XVCVSPBF16
    40251U,	// XVCVSPDP
    40722U,	// XVCVSPHP
    42767U,	// XVCVSPSXDS
    43278U,	// XVCVSPSXWS
    42803U,	// XVCVSPUXDS
    43314U,	// XVCVSPUXWS
    39897U,	// XVCVSXDDP
    41393U,	// XVCVSXDSP
    40485U,	// XVCVSXWDP
    41806U,	// XVCVSXWSP
    39919U,	// XVCVUXDDP
    41415U,	// XVCVUXDSP
    40496U,	// XVCVUXWDP
    41817U,	// XVCVUXWSP
    1073782300U,	// XVDIVDP
    1073783621U,	// XVDIVSP
    1073776777U,	// XVF16GER2
    1375770936U,	// XVF16GER2NN
    1375772520U,	// XVF16GER2NP
    1375770995U,	// XVF16GER2PN
    1375772579U,	// XVF16GER2PP
    1073784106U,	// XVF32GER
    1375770951U,	// XVF32GERNN
    1375772535U,	// XVF32GERNP
    1375771021U,	// XVF32GERPN
    1375772637U,	// XVF32GERPP
    1073784118U,	// XVF64GER
    1375770965U,	// XVF64GERNN
    1375772549U,	// XVF64GERNP
    1375771035U,	// XVF64GERPN
    1375772651U,	// XVF64GERPP
    1073776790U,	// XVI16GER2
    1375772594U,	// XVI16GER2PP
    1073784352U,	// XVI16GER2S
    1375772665U,	// XVI16GER2SPP
    1073776891U,	// XVI4GER8
    1375772623U,	// XVI4GER8PP
    1073776803U,	// XVI8GER4
    1375772609U,	// XVI8GER4PP
    1375772681U,	// XVI8GER4SPP
    1073782095U,	// XVIEXPDP
    1073783480U,	// XVIEXPSP
    1375771509U,	// XVMADDADP
    1375773025U,	// XVMADDASP
    1375771872U,	// XVMADDMDP
    1375773307U,	// XVMADDMSP
    1073782340U,	// XVMAXDP
    1073783652U,	// XVMAXSP
    1073782026U,	// XVMINDP
    1073783441U,	// XVMINSP
    1375771463U,	// XVMSUBADP
    1375772979U,	// XVMSUBASP
    1375771826U,	// XVMSUBMDP
    1375773261U,	// XVMSUBMSP
    1073781894U,	// XVMULDP
    1073783329U,	// XVMULSP
    40345U,	// XVNABSDP
    41700U,	// XVNABSSP
    40001U,	// XVNEGDP
    41477U,	// XVNEGSP
    1375771486U,	// XVNMADDADP
    1375773002U,	// XVNMADDASP
    1375771849U,	// XVNMADDMDP
    1375773284U,	// XVNMADDMSP
    1375771440U,	// XVNMSUBADP
    1375772956U,	// XVNMSUBASP
    1375771803U,	// XVNMSUBMDP
    1375773238U,	// XVNMSUBMSP
    38013U,	// XVRDPI
    36087U,	// XVRDPIC
    38808U,	// XVRDPIM
    40748U,	// XVRDPIP
    46647U,	// XVRDPIZ
    39960U,	// XVREDP
    41445U,	// XVRESP
    38029U,	// XVRSPI
    36096U,	// XVRSPIC
    38817U,	// XVRSPIM
    40757U,	// XVRSPIP
    46656U,	// XVRSPIZ
    39980U,	// XVRSQRTEDP
    41465U,	// XVRSQRTESP
    40427U,	// XVSQRTDP
    41768U,	// XVSQRTSP
    1073781641U,	// XVSUBDP
    1073783157U,	// XVSUBSP
    1073782290U,	// XVTDIVDP
    1073783611U,	// XVTDIVSP
    35545U,	// XVTLSBB
    40416U,	// XVTSQRTDP
    41757U,	// XVTSQRTSP
    1375771549U,	// XVTSTDCDP
    1375773065U,	// XVTSTDCSP
    40303U,	// XVXEXPDP
    41666U,	// XVXEXPSP
    40020U,	// XVXSIGDP
    41486U,	// XVXSIGSP
    1073777767U,	// XXBLENDVB
    1073778622U,	// XXBLENDVD
    1073779405U,	// XXBLENDVH
    1073786968U,	// XXBLENDVW
    36524U,	// XXBRD
    37362U,	// XXBRH
    41988U,	// XXBRQ
    44791U,	// XXBRW
    1073780129U,	// XXEVAL
    1073786929U,	// XXEXTRACTUW
    1073780405U,	// XXGENPCVBM
    1073780477U,	// XXGENPCVDM
    1073780604U,	// XXGENPCVHM
    1073780859U,	// XXGENPCVWM
    1375776691U,	// XXINSERTW
    1073778287U,	// XXLAND
    1073777841U,	// XXLANDC
    1073785790U,	// XXLEQV
    1308666814U,	// XXLEQVOnes
    1073778295U,	// XXLNAND
    1073784217U,	// XXLNOR
    1073784210U,	// XXLOR
    1073777949U,	// XXLORC
    1073784210U,	// XXLORf
    1073784251U,	// XXLXOR
    1308665275U,	// XXLXORdpz
    1308665275U,	// XXLXORspz
    1308665275U,	// XXLXORz
    1445017U,	// XXMFACC
    1073786286U,	// XXMRGHW
    1073786336U,	// XXMRGLW
    1084578U,	// XXMTACC
    1073780765U,	// XXPERM
    1073779528U,	// XXPERMDI
    1073779528U,	// XXPERMDIs
    1073784201U,	// XXPERMR
    1073787589U,	// XXPERMX
    1073780192U,	// XXSEL
    1095133U,	// XXSETACCZ
    1073779996U,	// XXSLDWI
    1073779996U,	// XXSLDWIs
    1744875822U,	// XXSPLTI32DX
    906005255U,	// XXSPLTIB
    40030U,	// XXSPLTIDP
    44494U,	// XXSPLTIW
    1073786774U,	// XXSPLTW
    1073786774U,	// XXSPLTWs
    1074105486U,	// gBC
    1074104771U,	// gBCA
    20595589U,	// gBCAat
    1074112009U,	// gBCCTR
    1074107917U,	// gBCCTRL
    1074107826U,	// gBCL
    1074104970U,	// gBCLA
    20595605U,	// gBCLAat
    1074111836U,	// gBCLR
    1074107910U,	// gBCLRL
    21644304U,	// gBCLat
    21644194U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ATOMIC_CMP_SWAP_I128
    0U,	// ATOMIC_LOAD_ADD_I128
    0U,	// ATOMIC_LOAD_AND_I128
    0U,	// ATOMIC_LOAD_NAND_I128
    0U,	// ATOMIC_LOAD_OR_I128
    0U,	// ATOMIC_LOAD_SUB_I128
    0U,	// ATOMIC_LOAD_XOR_I128
    0U,	// ATOMIC_SWAP_I128
    0U,	// BUILD_QUADWORD
    0U,	// BUILD_UACC
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDI_rec
    130U,	// CLRLSLWI
    130U,	// CLRLSLWI_rec
    64U,	// CLRRDI
    64U,	// CLRRDI_rec
    66U,	// CLRRWI
    66U,	// CLRRWI_rec
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFPS
    0U,	// DCBFx
    0U,	// DCBSTPS
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDI_rec
    130U,	// EXTLWI
    130U,	// EXTLWI_rec
    0U,	// EXTRDI
    0U,	// EXTRDI_rec
    130U,	// EXTRWI
    130U,	// EXTRWI_rec
    130U,	// INSLWI
    130U,	// INSLWI_rec
    0U,	// INSRDI
    0U,	// INSRDI_rec
    130U,	// INSRWI
    130U,	// INSRWI_rec
    0U,	// KILL_PAIR
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    258U,	// RLWIMIbm
    258U,	// RLWIMIbm_rec
    258U,	// RLWINMbm
    258U,	// RLWINMbm_rec
    258U,	// RLWNMbm
    258U,	// RLWNMbm_rec
    64U,	// ROTRDI
    64U,	// ROTRDI_rec
    66U,	// ROTRWI
    66U,	// ROTRWI_rec
    64U,	// SLDI
    64U,	// SLDI_rec
    66U,	// SLWI
    66U,	// SLWI_rec
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    64U,	// SRDI
    64U,	// SRDI_rec
    66U,	// SRWI
    66U,	// SRWI_rec
    0U,	// STIWX
    4U,	// SUBI
    4U,	// SUBIC
    4U,	// SUBIC_rec
    4U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    70U,	// ADD4
    70U,	// ADD4O
    70U,	// ADD4O_rec
    70U,	// ADD4TLS
    70U,	// ADD4_rec
    70U,	// ADD8
    70U,	// ADD8O
    70U,	// ADD8O_rec
    70U,	// ADD8TLS
    70U,	// ADD8TLS_
    70U,	// ADD8_rec
    70U,	// ADDC
    70U,	// ADDC8
    70U,	// ADDC8O
    70U,	// ADDC8O_rec
    70U,	// ADDC8_rec
    70U,	// ADDCO
    70U,	// ADDCO_rec
    70U,	// ADDC_rec
    70U,	// ADDE
    70U,	// ADDE8
    70U,	// ADDE8O
    70U,	// ADDE8O_rec
    70U,	// ADDE8_rec
    70U,	// ADDEO
    70U,	// ADDEO_rec
    390U,	// ADDEX
    390U,	// ADDEX8
    70U,	// ADDE_rec
    4U,	// ADDI
    4U,	// ADDI8
    4U,	// ADDIC
    4U,	// ADDIC8
    4U,	// ADDIC_rec
    4U,	// ADDIS
    4U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIStocHA8
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItoc
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8O
    0U,	// ADDME8O_rec
    0U,	// ADDME8_rec
    0U,	// ADDMEO
    0U,	// ADDMEO_rec
    0U,	// ADDME_rec
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8O
    0U,	// ADDZE8O_rec
    0U,	// ADDZE8_rec
    0U,	// ADDZEO
    0U,	// ADDZEO_rec
    0U,	// ADDZE_rec
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    70U,	// AND
    70U,	// AND8
    70U,	// AND8_rec
    70U,	// ANDC
    70U,	// ANDC8
    70U,	// ANDC8_rec
    70U,	// ANDC_rec
    8U,	// ANDI8_rec
    8U,	// ANDIS8_rec
    8U,	// ANDIS_rec
    8U,	// ANDI_rec
    0U,	// ANDI_rec_1_EQ_BIT
    0U,	// ANDI_rec_1_EQ_BIT8
    0U,	// ANDI_rec_1_GT_BIT
    0U,	// ANDI_rec_1_GT_BIT8
    70U,	// AND_rec
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    74U,	// BCDCFN_rec
    74U,	// BCDCFSQ_rec
    74U,	// BCDCFZ_rec
    70U,	// BCDCPSGN_rec
    0U,	// BCDCTN_rec
    0U,	// BCDCTSQ_rec
    74U,	// BCDCTZ_rec
    74U,	// BCDSETSGN_rec
    518U,	// BCDSR_rec
    518U,	// BCDS_rec
    518U,	// BCDTRUNC_rec
    70U,	// BCDUS_rec
    70U,	// BCDUTRUNC_rec
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCTRL8_LDinto_toc_RM
    0U,	// BCTRL8_RM
    0U,	// BCTRL_LWZinto_toc
    0U,	// BCTRL_LWZinto_toc_RM
    0U,	// BCTRL_RM
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_RM
    0U,	// BL8_NOP_TLS
    0U,	// BL8_NOTOC
    0U,	// BL8_NOTOC_RM
    0U,	// BL8_NOTOC_TLS
    0U,	// BL8_RM
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLA8_NOP_RM
    0U,	// BLA8_RM
    0U,	// BLA_RM
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_NOP_RM
    0U,	// BL_RM
    0U,	// BL_TLS
    70U,	// BPERMD
    70U,	// BRINC
    70U,	// CFUGED
    0U,	// CLRBHRB
    70U,	// CMPB
    70U,	// CMPB8
    70U,	// CMPD
    4U,	// CMPDI
    70U,	// CMPEQB
    70U,	// CMPLD
    8U,	// CMPLDI
    70U,	// CMPLW
    8U,	// CMPLWI
    262U,	// CMPRB
    262U,	// CMPRB8
    70U,	// CMPW
    4U,	// CMPWI
    0U,	// CNTLZD
    70U,	// CNTLZDM
    0U,	// CNTLZD_rec
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8_rec
    0U,	// CNTLZW_rec
    0U,	// CNTTZD
    70U,	// CNTTZDM
    0U,	// CNTTZD_rec
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8_rec
    0U,	// CNTTZW_rec
    0U,	// CP_ABORT
    0U,	// CP_COPY
    0U,	// CP_COPY8
    74U,	// CP_PASTE8_rec
    74U,	// CP_PASTE_rec
    0U,	// CR6SET
    0U,	// CR6UNSET
    70U,	// CRAND
    70U,	// CRANDC
    70U,	// CREQV
    70U,	// CRNAND
    70U,	// CRNOR
    70U,	// CROR
    70U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    70U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    70U,	// DIVD
    70U,	// DIVDE
    70U,	// DIVDEO
    70U,	// DIVDEO_rec
    70U,	// DIVDEU
    70U,	// DIVDEUO
    70U,	// DIVDEUO_rec
    70U,	// DIVDEU_rec
    70U,	// DIVDE_rec
    70U,	// DIVDO
    70U,	// DIVDO_rec
    70U,	// DIVDU
    70U,	// DIVDUO
    70U,	// DIVDUO_rec
    70U,	// DIVDU_rec
    70U,	// DIVD_rec
    70U,	// DIVW
    70U,	// DIVWE
    70U,	// DIVWEO
    70U,	// DIVWEO_rec
    70U,	// DIVWEU
    70U,	// DIVWEUO
    70U,	// DIVWEUO_rec
    70U,	// DIVWEU_rec
    70U,	// DIVWE_rec
    70U,	// DIVWO
    70U,	// DIVWO_rec
    70U,	// DIVWU
    70U,	// DIVWUO
    70U,	// DIVWUO_rec
    70U,	// DIVWU_rec
    70U,	// DIVW_rec
    0U,	// DSS
    0U,	// DSSALL
    14U,	// DST
    14U,	// DST64
    14U,	// DSTST
    14U,	// DSTST64
    14U,	// DSTSTT
    14U,	// DSTSTT64
    14U,	// DSTT
    14U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    70U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    70U,	// EFDCMPEQ
    70U,	// EFDCMPGT
    70U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    70U,	// EFDDIV
    70U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    70U,	// EFDSUB
    70U,	// EFDTSTEQ
    70U,	// EFDTSTGT
    70U,	// EFDTSTLT
    0U,	// EFSABS
    70U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    70U,	// EFSCMPEQ
    70U,	// EFSCMPGT
    70U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    70U,	// EFSDIV
    70U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    70U,	// EFSSUB
    70U,	// EFSTSTEQ
    70U,	// EFSTSTGT
    70U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    70U,	// EQV
    70U,	// EQV8
    70U,	// EQV8_rec
    70U,	// EQV_rec
    0U,	// EVABS
    80U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    70U,	// EVADDW
    70U,	// EVAND
    70U,	// EVANDC
    70U,	// EVCMPEQ
    70U,	// EVCMPGTS
    70U,	// EVCMPGTU
    70U,	// EVCMPLTS
    70U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    70U,	// EVDIVWS
    70U,	// EVDIVWU
    70U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    70U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    70U,	// EVFSCMPEQ
    70U,	// EVFSCMPGT
    70U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    70U,	// EVFSDIV
    70U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    70U,	// EVFSSUB
    70U,	// EVFSTSTEQ
    70U,	// EVFSTSTGT
    70U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    70U,	// EVMERGEHI
    70U,	// EVMERGEHILO
    70U,	// EVMERGELO
    70U,	// EVMERGELOHI
    70U,	// EVMHEGSMFAA
    70U,	// EVMHEGSMFAN
    70U,	// EVMHEGSMIAA
    70U,	// EVMHEGSMIAN
    70U,	// EVMHEGUMIAA
    70U,	// EVMHEGUMIAN
    70U,	// EVMHESMF
    70U,	// EVMHESMFA
    70U,	// EVMHESMFAAW
    70U,	// EVMHESMFANW
    70U,	// EVMHESMI
    70U,	// EVMHESMIA
    70U,	// EVMHESMIAAW
    70U,	// EVMHESMIANW
    70U,	// EVMHESSF
    70U,	// EVMHESSFA
    70U,	// EVMHESSFAAW
    70U,	// EVMHESSFANW
    70U,	// EVMHESSIAAW
    70U,	// EVMHESSIANW
    70U,	// EVMHEUMI
    70U,	// EVMHEUMIA
    70U,	// EVMHEUMIAAW
    70U,	// EVMHEUMIANW
    70U,	// EVMHEUSIAAW
    70U,	// EVMHEUSIANW
    70U,	// EVMHOGSMFAA
    70U,	// EVMHOGSMFAN
    70U,	// EVMHOGSMIAA
    70U,	// EVMHOGSMIAN
    70U,	// EVMHOGUMIAA
    70U,	// EVMHOGUMIAN
    70U,	// EVMHOSMF
    70U,	// EVMHOSMFA
    70U,	// EVMHOSMFAAW
    70U,	// EVMHOSMFANW
    70U,	// EVMHOSMI
    70U,	// EVMHOSMIA
    70U,	// EVMHOSMIAAW
    70U,	// EVMHOSMIANW
    70U,	// EVMHOSSF
    70U,	// EVMHOSSFA
    70U,	// EVMHOSSFAAW
    70U,	// EVMHOSSFANW
    70U,	// EVMHOSSIAAW
    70U,	// EVMHOSSIANW
    70U,	// EVMHOUMI
    70U,	// EVMHOUMIA
    70U,	// EVMHOUMIAAW
    70U,	// EVMHOUMIANW
    70U,	// EVMHOUSIAAW
    70U,	// EVMHOUSIANW
    0U,	// EVMRA
    70U,	// EVMWHSMF
    70U,	// EVMWHSMFA
    70U,	// EVMWHSMI
    70U,	// EVMWHSMIA
    70U,	// EVMWHSSF
    70U,	// EVMWHSSFA
    70U,	// EVMWHUMI
    70U,	// EVMWHUMIA
    70U,	// EVMWLSMIAAW
    70U,	// EVMWLSMIANW
    70U,	// EVMWLSSIAAW
    70U,	// EVMWLSSIANW
    70U,	// EVMWLUMI
    70U,	// EVMWLUMIA
    70U,	// EVMWLUMIAAW
    70U,	// EVMWLUMIANW
    70U,	// EVMWLUSIAAW
    70U,	// EVMWLUSIANW
    70U,	// EVMWSMF
    70U,	// EVMWSMFA
    70U,	// EVMWSMFAA
    70U,	// EVMWSMFAN
    70U,	// EVMWSMI
    70U,	// EVMWSMIA
    70U,	// EVMWSMIAA
    70U,	// EVMWSMIAN
    70U,	// EVMWSSF
    70U,	// EVMWSSFA
    70U,	// EVMWSSFAA
    70U,	// EVMWSSFAN
    70U,	// EVMWUMI
    70U,	// EVMWUMIA
    70U,	// EVMWUMIAA
    70U,	// EVMWUMIAN
    70U,	// EVNAND
    0U,	// EVNEG
    70U,	// EVNOR
    70U,	// EVOR
    70U,	// EVORC
    70U,	// EVRLW
    66U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    70U,	// EVSLW
    66U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    66U,	// EVSRWIS
    66U,	// EVSRWIU
    70U,	// EVSRWS
    70U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    70U,	// EVSUBFW
    0U,	// EVSUBIFW
    70U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8_rec
    0U,	// EXTSB_rec
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8_rec
    0U,	// EXTSH_rec
    0U,	// EXTSW
    64U,	// EXTSWSLI
    64U,	// EXTSWSLI_32_64
    64U,	// EXTSWSLI_32_64_rec
    64U,	// EXTSWSLI_rec
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64_rec
    0U,	// EXTSW_rec
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSD_rec
    0U,	// FABSS
    0U,	// FABSS_rec
    70U,	// FADD
    70U,	// FADDS
    70U,	// FADDS_rec
    70U,	// FADD_rec
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDS_rec
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUS_rec
    0U,	// FCFIDU_rec
    0U,	// FCFID_rec
    70U,	// FCMPOD
    70U,	// FCMPOS
    70U,	// FCMPUD
    70U,	// FCMPUS
    70U,	// FCPSGND
    70U,	// FCPSGND_rec
    70U,	// FCPSGNS
    70U,	// FCPSGNS_rec
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZ_rec
    0U,	// FCTIDU_rec
    0U,	// FCTIDZ
    0U,	// FCTIDZ_rec
    0U,	// FCTID_rec
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZ_rec
    0U,	// FCTIWU_rec
    0U,	// FCTIWZ
    0U,	// FCTIWZ_rec
    0U,	// FCTIW_rec
    70U,	// FDIV
    70U,	// FDIVS
    70U,	// FDIVS_rec
    70U,	// FDIV_rec
    262U,	// FMADD
    262U,	// FMADDS
    262U,	// FMADDS_rec
    262U,	// FMADD_rec
    0U,	// FMR
    0U,	// FMR_rec
    262U,	// FMSUB
    262U,	// FMSUBS
    262U,	// FMSUBS_rec
    262U,	// FMSUB_rec
    70U,	// FMUL
    70U,	// FMULS
    70U,	// FMULS_rec
    70U,	// FMUL_rec
    0U,	// FNABSD
    0U,	// FNABSD_rec
    0U,	// FNABSS
    0U,	// FNABSS_rec
    0U,	// FNEGD
    0U,	// FNEGD_rec
    0U,	// FNEGS
    0U,	// FNEGS_rec
    262U,	// FNMADD
    262U,	// FNMADDS
    262U,	// FNMADDS_rec
    262U,	// FNMADD_rec
    262U,	// FNMSUB
    262U,	// FNMSUBS
    262U,	// FNMSUBS_rec
    262U,	// FNMSUB_rec
    0U,	// FRE
    0U,	// FRES
    0U,	// FRES_rec
    0U,	// FRE_rec
    0U,	// FRIMD
    0U,	// FRIMD_rec
    0U,	// FRIMS
    0U,	// FRIMS_rec
    0U,	// FRIND
    0U,	// FRIND_rec
    0U,	// FRINS
    0U,	// FRINS_rec
    0U,	// FRIPD
    0U,	// FRIPD_rec
    0U,	// FRIPS
    0U,	// FRIPS_rec
    0U,	// FRIZD
    0U,	// FRIZD_rec
    0U,	// FRIZS
    0U,	// FRIZS_rec
    0U,	// FRSP
    0U,	// FRSP_rec
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTES_rec
    0U,	// FRSQRTE_rec
    262U,	// FSELD
    262U,	// FSELD_rec
    262U,	// FSELS
    262U,	// FSELS_rec
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTS_rec
    0U,	// FSQRT_rec
    70U,	// FSUB
    70U,	// FSUBS
    70U,	// FSUBS_rec
    70U,	// FSUB_rec
    70U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsADDR32AIX
    0U,	// GETtlsADDR64AIX
    0U,	// GETtlsADDRPCREL
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// GETtlsldADDRPCREL
    0U,	// HASHCHK
    0U,	// HASHCHKP
    0U,	// HASHST
    0U,	// HASHSTP
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    262U,	// ISEL
    262U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    1U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    70U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    70U,	// LBZXTLS
    70U,	// LBZXTLS_
    70U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    1U,	// LDARXL
    66U,	// LDAT
    0U,	// LDBRX
    70U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    70U,	// LDXTLS
    70U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    1U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    70U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    70U,	// LHZXTLS
    70U,	// LHZXTLS_
    70U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LQ
    0U,	// LQARX
    1U,	// LQARXL
    0U,	// LQX_PSEUDO
    66U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    1U,	// LWARXL
    66U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    70U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    70U,	// LWZXTLS
    70U,	// LWZXTLS_
    70U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LWZtocL
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    70U,	// LXVL
    70U,	// LXVLL
    0U,	// LXVP
    0U,	// LXVPX
    0U,	// LXVRBX
    0U,	// LXVRDX
    0U,	// LXVRHX
    0U,	// LXVRWX
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    262U,	// MADDHD
    262U,	// MADDHDU
    262U,	// MADDLD
    262U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFS_rec
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVRWZ
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    70U,	// MODSD
    70U,	// MODSW
    70U,	// MODUD
    70U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    266U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFI_rec
    0U,	// MTFSFIb
    266U,	// MTFSF_rec
    0U,	// MTFSFb
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRD
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVRWA
    0U,	// MTVRWZ
    0U,	// MTVSCR
    0U,	// MTVSRBM
    0U,	// MTVSRBMI
    0U,	// MTVSRD
    70U,	// MTVSRDD
    0U,	// MTVSRDM
    0U,	// MTVSRHM
    0U,	// MTVSRQM
    0U,	// MTVSRWA
    0U,	// MTVSRWM
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    70U,	// MULHD
    70U,	// MULHDU
    70U,	// MULHDU_rec
    70U,	// MULHD_rec
    70U,	// MULHW
    70U,	// MULHWU
    70U,	// MULHWU_rec
    70U,	// MULHW_rec
    70U,	// MULLD
    70U,	// MULLDO
    70U,	// MULLDO_rec
    70U,	// MULLD_rec
    4U,	// MULLI
    4U,	// MULLI8
    70U,	// MULLW
    70U,	// MULLWO
    70U,	// MULLWO_rec
    70U,	// MULLW_rec
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    70U,	// NAND
    70U,	// NAND8
    70U,	// NAND8_rec
    70U,	// NAND_rec
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8O
    0U,	// NEG8O_rec
    0U,	// NEG8_rec
    0U,	// NEGO
    0U,	// NEGO_rec
    0U,	// NEG_rec
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    70U,	// NOR
    70U,	// NOR8
    70U,	// NOR8_rec
    70U,	// NOR_rec
    70U,	// OR
    70U,	// OR8
    70U,	// OR8_rec
    70U,	// ORC
    70U,	// ORC8
    70U,	// ORC8_rec
    70U,	// ORC_rec
    8U,	// ORI
    8U,	// ORI8
    8U,	// ORIS
    8U,	// ORIS8
    70U,	// OR_rec
    18U,	// PADDI
    18U,	// PADDI8
    0U,	// PADDI8pc
    0U,	// PADDIdtprel
    0U,	// PADDIpc
    70U,	// PDEPD
    70U,	// PEXTD
    0U,	// PLBZ
    0U,	// PLBZ8
    0U,	// PLBZ8pc
    0U,	// PLBZpc
    0U,	// PLD
    0U,	// PLDpc
    0U,	// PLFD
    0U,	// PLFDpc
    0U,	// PLFS
    0U,	// PLFSpc
    0U,	// PLHA
    0U,	// PLHA8
    0U,	// PLHA8pc
    0U,	// PLHApc
    0U,	// PLHZ
    0U,	// PLHZ8
    0U,	// PLHZ8pc
    0U,	// PLHZpc
    0U,	// PLI
    0U,	// PLI8
    0U,	// PLWA
    0U,	// PLWA8
    0U,	// PLWA8pc
    0U,	// PLWApc
    0U,	// PLWZ
    0U,	// PLWZ8
    0U,	// PLWZ8pc
    0U,	// PLWZpc
    0U,	// PLXSD
    0U,	// PLXSDpc
    0U,	// PLXSSP
    0U,	// PLXSSPpc
    0U,	// PLXV
    0U,	// PLXVP
    0U,	// PLXVPpc
    0U,	// PLXVpc
    2694U,	// PMXVBF16GER2
    13076U,	// PMXVBF16GER2NN
    13076U,	// PMXVBF16GER2NP
    13076U,	// PMXVBF16GER2PN
    13076U,	// PMXVBF16GER2PP
    2694U,	// PMXVF16GER2
    13076U,	// PMXVF16GER2NN
    13076U,	// PMXVF16GER2NP
    13076U,	// PMXVF16GER2PN
    13076U,	// PMXVF16GER2PP
    2694U,	// PMXVF32GER
    21268U,	// PMXVF32GERNN
    21268U,	// PMXVF32GERNP
    21268U,	// PMXVF32GERPN
    21268U,	// PMXVF32GERPP
    27270U,	// PMXVF64GER
    6932U,	// PMXVF64GERNN
    6932U,	// PMXVF64GERNP
    6932U,	// PMXVF64GERPN
    6932U,	// PMXVF64GERPP
    2694U,	// PMXVI16GER2
    13076U,	// PMXVI16GER2PP
    2694U,	// PMXVI16GER2S
    13076U,	// PMXVI16GER2SPP
    2694U,	// PMXVI4GER8
    13076U,	// PMXVI4GER8PP
    2694U,	// PMXVI8GER4
    13076U,	// PMXVI8GER4PP
    13076U,	// PMXVI8GER4SPP
    0U,	// POPCNTB
    0U,	// POPCNTB8
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    0U,	// PREPARE_PROBED_ALLOCA_32
    0U,	// PREPARE_PROBED_ALLOCA_64
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    0U,	// PROBED_ALLOCA_32
    0U,	// PROBED_ALLOCA_64
    0U,	// PROBED_STACKALLOC_32
    0U,	// PROBED_STACKALLOC_64
    0U,	// PSTB
    0U,	// PSTB8
    0U,	// PSTB8pc
    0U,	// PSTBpc
    0U,	// PSTD
    0U,	// PSTDpc
    0U,	// PSTFD
    0U,	// PSTFDpc
    0U,	// PSTFS
    0U,	// PSTFSpc
    0U,	// PSTH
    0U,	// PSTH8
    0U,	// PSTH8pc
    0U,	// PSTHpc
    0U,	// PSTW
    0U,	// PSTW8
    0U,	// PSTW8pc
    0U,	// PSTWpc
    0U,	// PSTXSD
    0U,	// PSTXSDpc
    0U,	// PSTXSSP
    0U,	// PSTXSSPpc
    0U,	// PSTXV
    0U,	// PSTXVP
    0U,	// PSTXVPpc
    0U,	// PSTXVpc
    0U,	// PseudoEIEIO
    0U,	// RESTORE_ACC
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_QUADWORD
    0U,	// RESTORE_UACC
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    6U,	// RLDCL
    6U,	// RLDCL_rec
    6U,	// RLDCR
    6U,	// RLDCR_rec
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32_rec
    0U,	// RLDICL_rec
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICR_rec
    0U,	// RLDIC_rec
    22U,	// RLDIMI
    22U,	// RLDIMI_rec
    24U,	// RLWIMI
    24U,	// RLWIMI8
    24U,	// RLWIMI8_rec
    24U,	// RLWIMI_rec
    34946U,	// RLWINM
    34946U,	// RLWINM8
    34946U,	// RLWINM8_rec
    34946U,	// RLWINM_rec
    34950U,	// RLWNM
    34950U,	// RLWNM8
    34950U,	// RLWNM8_rec
    34950U,	// RLWNM_rec
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETBC
    0U,	// SETBC8
    0U,	// SETBCR
    0U,	// SETBCR8
    0U,	// SETFLM
    0U,	// SETNBC
    0U,	// SETNBC8
    0U,	// SETNBCR
    0U,	// SETNBCR8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEE_rec
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    70U,	// SLD
    70U,	// SLD_rec
    70U,	// SLW
    70U,	// SLW8
    70U,	// SLW8_rec
    70U,	// SLW_rec
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_ACC
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_QUADWORD
    0U,	// SPILL_UACC
    0U,	// SPLIT_QUADWORD
    70U,	// SRAD
    64U,	// SRADI
    64U,	// SRADI_32
    64U,	// SRADI_rec
    70U,	// SRAD_rec
    70U,	// SRAW
    66U,	// SRAWI
    66U,	// SRAWI_rec
    70U,	// SRAW_rec
    70U,	// SRD
    70U,	// SRD_rec
    70U,	// SRW
    70U,	// SRW8
    70U,	// SRW8_rec
    70U,	// SRW_rec
    0U,	// STB
    0U,	// STB8
    70U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    70U,	// STBXTLS
    70U,	// STBXTLS_
    70U,	// STBXTLS_32
    0U,	// STD
    66U,	// STDAT
    0U,	// STDBRX
    70U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    70U,	// STDXTLS
    70U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    70U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    70U,	// STHXTLS
    70U,	// STHXTLS_
    70U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    0U,	// STQ
    0U,	// STQCX
    0U,	// STQX_PSEUDO
    66U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    66U,	// STWAT
    0U,	// STWBRX
    70U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    70U,	// STWXTLS
    70U,	// STWXTLS_
    70U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    70U,	// STXVL
    70U,	// STXVLL
    0U,	// STXVP
    0U,	// STXVPX
    0U,	// STXVRBX
    0U,	// STXVRDX
    0U,	// STXVRHX
    0U,	// STXVRWX
    0U,	// STXVW4X
    0U,	// STXVX
    70U,	// SUBF
    70U,	// SUBF8
    70U,	// SUBF8O
    70U,	// SUBF8O_rec
    70U,	// SUBF8_rec
    70U,	// SUBFC
    70U,	// SUBFC8
    70U,	// SUBFC8O
    70U,	// SUBFC8O_rec
    70U,	// SUBFC8_rec
    70U,	// SUBFCO
    70U,	// SUBFCO_rec
    70U,	// SUBFC_rec
    70U,	// SUBFE
    70U,	// SUBFE8
    70U,	// SUBFE8O
    70U,	// SUBFE8O_rec
    70U,	// SUBFE8_rec
    70U,	// SUBFEO
    70U,	// SUBFEO_rec
    70U,	// SUBFE_rec
    4U,	// SUBFIC
    4U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8O
    0U,	// SUBFME8O_rec
    0U,	// SUBFME8_rec
    0U,	// SUBFMEO
    0U,	// SUBFMEO_rec
    0U,	// SUBFME_rec
    70U,	// SUBFO
    70U,	// SUBFO_rec
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8O
    0U,	// SUBFZE8O_rec
    0U,	// SUBFZE8_rec
    0U,	// SUBFZEO
    0U,	// SUBFZEO_rec
    0U,	// SUBFZE_rec
    70U,	// SUBF_rec
    0U,	// SYNC
    0U,	// TABORT
    70U,	// TABORTDC
    66U,	// TABORTDCI
    70U,	// TABORTWC
    66U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    70U,	// TD
    4U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    70U,	// TLBRE2
    0U,	// TLBSX
    70U,	// TLBSX2
    70U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    70U,	// TLBWE2
    0U,	// TLSGDAIX
    0U,	// TLSGDAIX8
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    70U,	// TW
    4U,	// TWI
    0U,	// UNENCODED_NOP
    0U,	// UpdateGBR
    70U,	// VABSDUB
    70U,	// VABSDUH
    70U,	// VABSDUW
    70U,	// VADDCUQ
    70U,	// VADDCUW
    262U,	// VADDECUQ
    262U,	// VADDEUQM
    70U,	// VADDFP
    70U,	// VADDSBS
    70U,	// VADDSHS
    70U,	// VADDSWS
    70U,	// VADDUBM
    70U,	// VADDUBS
    70U,	// VADDUDM
    70U,	// VADDUHM
    70U,	// VADDUHS
    70U,	// VADDUQM
    70U,	// VADDUWM
    70U,	// VADDUWS
    70U,	// VAND
    70U,	// VANDC
    70U,	// VAVGSB
    70U,	// VAVGSH
    70U,	// VAVGSW
    70U,	// VAVGUB
    70U,	// VAVGUH
    70U,	// VAVGUW
    70U,	// VBPERMD
    70U,	// VBPERMQ
    26U,	// VCFSX
    1U,	// VCFSX_0
    70U,	// VCFUGED
    26U,	// VCFUX
    1U,	// VCFUX_0
    70U,	// VCIPHER
    70U,	// VCIPHERLAST
    70U,	// VCLRLB
    70U,	// VCLRRB
    0U,	// VCLZB
    0U,	// VCLZD
    70U,	// VCLZDM
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    70U,	// VCMPBFP
    70U,	// VCMPBFP_rec
    70U,	// VCMPEQFP
    70U,	// VCMPEQFP_rec
    70U,	// VCMPEQUB
    70U,	// VCMPEQUB_rec
    70U,	// VCMPEQUD
    70U,	// VCMPEQUD_rec
    70U,	// VCMPEQUH
    70U,	// VCMPEQUH_rec
    70U,	// VCMPEQUQ
    70U,	// VCMPEQUQ_rec
    70U,	// VCMPEQUW
    70U,	// VCMPEQUW_rec
    70U,	// VCMPGEFP
    70U,	// VCMPGEFP_rec
    70U,	// VCMPGTFP
    70U,	// VCMPGTFP_rec
    70U,	// VCMPGTSB
    70U,	// VCMPGTSB_rec
    70U,	// VCMPGTSD
    70U,	// VCMPGTSD_rec
    70U,	// VCMPGTSH
    70U,	// VCMPGTSH_rec
    70U,	// VCMPGTSQ
    70U,	// VCMPGTSQ_rec
    70U,	// VCMPGTSW
    70U,	// VCMPGTSW_rec
    70U,	// VCMPGTUB
    70U,	// VCMPGTUB_rec
    70U,	// VCMPGTUD
    70U,	// VCMPGTUD_rec
    70U,	// VCMPGTUH
    70U,	// VCMPGTUH_rec
    70U,	// VCMPGTUQ
    70U,	// VCMPGTUQ_rec
    70U,	// VCMPGTUW
    70U,	// VCMPGTUW_rec
    70U,	// VCMPNEB
    70U,	// VCMPNEB_rec
    70U,	// VCMPNEH
    70U,	// VCMPNEH_rec
    70U,	// VCMPNEW
    70U,	// VCMPNEW_rec
    70U,	// VCMPNEZB
    70U,	// VCMPNEZB_rec
    70U,	// VCMPNEZH
    70U,	// VCMPNEZH_rec
    70U,	// VCMPNEZW
    70U,	// VCMPNEZW_rec
    70U,	// VCMPSQ
    70U,	// VCMPUQ
    74U,	// VCNTMBB
    74U,	// VCNTMBD
    74U,	// VCNTMBH
    74U,	// VCNTMBW
    26U,	// VCTSXS
    1U,	// VCTSXS_0
    26U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    70U,	// VCTZDM
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    70U,	// VDIVESD
    70U,	// VDIVESQ
    70U,	// VDIVESW
    70U,	// VDIVEUD
    70U,	// VDIVEUQ
    70U,	// VDIVEUW
    70U,	// VDIVSD
    70U,	// VDIVSQ
    70U,	// VDIVSW
    70U,	// VDIVUD
    70U,	// VDIVUQ
    70U,	// VDIVUW
    70U,	// VEQV
    0U,	// VEXPANDBM
    0U,	// VEXPANDDM
    0U,	// VEXPANDHM
    0U,	// VEXPANDQM
    0U,	// VEXPANDWM
    0U,	// VEXPTEFP
    262U,	// VEXTDDVLX
    262U,	// VEXTDDVRX
    262U,	// VEXTDUBVLX
    262U,	// VEXTDUBVRX
    262U,	// VEXTDUHVLX
    262U,	// VEXTDUHVRX
    262U,	// VEXTDUWVLX
    262U,	// VEXTDUWVRX
    0U,	// VEXTRACTBM
    28U,	// VEXTRACTD
    0U,	// VEXTRACTDM
    0U,	// VEXTRACTHM
    0U,	// VEXTRACTQM
    28U,	// VEXTRACTUB
    28U,	// VEXTRACTUH
    28U,	// VEXTRACTUW
    0U,	// VEXTRACTWM
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSD2Q
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    70U,	// VEXTUBLX
    70U,	// VEXTUBRX
    70U,	// VEXTUHLX
    70U,	// VEXTUHRX
    70U,	// VEXTUWLX
    70U,	// VEXTUWRX
    0U,	// VGBBD
    30U,	// VGNB
    84U,	// VINSBLX
    84U,	// VINSBRX
    84U,	// VINSBVLX
    84U,	// VINSBVRX
    0U,	// VINSD
    84U,	// VINSDLX
    84U,	// VINSDRX
    0U,	// VINSERTB
    28U,	// VINSERTD
    0U,	// VINSERTH
    28U,	// VINSERTW
    84U,	// VINSHLX
    84U,	// VINSHRX
    84U,	// VINSHVLX
    84U,	// VINSHVRX
    0U,	// VINSW
    84U,	// VINSWLX
    84U,	// VINSWRX
    84U,	// VINSWVLX
    84U,	// VINSWVRX
    0U,	// VLOGEFP
    262U,	// VMADDFP
    70U,	// VMAXFP
    70U,	// VMAXSB
    70U,	// VMAXSD
    70U,	// VMAXSH
    70U,	// VMAXSW
    70U,	// VMAXUB
    70U,	// VMAXUD
    70U,	// VMAXUH
    70U,	// VMAXUW
    262U,	// VMHADDSHS
    262U,	// VMHRADDSHS
    70U,	// VMINFP
    70U,	// VMINSB
    70U,	// VMINSD
    70U,	// VMINSH
    70U,	// VMINSW
    70U,	// VMINUB
    70U,	// VMINUD
    70U,	// VMINUH
    70U,	// VMINUW
    262U,	// VMLADDUHM
    70U,	// VMODSD
    70U,	// VMODSQ
    70U,	// VMODSW
    70U,	// VMODUD
    70U,	// VMODUQ
    70U,	// VMODUW
    70U,	// VMRGEW
    70U,	// VMRGHB
    70U,	// VMRGHH
    70U,	// VMRGHW
    70U,	// VMRGLB
    70U,	// VMRGLH
    70U,	// VMRGLW
    70U,	// VMRGOW
    262U,	// VMSUMCUD
    262U,	// VMSUMMBM
    262U,	// VMSUMSHM
    262U,	// VMSUMSHS
    262U,	// VMSUMUBM
    262U,	// VMSUMUDM
    262U,	// VMSUMUHM
    262U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    70U,	// VMUL10ECUQ
    70U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    70U,	// VMULESB
    70U,	// VMULESD
    70U,	// VMULESH
    70U,	// VMULESW
    70U,	// VMULEUB
    70U,	// VMULEUD
    70U,	// VMULEUH
    70U,	// VMULEUW
    70U,	// VMULHSD
    70U,	// VMULHSW
    70U,	// VMULHUD
    70U,	// VMULHUW
    70U,	// VMULLD
    70U,	// VMULOSB
    70U,	// VMULOSD
    70U,	// VMULOSH
    70U,	// VMULOSW
    70U,	// VMULOUB
    70U,	// VMULOUD
    70U,	// VMULOUH
    70U,	// VMULOUW
    70U,	// VMULUWM
    70U,	// VNAND
    70U,	// VNCIPHER
    70U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    262U,	// VNMSUBFP
    70U,	// VNOR
    70U,	// VOR
    70U,	// VORC
    70U,	// VPDEPD
    262U,	// VPERM
    262U,	// VPERMR
    262U,	// VPERMXOR
    70U,	// VPEXTD
    70U,	// VPKPX
    70U,	// VPKSDSS
    70U,	// VPKSDUS
    70U,	// VPKSHSS
    70U,	// VPKSHUS
    70U,	// VPKSWSS
    70U,	// VPKSWUS
    70U,	// VPKUDUM
    70U,	// VPKUDUS
    70U,	// VPKUHUM
    70U,	// VPKUHUS
    70U,	// VPKUWUM
    70U,	// VPKUWUS
    70U,	// VPMSUMB
    70U,	// VPMSUMD
    70U,	// VPMSUMH
    70U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    70U,	// VRLB
    70U,	// VRLD
    70U,	// VRLDMI
    70U,	// VRLDNM
    70U,	// VRLH
    70U,	// VRLQ
    70U,	// VRLQMI
    70U,	// VRLQNM
    70U,	// VRLW
    70U,	// VRLWMI
    70U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    262U,	// VSEL
    650U,	// VSHASIGMAD
    650U,	// VSHASIGMAW
    70U,	// VSL
    70U,	// VSLB
    70U,	// VSLD
    902U,	// VSLDBI
    646U,	// VSLDOI
    70U,	// VSLH
    70U,	// VSLO
    70U,	// VSLQ
    70U,	// VSLV
    70U,	// VSLW
    26U,	// VSPLTB
    26U,	// VSPLTBs
    26U,	// VSPLTH
    26U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    26U,	// VSPLTW
    70U,	// VSR
    70U,	// VSRAB
    70U,	// VSRAD
    70U,	// VSRAH
    70U,	// VSRAQ
    70U,	// VSRAW
    70U,	// VSRB
    70U,	// VSRD
    902U,	// VSRDBI
    70U,	// VSRH
    70U,	// VSRO
    70U,	// VSRQ
    70U,	// VSRV
    70U,	// VSRW
    0U,	// VSTRIBL
    0U,	// VSTRIBL_rec
    0U,	// VSTRIBR
    0U,	// VSTRIBR_rec
    0U,	// VSTRIHL
    0U,	// VSTRIHL_rec
    0U,	// VSTRIHR
    0U,	// VSTRIHR_rec
    70U,	// VSUBCUQ
    70U,	// VSUBCUW
    262U,	// VSUBECUQ
    262U,	// VSUBEUQM
    70U,	// VSUBFP
    70U,	// VSUBSBS
    70U,	// VSUBSHS
    70U,	// VSUBSWS
    70U,	// VSUBUBM
    70U,	// VSUBUBS
    70U,	// VSUBUDM
    70U,	// VSUBUHM
    70U,	// VSUBUHS
    70U,	// VSUBUQM
    70U,	// VSUBUWM
    70U,	// VSUBUWS
    70U,	// VSUM2SWS
    70U,	// VSUM4SBS
    70U,	// VSUM4SHS
    70U,	// VSUM4UBS
    70U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    70U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    70U,	// XOR
    70U,	// XOR8
    70U,	// XOR8_rec
    8U,	// XORI
    8U,	// XORI8
    8U,	// XORIS
    8U,	// XORIS8
    70U,	// XOR_rec
    0U,	// XSABSDP
    0U,	// XSABSQP
    70U,	// XSADDDP
    70U,	// XSADDQP
    70U,	// XSADDQPO
    70U,	// XSADDSP
    70U,	// XSCMPEQDP
    70U,	// XSCMPEXPDP
    70U,	// XSCMPEXPQP
    70U,	// XSCMPGEDP
    70U,	// XSCMPGTDP
    70U,	// XSCMPODP
    70U,	// XSCMPOQP
    70U,	// XSCMPUDP
    70U,	// XSCMPUQP
    70U,	// XSCPSGNDP
    70U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSQZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUQZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSQQP
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUQQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    70U,	// XSDIVDP
    70U,	// XSDIVQP
    70U,	// XSDIVQPO
    70U,	// XSDIVSP
    70U,	// XSIEXPDP
    70U,	// XSIEXPQP
    84U,	// XSMADDADP
    84U,	// XSMADDASP
    84U,	// XSMADDMDP
    84U,	// XSMADDMSP
    84U,	// XSMADDQP
    84U,	// XSMADDQPO
    70U,	// XSMAXCDP
    70U,	// XSMAXDP
    70U,	// XSMAXJDP
    70U,	// XSMINCDP
    70U,	// XSMINDP
    70U,	// XSMINJDP
    84U,	// XSMSUBADP
    84U,	// XSMSUBASP
    84U,	// XSMSUBMDP
    84U,	// XSMSUBMSP
    84U,	// XSMSUBQP
    84U,	// XSMSUBQPO
    70U,	// XSMULDP
    70U,	// XSMULQP
    70U,	// XSMULQPO
    70U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    84U,	// XSNMADDADP
    84U,	// XSNMADDASP
    84U,	// XSNMADDMDP
    84U,	// XSNMADDMSP
    84U,	// XSNMADDQP
    84U,	// XSNMADDQPO
    84U,	// XSNMSUBADP
    84U,	// XSNMSUBASP
    84U,	// XSNMSUBMDP
    84U,	// XSNMSUBMSP
    84U,	// XSNMSUBQP
    84U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    70U,	// XSSUBDP
    70U,	// XSSUBQP
    70U,	// XSSUBQPO
    70U,	// XSSUBSP
    70U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    32U,	// XSTSTDCDP
    32U,	// XSTSTDCQP
    32U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    70U,	// XVADDDP
    70U,	// XVADDSP
    70U,	// XVBF16GER2
    84U,	// XVBF16GER2NN
    84U,	// XVBF16GER2NP
    84U,	// XVBF16GER2PN
    84U,	// XVBF16GER2PP
    70U,	// XVCMPEQDP
    70U,	// XVCMPEQDP_rec
    70U,	// XVCMPEQSP
    70U,	// XVCMPEQSP_rec
    70U,	// XVCMPGEDP
    70U,	// XVCMPGEDP_rec
    70U,	// XVCMPGESP
    70U,	// XVCMPGESP_rec
    70U,	// XVCMPGTDP
    70U,	// XVCMPGTDP_rec
    70U,	// XVCMPGTSP
    70U,	// XVCMPGTSP_rec
    70U,	// XVCPSGNDP
    70U,	// XVCPSGNSP
    0U,	// XVCVBF16SPN
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPBF16
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    70U,	// XVDIVDP
    70U,	// XVDIVSP
    70U,	// XVF16GER2
    84U,	// XVF16GER2NN
    84U,	// XVF16GER2NP
    84U,	// XVF16GER2PN
    84U,	// XVF16GER2PP
    70U,	// XVF32GER
    84U,	// XVF32GERNN
    84U,	// XVF32GERNP
    84U,	// XVF32GERPN
    84U,	// XVF32GERPP
    70U,	// XVF64GER
    84U,	// XVF64GERNN
    84U,	// XVF64GERNP
    84U,	// XVF64GERPN
    84U,	// XVF64GERPP
    70U,	// XVI16GER2
    84U,	// XVI16GER2PP
    70U,	// XVI16GER2S
    84U,	// XVI16GER2SPP
    70U,	// XVI4GER8
    84U,	// XVI4GER8PP
    70U,	// XVI8GER4
    84U,	// XVI8GER4PP
    84U,	// XVI8GER4SPP
    70U,	// XVIEXPDP
    70U,	// XVIEXPSP
    84U,	// XVMADDADP
    84U,	// XVMADDASP
    84U,	// XVMADDMDP
    84U,	// XVMADDMSP
    70U,	// XVMAXDP
    70U,	// XVMAXSP
    70U,	// XVMINDP
    70U,	// XVMINSP
    84U,	// XVMSUBADP
    84U,	// XVMSUBASP
    84U,	// XVMSUBMDP
    84U,	// XVMSUBMSP
    70U,	// XVMULDP
    70U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    84U,	// XVNMADDADP
    84U,	// XVNMADDASP
    84U,	// XVNMADDMDP
    84U,	// XVNMADDMSP
    84U,	// XVNMSUBADP
    84U,	// XVNMSUBASP
    84U,	// XVNMSUBMDP
    84U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    70U,	// XVSUBDP
    70U,	// XVSUBSP
    70U,	// XVTDIVDP
    70U,	// XVTDIVSP
    0U,	// XVTLSBB
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    32U,	// XVTSTDCDP
    32U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    262U,	// XXBLENDVB
    262U,	// XXBLENDVD
    262U,	// XXBLENDVH
    262U,	// XXBLENDVW
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    43270U,	// XXEVAL
    34U,	// XXEXTRACTUW
    36U,	// XXGENPCVBM
    36U,	// XXGENPCVDM
    36U,	// XXGENPCVHM
    36U,	// XXGENPCVWM
    38U,	// XXINSERTW
    70U,	// XXLAND
    70U,	// XXLANDC
    70U,	// XXLEQV
    12U,	// XXLEQVOnes
    70U,	// XXLNAND
    70U,	// XXLNOR
    70U,	// XXLOR
    70U,	// XXLORC
    70U,	// XXLORf
    70U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    0U,	// XXMFACC
    70U,	// XXMRGHW
    70U,	// XXMRGLW
    0U,	// XXMTACC
    70U,	// XXPERM
    390U,	// XXPERMDI
    1040U,	// XXPERMDIs
    70U,	// XXPERMR
    51462U,	// XXPERMX
    262U,	// XXSEL
    0U,	// XXSETACCZ
    390U,	// XXSLDWI
    1040U,	// XXSLDWIs
    84U,	// XXSPLTI32DX
    0U,	// XXSPLTIB
    0U,	// XXSPLTIDP
    0U,	// XXSPLTIW
    40U,	// XXSPLTW
    40U,	// XXSPLTWs
    42U,	// gBC
    44U,	// gBCA
    0U,	// gBCAat
    70U,	// gBCCTR
    70U,	// gBCCTRL
    42U,	// gBCL
    44U,	// gBCLA
    0U,	// gBCLAat
    70U,	// gBCLR
    70U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ATOMIC_CMP_SWAP_I128
    0U,	// ATOMIC_LOAD_ADD_I128
    0U,	// ATOMIC_LOAD_AND_I128
    0U,	// ATOMIC_LOAD_NAND_I128
    0U,	// ATOMIC_LOAD_OR_I128
    0U,	// ATOMIC_LOAD_SUB_I128
    0U,	// ATOMIC_LOAD_XOR_I128
    0U,	// ATOMIC_SWAP_I128
    0U,	// BUILD_QUADWORD
    0U,	// BUILD_UACC
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDI_rec
    0U,	// CLRLSLWI
    0U,	// CLRLSLWI_rec
    0U,	// CLRRDI
    0U,	// CLRRDI_rec
    0U,	// CLRRWI
    0U,	// CLRRWI_rec
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFPS
    0U,	// DCBFx
    0U,	// DCBSTPS
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDI_rec
    0U,	// EXTLWI
    0U,	// EXTLWI_rec
    0U,	// EXTRDI
    0U,	// EXTRDI_rec
    0U,	// EXTRWI
    0U,	// EXTRWI_rec
    0U,	// INSLWI
    0U,	// INSLWI_rec
    0U,	// INSRDI
    0U,	// INSRDI_rec
    0U,	// INSRWI
    0U,	// INSRWI_rec
    0U,	// KILL_PAIR
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    0U,	// RLWIMIbm
    0U,	// RLWIMIbm_rec
    0U,	// RLWINMbm
    0U,	// RLWINMbm_rec
    0U,	// RLWNMbm
    0U,	// RLWNMbm_rec
    0U,	// ROTRDI
    0U,	// ROTRDI_rec
    0U,	// ROTRWI
    0U,	// ROTRWI_rec
    0U,	// SLDI
    0U,	// SLDI_rec
    0U,	// SLWI
    0U,	// SLWI_rec
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    0U,	// SRDI
    0U,	// SRDI_rec
    0U,	// SRWI
    0U,	// SRWI_rec
    0U,	// STIWX
    0U,	// SUBI
    0U,	// SUBIC
    0U,	// SUBIC_rec
    0U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    0U,	// ADD4
    0U,	// ADD4O
    0U,	// ADD4O_rec
    0U,	// ADD4TLS
    0U,	// ADD4_rec
    0U,	// ADD8
    0U,	// ADD8O
    0U,	// ADD8O_rec
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8_rec
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8O
    0U,	// ADDC8O_rec
    0U,	// ADDC8_rec
    0U,	// ADDCO
    0U,	// ADDCO_rec
    0U,	// ADDC_rec
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8O
    0U,	// ADDE8O_rec
    0U,	// ADDE8_rec
    0U,	// ADDEO
    0U,	// ADDEO_rec
    0U,	// ADDEX
    0U,	// ADDEX8
    0U,	// ADDE_rec
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDIC_rec
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIStocHA8
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItoc
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8O
    0U,	// ADDME8O_rec
    0U,	// ADDME8_rec
    0U,	// ADDMEO
    0U,	// ADDMEO_rec
    0U,	// ADDME_rec
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8O
    0U,	// ADDZE8O_rec
    0U,	// ADDZE8_rec
    0U,	// ADDZEO
    0U,	// ADDZEO_rec
    0U,	// ADDZE_rec
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8_rec
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8_rec
    0U,	// ANDC_rec
    0U,	// ANDI8_rec
    0U,	// ANDIS8_rec
    0U,	// ANDIS_rec
    0U,	// ANDI_rec
    0U,	// ANDI_rec_1_EQ_BIT
    0U,	// ANDI_rec_1_EQ_BIT8
    0U,	// ANDI_rec_1_GT_BIT
    0U,	// ANDI_rec_1_GT_BIT8
    0U,	// AND_rec
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    0U,	// BCDCFN_rec
    0U,	// BCDCFSQ_rec
    0U,	// BCDCFZ_rec
    0U,	// BCDCPSGN_rec
    0U,	// BCDCTN_rec
    0U,	// BCDCTSQ_rec
    0U,	// BCDCTZ_rec
    0U,	// BCDSETSGN_rec
    0U,	// BCDSR_rec
    0U,	// BCDS_rec
    0U,	// BCDTRUNC_rec
    0U,	// BCDUS_rec
    0U,	// BCDUTRUNC_rec
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCTRL8_LDinto_toc_RM
    0U,	// BCTRL8_RM
    0U,	// BCTRL_LWZinto_toc
    0U,	// BCTRL_LWZinto_toc_RM
    0U,	// BCTRL_RM
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_RM
    0U,	// BL8_NOP_TLS
    0U,	// BL8_NOTOC
    0U,	// BL8_NOTOC_RM
    0U,	// BL8_NOTOC_TLS
    0U,	// BL8_RM
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLA8_NOP_RM
    0U,	// BLA8_RM
    0U,	// BLA_RM
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_NOP_RM
    0U,	// BL_RM
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CFUGED
    0U,	// CLRBHRB
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPEQB
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDM
    0U,	// CNTLZD_rec
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8_rec
    0U,	// CNTLZW_rec
    0U,	// CNTTZD
    0U,	// CNTTZDM
    0U,	// CNTTZD_rec
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8_rec
    0U,	// CNTTZW_rec
    0U,	// CP_ABORT
    0U,	// CP_COPY
    0U,	// CP_COPY8
    0U,	// CP_PASTE8_rec
    0U,	// CP_PASTE_rec
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEO
    0U,	// DIVDEO_rec
    0U,	// DIVDEU
    0U,	// DIVDEUO
    0U,	// DIVDEUO_rec
    0U,	// DIVDEU_rec
    0U,	// DIVDE_rec
    0U,	// DIVDO
    0U,	// DIVDO_rec
    0U,	// DIVDU
    0U,	// DIVDUO
    0U,	// DIVDUO_rec
    0U,	// DIVDU_rec
    0U,	// DIVD_rec
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEO
    0U,	// DIVWEO_rec
    0U,	// DIVWEU
    0U,	// DIVWEUO
    0U,	// DIVWEUO_rec
    0U,	// DIVWEU_rec
    0U,	// DIVWE_rec
    0U,	// DIVWO
    0U,	// DIVWO_rec
    0U,	// DIVWU
    0U,	// DIVWUO
    0U,	// DIVWUO_rec
    0U,	// DIVWU_rec
    0U,	// DIVW_rec
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    0U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    0U,	// EFDCMPEQ
    0U,	// EFDCMPGT
    0U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    0U,	// EFDDIV
    0U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    0U,	// EFDSUB
    0U,	// EFDTSTEQ
    0U,	// EFDTSTGT
    0U,	// EFDTSTLT
    0U,	// EFSABS
    0U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    0U,	// EFSCMPEQ
    0U,	// EFSCMPGT
    0U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    0U,	// EFSDIV
    0U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    0U,	// EFSSUB
    0U,	// EFSTSTEQ
    0U,	// EFSTSTGT
    0U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8_rec
    0U,	// EQV_rec
    0U,	// EVABS
    0U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    0U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    0U,	// EVFSCMPEQ
    0U,	// EVFSCMPGT
    0U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    0U,	// EVFSDIV
    0U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    0U,	// EVFSSUB
    0U,	// EVFSTSTEQ
    0U,	// EVFSTSTGT
    0U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    0U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    0U,	// EVSLW
    0U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    0U,	// EVSRWIS
    0U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8_rec
    0U,	// EXTSB_rec
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8_rec
    0U,	// EXTSH_rec
    0U,	// EXTSW
    0U,	// EXTSWSLI
    0U,	// EXTSWSLI_32_64
    0U,	// EXTSWSLI_32_64_rec
    0U,	// EXTSWSLI_rec
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64_rec
    0U,	// EXTSW_rec
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSD_rec
    0U,	// FABSS
    0U,	// FABSS_rec
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDS_rec
    0U,	// FADD_rec
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDS_rec
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUS_rec
    0U,	// FCFIDU_rec
    0U,	// FCFID_rec
    0U,	// FCMPOD
    0U,	// FCMPOS
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGND_rec
    0U,	// FCPSGNS
    0U,	// FCPSGNS_rec
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZ_rec
    0U,	// FCTIDU_rec
    0U,	// FCTIDZ
    0U,	// FCTIDZ_rec
    0U,	// FCTID_rec
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZ_rec
    0U,	// FCTIWU_rec
    0U,	// FCTIWZ
    0U,	// FCTIWZ_rec
    0U,	// FCTIW_rec
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVS_rec
    0U,	// FDIV_rec
    0U,	// FMADD
    0U,	// FMADDS
    0U,	// FMADDS_rec
    0U,	// FMADD_rec
    0U,	// FMR
    0U,	// FMR_rec
    0U,	// FMSUB
    0U,	// FMSUBS
    0U,	// FMSUBS_rec
    0U,	// FMSUB_rec
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULS_rec
    0U,	// FMUL_rec
    0U,	// FNABSD
    0U,	// FNABSD_rec
    0U,	// FNABSS
    0U,	// FNABSS_rec
    0U,	// FNEGD
    0U,	// FNEGD_rec
    0U,	// FNEGS
    0U,	// FNEGS_rec
    0U,	// FNMADD
    0U,	// FNMADDS
    0U,	// FNMADDS_rec
    0U,	// FNMADD_rec
    0U,	// FNMSUB
    0U,	// FNMSUBS
    0U,	// FNMSUBS_rec
    0U,	// FNMSUB_rec
    0U,	// FRE
    0U,	// FRES
    0U,	// FRES_rec
    0U,	// FRE_rec
    0U,	// FRIMD
    0U,	// FRIMD_rec
    0U,	// FRIMS
    0U,	// FRIMS_rec
    0U,	// FRIND
    0U,	// FRIND_rec
    0U,	// FRINS
    0U,	// FRINS_rec
    0U,	// FRIPD
    0U,	// FRIPD_rec
    0U,	// FRIPS
    0U,	// FRIPS_rec
    0U,	// FRIZD
    0U,	// FRIZD_rec
    0U,	// FRIZS
    0U,	// FRIZS_rec
    0U,	// FRSP
    0U,	// FRSP_rec
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTES_rec
    0U,	// FRSQRTE_rec
    0U,	// FSELD
    0U,	// FSELD_rec
    0U,	// FSELS
    0U,	// FSELS_rec
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTS_rec
    0U,	// FSQRT_rec
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBS_rec
    0U,	// FSUB_rec
    0U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsADDR32AIX
    0U,	// GETtlsADDR64AIX
    0U,	// GETtlsADDRPCREL
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// GETtlsldADDRPCREL
    0U,	// HASHCHK
    0U,	// HASHCHKP
    0U,	// HASHST
    0U,	// HASHSTP
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    0U,	// ISEL
    0U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LBZXTLS
    0U,	// LBZXTLS_
    0U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    0U,	// LDAT
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDXTLS
    0U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LHZXTLS
    0U,	// LHZXTLS_
    0U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LQ
    0U,	// LQARX
    0U,	// LQARXL
    0U,	// LQX_PSEUDO
    0U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    0U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZXTLS
    0U,	// LWZXTLS_
    0U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LWZtocL
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    0U,	// LXVL
    0U,	// LXVLL
    0U,	// LXVP
    0U,	// LXVPX
    0U,	// LXVRBX
    0U,	// LXVRDX
    0U,	// LXVRHX
    0U,	// LXVRWX
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    0U,	// MADDHD
    0U,	// MADDHDU
    0U,	// MADDLD
    0U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFS_rec
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVRWZ
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    0U,	// MODSD
    0U,	// MODSW
    0U,	// MODUD
    0U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFI_rec
    0U,	// MTFSFIb
    0U,	// MTFSF_rec
    0U,	// MTFSFb
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRD
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVRWA
    0U,	// MTVRWZ
    0U,	// MTVSCR
    0U,	// MTVSRBM
    0U,	// MTVSRBMI
    0U,	// MTVSRD
    0U,	// MTVSRDD
    0U,	// MTVSRDM
    0U,	// MTVSRHM
    0U,	// MTVSRQM
    0U,	// MTVSRWA
    0U,	// MTVSRWM
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDU_rec
    0U,	// MULHD_rec
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWU_rec
    0U,	// MULHW_rec
    0U,	// MULLD
    0U,	// MULLDO
    0U,	// MULLDO_rec
    0U,	// MULLD_rec
    0U,	// MULLI
    0U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWO
    0U,	// MULLWO_rec
    0U,	// MULLW_rec
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8_rec
    0U,	// NAND_rec
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8O
    0U,	// NEG8O_rec
    0U,	// NEG8_rec
    0U,	// NEGO
    0U,	// NEGO_rec
    0U,	// NEG_rec
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8_rec
    0U,	// NOR_rec
    0U,	// OR
    0U,	// OR8
    0U,	// OR8_rec
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8_rec
    0U,	// ORC_rec
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// OR_rec
    0U,	// PADDI
    0U,	// PADDI8
    0U,	// PADDI8pc
    0U,	// PADDIdtprel
    0U,	// PADDIpc
    0U,	// PDEPD
    0U,	// PEXTD
    0U,	// PLBZ
    0U,	// PLBZ8
    0U,	// PLBZ8pc
    0U,	// PLBZpc
    0U,	// PLD
    0U,	// PLDpc
    0U,	// PLFD
    0U,	// PLFDpc
    0U,	// PLFS
    0U,	// PLFSpc
    0U,	// PLHA
    0U,	// PLHA8
    0U,	// PLHA8pc
    0U,	// PLHApc
    0U,	// PLHZ
    0U,	// PLHZ8
    0U,	// PLHZ8pc
    0U,	// PLHZpc
    0U,	// PLI
    0U,	// PLI8
    0U,	// PLWA
    0U,	// PLWA8
    0U,	// PLWA8pc
    0U,	// PLWApc
    0U,	// PLWZ
    0U,	// PLWZ8
    0U,	// PLWZ8pc
    0U,	// PLWZpc
    0U,	// PLXSD
    0U,	// PLXSDpc
    0U,	// PLXSSP
    0U,	// PLXSSPpc
    0U,	// PLXV
    0U,	// PLXVP
    0U,	// PLXVPpc
    0U,	// PLXVpc
    0U,	// PMXVBF16GER2
    1U,	// PMXVBF16GER2NN
    1U,	// PMXVBF16GER2NP
    1U,	// PMXVBF16GER2PN
    1U,	// PMXVBF16GER2PP
    0U,	// PMXVF16GER2
    1U,	// PMXVF16GER2NN
    1U,	// PMXVF16GER2NP
    1U,	// PMXVF16GER2PN
    1U,	// PMXVF16GER2PP
    2U,	// PMXVF32GER
    0U,	// PMXVF32GERNN
    0U,	// PMXVF32GERNP
    0U,	// PMXVF32GERPN
    0U,	// PMXVF32GERPP
    0U,	// PMXVF64GER
    0U,	// PMXVF64GERNN
    0U,	// PMXVF64GERNP
    0U,	// PMXVF64GERPN
    0U,	// PMXVF64GERPP
    0U,	// PMXVI16GER2
    1U,	// PMXVI16GER2PP
    0U,	// PMXVI16GER2S
    1U,	// PMXVI16GER2SPP
    8U,	// PMXVI4GER8
    3U,	// PMXVI4GER8PP
    16U,	// PMXVI8GER4
    4U,	// PMXVI8GER4PP
    4U,	// PMXVI8GER4SPP
    0U,	// POPCNTB
    0U,	// POPCNTB8
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    0U,	// PREPARE_PROBED_ALLOCA_32
    0U,	// PREPARE_PROBED_ALLOCA_64
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    0U,	// PROBED_ALLOCA_32
    0U,	// PROBED_ALLOCA_64
    0U,	// PROBED_STACKALLOC_32
    0U,	// PROBED_STACKALLOC_64
    0U,	// PSTB
    0U,	// PSTB8
    0U,	// PSTB8pc
    0U,	// PSTBpc
    0U,	// PSTD
    0U,	// PSTDpc
    0U,	// PSTFD
    0U,	// PSTFDpc
    0U,	// PSTFS
    0U,	// PSTFSpc
    0U,	// PSTH
    0U,	// PSTH8
    0U,	// PSTH8pc
    0U,	// PSTHpc
    0U,	// PSTW
    0U,	// PSTW8
    0U,	// PSTW8pc
    0U,	// PSTWpc
    0U,	// PSTXSD
    0U,	// PSTXSDpc
    0U,	// PSTXSSP
    0U,	// PSTXSSPpc
    0U,	// PSTXV
    0U,	// PSTXVP
    0U,	// PSTXVPpc
    0U,	// PSTXVpc
    0U,	// PseudoEIEIO
    0U,	// RESTORE_ACC
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_QUADWORD
    0U,	// RESTORE_UACC
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    0U,	// RLDCL
    0U,	// RLDCL_rec
    0U,	// RLDCR
    0U,	// RLDCR_rec
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32_rec
    0U,	// RLDICL_rec
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICR_rec
    0U,	// RLDIC_rec
    0U,	// RLDIMI
    0U,	// RLDIMI_rec
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8_rec
    0U,	// RLWIMI_rec
    0U,	// RLWINM
    0U,	// RLWINM8
    0U,	// RLWINM8_rec
    0U,	// RLWINM_rec
    0U,	// RLWNM
    0U,	// RLWNM8
    0U,	// RLWNM8_rec
    0U,	// RLWNM_rec
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETBC
    0U,	// SETBC8
    0U,	// SETBCR
    0U,	// SETBCR8
    0U,	// SETFLM
    0U,	// SETNBC
    0U,	// SETNBC8
    0U,	// SETNBCR
    0U,	// SETNBCR8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEE_rec
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    0U,	// SLD
    0U,	// SLD_rec
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8_rec
    0U,	// SLW_rec
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_ACC
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_QUADWORD
    0U,	// SPILL_UACC
    0U,	// SPLIT_QUADWORD
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRADI_32
    0U,	// SRADI_rec
    0U,	// SRAD_rec
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRAWI_rec
    0U,	// SRAW_rec
    0U,	// SRD
    0U,	// SRD_rec
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8_rec
    0U,	// SRW_rec
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STBXTLS
    0U,	// STBXTLS_
    0U,	// STBXTLS_32
    0U,	// STD
    0U,	// STDAT
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STDXTLS
    0U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STHXTLS
    0U,	// STHXTLS_
    0U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    0U,	// STQ
    0U,	// STQCX
    0U,	// STQX_PSEUDO
    0U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWAT
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STWXTLS
    0U,	// STWXTLS_
    0U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    0U,	// STXVL
    0U,	// STXVLL
    0U,	// STXVP
    0U,	// STXVPX
    0U,	// STXVRBX
    0U,	// STXVRDX
    0U,	// STXVRHX
    0U,	// STXVRWX
    0U,	// STXVW4X
    0U,	// STXVX
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8O
    0U,	// SUBF8O_rec
    0U,	// SUBF8_rec
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8O
    0U,	// SUBFC8O_rec
    0U,	// SUBFC8_rec
    0U,	// SUBFCO
    0U,	// SUBFCO_rec
    0U,	// SUBFC_rec
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8O
    0U,	// SUBFE8O_rec
    0U,	// SUBFE8_rec
    0U,	// SUBFEO
    0U,	// SUBFEO_rec
    0U,	// SUBFE_rec
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8O
    0U,	// SUBFME8O_rec
    0U,	// SUBFME8_rec
    0U,	// SUBFMEO
    0U,	// SUBFMEO_rec
    0U,	// SUBFME_rec
    0U,	// SUBFO
    0U,	// SUBFO_rec
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8O
    0U,	// SUBFZE8O_rec
    0U,	// SUBFZE8_rec
    0U,	// SUBFZEO
    0U,	// SUBFZEO_rec
    0U,	// SUBFZE_rec
    0U,	// SUBF_rec
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    0U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TLSGDAIX
    0U,	// TLSGDAIX8
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    0U,	// TWI
    0U,	// UNENCODED_NOP
    0U,	// UpdateGBR
    0U,	// VABSDUB
    0U,	// VABSDUH
    0U,	// VABSDUW
    0U,	// VADDCUQ
    0U,	// VADDCUW
    0U,	// VADDECUQ
    0U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMD
    0U,	// VBPERMQ
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUGED
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLRLB
    0U,	// VCLRRB
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZDM
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFP_rec
    0U,	// VCMPEQFP
    0U,	// VCMPEQFP_rec
    0U,	// VCMPEQUB
    0U,	// VCMPEQUB_rec
    0U,	// VCMPEQUD
    0U,	// VCMPEQUD_rec
    0U,	// VCMPEQUH
    0U,	// VCMPEQUH_rec
    0U,	// VCMPEQUQ
    0U,	// VCMPEQUQ_rec
    0U,	// VCMPEQUW
    0U,	// VCMPEQUW_rec
    0U,	// VCMPGEFP
    0U,	// VCMPGEFP_rec
    0U,	// VCMPGTFP
    0U,	// VCMPGTFP_rec
    0U,	// VCMPGTSB
    0U,	// VCMPGTSB_rec
    0U,	// VCMPGTSD
    0U,	// VCMPGTSD_rec
    0U,	// VCMPGTSH
    0U,	// VCMPGTSH_rec
    0U,	// VCMPGTSQ
    0U,	// VCMPGTSQ_rec
    0U,	// VCMPGTSW
    0U,	// VCMPGTSW_rec
    0U,	// VCMPGTUB
    0U,	// VCMPGTUB_rec
    0U,	// VCMPGTUD
    0U,	// VCMPGTUD_rec
    0U,	// VCMPGTUH
    0U,	// VCMPGTUH_rec
    0U,	// VCMPGTUQ
    0U,	// VCMPGTUQ_rec
    0U,	// VCMPGTUW
    0U,	// VCMPGTUW_rec
    0U,	// VCMPNEB
    0U,	// VCMPNEB_rec
    0U,	// VCMPNEH
    0U,	// VCMPNEH_rec
    0U,	// VCMPNEW
    0U,	// VCMPNEW_rec
    0U,	// VCMPNEZB
    0U,	// VCMPNEZB_rec
    0U,	// VCMPNEZH
    0U,	// VCMPNEZH_rec
    0U,	// VCMPNEZW
    0U,	// VCMPNEZW_rec
    0U,	// VCMPSQ
    0U,	// VCMPUQ
    0U,	// VCNTMBB
    0U,	// VCNTMBD
    0U,	// VCNTMBH
    0U,	// VCNTMBW
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZDM
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    0U,	// VDIVESD
    0U,	// VDIVESQ
    0U,	// VDIVESW
    0U,	// VDIVEUD
    0U,	// VDIVEUQ
    0U,	// VDIVEUW
    0U,	// VDIVSD
    0U,	// VDIVSQ
    0U,	// VDIVSW
    0U,	// VDIVUD
    0U,	// VDIVUQ
    0U,	// VDIVUW
    0U,	// VEQV
    0U,	// VEXPANDBM
    0U,	// VEXPANDDM
    0U,	// VEXPANDHM
    0U,	// VEXPANDQM
    0U,	// VEXPANDWM
    0U,	// VEXPTEFP
    0U,	// VEXTDDVLX
    0U,	// VEXTDDVRX
    0U,	// VEXTDUBVLX
    0U,	// VEXTDUBVRX
    0U,	// VEXTDUHVLX
    0U,	// VEXTDUHVRX
    0U,	// VEXTDUWVLX
    0U,	// VEXTDUWVRX
    0U,	// VEXTRACTBM
    0U,	// VEXTRACTD
    0U,	// VEXTRACTDM
    0U,	// VEXTRACTHM
    0U,	// VEXTRACTQM
    0U,	// VEXTRACTUB
    0U,	// VEXTRACTUH
    0U,	// VEXTRACTUW
    0U,	// VEXTRACTWM
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSD2Q
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    0U,	// VEXTUBLX
    0U,	// VEXTUBRX
    0U,	// VEXTUHLX
    0U,	// VEXTUHRX
    0U,	// VEXTUWLX
    0U,	// VEXTUWRX
    0U,	// VGBBD
    0U,	// VGNB
    0U,	// VINSBLX
    0U,	// VINSBRX
    0U,	// VINSBVLX
    0U,	// VINSBVRX
    0U,	// VINSD
    0U,	// VINSDLX
    0U,	// VINSDRX
    0U,	// VINSERTB
    0U,	// VINSERTD
    0U,	// VINSERTH
    0U,	// VINSERTW
    0U,	// VINSHLX
    0U,	// VINSHRX
    0U,	// VINSHVLX
    0U,	// VINSHVRX
    0U,	// VINSW
    0U,	// VINSWLX
    0U,	// VINSWRX
    0U,	// VINSWVLX
    0U,	// VINSWVRX
    0U,	// VLOGEFP
    0U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    0U,	// VMHADDSHS
    0U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    0U,	// VMLADDUHM
    0U,	// VMODSD
    0U,	// VMODSQ
    0U,	// VMODSW
    0U,	// VMODUD
    0U,	// VMODUQ
    0U,	// VMODUW
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    0U,	// VMSUMCUD
    0U,	// VMSUMMBM
    0U,	// VMSUMSHM
    0U,	// VMSUMSHS
    0U,	// VMSUMUBM
    0U,	// VMSUMUDM
    0U,	// VMSUMUHM
    0U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    0U,	// VMUL10ECUQ
    0U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    0U,	// VMULESB
    0U,	// VMULESD
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUD
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULHSD
    0U,	// VMULHSW
    0U,	// VMULHUD
    0U,	// VMULHUW
    0U,	// VMULLD
    0U,	// VMULOSB
    0U,	// VMULOSD
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUD
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    0U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    0U,	// VPDEPD
    0U,	// VPERM
    0U,	// VPERMR
    0U,	// VPERMXOR
    0U,	// VPEXTD
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLDMI
    0U,	// VRLDNM
    0U,	// VRLH
    0U,	// VRLQ
    0U,	// VRLQMI
    0U,	// VRLQNM
    0U,	// VRLW
    0U,	// VRLWMI
    0U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    0U,	// VSEL
    0U,	// VSHASIGMAD
    0U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    0U,	// VSLDBI
    0U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLQ
    0U,	// VSLV
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTBs
    0U,	// VSPLTH
    0U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAQ
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRDBI
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRQ
    0U,	// VSRV
    0U,	// VSRW
    0U,	// VSTRIBL
    0U,	// VSTRIBL_rec
    0U,	// VSTRIBR
    0U,	// VSTRIBR_rec
    0U,	// VSTRIHL
    0U,	// VSTRIHL_rec
    0U,	// VSTRIHR
    0U,	// VSTRIHR_rec
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    0U,	// VSUBECUQ
    0U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SET0B
    0U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8_rec
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U,	// XOR_rec
    0U,	// XSABSDP
    0U,	// XSABSQP
    0U,	// XSADDDP
    0U,	// XSADDQP
    0U,	// XSADDQPO
    0U,	// XSADDSP
    0U,	// XSCMPEQDP
    0U,	// XSCMPEXPDP
    0U,	// XSCMPEXPQP
    0U,	// XSCMPGEDP
    0U,	// XSCMPGTDP
    0U,	// XSCMPODP
    0U,	// XSCMPOQP
    0U,	// XSCMPUDP
    0U,	// XSCMPUQP
    0U,	// XSCPSGNDP
    0U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSQZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUQZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSQQP
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUQQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVQP
    0U,	// XSDIVQPO
    0U,	// XSDIVSP
    0U,	// XSIEXPDP
    0U,	// XSIEXPQP
    0U,	// XSMADDADP
    0U,	// XSMADDASP
    0U,	// XSMADDMDP
    0U,	// XSMADDMSP
    0U,	// XSMADDQP
    0U,	// XSMADDQPO
    0U,	// XSMAXCDP
    0U,	// XSMAXDP
    0U,	// XSMAXJDP
    0U,	// XSMINCDP
    0U,	// XSMINDP
    0U,	// XSMINJDP
    0U,	// XSMSUBADP
    0U,	// XSMSUBASP
    0U,	// XSMSUBMDP
    0U,	// XSMSUBMSP
    0U,	// XSMSUBQP
    0U,	// XSMSUBQPO
    0U,	// XSMULDP
    0U,	// XSMULQP
    0U,	// XSMULQPO
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    0U,	// XSNMADDADP
    0U,	// XSNMADDASP
    0U,	// XSNMADDMDP
    0U,	// XSNMADDMSP
    0U,	// XSNMADDQP
    0U,	// XSNMADDQPO
    0U,	// XSNMSUBADP
    0U,	// XSNMSUBASP
    0U,	// XSNMSUBMDP
    0U,	// XSNMSUBMSP
    0U,	// XSNMSUBQP
    0U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBQP
    0U,	// XSSUBQPO
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    0U,	// XSTSTDCDP
    0U,	// XSTSTDCQP
    0U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVBF16GER2
    0U,	// XVBF16GER2NN
    0U,	// XVBF16GER2NP
    0U,	// XVBF16GER2PN
    0U,	// XVBF16GER2PP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDP_rec
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSP_rec
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDP_rec
    0U,	// XVCMPGESP
    0U,	// XVCMPGESP_rec
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDP_rec
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSP_rec
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVBF16SPN
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPBF16
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVF16GER2
    0U,	// XVF16GER2NN
    0U,	// XVF16GER2NP
    0U,	// XVF16GER2PN
    0U,	// XVF16GER2PP
    0U,	// XVF32GER
    0U,	// XVF32GERNN
    0U,	// XVF32GERNP
    0U,	// XVF32GERPN
    0U,	// XVF32GERPP
    0U,	// XVF64GER
    0U,	// XVF64GERNN
    0U,	// XVF64GERNP
    0U,	// XVF64GERPN
    0U,	// XVF64GERPP
    0U,	// XVI16GER2
    0U,	// XVI16GER2PP
    0U,	// XVI16GER2S
    0U,	// XVI16GER2SPP
    0U,	// XVI4GER8
    0U,	// XVI4GER8PP
    0U,	// XVI8GER4
    0U,	// XVI8GER4PP
    0U,	// XVI8GER4SPP
    0U,	// XVIEXPDP
    0U,	// XVIEXPSP
    0U,	// XVMADDADP
    0U,	// XVMADDASP
    0U,	// XVMADDMDP
    0U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    0U,	// XVMSUBADP
    0U,	// XVMSUBASP
    0U,	// XVMSUBMDP
    0U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    0U,	// XVNMADDADP
    0U,	// XVNMADDASP
    0U,	// XVNMADDMDP
    0U,	// XVNMADDMSP
    0U,	// XVNMSUBADP
    0U,	// XVNMSUBASP
    0U,	// XVNMSUBMDP
    0U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTLSBB
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    0U,	// XVTSTDCDP
    0U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBLENDVB
    0U,	// XXBLENDVD
    0U,	// XXBLENDVH
    0U,	// XXBLENDVW
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    0U,	// XXEVAL
    0U,	// XXEXTRACTUW
    0U,	// XXGENPCVBM
    0U,	// XXGENPCVDM
    0U,	// XXGENPCVHM
    0U,	// XXGENPCVWM
    0U,	// XXINSERTW
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLEQVOnes
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    0U,	// XXLXORdpz
    0U,	// XXLXORspz
    0U,	// XXLXORz
    0U,	// XXMFACC
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    0U,	// XXMTACC
    0U,	// XXPERM
    0U,	// XXPERMDI
    0U,	// XXPERMDIs
    0U,	// XXPERMR
    0U,	// XXPERMX
    0U,	// XXSEL
    0U,	// XXSETACCZ
    0U,	// XXSLDWI
    0U,	// XXSLDWIs
    0U,	// XXSPLTI32DX
    0U,	// XXSPLTIB
    0U,	// XXSPLTIDP
    0U,	// XXSPLTIW
    0U,	// XXSPLTW
    0U,	// XXSPLTWs
    0U,	// gBC
    0U,	// gBCA
    0U,	// gBCAat
    0U,	// gBCCTR
    0U,	// gBCCTRL
    0U,	// gBCL
    0U,	// gBCLA
    0U,	// gBCLAat
    0U,	// gBCLR
    0U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  Bits |= (uint64_t)OpInfo2[MCInst_getOpcode(MI)] << 48;
  return createMnemonic(AsmStrs+(Bits & 32767)-1, Bits);

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O) {
  MCMnemonic MnemonicInfo =PPC_getMnemonic(MI);

#ifndef CAPSTONE_DIET

  SStream_concat0(O, MnemonicInfo.first);
#endif

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 5 bits for 21 unique commands.
  switch ((Bits >> 15) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    printOperand/* printOperand (+ ) */(MI, 0, O);
    break;
  case 2:
    // DCBFL, DCBFLP, DCBFPS, DCBFx, DCBSTPS, DCBTCT, DCBTDS, DCBTSTCT, DCBTS...
    printMemRegReg/* printMemRegReg (+ ) */(MI, 0, O);
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand/* printU16ImmOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, " ");
    printU16ImmOperand/* printU16ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 4:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand/* printBranchOperand (+ ) */(MI, 0, O);
    break;
  case 5:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand/* printAbsBranchOperand (+ ) */(MI, 0, O);
    break;
  case 6:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand/* printPredicateOperand (+ cc) */(MI, 0, O, "cc");
    break;
  case 7:
    // BCTRL8_LDinto_toc, BCTRL8_LDinto_toc_RM, BCTRL_LWZinto_toc, BCTRL_LWZi...
    printMemRegImm/* printMemRegImm (+ ) */(MI, 0, O);
    return;
    break;
  case 8:
    // BL8_NOP_TLS, BL8_NOTOC_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall/* printTLSCall (+ ) */(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg/* printMemRegReg (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    break;
  case 10:
    // DCBTEP, DCBTSTEP
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", ");
    printMemRegReg/* printMemRegReg (+ ) */(MI, 0, O);
    return;
    break;
  case 11:
    // DSS, MBAR, MTFSB0, MTFSB1, TABORTDC, TABORTDCI, TABORTWC, TABORTWCI, T...
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 0, O);
    break;
  case 12:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand/* printOperand (+ ) */(MI, 1, O);
    break;
  case 13:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printMemRegReg/* printMemRegReg (+ ) */(MI, 1, O);
    return;
    break;
  case 14:
    // MTFSFI, MTFSFI_rec, MTFSFIb
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 1, O);
    break;
  case 15:
    // MTOCRF, MTOCRF8
    printcrbitm/* printcrbitm (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 16:
    // MTSR
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 17:
    // RFEBB, TBEGIN, TEND, TSR
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 18:
    // SYNC, WAIT
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 19:
    // XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", ");
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 20:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint/* printATBitsAsHint (+ ) */(MI, 1, O);
    SStream_concat0(O, " ");
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  }


  // Fragment 1 encoded into 5 bits for 21 unique commands.
  switch ((Bits >> 20) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // DCBFL, DCBFLP, DCBFPS, DCBFx, DCBSTPS, DCBTSTT, DCBTSTx, DCBTT, DCBTx,...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    SStream_concat0(O, " ");
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printBranchOperand/* printBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    SStream_concat0(O, "a");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printAbsBranchOperand/* printAbsBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    SStream_concat0(O, "ctr");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    SStream_concat0(O, "ctrl");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    SStream_concat0(O, "l");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printBranchOperand/* printBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    SStream_concat0(O, "la");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printAbsBranchOperand/* printAbsBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    SStream_concat0(O, "lr");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    SStream_concat0(O, "lrl");
    printPredicateOperand/* printPredicateOperand (+ pm) */(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand/* printPredicateOperand (+ reg) */(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    SStream_concat0(O, ", 0");
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_RM, BL8_NOP_TLS, BLA8_NOP, BLA8_NOP_RM, BL_NOP, BL_NO...
    SStream_concat0(O, "\n\tnop");
    return;
    break;
  case 13:
    // DCBF
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 14:
    // DCBT, DCBTST
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 15:
    // EVSEL, TLBIE
    SStream_concat0(O, ",");
    break;
  case 16:
    // MFTB8
    SStream_concat0(O, ", 268");
    return;
    break;
  case 17:
    // MFVRSAVE, MFVRSAVEv
    SStream_concat0(O, ", 256");
    return;
    break;
  case 18:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    SStream_concat0(O, ", -1");
    return;
    break;
  case 19:
    // gBCAat, gBCLAat
    printAbsBranchOperand/* printAbsBranchOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 20:
    // gBCLat, gBCat
    printBranchOperand/* printBranchOperand (+ ) */(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 28 unique commands.
  switch ((Bits >> 25) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    printOperand/* printOperand (+ ) */(MI, 1, O);
    break;
  case 1:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 2, O);
    break;
  case 2:
    // LAx, EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVL...
    printMemRegImm/* printMemRegImm (+ ) */(MI, 1, O);
    return;
    break;
  case 3:
    // SUBPCIS, LI, LI8, LIS, LIS8
    printS16ImmOperand/* printS16ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, EVLDDX, EVLDHX, EVLDWX, EVLH...
    printMemRegReg/* printMemRegReg (+ ) */(MI, 1, O);
    break;
  case 5:
    // BC, BCL, BCLn, BCn
    printBranchOperand/* printBranchOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 6:
    // CMPRB, CMPRB8, MTMSR, MTMSRD
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 1, O);
    break;
  case 7:
    // CRSET, CRUNSET, MTDCR, TLBIE, V_SET0, V_SET0B, V_SET0H, XXLEQVOnes, XX...
    printOperand/* printOperand (+ ) */(MI, 0, O);
    break;
  case 8:
    // DARN, MFFSCRNI
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTFSFI, PM...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    break;
  case 10:
    // EVSPLATFI, EVSPLATI, VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand/* printS5ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 11:
    // EVSUBIFW
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 12:
    // HASHCHK, HASHCHKP, HASHST, HASHSTP
    printMemRegImmHash/* printMemRegImmHash (+ ) */(MI, 1, O);
    return;
    break;
  case 13:
    // LA
    printS16ImmOperand/* printS16ImmOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, "(");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ")");
    return;
    break;
  case 14:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm/* printMemRegImm (+ ) */(MI, 2, O);
    return;
    break;
  case 15:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg/* printMemRegReg (+ ) */(MI, 2, O);
    return;
    break;
  case 16:
    // MFBHRBE
    printU10ImmOperand/* printU10ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 17:
    // MFFSCDRNI
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 18:
    // MFOCRF, MFOCRF8
    printcrbitm/* printcrbitm (+ ) */(MI, 1, O);
    return;
    break;
  case 19:
    // MFSR
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 20:
    // MTFSFI_rec, XXSPLTI32DX
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 2, O);
    break;
  case 21:
    // MTVSRBMI
    printU16ImmOperand/* printU16ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 22:
    // PADDI8pc, PADDIpc
    printImmZeroOperand/* printImmZeroOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printS34ImmOperand/* printS34ImmOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", 1");
    return;
    break;
  case 23:
    // PLBZ, PLBZ8, PLD, PLFD, PLFS, PLHA, PLHA8, PLHZ, PLHZ8, PLWA, PLWA8, P...
    printMemRegImm34/* printMemRegImm34 (+ ) */(MI, 1, O);
    SStream_concat0(O, ", 0");
    return;
    break;
  case 24:
    // PLBZ8pc, PLBZpc, PLDpc, PLFDpc, PLFSpc, PLHA8pc, PLHApc, PLHZ8pc, PLHZ...
    printMemRegImm34PCRel/* printMemRegImm34PCRel (+ ) */(MI, 1, O);
    SStream_concat0(O, ", 1");
    return;
    break;
  case 25:
    // PLI, PLI8
    printS34ImmOperand/* printS34ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 26:
    // VINSD, VINSERTB, VINSERTH, VINSW
    printOperand/* printOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, ", ");
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 27:
    // XXSPLTIB
    printU8ImmOperand/* printU8ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 30) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, ADDME, ADDME8, ADDME8O...
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CLRRDI_rec, CL...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    SStream_concat0(O, " ");
    printOperand/* printOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, " ");
    printOperand/* printOperand (+ ) */(MI, 4, O);
    return;
    break;
  case 3:
    // EVSEL
    SStream_concat0(O, ",");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LQARXL, LWARXL
    SStream_concat0(O, ", 1");
    return;
    break;
  case 5:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    SStream_concat0(O, ", 0");
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDI_rec, CLRRDI, CLRRDI_rec, EXTLDI, EXTLDI_rec, EXTRDI...
    printU6ImmOperand/* printU6ImmOperand (+ ) */(MI, 2, O);
    break;
  case 1:
    // CLRLSLWI, CLRLSLWI_rec, CLRRWI, CLRRWI_rec, EXTLWI, EXTLWI_rec, EXTRWI...
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 2, O);
    break;
  case 2:
    // SUBI, SUBIC, SUBIC_rec, SUBIS, ADDI, ADDI8, ADDIC, ADDIC8, ADDIC_rec, ...
    printS16ImmOperand/* printS16ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 3:
    // ADD4, ADD4O, ADD4O_rec, ADD4TLS, ADD4_rec, ADD8, ADD8O, ADD8O_rec, ADD...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    break;
  case 4:
    // ANDI8_rec, ANDIS8_rec, ANDIS_rec, ANDI_rec, CMPLDI, CMPLWI, ORI, ORI8,...
    printU16ImmOperand/* printU16ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 5:
    // BCDCFN_rec, BCDCFSQ_rec, BCDCFZ_rec, BCDCTZ_rec, BCDSETSGN_rec, CP_PAS...
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLEQVOnes, XXLXORdpz, XXLXO...
    printOperand/* printOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 8:
    // EVADDIW, XXPERMDIs, XXSLDWIs
    printOperand/* printOperand (+ ) */(MI, 1, O);
    break;
  case 9:
    // PADDI, PADDI8
    printS34ImmOperand/* printS34ImmOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", 0");
    return;
    break;
  case 10:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printOperand/* printOperand (+ ) */(MI, 3, O);
    break;
  case 11:
    // RLDIMI, RLDIMI_rec
    printU6ImmOperand/* printU6ImmOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, ", ");
    printU6ImmOperand/* printU6ImmOperand (+ ) */(MI, 4, O);
    return;
    break;
  case 12:
    // RLWIMI, RLWIMI8, RLWIMI8_rec, RLWIMI_rec
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, ", ");
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 4, O);
    SStream_concat0(O, ", ");
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 5, O);
    return;
    break;
  case 13:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 14:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTD, VINSERTW
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 15:
    // VGNB
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 16:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand/* printU7ImmOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 17:
    // XXEXTRACTUW
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 18:
    // XXGENPCVBM, XXGENPCVDM, XXGENPCVHM, XXGENPCVWM
    printS5ImmOperand/* printS5ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 19:
    // XXINSERTW
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 20:
    // XXSPLTW, XXSPLTWs
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 21:
    // gBC, gBCL
    printBranchOperand/* printBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 22:
    // gBCA, gBCLA
    printAbsBranchOperand/* printAbsBranchOperand (+ ) */(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // CLRRDI, CLRRDI_rec, CLRRWI, CLRRWI_rec, ROTRDI, ROTRDI_rec, ROTRWI, RO...
    return;
  } else {
    // CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, EXTLDI, EXTLDI_rec, EX...
    SStream_concat0(O, ", ");
  }


  // Fragment 6 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 39) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDI_rec, EXTLDI, EXTLDI_rec, EXTRDI, EXTRDI_rec, INSRDI...
    printU6ImmOperand/* printU6ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWI_rec, EXTLWI, EXTLWI_rec, EXTRWI, EXTRWI_rec, INSLWI...
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 3, O);
    break;
  case 2:
    // RLWIMIbm, RLWIMIbm_rec, RLWINMbm, RLWINMbm_rec, RLWNMbm, RLWNMbm_rec, ...
    printOperand/* printOperand (+ ) */(MI, 3, O);
    break;
  case 3:
    // ADDEX, ADDEX8, XXPERMDI, XXSLDWI
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 4:
    // BCDSR_rec, BCDS_rec, BCDTRUNC_rec
    printU1ImmOperand/* printU1ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 5:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVF64GER, PMXVI16GER2, PMXVI1...
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 3, O);
    break;
  case 6:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 4, O);
    SStream_concat0(O, ", ");
    break;
  case 7:
    // VSLDBI, VSRDBI
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 3, O);
    return;
    break;
  case 8:
    // XXPERMDIs, XXSLDWIs
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 43) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLWI, CLRLSLWI_rec, EXTLWI, EXTLWI_rec, EXTRWI, EXTRWI_rec, INSLWI...
    return;
    break;
  case 1:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVF64GER, PMXVI16GER2, PMXVI1...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 5, O);
    break;
  case 3:
    // PMXVF64GERNN, PMXVF64GERNP, PMXVF64GERPN, PMXVF64GERPP
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 5, O);
    return;
    break;
  }


  // Fragment 8 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 45) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVI16GER2, PMXVI16GER2S, PMXV...
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 4, O);
    break;
  case 1:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // PMXVF32GERNN, PMXVF32GERNP, PMXVF32GERPN, PMXVF32GERPP
    return;
    break;
  case 3:
    // PMXVF64GER
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 4, O);
    return;
    break;
  case 4:
    // RLWINM, RLWINM8, RLWINM8_rec, RLWINM_rec, RLWNM, RLWNM8, RLWNM8_rec, R...
    printU5ImmOperand/* printU5ImmOperand (+ ) */(MI, 4, O);
    return;
    break;
  case 5:
    // XXEVAL
    printU8ImmOperand/* printU8ImmOperand (+ ) */(MI, 4, O);
    return;
    break;
  case 6:
    // XXPERMX
    printU3ImmOperand/* printU3ImmOperand (+ ) */(MI, 4, O);
    return;
    break;
  }


  // Fragment 9 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 48) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PMXVBF16GER2, PMXVF16GER2, PMXVI16GER2, PMXVI16GER2S, PMXVI4GER8, PMXV...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 6, O);
    return;
    break;
  case 2:
    // PMXVF32GER
    return;
    break;
  case 3:
    // PMXVI4GER8PP
    printU8ImmOperand/* printU8ImmOperand (+ ) */(MI, 6, O);
    return;
    break;
  case 4:
    // PMXVI8GER4PP, PMXVI8GER4SPP
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 6, O);
    return;
    break;
  }


  // Fragment 10 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 51) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PMXVBF16GER2, PMXVF16GER2, PMXVI16GER2, PMXVI16GER2S
    printU2ImmOperand/* printU2ImmOperand (+ ) */(MI, 5, O);
    return;
    break;
  case 1:
    // PMXVI4GER8
    printU8ImmOperand/* printU8ImmOperand (+ ) */(MI, 5, O);
    return;
    break;
  case 2:
    // PMXVI8GER4
    printU4ImmOperand/* printU4ImmOperand (+ ) */(MI, 5, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 376 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "**ROUNDING MODE**\0"
  /* 18 */ "**FRAME POINTER**\0"
  /* 36 */ "**BASE POINTER**\0"
  /* 53 */ "f10\0"
  /* 57 */ "vsp10\0"
  /* 63 */ "r10\0"
  /* 67 */ "vs10\0"
  /* 72 */ "v10\0"
  /* 76 */ "f20\0"
  /* 80 */ "vsp20\0"
  /* 86 */ "r20\0"
  /* 90 */ "vs20\0"
  /* 95 */ "v20\0"
  /* 99 */ "f30\0"
  /* 103 */ "vsp30\0"
  /* 109 */ "r30\0"
  /* 113 */ "vs30\0"
  /* 118 */ "v30\0"
  /* 122 */ "vsp40\0"
  /* 128 */ "vs40\0"
  /* 133 */ "vsp50\0"
  /* 139 */ "vs50\0"
  /* 144 */ "vsp60\0"
  /* 150 */ "vs60\0"
  /* 155 */ "acc0\0"
  /* 160 */ "f0\0"
  /* 163 */ "vsp0\0"
  /* 168 */ "cr0\0"
  /* 172 */ "vs0\0"
  /* 176 */ "v0\0"
  /* 179 */ "f11\0"
  /* 183 */ "r11\0"
  /* 187 */ "vs11\0"
  /* 192 */ "v11\0"
  /* 196 */ "f21\0"
  /* 200 */ "r21\0"
  /* 204 */ "vs21\0"
  /* 209 */ "v21\0"
  /* 213 */ "f31\0"
  /* 217 */ "r31\0"
  /* 221 */ "vs31\0"
  /* 226 */ "v31\0"
  /* 230 */ "vs41\0"
  /* 235 */ "vs51\0"
  /* 240 */ "vs61\0"
  /* 245 */ "acc1\0"
  /* 250 */ "f1\0"
  /* 253 */ "cr1\0"
  /* 257 */ "vs1\0"
  /* 261 */ "v1\0"
  /* 264 */ "f12\0"
  /* 268 */ "vsp12\0"
  /* 274 */ "r12\0"
  /* 278 */ "vs12\0"
  /* 283 */ "v12\0"
  /* 287 */ "f22\0"
  /* 291 */ "vsp22\0"
  /* 297 */ "r22\0"
  /* 301 */ "vs22\0"
  /* 306 */ "v22\0"
  /* 310 */ "vsp32\0"
  /* 316 */ "vs32\0"
  /* 321 */ "vsp42\0"
  /* 327 */ "vs42\0"
  /* 332 */ "vsp52\0"
  /* 338 */ "vs52\0"
  /* 343 */ "vsp62\0"
  /* 349 */ "vs62\0"
  /* 354 */ "acc2\0"
  /* 359 */ "f2\0"
  /* 362 */ "vsp2\0"
  /* 367 */ "cr2\0"
  /* 371 */ "vs2\0"
  /* 375 */ "v2\0"
  /* 378 */ "f13\0"
  /* 382 */ "r13\0"
  /* 386 */ "vs13\0"
  /* 391 */ "v13\0"
  /* 395 */ "f23\0"
  /* 399 */ "r23\0"
  /* 403 */ "vs23\0"
  /* 408 */ "v23\0"
  /* 412 */ "vs33\0"
  /* 417 */ "vs43\0"
  /* 422 */ "vs53\0"
  /* 427 */ "vs63\0"
  /* 432 */ "acc3\0"
  /* 437 */ "f3\0"
  /* 440 */ "cr3\0"
  /* 444 */ "vs3\0"
  /* 448 */ "v3\0"
  /* 451 */ "f14\0"
  /* 455 */ "vsp14\0"
  /* 461 */ "r14\0"
  /* 465 */ "vs14\0"
  /* 470 */ "v14\0"
  /* 474 */ "f24\0"
  /* 478 */ "vsp24\0"
  /* 484 */ "r24\0"
  /* 488 */ "vs24\0"
  /* 493 */ "v24\0"
  /* 497 */ "vsp34\0"
  /* 503 */ "vs34\0"
  /* 508 */ "vsp44\0"
  /* 514 */ "vs44\0"
  /* 519 */ "vsp54\0"
  /* 525 */ "vs54\0"
  /* 530 */ "acc4\0"
  /* 535 */ "f4\0"
  /* 538 */ "vsp4\0"
  /* 543 */ "cr4\0"
  /* 547 */ "vs4\0"
  /* 551 */ "v4\0"
  /* 554 */ "f15\0"
  /* 558 */ "r15\0"
  /* 562 */ "vs15\0"
  /* 567 */ "v15\0"
  /* 571 */ "f25\0"
  /* 575 */ "r25\0"
  /* 579 */ "vs25\0"
  /* 584 */ "v25\0"
  /* 588 */ "vs35\0"
  /* 593 */ "vs45\0"
  /* 598 */ "vs55\0"
  /* 603 */ "acc5\0"
  /* 608 */ "f5\0"
  /* 611 */ "cr5\0"
  /* 615 */ "vs5\0"
  /* 619 */ "v5\0"
  /* 622 */ "f16\0"
  /* 626 */ "vsp16\0"
  /* 632 */ "r16\0"
  /* 636 */ "vs16\0"
  /* 641 */ "v16\0"
  /* 645 */ "f26\0"
  /* 649 */ "vsp26\0"
  /* 655 */ "r26\0"
  /* 659 */ "vs26\0"
  /* 664 */ "v26\0"
  /* 668 */ "vsp36\0"
  /* 674 */ "vs36\0"
  /* 679 */ "vsp46\0"
  /* 685 */ "vs46\0"
  /* 690 */ "vsp56\0"
  /* 696 */ "vs56\0"
  /* 701 */ "acc6\0"
  /* 706 */ "f6\0"
  /* 709 */ "vsp6\0"
  /* 714 */ "cr6\0"
  /* 718 */ "vs6\0"
  /* 722 */ "v6\0"
  /* 725 */ "f17\0"
  /* 729 */ "r17\0"
  /* 733 */ "vs17\0"
  /* 738 */ "v17\0"
  /* 742 */ "f27\0"
  /* 746 */ "r27\0"
  /* 750 */ "vs27\0"
  /* 755 */ "v27\0"
  /* 759 */ "vs37\0"
  /* 764 */ "vs47\0"
  /* 769 */ "vs57\0"
  /* 774 */ "acc7\0"
  /* 779 */ "f7\0"
  /* 782 */ "cr7\0"
  /* 786 */ "vs7\0"
  /* 790 */ "v7\0"
  /* 793 */ "f18\0"
  /* 797 */ "vsp18\0"
  /* 803 */ "r18\0"
  /* 807 */ "vs18\0"
  /* 812 */ "v18\0"
  /* 816 */ "f28\0"
  /* 820 */ "vsp28\0"
  /* 826 */ "r28\0"
  /* 830 */ "vs28\0"
  /* 835 */ "v28\0"
  /* 839 */ "vsp38\0"
  /* 845 */ "vs38\0"
  /* 850 */ "vsp48\0"
  /* 856 */ "vs48\0"
  /* 861 */ "vsp58\0"
  /* 867 */ "vs58\0"
  /* 872 */ "f8\0"
  /* 875 */ "vsp8\0"
  /* 880 */ "r8\0"
  /* 883 */ "vs8\0"
  /* 887 */ "v8\0"
  /* 890 */ "f19\0"
  /* 894 */ "r19\0"
  /* 898 */ "vs19\0"
  /* 903 */ "v19\0"
  /* 907 */ "f29\0"
  /* 911 */ "r29\0"
  /* 915 */ "vs29\0"
  /* 920 */ "v29\0"
  /* 924 */ "vs39\0"
  /* 929 */ "vs49\0"
  /* 934 */ "vs59\0"
  /* 939 */ "f9\0"
  /* 942 */ "r9\0"
  /* 945 */ "vs9\0"
  /* 949 */ "v9\0"
  /* 952 */ "vrsave\0"
  /* 959 */ "spefscr\0"
  /* 967 */ "xer\0"
  /* 971 */ "lr\0"
  /* 974 */ "ctr\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t RegAsmOffset[] = {
    36, 967, 974, 18, 971, 0, 959, 952, 967, 55, 155, 245, 354, 432, 
    530, 603, 701, 774, 36, 168, 253, 367, 440, 543, 611, 714, 782, 974, 
    160, 250, 359, 437, 535, 608, 706, 779, 872, 939, 53, 179, 264, 378, 
    451, 554, 622, 725, 793, 890, 76, 196, 287, 395, 474, 571, 645, 742, 
    816, 907, 99, 213, 18, 971, 169, 254, 368, 441, 544, 612, 715, 783, 
    880, 942, 63, 183, 274, 382, 461, 558, 632, 729, 803, 894, 86, 200, 
    297, 399, 484, 575, 655, 746, 826, 911, 109, 217, 169, 254, 368, 441, 
    544, 612, 715, 783, 880, 942, 63, 183, 274, 382, 461, 558, 632, 729, 
    803, 894, 86, 200, 297, 399, 484, 575, 655, 746, 826, 911, 109, 217, 
    155, 245, 354, 432, 530, 603, 701, 774, 176, 261, 375, 448, 551, 619, 
    722, 790, 887, 949, 72, 192, 283, 391, 470, 567, 641, 738, 812, 903, 
    95, 209, 306, 408, 493, 584, 664, 755, 835, 920, 118, 226, 176, 261, 
    375, 448, 551, 619, 722, 790, 887, 949, 72, 192, 283, 391, 470, 567, 
    641, 738, 812, 903, 95, 209, 306, 408, 493, 584, 664, 755, 835, 920, 
    118, 226, 172, 257, 371, 444, 547, 615, 718, 786, 883, 945, 67, 187, 
    278, 386, 465, 562, 636, 733, 807, 898, 90, 204, 301, 403, 488, 579, 
    659, 750, 830, 915, 113, 221, 163, 362, 538, 709, 875, 57, 268, 455, 
    626, 797, 80, 291, 478, 649, 820, 103, 310, 497, 668, 839, 122, 321, 
    508, 679, 850, 133, 332, 519, 690, 861, 144, 343, 316, 412, 503, 588, 
    674, 759, 845, 924, 128, 230, 327, 417, 514, 593, 685, 764, 856, 929, 
    139, 235, 338, 422, 525, 598, 696, 769, 867, 934, 150, 240, 349, 427, 
    169, 254, 368, 441, 544, 612, 715, 783, 880, 942, 63, 183, 274, 382, 
    461, 558, 632, 729, 803, 894, 86, 200, 297, 399, 484, 575, 655, 746, 
    826, 911, 109, 217, 55, 266, 624, 54, 452, 794, 288, 646, 100, 181, 
    556, 892, 379, 726, 197, 572, 908, 55, 453, 795, 265, 623, 77, 475, 
    817, 380, 727, 180, 555, 891, 396, 743, 214, 169, 368, 544, 715, 880, 
    63, 274, 461, 632, 803, 86, 297, 484, 655, 826, 109, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#endif
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

void printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         SStream *OS);

static char* printAliasInstr(MCInst *MI, SStream *OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {PPC_ADDI, 0, 1 },
    {PPC_ADDI8, 1, 1 },
    {PPC_ADDIS, 2, 1 },
    {PPC_ADDIS8, 3, 1 },
    {PPC_ADDPCIS, 4, 1 },
    {PPC_BCC, 5, 24 },
    {PPC_BCCA, 29, 24 },
    {PPC_BCCCTR, 53, 24 },
    {PPC_BCCCTRL, 77, 24 },
    {PPC_BCCL, 101, 24 },
    {PPC_BCCLA, 125, 24 },
    {PPC_BCCLR, 149, 24 },
    {PPC_BCCLRL, 173, 24 },
    {PPC_CMPD, 197, 1 },
    {PPC_CMPDI, 198, 1 },
    {PPC_CMPLD, 199, 1 },
    {PPC_CMPLDI, 200, 1 },
    {PPC_CMPLW, 201, 1 },
    {PPC_CMPLWI, 202, 1 },
    {PPC_CMPW, 203, 1 },
    {PPC_CMPWI, 204, 1 },
    {PPC_CNTLZW, 205, 1 },
    {PPC_CNTLZW8, 206, 1 },
    {PPC_CNTLZW8_rec, 207, 1 },
    {PPC_CNTLZW_rec, 208, 1 },
    {PPC_CP_PASTE_rec, 209, 1 },
    {PPC_CREQV, 210, 1 },
    {PPC_CRNOR, 211, 1 },
    {PPC_CROR, 212, 1 },
    {PPC_CRXOR, 213, 1 },
    {PPC_ISEL, 214, 3 },
    {PPC_ISEL8, 217, 3 },
    {PPC_MBAR, 220, 1 },
    {PPC_MFDCR, 221, 8 },
    {PPC_MFSPR, 229, 46 },
    {PPC_MFSPR8, 275, 19 },
    {PPC_MFTB, 294, 1 },
    {PPC_MFVRSAVE, 295, 1 },
    {PPC_MFVSRD, 296, 1 },
    {PPC_MFVSRWZ, 297, 1 },
    {PPC_MTCRF, 298, 1 },
    {PPC_MTCRF8, 299, 1 },
    {PPC_MTDCR, 300, 8 },
    {PPC_MTFSF, 308, 1 },
    {PPC_MTFSFI, 309, 1 },
    {PPC_MTFSFI_rec, 310, 1 },
    {PPC_MTFSF_rec, 311, 1 },
    {PPC_MTMSR, 312, 1 },
    {PPC_MTMSRD, 313, 1 },
    {PPC_MTSPR, 314, 45 },
    {PPC_MTSPR8, 359, 18 },
    {PPC_MTVRSAVE, 377, 1 },
    {PPC_MTVSRD, 378, 1 },
    {PPC_MTVSRWA, 379, 1 },
    {PPC_MTVSRWZ, 380, 1 },
    {PPC_NOR, 381, 1 },
    {PPC_NOR8, 382, 1 },
    {PPC_NOR8_rec, 383, 1 },
    {PPC_NOR_rec, 384, 1 },
    {PPC_OR, 385, 1 },
    {PPC_OR8, 386, 1 },
    {PPC_OR8_rec, 387, 1 },
    {PPC_ORI, 388, 1 },
    {PPC_ORI8, 389, 1 },
    {PPC_OR_rec, 390, 1 },
    {PPC_RFEBB, 391, 1 },
    {PPC_RLDCL, 392, 1 },
    {PPC_RLDCL_rec, 393, 1 },
    {PPC_RLDICL, 394, 2 },
    {PPC_RLDICL_32_64, 396, 2 },
    {PPC_RLDICL_rec, 398, 2 },
    {PPC_RLWINM, 400, 2 },
    {PPC_RLWINM8, 402, 2 },
    {PPC_RLWINM8_rec, 404, 2 },
    {PPC_RLWINM_rec, 406, 2 },
    {PPC_RLWNM, 408, 1 },
    {PPC_RLWNM8, 409, 1 },
    {PPC_RLWNM8_rec, 410, 1 },
    {PPC_RLWNM_rec, 411, 1 },
    {PPC_SC, 412, 1 },
    {PPC_SUBF, 413, 1 },
    {PPC_SUBF8, 414, 1 },
    {PPC_SUBF8_rec, 415, 1 },
    {PPC_SUBFC, 416, 1 },
    {PPC_SUBFC8, 417, 1 },
    {PPC_SUBFC8_rec, 418, 1 },
    {PPC_SUBFC_rec, 419, 1 },
    {PPC_SUBF_rec, 420, 1 },
    {PPC_SYNC, 421, 3 },
    {PPC_TD, 424, 7 },
    {PPC_TDI, 431, 7 },
    {PPC_TEND, 438, 2 },
    {PPC_TLBIE, 440, 1 },
    {PPC_TLBRE2, 441, 2 },
    {PPC_TLBWE2, 443, 2 },
    {PPC_TSR, 445, 2 },
    {PPC_TW, 447, 8 },
    {PPC_TWI, 455, 7 },
    {PPC_VNOR, 462, 1 },
    {PPC_VOR, 463, 1 },
    {PPC_WAIT, 464, 3 },
    {PPC_XORI, 467, 1 },
    {PPC_XORI8, 468, 1 },
    {PPC_XVCPSGNDP, 469, 1 },
    {PPC_XVCPSGNSP, 470, 1 },
    {PPC_XXPERMDI, 471, 5 },
    {PPC_XXPERMDIs, 476, 3 },
    {PPC_gBC, 479, 10 },
    {PPC_gBCA, 489, 10 },
    {PPC_gBCAat, 499, 2 },
    {PPC_gBCCTR, 501, 7 },
    {PPC_gBCCTRL, 508, 7 },
    {PPC_gBCL, 515, 10 },
    {PPC_gBCLA, 525, 10 },
    {PPC_gBCLAat, 535, 2 },
    {PPC_gBCLR, 537, 11 },
    {PPC_gBCLRL, 548, 11 },
    {PPC_gBCLat, 559, 2 },
    {PPC_gBCat, 561, 2 },
  };

  static const AliasPattern Patterns[] = {
    // PPC::ADDI - 0
    {0, 0, 3, 2 },
    // PPC::ADDI8 - 1
    {0, 2, 3, 2 },
    // PPC::ADDIS - 2
    {12, 4, 3, 2 },
    // PPC::ADDIS8 - 3
    {12, 6, 3, 2 },
    // PPC::ADDPCIS - 4
    {25, 8, 2, 2 },
    // PPC::BCC - 5
    {33, 10, 3, 2 },
    {46, 12, 3, 2 },
    {55, 14, 3, 2 },
    {69, 16, 3, 2 },
    {79, 18, 3, 2 },
    {93, 20, 3, 2 },
    {103, 22, 3, 2 },
    {116, 24, 3, 2 },
    {125, 26, 3, 2 },
    {139, 28, 3, 2 },
    {149, 30, 3, 2 },
    {163, 32, 3, 2 },
    {173, 34, 3, 2 },
    {186, 36, 3, 2 },
    {195, 38, 3, 2 },
    {209, 40, 3, 2 },
    {219, 42, 3, 2 },
    {233, 44, 3, 2 },
    {243, 46, 3, 2 },
    {256, 48, 3, 2 },
    {265, 50, 3, 2 },
    {279, 52, 3, 2 },
    {289, 54, 3, 2 },
    {303, 56, 3, 2 },
    // PPC::BCCA - 29
    {313, 58, 3, 2 },
    {327, 60, 3, 2 },
    {337, 62, 3, 2 },
    {352, 64, 3, 2 },
    {363, 66, 3, 2 },
    {378, 68, 3, 2 },
    {389, 70, 3, 2 },
    {403, 72, 3, 2 },
    {413, 74, 3, 2 },
    {428, 76, 3, 2 },
    {439, 78, 3, 2 },
    {454, 80, 3, 2 },
    {465, 82, 3, 2 },
    {479, 84, 3, 2 },
    {489, 86, 3, 2 },
    {504, 88, 3, 2 },
    {515, 90, 3, 2 },
    {530, 92, 3, 2 },
    {541, 94, 3, 2 },
    {555, 96, 3, 2 },
    {565, 98, 3, 2 },
    {580, 100, 3, 2 },
    {591, 102, 3, 2 },
    {606, 104, 3, 2 },
    // PPC::BCCCTR - 53
    {617, 106, 2, 2 },
    {627, 108, 2, 2 },
    {634, 110, 2, 2 },
    {645, 112, 2, 2 },
    {653, 114, 2, 2 },
    {664, 116, 2, 2 },
    {672, 118, 2, 2 },
    {682, 120, 2, 2 },
    {689, 122, 2, 2 },
    {700, 124, 2, 2 },
    {708, 126, 2, 2 },
    {719, 128, 2, 2 },
    {727, 130, 2, 2 },
    {737, 132, 2, 2 },
    {744, 134, 2, 2 },
    {755, 136, 2, 2 },
    {763, 138, 2, 2 },
    {774, 140, 2, 2 },
    {782, 142, 2, 2 },
    {792, 144, 2, 2 },
    {799, 146, 2, 2 },
    {810, 148, 2, 2 },
    {818, 150, 2, 2 },
    {829, 152, 2, 2 },
    // PPC::BCCCTRL - 77
    {837, 154, 2, 2 },
    {848, 156, 2, 2 },
    {856, 158, 2, 2 },
    {868, 160, 2, 2 },
    {877, 162, 2, 2 },
    {889, 164, 2, 2 },
    {898, 166, 2, 2 },
    {909, 168, 2, 2 },
    {917, 170, 2, 2 },
    {929, 172, 2, 2 },
    {938, 174, 2, 2 },
    {950, 176, 2, 2 },
    {959, 178, 2, 2 },
    {970, 180, 2, 2 },
    {978, 182, 2, 2 },
    {990, 184, 2, 2 },
    {999, 186, 2, 2 },
    {1011, 188, 2, 2 },
    {1020, 190, 2, 2 },
    {1031, 192, 2, 2 },
    {1039, 194, 2, 2 },
    {1051, 196, 2, 2 },
    {1060, 198, 2, 2 },
    {1072, 200, 2, 2 },
    // PPC::BCCL - 101
    {1081, 202, 3, 2 },
    {1095, 204, 3, 2 },
    {1105, 206, 3, 2 },
    {1120, 208, 3, 2 },
    {1131, 210, 3, 2 },
    {1146, 212, 3, 2 },
    {1157, 214, 3, 2 },
    {1171, 216, 3, 2 },
    {1181, 218, 3, 2 },
    {1196, 220, 3, 2 },
    {1207, 222, 3, 2 },
    {1222, 224, 3, 2 },
    {1233, 226, 3, 2 },
    {1247, 228, 3, 2 },
    {1257, 230, 3, 2 },
    {1272, 232, 3, 2 },
    {1283, 234, 3, 2 },
    {1298, 236, 3, 2 },
    {1309, 238, 3, 2 },
    {1323, 240, 3, 2 },
    {1333, 242, 3, 2 },
    {1348, 244, 3, 2 },
    {1359, 246, 3, 2 },
    {1374, 248, 3, 2 },
    // PPC::BCCLA - 125
    {1385, 250, 3, 2 },
    {1400, 252, 3, 2 },
    {1411, 254, 3, 2 },
    {1427, 256, 3, 2 },
    {1439, 258, 3, 2 },
    {1455, 260, 3, 2 },
    {1467, 262, 3, 2 },
    {1482, 264, 3, 2 },
    {1493, 266, 3, 2 },
    {1509, 268, 3, 2 },
    {1521, 270, 3, 2 },
    {1537, 272, 3, 2 },
    {1549, 274, 3, 2 },
    {1564, 276, 3, 2 },
    {1575, 278, 3, 2 },
    {1591, 280, 3, 2 },
    {1603, 282, 3, 2 },
    {1619, 284, 3, 2 },
    {1631, 286, 3, 2 },
    {1646, 288, 3, 2 },
    {1657, 290, 3, 2 },
    {1673, 292, 3, 2 },
    {1685, 294, 3, 2 },
    {1701, 296, 3, 2 },
    // PPC::BCCLR - 149
    {1713, 298, 2, 2 },
    {1722, 300, 2, 2 },
    {1728, 302, 2, 2 },
    {1738, 304, 2, 2 },
    {1745, 306, 2, 2 },
    {1755, 308, 2, 2 },
    {1762, 310, 2, 2 },
    {1771, 312, 2, 2 },
    {1777, 314, 2, 2 },
    {1787, 316, 2, 2 },
    {1794, 318, 2, 2 },
    {1804, 320, 2, 2 },
    {1811, 322, 2, 2 },
    {1820, 324, 2, 2 },
    {1826, 326, 2, 2 },
    {1836, 328, 2, 2 },
    {1843, 330, 2, 2 },
    {1853, 332, 2, 2 },
    {1860, 334, 2, 2 },
    {1869, 336, 2, 2 },
    {1875, 338, 2, 2 },
    {1885, 340, 2, 2 },
    {1892, 342, 2, 2 },
    {1902, 344, 2, 2 },
    // PPC::BCCLRL - 173
    {1909, 346, 2, 2 },
    {1919, 348, 2, 2 },
    {1926, 350, 2, 2 },
    {1937, 352, 2, 2 },
    {1945, 354, 2, 2 },
    {1956, 356, 2, 2 },
    {1964, 358, 2, 2 },
    {1974, 360, 2, 2 },
    {1981, 362, 2, 2 },
    {1992, 364, 2, 2 },
    {2000, 366, 2, 2 },
    {2011, 368, 2, 2 },
    {2019, 370, 2, 2 },
    {2029, 372, 2, 2 },
    {2036, 374, 2, 2 },
    {2047, 376, 2, 2 },
    {2055, 378, 2, 2 },
    {2066, 380, 2, 2 },
    {2074, 382, 2, 2 },
    {2084, 384, 2, 2 },
    {2091, 386, 2, 2 },
    {2102, 388, 2, 2 },
    {2110, 390, 2, 2 },
    {2121, 392, 2, 2 },
    // PPC::CMPD - 197
    {2129, 394, 3, 3 },
    // PPC::CMPDI - 198
    {2141, 397, 3, 2 },
    // PPC::CMPLD - 199
    {2156, 399, 3, 3 },
    // PPC::CMPLDI - 200
    {2169, 402, 3, 2 },
    // PPC::CMPLW - 201
    {2185, 404, 3, 3 },
    // PPC::CMPLWI - 202
    {2198, 407, 3, 2 },
    // PPC::CMPW - 203
    {2214, 409, 3, 3 },
    // PPC::CMPWI - 204
    {2226, 412, 3, 2 },
    // PPC::CNTLZW - 205
    {2241, 414, 2, 2 },
    // PPC::CNTLZW8 - 206
    {2241, 416, 2, 2 },
    // PPC::CNTLZW8_rec - 207
    {2255, 418, 2, 2 },
    // PPC::CNTLZW_rec - 208
    {2255, 420, 2, 2 },
    // PPC::CP_PASTE_rec - 209
    {2270, 422, 3, 3 },
    // PPC::CREQV - 210
    {2284, 425, 3, 3 },
    // PPC::CRNOR - 211
    {2293, 428, 3, 3 },
    // PPC::CROR - 212
    {2306, 431, 3, 3 },
    // PPC::CRXOR - 213
    {2320, 434, 3, 3 },
    // PPC::ISEL - 214
    {2329, 437, 4, 4 },
    {2347, 441, 4, 4 },
    {2365, 445, 4, 4 },
    // PPC::ISEL8 - 217
    {2329, 449, 4, 4 },
    {2347, 453, 4, 4 },
    {2365, 457, 4, 4 },
    // PPC::MBAR - 220
    {2383, 461, 1, 1 },
    // PPC::MFDCR - 221
    {2388, 462, 2, 5 },
    {2397, 467, 2, 5 },
    {2406, 472, 2, 5 },
    {2415, 477, 2, 5 },
    {2424, 482, 2, 5 },
    {2433, 487, 2, 5 },
    {2442, 492, 2, 5 },
    {2451, 497, 2, 5 },
    // PPC::MFSPR - 229
    {2460, 502, 2, 2 },
    {2469, 504, 2, 5 },
    {2480, 509, 2, 5 },
    {2490, 514, 2, 5 },
    {2500, 519, 2, 5 },
    {2508, 524, 2, 5 },
    {2517, 529, 2, 5 },
    {2527, 534, 2, 5 },
    {2537, 539, 2, 5 },
    {2548, 544, 2, 5 },
    {2557, 549, 2, 5 },
    {2566, 554, 2, 5 },
    {2576, 559, 2, 5 },
    {2586, 564, 2, 5 },
    {2596, 569, 2, 5 },
    {2606, 574, 2, 5 },
    {2615, 579, 2, 5 },
    {2624, 584, 2, 5 },
    {2633, 589, 2, 5 },
    {2642, 594, 2, 5 },
    {2655, 599, 2, 5 },
    {2669, 604, 2, 5 },
    {2683, 609, 2, 5 },
    {2697, 614, 2, 5 },
    {2711, 619, 2, 5 },
    {2725, 624, 2, 5 },
    {2739, 629, 2, 5 },
    {2753, 634, 2, 5 },
    {2767, 639, 2, 5 },
    {2781, 644, 2, 5 },
    {2795, 649, 2, 5 },
    {2809, 654, 2, 5 },
    {2823, 659, 2, 5 },
    {2837, 664, 2, 5 },
    {2851, 669, 2, 5 },
    {2865, 674, 2, 5 },
    {2879, 679, 2, 5 },
    {2888, 684, 2, 5 },
    {2897, 689, 2, 5 },
    {2907, 694, 2, 5 },
    {2916, 699, 2, 5 },
    {2926, 704, 2, 5 },
    {2936, 709, 2, 5 },
    {2946, 714, 2, 5 },
    {2956, 719, 2, 5 },
    {2966, 724, 2, 5 },
    // PPC::MFSPR8 - 275
    {2460, 729, 2, 2 },
    {2469, 731, 2, 5 },
    {2480, 736, 2, 5 },
    {2490, 741, 2, 5 },
    {2500, 746, 2, 5 },
    {2508, 751, 2, 5 },
    {2517, 756, 2, 5 },
    {2527, 761, 2, 5 },
    {2537, 766, 2, 5 },
    {2548, 771, 2, 5 },
    {2557, 776, 2, 5 },
    {2566, 781, 2, 5 },
    {2576, 786, 2, 5 },
    {2586, 791, 2, 5 },
    {2596, 796, 2, 5 },
    {2606, 801, 2, 5 },
    {2624, 806, 2, 5 },
    {2633, 811, 2, 5 },
    {2642, 816, 2, 5 },
    // PPC::MFTB - 294
    {2976, 821, 2, 2 },
    // PPC::MFVRSAVE - 295
    {2985, 823, 1, 1 },
    // PPC::MFVSRD - 296
    {2997, 824, 2, 2 },
    // PPC::MFVSRWZ - 297
    {3011, 826, 2, 2 },
    // PPC::MTCRF - 298
    {3026, 828, 2, 2 },
    // PPC::MTCRF8 - 299
    {3026, 830, 2, 2 },
    // PPC::MTDCR - 300
    {3034, 832, 2, 5 },
    {3043, 837, 2, 5 },
    {3052, 842, 2, 5 },
    {3061, 847, 2, 5 },
    {3070, 852, 2, 5 },
    {3079, 857, 2, 5 },
    {3088, 862, 2, 5 },
    {3097, 867, 2, 5 },
    // PPC::MTFSF - 308
    {3106, 872, 4, 4 },
    // PPC::MTFSFI - 309
    {3119, 876, 3, 3 },
    // PPC::MTFSFI_rec - 310
    {3137, 879, 3, 3 },
    // PPC::MTFSF_rec - 311
    {3156, 882, 4, 4 },
    // PPC::MTMSR - 312
    {3170, 886, 2, 5 },
    // PPC::MTMSRD - 313
    {3179, 891, 2, 5 },
    // PPC::MTSPR - 314
    {3189, 896, 2, 2 },
    {3198, 898, 2, 5 },
    {3209, 903, 2, 5 },
    {3217, 908, 2, 5 },
    {3226, 913, 2, 5 },
    {3236, 918, 2, 5 },
    {3246, 923, 2, 5 },
    {3257, 928, 2, 5 },
    {3266, 933, 2, 5 },
    {3275, 938, 2, 5 },
    {3285, 943, 2, 5 },
    {3295, 948, 2, 5 },
    {3305, 953, 2, 5 },
    {3315, 958, 2, 5 },
    {3324, 963, 2, 5 },
    {3333, 968, 2, 5 },
    {3342, 973, 2, 5 },
    {3351, 978, 2, 5 },
    {3360, 983, 2, 5 },
    {3373, 988, 2, 5 },
    {3387, 993, 2, 5 },
    {3401, 998, 2, 5 },
    {3415, 1003, 2, 5 },
    {3429, 1008, 2, 5 },
    {3443, 1013, 2, 5 },
    {3457, 1018, 2, 5 },
    {3471, 1023, 2, 5 },
    {3485, 1028, 2, 5 },
    {3499, 1033, 2, 5 },
    {3513, 1038, 2, 5 },
    {3527, 1043, 2, 5 },
    {3541, 1048, 2, 5 },
    {3555, 1053, 2, 5 },
    {3569, 1058, 2, 5 },
    {3583, 1063, 2, 5 },
    {3597, 1068, 2, 5 },
    {3606, 1073, 2, 5 },
    {3615, 1078, 2, 5 },
    {3625, 1083, 2, 5 },
    {3634, 1088, 2, 5 },
    {3644, 1093, 2, 5 },
    {3654, 1098, 2, 5 },
    {3664, 1103, 2, 5 },
    {3674, 1108, 2, 5 },
    {3684, 1113, 2, 5 },
    // PPC::MTSPR8 - 359
    {3189, 1118, 2, 2 },
    {3198, 1120, 2, 5 },
    {3209, 1125, 2, 5 },
    {3217, 1130, 2, 5 },
    {3226, 1135, 2, 5 },
    {3236, 1140, 2, 5 },
    {3246, 1145, 2, 5 },
    {3257, 1150, 2, 5 },
    {3266, 1155, 2, 5 },
    {3275, 1160, 2, 5 },
    {3285, 1165, 2, 5 },
    {3295, 1170, 2, 5 },
    {3305, 1175, 2, 5 },
    {3315, 1180, 2, 5 },
    {3333, 1185, 2, 5 },
    {3342, 1190, 2, 5 },
    {3351, 1195, 2, 5 },
    {3360, 1200, 2, 5 },
    // PPC::MTVRSAVE - 377
    {3694, 1205, 1, 1 },
    // PPC::MTVSRD - 378
    {3706, 1206, 2, 2 },
    // PPC::MTVSRWA - 379
    {3720, 1208, 2, 2 },
    // PPC::MTVSRWZ - 380
    {3735, 1210, 2, 2 },
    // PPC::NOR - 381
    {3750, 1212, 3, 3 },
    // PPC::NOR8 - 382
    {3750, 1215, 3, 3 },
    // PPC::NOR8_rec - 383
    {3761, 1218, 3, 3 },
    // PPC::NOR_rec - 384
    {3761, 1221, 3, 3 },
    // PPC::OR - 385
    {3773, 1224, 3, 3 },
    // PPC::OR8 - 386
    {3773, 1227, 3, 3 },
    // PPC::OR8_rec - 387
    {3783, 1230, 3, 3 },
    // PPC::ORI - 388
    {3794, 1233, 3, 3 },
    // PPC::ORI8 - 389
    {3794, 1236, 3, 3 },
    // PPC::OR_rec - 390
    {3783, 1239, 3, 3 },
    // PPC::RFEBB - 391
    {3798, 1242, 1, 1 },
    // PPC::RLDCL - 392
    {3804, 1243, 4, 4 },
    // PPC::RLDCL_rec - 393
    {3821, 1247, 4, 4 },
    // PPC::RLDICL - 394
    {3839, 1251, 4, 4 },
    {3859, 1255, 4, 3 },
    // PPC::RLDICL_32_64 - 396
    {3839, 1258, 4, 4 },
    {3859, 1262, 4, 3 },
    // PPC::RLDICL_rec - 398
    {3879, 1265, 4, 4 },
    {3900, 1269, 4, 3 },
    // PPC::RLWINM - 400
    {3921, 1272, 5, 5 },
    {3941, 1277, 5, 5 },
    // PPC::RLWINM8 - 402
    {3921, 1282, 5, 5 },
    {3941, 1287, 5, 5 },
    // PPC::RLWINM8_rec - 404
    {3961, 1292, 5, 5 },
    {3982, 1297, 5, 5 },
    // PPC::RLWINM_rec - 406
    {3961, 1302, 5, 5 },
    {3982, 1307, 5, 5 },
    // PPC::RLWNM - 408
    {4003, 1312, 5, 5 },
    // PPC::RLWNM8 - 409
    {4003, 1317, 5, 5 },
    // PPC::RLWNM8_rec - 410
    {4020, 1322, 5, 5 },
    // PPC::RLWNM_rec - 411
    {4020, 1327, 5, 5 },
    // PPC::SC - 412
    {4038, 1332, 1, 1 },
    // PPC::SUBF - 413
    {4041, 1333, 3, 3 },
    // PPC::SUBF8 - 414
    {4041, 1336, 3, 3 },
    // PPC::SUBF8_rec - 415
    {4056, 1339, 3, 3 },
    // PPC::SUBFC - 416
    {4072, 1342, 3, 3 },
    // PPC::SUBFC8 - 417
    {4072, 1345, 3, 3 },
    // PPC::SUBFC8_rec - 418
    {4088, 1348, 3, 3 },
    // PPC::SUBFC_rec - 419
    {4088, 1351, 3, 3 },
    // PPC::SUBF_rec - 420
    {4056, 1354, 3, 3 },
    // PPC::SYNC - 421
    {4105, 1357, 1, 1 },
    {4110, 1358, 1, 1 },
    {4117, 1359, 1, 1 },
    // PPC::TD - 424
    {4125, 1360, 3, 3 },
    {4137, 1363, 3, 3 },
    {4149, 1366, 3, 3 },
    {4161, 1369, 3, 3 },
    {4173, 1372, 3, 3 },
    {4186, 1375, 3, 3 },
    {4199, 1378, 3, 3 },
    // PPC::TDI - 431
    {4210, 1381, 3, 2 },
    {4225, 1383, 3, 2 },
    {4240, 1385, 3, 2 },
    {4255, 1387, 3, 2 },
    {4270, 1389, 3, 2 },
    {4286, 1391, 3, 2 },
    {4302, 1393, 3, 2 },
    // PPC::TEND - 438
    {4316, 1395, 1, 1 },
    {4322, 1396, 1, 1 },
    // PPC::TLBIE - 440
    {4331, 1397, 2, 2 },
    // PPC::TLBRE2 - 441
    {4340, 1399, 3, 3 },
    {4355, 1402, 3, 3 },
    // PPC::TLBWE2 - 443
    {4370, 1405, 3, 3 },
    {4385, 1408, 3, 3 },
    // PPC::TSR - 445
    {4400, 1411, 1, 1 },
    {4410, 1412, 1, 1 },
    // PPC::TW - 447
    {4419, 1413, 3, 3 },
    {4424, 1416, 3, 3 },
    {4436, 1419, 3, 3 },
    {4448, 1422, 3, 3 },
    {4460, 1425, 3, 3 },
    {4472, 1428, 3, 3 },
    {4485, 1431, 3, 3 },
    {4498, 1434, 3, 3 },
    // PPC::TWI - 455
    {4509, 1437, 3, 2 },
    {4524, 1439, 3, 2 },
    {4539, 1441, 3, 2 },
    {4554, 1443, 3, 2 },
    {4569, 1445, 3, 2 },
    {4585, 1447, 3, 2 },
    {4601, 1449, 3, 2 },
    // PPC::VNOR - 462
    {4615, 1451, 3, 3 },
    // PPC::VOR - 463
    {4627, 1454, 3, 3 },
    // PPC::WAIT - 464
    {4638, 1457, 1, 1 },
    {4643, 1458, 1, 1 },
    {4651, 1459, 1, 1 },
    // PPC::XORI - 467
    {4660, 1460, 3, 3 },
    // PPC::XORI8 - 468
    {4660, 1463, 3, 3 },
    // PPC::XVCPSGNDP - 469
    {4665, 1466, 3, 3 },
    // PPC::XVCPSGNSP - 470
    {4680, 1469, 3, 3 },
    // PPC::XXPERMDI - 471
    {4695, 1472, 4, 7 },
    {4713, 1479, 4, 7 },
    {4731, 1486, 4, 4 },
    {4750, 1490, 4, 4 },
    {4769, 1494, 4, 4 },
    // PPC::XXPERMDIs - 476
    {4695, 1498, 3, 6 },
    {4713, 1504, 3, 6 },
    {4769, 1510, 3, 3 },
    // PPC::gBC - 479
    {4784, 1513, 3, 2 },
    {4796, 1515, 3, 2 },
    {4808, 1517, 3, 2 },
    {4821, 1519, 3, 2 },
    {4834, 1521, 3, 2 },
    {4847, 1523, 3, 2 },
    {4860, 1525, 3, 2 },
    {4875, 1527, 3, 2 },
    {4890, 1529, 3, 2 },
    {4904, 1531, 3, 2 },
    // PPC::gBCA - 489
    {4918, 1533, 3, 2 },
    {4931, 1535, 3, 2 },
    {4944, 1537, 3, 2 },
    {4958, 1539, 3, 2 },
    {4972, 1541, 3, 2 },
    {4986, 1543, 3, 2 },
    {5000, 1545, 3, 2 },
    {5016, 1547, 3, 2 },
    {5032, 1549, 3, 2 },
    {5047, 1551, 3, 2 },
    // PPC::gBCAat - 499
    {5062, 1553, 4, 3 },
    {5082, 1556, 4, 3 },
    // PPC::gBCCTR - 501
    {5102, 1559, 3, 3 },
    {5117, 1562, 3, 3 },
    {5126, 1565, 3, 3 },
    {5135, 1568, 3, 3 },
    {5145, 1571, 3, 3 },
    {5155, 1574, 3, 3 },
    {5165, 1577, 3, 3 },
    // PPC::gBCCTRL - 508
    {5175, 1580, 3, 3 },
    {5191, 1583, 3, 3 },
    {5201, 1586, 3, 3 },
    {5211, 1589, 3, 3 },
    {5222, 1592, 3, 3 },
    {5233, 1595, 3, 3 },
    {5244, 1598, 3, 3 },
    // PPC::gBCL - 515
    {5255, 1601, 3, 2 },
    {5268, 1603, 3, 2 },
    {5281, 1605, 3, 2 },
    {5295, 1607, 3, 2 },
    {5309, 1609, 3, 2 },
    {5323, 1611, 3, 2 },
    {5337, 1613, 3, 2 },
    {5353, 1615, 3, 2 },
    {5369, 1617, 3, 2 },
    {5384, 1619, 3, 2 },
    // PPC::gBCLA - 525
    {5399, 1621, 3, 2 },
    {5413, 1623, 3, 2 },
    {5427, 1625, 3, 2 },
    {5442, 1627, 3, 2 },
    {5457, 1629, 3, 2 },
    {5472, 1631, 3, 2 },
    {5487, 1633, 3, 2 },
    {5504, 1635, 3, 2 },
    {5521, 1637, 3, 2 },
    {5537, 1639, 3, 2 },
    // PPC::gBCLAat - 535
    {5553, 1641, 4, 3 },
    {5574, 1644, 4, 3 },
    // PPC::gBCLR - 537
    {5595, 1647, 3, 3 },
    {5609, 1650, 3, 3 },
    {5617, 1653, 3, 3 },
    {5625, 1656, 3, 3 },
    {5634, 1659, 3, 3 },
    {5643, 1662, 3, 3 },
    {5652, 1665, 3, 3 },
    {5661, 1668, 3, 3 },
    {5672, 1671, 3, 3 },
    {5683, 1674, 3, 3 },
    {5693, 1677, 3, 3 },
    // PPC::gBCLRL - 548
    {5703, 1680, 3, 3 },
    {5718, 1683, 3, 3 },
    {5727, 1686, 3, 3 },
    {5736, 1689, 3, 3 },
    {5746, 1692, 3, 3 },
    {5756, 1695, 3, 3 },
    {5766, 1698, 3, 3 },
    {5776, 1701, 3, 3 },
    {5788, 1704, 3, 3 },
    {5800, 1707, 3, 3 },
    {5811, 1710, 3, 3 },
    // PPC::gBCLat - 559
    {5822, 1713, 4, 3 },
    {5842, 1716, 4, 3 },
    // PPC::gBCat - 561
    {5862, 1719, 4, 3 },
    {5881, 1722, 4, 3 },
  };

  static const AliasPatternCond Conds[] = {
    // (ADDI gprc:$rD, ZERO, s16imm:$imm) - 0
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Reg, PPC_ZERO},
    // (ADDI8 g8rc:$rD, ZERO8, s16imm64:$imm) - 2
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Reg, PPC_ZERO8},
    // (ADDIS gprc:$rD, ZERO, s17imm:$imm) - 4
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Reg, PPC_ZERO},
    // (ADDIS8 g8rc:$rD, ZERO8, s17imm64:$imm) - 6
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Reg, PPC_ZERO8},
    // (ADDPCIS g8rc:$RT, 0) - 8
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (BCC 12, crrc:$cc, condbrtarget:$dst) - 10
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 12, CR0, condbrtarget:$dst) - 12
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 14, crrc:$cc, condbrtarget:$dst) - 14
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 14, CR0, condbrtarget:$dst) - 16
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 15, crrc:$cc, condbrtarget:$dst) - 18
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 15, CR0, condbrtarget:$dst) - 20
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 44, crrc:$cc, condbrtarget:$dst) - 22
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 44, CR0, condbrtarget:$dst) - 24
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 46, crrc:$cc, condbrtarget:$dst) - 26
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 46, CR0, condbrtarget:$dst) - 28
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 47, crrc:$cc, condbrtarget:$dst) - 30
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 47, CR0, condbrtarget:$dst) - 32
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 76, crrc:$cc, condbrtarget:$dst) - 34
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 76, CR0, condbrtarget:$dst) - 36
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 78, crrc:$cc, condbrtarget:$dst) - 38
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 78, CR0, condbrtarget:$dst) - 40
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 79, crrc:$cc, condbrtarget:$dst) - 42
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 79, CR0, condbrtarget:$dst) - 44
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 68, crrc:$cc, condbrtarget:$dst) - 46
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 68, CR0, condbrtarget:$dst) - 48
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 70, crrc:$cc, condbrtarget:$dst) - 50
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 70, CR0, condbrtarget:$dst) - 52
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCC 71, crrc:$cc, condbrtarget:$dst) - 54
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCC 71, CR0, condbrtarget:$dst) - 56
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 12, crrc:$cc, abscondbrtarget:$dst) - 58
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 12, CR0, abscondbrtarget:$dst) - 60
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 14, crrc:$cc, abscondbrtarget:$dst) - 62
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 14, CR0, abscondbrtarget:$dst) - 64
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 15, crrc:$cc, abscondbrtarget:$dst) - 66
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 15, CR0, abscondbrtarget:$dst) - 68
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 44, crrc:$cc, abscondbrtarget:$dst) - 70
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 44, CR0, abscondbrtarget:$dst) - 72
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 46, crrc:$cc, abscondbrtarget:$dst) - 74
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 46, CR0, abscondbrtarget:$dst) - 76
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 47, crrc:$cc, abscondbrtarget:$dst) - 78
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 47, CR0, abscondbrtarget:$dst) - 80
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 76, crrc:$cc, abscondbrtarget:$dst) - 82
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 76, CR0, abscondbrtarget:$dst) - 84
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 78, crrc:$cc, abscondbrtarget:$dst) - 86
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 78, CR0, abscondbrtarget:$dst) - 88
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 79, crrc:$cc, abscondbrtarget:$dst) - 90
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 79, CR0, abscondbrtarget:$dst) - 92
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 68, crrc:$cc, abscondbrtarget:$dst) - 94
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 68, CR0, abscondbrtarget:$dst) - 96
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 70, crrc:$cc, abscondbrtarget:$dst) - 98
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 70, CR0, abscondbrtarget:$dst) - 100
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCA 71, crrc:$cc, abscondbrtarget:$dst) - 102
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCA 71, CR0, abscondbrtarget:$dst) - 104
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 12, crrc:$cc) - 106
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 12, CR0) - 108
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 14, crrc:$cc) - 110
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 14, CR0) - 112
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 15, crrc:$cc) - 114
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 15, CR0) - 116
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 44, crrc:$cc) - 118
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 44, CR0) - 120
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 46, crrc:$cc) - 122
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 46, CR0) - 124
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 47, crrc:$cc) - 126
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 47, CR0) - 128
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 76, crrc:$cc) - 130
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 76, CR0) - 132
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 78, crrc:$cc) - 134
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 78, CR0) - 136
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 79, crrc:$cc) - 138
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 79, CR0) - 140
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 68, crrc:$cc) - 142
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 68, CR0) - 144
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 70, crrc:$cc) - 146
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 70, CR0) - 148
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTR 71, crrc:$cc) - 150
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTR 71, CR0) - 152
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 12, crrc:$cc) - 154
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 12, CR0) - 156
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 14, crrc:$cc) - 158
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 14, CR0) - 160
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 15, crrc:$cc) - 162
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 15, CR0) - 164
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 44, crrc:$cc) - 166
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 44, CR0) - 168
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 46, crrc:$cc) - 170
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 46, CR0) - 172
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 47, crrc:$cc) - 174
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 47, CR0) - 176
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 76, crrc:$cc) - 178
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 76, CR0) - 180
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 78, crrc:$cc) - 182
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 78, CR0) - 184
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 79, crrc:$cc) - 186
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 79, CR0) - 188
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 68, crrc:$cc) - 190
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 68, CR0) - 192
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 70, crrc:$cc) - 194
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 70, CR0) - 196
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCCTRL 71, crrc:$cc) - 198
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCCTRL 71, CR0) - 200
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 12, crrc:$cc, condbrtarget:$dst) - 202
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 12, CR0, condbrtarget:$dst) - 204
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 14, crrc:$cc, condbrtarget:$dst) - 206
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 14, CR0, condbrtarget:$dst) - 208
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 15, crrc:$cc, condbrtarget:$dst) - 210
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 15, CR0, condbrtarget:$dst) - 212
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 44, crrc:$cc, condbrtarget:$dst) - 214
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 44, CR0, condbrtarget:$dst) - 216
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 46, crrc:$cc, condbrtarget:$dst) - 218
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 46, CR0, condbrtarget:$dst) - 220
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 47, crrc:$cc, condbrtarget:$dst) - 222
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 47, CR0, condbrtarget:$dst) - 224
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 76, crrc:$cc, condbrtarget:$dst) - 226
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 76, CR0, condbrtarget:$dst) - 228
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 78, crrc:$cc, condbrtarget:$dst) - 230
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 78, CR0, condbrtarget:$dst) - 232
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 79, crrc:$cc, condbrtarget:$dst) - 234
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 79, CR0, condbrtarget:$dst) - 236
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 68, crrc:$cc, condbrtarget:$dst) - 238
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 68, CR0, condbrtarget:$dst) - 240
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 70, crrc:$cc, condbrtarget:$dst) - 242
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 70, CR0, condbrtarget:$dst) - 244
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCL 71, crrc:$cc, condbrtarget:$dst) - 246
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCL 71, CR0, condbrtarget:$dst) - 248
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst) - 250
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 12, CR0, abscondbrtarget:$dst) - 252
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst) - 254
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 14, CR0, abscondbrtarget:$dst) - 256
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst) - 258
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 15, CR0, abscondbrtarget:$dst) - 260
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst) - 262
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 44, CR0, abscondbrtarget:$dst) - 264
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst) - 266
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 46, CR0, abscondbrtarget:$dst) - 268
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst) - 270
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 47, CR0, abscondbrtarget:$dst) - 272
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst) - 274
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 76, CR0, abscondbrtarget:$dst) - 276
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst) - 278
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 78, CR0, abscondbrtarget:$dst) - 280
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst) - 282
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 79, CR0, abscondbrtarget:$dst) - 284
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst) - 286
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 68, CR0, abscondbrtarget:$dst) - 288
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst) - 290
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 70, CR0, abscondbrtarget:$dst) - 292
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst) - 294
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLA 71, CR0, abscondbrtarget:$dst) - 296
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 12, crrc:$cc) - 298
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 12, CR0) - 300
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 14, crrc:$cc) - 302
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 14, CR0) - 304
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 15, crrc:$cc) - 306
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 15, CR0) - 308
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 44, crrc:$cc) - 310
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 44, CR0) - 312
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 46, crrc:$cc) - 314
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 46, CR0) - 316
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 47, crrc:$cc) - 318
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 47, CR0) - 320
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 76, crrc:$cc) - 322
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 76, CR0) - 324
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 78, crrc:$cc) - 326
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 78, CR0) - 328
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 79, crrc:$cc) - 330
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 79, CR0) - 332
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 68, crrc:$cc) - 334
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 68, CR0) - 336
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 70, crrc:$cc) - 338
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 70, CR0) - 340
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLR 71, crrc:$cc) - 342
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLR 71, CR0) - 344
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 12, crrc:$cc) - 346
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 12, CR0) - 348
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 14, crrc:$cc) - 350
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 14, CR0) - 352
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 15, crrc:$cc) - 354
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 15, CR0) - 356
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 44, crrc:$cc) - 358
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 44, CR0) - 360
    {AliasPatternCond_K_Imm, (uint32_t)44},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 46, crrc:$cc) - 362
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 46, CR0) - 364
    {AliasPatternCond_K_Imm, (uint32_t)46},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 47, crrc:$cc) - 366
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 47, CR0) - 368
    {AliasPatternCond_K_Imm, (uint32_t)47},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 76, crrc:$cc) - 370
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 76, CR0) - 372
    {AliasPatternCond_K_Imm, (uint32_t)76},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 78, crrc:$cc) - 374
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 78, CR0) - 376
    {AliasPatternCond_K_Imm, (uint32_t)78},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 79, crrc:$cc) - 378
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 79, CR0) - 380
    {AliasPatternCond_K_Imm, (uint32_t)79},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 68, crrc:$cc) - 382
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 68, CR0) - 384
    {AliasPatternCond_K_Imm, (uint32_t)68},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 70, crrc:$cc) - 386
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 70, CR0) - 388
    {AliasPatternCond_K_Imm, (uint32_t)70},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (BCCLRL 71, crrc:$cc) - 390
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_RegClass, PPC_CRRCRegClassID},
    // (BCCLRL 71, CR0) - 392
    {AliasPatternCond_K_Imm, (uint32_t)71},
    {AliasPatternCond_K_Reg, PPC_CR0},
    // (CMPD CR0, g8rc:$rA, g8rc:$rB) - 394
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CMPDI CR0, g8rc:$rA, s16imm64:$imm) - 397
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CMPLD CR0, g8rc:$rA, g8rc:$rB) - 399
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm) - 402
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CMPLW CR0, gprc:$rA, gprc:$rB) - 404
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CMPLWI CR0, gprc:$rA, u16imm:$imm) - 407
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CMPW CR0, gprc:$rA, gprc:$rB) - 409
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CMPWI CR0, gprc:$rA, s16imm:$imm) - 412
    {AliasPatternCond_K_Reg, PPC_CR0},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CNTLZW gprc:$rA, gprc:$rS) - 414
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CNTLZW8 g8rc:$rA, g8rc:$rS) - 416
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CNTLZW8_rec g8rc:$rA, g8rc:$rS) - 418
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (CNTLZW_rec gprc:$rA, gprc:$rS) - 420
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (CP_PASTE_rec gprc:$RA, gprc:$RB, 1) - 422
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx) - 425
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    {AliasPatternCond_K_TiedReg, 0},
    // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by) - 428
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by) - 431
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx) - 434
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    {AliasPatternCond_K_TiedReg, 0},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0LT) - 437
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRC_NOR0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0LT},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0GT) - 441
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRC_NOR0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0GT},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0EQ) - 445
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRC_NOR0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0EQ},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0LT) - 449
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RC_NOX0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0LT},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0GT) - 453
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RC_NOX0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0GT},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0EQ) - 457
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RC_NOX0RegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Reg, PPC_CR0EQ},
    // (MBAR 0) - 461
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MFDCR gprc:$Rx, 128) - 462
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)128},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 129) - 467
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)129},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 130) - 472
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)130},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 131) - 477
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)131},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 132) - 482
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)132},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 133) - 487
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)133},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 134) - 492
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)134},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFDCR gprc:$Rx, 135) - 497
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)135},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 1) - 502
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (MFSPR gprc:$Rx, 3) - 504
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 4) - 509
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 5) - 514
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)5},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 8) - 519
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 9) - 524
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)9},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 13) - 529
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)13},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 17) - 534
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)17},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 18) - 539
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)18},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 19) - 544
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)19},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 22) - 549
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)22},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 25) - 554
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)25},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 26) - 559
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)26},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 27) - 564
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)27},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 28) - 569
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)28},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 29) - 574
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)29},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 48) - 579
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)48},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$RT, 280) - 584
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)280},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$RT, 287) - 589
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)287},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 512) - 594
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)512},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 536) - 599
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)536},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 537) - 604
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)537},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 528) - 609
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)528},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 529) - 614
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)529},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 538) - 619
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)538},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 539) - 624
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)539},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 530) - 629
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)530},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 531) - 634
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)531},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 540) - 639
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)540},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 541) - 644
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)541},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 532) - 649
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)532},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 533) - 654
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)533},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 542) - 659
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)542},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 543) - 664
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)543},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 534) - 669
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)534},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 535) - 674
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)535},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$RT, 896) - 679
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)896},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 980) - 684
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)980},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 981) - 689
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)981},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 986) - 694
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)986},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 988) - 699
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)988},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 989) - 704
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)989},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 990) - 709
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)990},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 991) - 714
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)991},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 1018) - 719
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1018},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 1019) - 724
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1019},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 1) - 729
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (MFSPR8 g8rc:$Rx, 3) - 731
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 4) - 736
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 5) - 741
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)5},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 8) - 746
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 9) - 751
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)9},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 13) - 756
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)13},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 17) - 761
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)17},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 18) - 766
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)18},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 19) - 771
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)19},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 22) - 776
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)22},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 25) - 781
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)25},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 26) - 786
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)26},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 27) - 791
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)27},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 28) - 796
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)28},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 29) - 801
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)29},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$RT, 280) - 806
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)280},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$RT, 287) - 811
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)287},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 512) - 816
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)512},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MFTB gprc:$Rx, 269) - 821
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)269},
    // (MFVRSAVE gprc:$rS) - 823
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (MFVSRD g8rc:$rA, f8rc:$src) - 824
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    // (MFVSRWZ gprc:$rA, f8rc:$src) - 826
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    // (MTCRF 255, gprc:$rA) - 828
    {AliasPatternCond_K_Imm, (uint32_t)255},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (MTCRF8 255, g8rc:$rA) - 830
    {AliasPatternCond_K_Imm, (uint32_t)255},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (MTDCR gprc:$Rx, 128) - 832
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)128},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 129) - 837
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)129},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 130) - 842
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)130},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 131) - 847
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)131},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 132) - 852
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)132},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 133) - 857
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)133},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 134) - 862
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)134},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTDCR gprc:$Rx, 135) - 867
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)135},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0) - 872
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MTFSFI u3imm:$BF, u4imm:$U, 0) - 876
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MTFSFI_rec u3imm:$BF, u4imm:$U, 0) - 879
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MTFSF_rec i32imm:$FLM, f8rc:$FRB, 0, 0) - 882
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MTMSR gprc:$RS, 0) - 886
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTMSRD gprc:$RS, 0) - 891
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 1, gprc:$Rx) - 896
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (MTSPR 3, gprc:$Rx) - 898
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 8, gprc:$Rx) - 903
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 9, gprc:$Rx) - 908
    {AliasPatternCond_K_Imm, (uint32_t)9},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 13, gprc:$Rx) - 913
    {AliasPatternCond_K_Imm, (uint32_t)13},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 17, gprc:$Rx) - 918
    {AliasPatternCond_K_Imm, (uint32_t)17},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 18, gprc:$Rx) - 923
    {AliasPatternCond_K_Imm, (uint32_t)18},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 19, gprc:$Rx) - 928
    {AliasPatternCond_K_Imm, (uint32_t)19},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 22, gprc:$Rx) - 933
    {AliasPatternCond_K_Imm, (uint32_t)22},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 25, gprc:$Rx) - 938
    {AliasPatternCond_K_Imm, (uint32_t)25},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 26, gprc:$Rx) - 943
    {AliasPatternCond_K_Imm, (uint32_t)26},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 27, gprc:$Rx) - 948
    {AliasPatternCond_K_Imm, (uint32_t)27},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 28, gprc:$Rx) - 953
    {AliasPatternCond_K_Imm, (uint32_t)28},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 29, gprc:$Rx) - 958
    {AliasPatternCond_K_Imm, (uint32_t)29},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 48, gprc:$Rx) - 963
    {AliasPatternCond_K_Imm, (uint32_t)48},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 280, gprc:$RT) - 968
    {AliasPatternCond_K_Imm, (uint32_t)280},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 284, gprc:$Rx) - 973
    {AliasPatternCond_K_Imm, (uint32_t)284},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 285, gprc:$Rx) - 978
    {AliasPatternCond_K_Imm, (uint32_t)285},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 512, gprc:$Rx) - 983
    {AliasPatternCond_K_Imm, (uint32_t)512},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 536, gprc:$Rx) - 988
    {AliasPatternCond_K_Imm, (uint32_t)536},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 537, gprc:$Rx) - 993
    {AliasPatternCond_K_Imm, (uint32_t)537},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 528, gprc:$Rx) - 998
    {AliasPatternCond_K_Imm, (uint32_t)528},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 529, gprc:$Rx) - 1003
    {AliasPatternCond_K_Imm, (uint32_t)529},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 538, gprc:$Rx) - 1008
    {AliasPatternCond_K_Imm, (uint32_t)538},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 539, gprc:$Rx) - 1013
    {AliasPatternCond_K_Imm, (uint32_t)539},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 530, gprc:$Rx) - 1018
    {AliasPatternCond_K_Imm, (uint32_t)530},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 531, gprc:$Rx) - 1023
    {AliasPatternCond_K_Imm, (uint32_t)531},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 540, gprc:$Rx) - 1028
    {AliasPatternCond_K_Imm, (uint32_t)540},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 541, gprc:$Rx) - 1033
    {AliasPatternCond_K_Imm, (uint32_t)541},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 532, gprc:$Rx) - 1038
    {AliasPatternCond_K_Imm, (uint32_t)532},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 533, gprc:$Rx) - 1043
    {AliasPatternCond_K_Imm, (uint32_t)533},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 542, gprc:$Rx) - 1048
    {AliasPatternCond_K_Imm, (uint32_t)542},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 543, gprc:$Rx) - 1053
    {AliasPatternCond_K_Imm, (uint32_t)543},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 534, gprc:$Rx) - 1058
    {AliasPatternCond_K_Imm, (uint32_t)534},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 535, gprc:$Rx) - 1063
    {AliasPatternCond_K_Imm, (uint32_t)535},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 896, gprc:$RT) - 1068
    {AliasPatternCond_K_Imm, (uint32_t)896},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 980, gprc:$Rx) - 1073
    {AliasPatternCond_K_Imm, (uint32_t)980},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 981, gprc:$Rx) - 1078
    {AliasPatternCond_K_Imm, (uint32_t)981},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 986, gprc:$Rx) - 1083
    {AliasPatternCond_K_Imm, (uint32_t)986},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 988, gprc:$Rx) - 1088
    {AliasPatternCond_K_Imm, (uint32_t)988},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 989, gprc:$Rx) - 1093
    {AliasPatternCond_K_Imm, (uint32_t)989},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 990, gprc:$Rx) - 1098
    {AliasPatternCond_K_Imm, (uint32_t)990},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 991, gprc:$Rx) - 1103
    {AliasPatternCond_K_Imm, (uint32_t)991},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 1018, gprc:$Rx) - 1108
    {AliasPatternCond_K_Imm, (uint32_t)1018},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR 1019, gprc:$Rx) - 1113
    {AliasPatternCond_K_Imm, (uint32_t)1019},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 1, g8rc:$Rx) - 1118
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (MTSPR8 3, g8rc:$Rx) - 1120
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 8, g8rc:$Rx) - 1125
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 9, g8rc:$Rx) - 1130
    {AliasPatternCond_K_Imm, (uint32_t)9},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 13, g8rc:$Rx) - 1135
    {AliasPatternCond_K_Imm, (uint32_t)13},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 17, g8rc:$Rx) - 1140
    {AliasPatternCond_K_Imm, (uint32_t)17},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 18, g8rc:$Rx) - 1145
    {AliasPatternCond_K_Imm, (uint32_t)18},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 19, g8rc:$Rx) - 1150
    {AliasPatternCond_K_Imm, (uint32_t)19},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 22, g8rc:$Rx) - 1155
    {AliasPatternCond_K_Imm, (uint32_t)22},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 25, g8rc:$Rx) - 1160
    {AliasPatternCond_K_Imm, (uint32_t)25},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 26, g8rc:$Rx) - 1165
    {AliasPatternCond_K_Imm, (uint32_t)26},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 27, g8rc:$Rx) - 1170
    {AliasPatternCond_K_Imm, (uint32_t)27},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 28, g8rc:$Rx) - 1175
    {AliasPatternCond_K_Imm, (uint32_t)28},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 29, g8rc:$Rx) - 1180
    {AliasPatternCond_K_Imm, (uint32_t)29},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 280, g8rc:$RT) - 1185
    {AliasPatternCond_K_Imm, (uint32_t)280},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 284, g8rc:$Rx) - 1190
    {AliasPatternCond_K_Imm, (uint32_t)284},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 285, g8rc:$Rx) - 1195
    {AliasPatternCond_K_Imm, (uint32_t)285},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTSPR8 512, g8rc:$Rx) - 1200
    {AliasPatternCond_K_Imm, (uint32_t)512},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (MTVRSAVE gprc:$rS) - 1205
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (MTVSRD f8rc:$dst, g8rc:$rA) - 1206
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (MTVSRWA f8rc:$dst, gprc:$rA) - 1208
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (MTVSRWZ f8rc:$dst, gprc:$rA) - 1210
    {AliasPatternCond_K_RegClass, PPC_F8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (NOR gprc:$rA, gprc:$rS, gprc:$rS) - 1212
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB) - 1215
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (NOR8_rec g8rc:$rA, g8rc:$rB, g8rc:$rB) - 1218
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (NOR_rec gprc:$rA, gprc:$rS, gprc:$rS) - 1221
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (OR gprc:$rA, gprc:$rB, gprc:$rB) - 1224
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB) - 1227
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (OR8_rec g8rc:$rA, g8rc:$rB, g8rc:$rB) - 1230
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (ORI R0, R0, 0) - 1233
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (ORI8 X0, X0, 0) - 1236
    {AliasPatternCond_K_Reg, PPC_X0},
    {AliasPatternCond_K_Reg, PPC_X0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (OR_rec gprc:$rA, gprc:$rB, gprc:$rB) - 1239
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (RFEBB 1) - 1242
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0) - 1243
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDCL_rec g8rc:$rA, g8rc:$rS, gprc:$rB, 0) - 1247
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0) - 1251
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n) - 1255
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL_32_64 g8rc:$rA, gprc:$rS, u6imm:$n, 0) - 1258
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL_32_64 g8rc:$rA, gprc:$rS, 0, u6imm:$n) - 1262
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL_rec g8rc:$rA, g8rc:$rS, u6imm:$n, 0) - 1265
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLDICL_rec g8rc:$rA, g8rc:$rS, 0, u6imm:$n) - 1269
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31) - 1272
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31) - 1277
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM8 g8rc:$rA, g8rc:$rS, u5imm:$n, 0, 31) - 1282
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM8 g8rc:$rA, g8rc:$rS, 0, u5imm:$n, 31) - 1287
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM8_rec g8rc:$rA, g8rc:$rS, u5imm:$n, 0, 31) - 1292
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM8_rec g8rc:$rA, g8rc:$rS, 0, u5imm:$n, 31) - 1297
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM_rec gprc:$rA, gprc:$rS, u5imm:$n, 0, 31) - 1302
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWINM_rec gprc:$rA, gprc:$rS, 0, u5imm:$n, 31) - 1307
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31) - 1312
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWNM8 g8rc:$rA, g8rc:$rS, g8rc:$rB, 0, 31) - 1317
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWNM8_rec g8rc:$rA, g8rc:$rS, g8rc:$rB, 0, 31) - 1322
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (RLWNM_rec gprc:$rA, gprc:$rS, gprc:$rB, 0, 31) - 1327
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (SC 0) - 1332
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SUBF gprc:$rA, gprc:$rC, gprc:$rB) - 1333
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB) - 1336
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (SUBF8_rec g8rc:$rA, g8rc:$rC, g8rc:$rB) - 1339
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (SUBFC gprc:$rA, gprc:$rC, gprc:$rB) - 1342
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB) - 1345
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (SUBFC8_rec g8rc:$rA, g8rc:$rC, g8rc:$rB) - 1348
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (SUBFC_rec gprc:$rA, gprc:$rC, gprc:$rB) - 1351
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (SUBF_rec gprc:$rA, gprc:$rC, gprc:$rB) - 1354
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (SYNC 0) - 1357
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SYNC 1) - 1358
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (SYNC 2) - 1359
    {AliasPatternCond_K_Imm, (uint32_t)2},
    // (TD 16, g8rc:$rA, g8rc:$rB) - 1360
    {AliasPatternCond_K_Imm, (uint32_t)16},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 4, g8rc:$rA, g8rc:$rB) - 1363
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 8, g8rc:$rA, g8rc:$rB) - 1366
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 24, g8rc:$rA, g8rc:$rB) - 1369
    {AliasPatternCond_K_Imm, (uint32_t)24},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 2, g8rc:$rA, g8rc:$rB) - 1372
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 1, g8rc:$rA, g8rc:$rB) - 1375
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TD 31, g8rc:$rA, g8rc:$rB) - 1378
    {AliasPatternCond_K_Imm, (uint32_t)31},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 16, g8rc:$rA, s16imm:$imm) - 1381
    {AliasPatternCond_K_Imm, (uint32_t)16},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 4, g8rc:$rA, s16imm:$imm) - 1383
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 8, g8rc:$rA, s16imm:$imm) - 1385
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 24, g8rc:$rA, s16imm:$imm) - 1387
    {AliasPatternCond_K_Imm, (uint32_t)24},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 2, g8rc:$rA, s16imm:$imm) - 1389
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 1, g8rc:$rA, s16imm:$imm) - 1391
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TDI 31, g8rc:$rA, s16imm:$imm) - 1393
    {AliasPatternCond_K_Imm, (uint32_t)31},
    {AliasPatternCond_K_RegClass, PPC_G8RCRegClassID},
    // (TEND 0) - 1395
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TEND 1) - 1396
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (TLBIE R0, gprc:$RB) - 1397
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TLBRE2 gprc:$RS, gprc:$A, 0) - 1399
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLBRE2 gprc:$RS, gprc:$A, 1) - 1402
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (TLBWE2 gprc:$RS, gprc:$A, 0) - 1405
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLBWE2 gprc:$RS, gprc:$A, 1) - 1408
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (TSR 0) - 1411
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TSR 1) - 1412
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (TW 31, R0, R0) - 1413
    {AliasPatternCond_K_Imm, (uint32_t)31},
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_Reg, PPC_R0},
    // (TW 16, gprc:$rA, gprc:$rB) - 1416
    {AliasPatternCond_K_Imm, (uint32_t)16},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 4, gprc:$rA, gprc:$rB) - 1419
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 8, gprc:$rA, gprc:$rB) - 1422
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 24, gprc:$rA, gprc:$rB) - 1425
    {AliasPatternCond_K_Imm, (uint32_t)24},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 2, gprc:$rA, gprc:$rB) - 1428
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 1, gprc:$rA, gprc:$rB) - 1431
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TW 31, gprc:$rA, gprc:$rB) - 1434
    {AliasPatternCond_K_Imm, (uint32_t)31},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 16, gprc:$rA, s16imm:$imm) - 1437
    {AliasPatternCond_K_Imm, (uint32_t)16},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 4, gprc:$rA, s16imm:$imm) - 1439
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 8, gprc:$rA, s16imm:$imm) - 1441
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 24, gprc:$rA, s16imm:$imm) - 1443
    {AliasPatternCond_K_Imm, (uint32_t)24},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 2, gprc:$rA, s16imm:$imm) - 1445
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 1, gprc:$rA, s16imm:$imm) - 1447
    {AliasPatternCond_K_Imm, (uint32_t)1},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (TWI 31, gprc:$rA, s16imm:$imm) - 1449
    {AliasPatternCond_K_Imm, (uint32_t)31},
    {AliasPatternCond_K_RegClass, PPC_GPRCRegClassID},
    // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA) - 1451
    {AliasPatternCond_K_RegClass, PPC_VRRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VRRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA) - 1454
    {AliasPatternCond_K_RegClass, PPC_VRRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VRRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (WAIT 0) - 1457
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (WAIT 1) - 1458
    {AliasPatternCond_K_Imm, (uint32_t)1},
    // (WAIT 2) - 1459
    {AliasPatternCond_K_Imm, (uint32_t)2},
    // (XORI R0, R0, 0) - 1460
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_Reg, PPC_R0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (XORI8 X0, X0, 0) - 1463
    {AliasPatternCond_K_Reg, PPC_X0},
    {AliasPatternCond_K_Reg, PPC_X0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB) - 1466
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB) - 1469
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0) - 1472
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3) - 1479
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0) - 1486
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3) - 1490
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2) - 1494
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_TiedReg, 1},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0) - 1498
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSFRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3) - 1504
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSFRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_OrNegFeature, PPC_AIXOS},
    {AliasPatternCond_K_OrFeature, PPC_FeatureModernAIXAs},
    {AliasPatternCond_K_EndOrFeatures, 0},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2) - 1510
    {AliasPatternCond_K_RegClass, PPC_VSRCRegClassID},
    {AliasPatternCond_K_RegClass, PPC_VSFRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    // (gBC 12, crbitrc:$bi, condbrtarget:$dst) - 1513
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 4, crbitrc:$bi, condbrtarget:$dst) - 1515
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 14, crbitrc:$bi, condbrtarget:$dst) - 1517
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 6, crbitrc:$bi, condbrtarget:$dst) - 1519
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 15, crbitrc:$bi, condbrtarget:$dst) - 1521
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 7, crbitrc:$bi, condbrtarget:$dst) - 1523
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 8, crbitrc:$bi, condbrtarget:$dst) - 1525
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 0, crbitrc:$bi, condbrtarget:$dst) - 1527
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 10, crbitrc:$bi, condbrtarget:$dst) - 1529
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBC 2, crbitrc:$bi, condbrtarget:$dst) - 1531
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst) - 1533
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst) - 1535
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst) - 1537
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst) - 1539
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst) - 1541
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst) - 1543
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst) - 1545
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst) - 1547
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst) - 1549
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst) - 1551
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1553
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1556
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCCTR u5imm:$bo, crbitrc:$bi, 0) - 1559
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 12, crbitrc:$bi, 0) - 1562
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 4, crbitrc:$bi, 0) - 1565
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 14, crbitrc:$bi, 0) - 1568
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 6, crbitrc:$bi, 0) - 1571
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 15, crbitrc:$bi, 0) - 1574
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTR 7, crbitrc:$bi, 0) - 1577
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0) - 1580
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 12, crbitrc:$bi, 0) - 1583
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 4, crbitrc:$bi, 0) - 1586
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 14, crbitrc:$bi, 0) - 1589
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 6, crbitrc:$bi, 0) - 1592
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 15, crbitrc:$bi, 0) - 1595
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCCTRL 7, crbitrc:$bi, 0) - 1598
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCL 12, crbitrc:$bi, condbrtarget:$dst) - 1601
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 4, crbitrc:$bi, condbrtarget:$dst) - 1603
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 14, crbitrc:$bi, condbrtarget:$dst) - 1605
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 6, crbitrc:$bi, condbrtarget:$dst) - 1607
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 15, crbitrc:$bi, condbrtarget:$dst) - 1609
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 7, crbitrc:$bi, condbrtarget:$dst) - 1611
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 8, crbitrc:$bi, condbrtarget:$dst) - 1613
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 0, crbitrc:$bi, condbrtarget:$dst) - 1615
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 10, crbitrc:$bi, condbrtarget:$dst) - 1617
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCL 2, crbitrc:$bi, condbrtarget:$dst) - 1619
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst) - 1621
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst) - 1623
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst) - 1625
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst) - 1627
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst) - 1629
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst) - 1631
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst) - 1633
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst) - 1635
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst) - 1637
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst) - 1639
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1641
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1644
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLR u5imm:$bo, crbitrc:$bi, 0) - 1647
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 12, crbitrc:$bi, 0) - 1650
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 4, crbitrc:$bi, 0) - 1653
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 14, crbitrc:$bi, 0) - 1656
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 6, crbitrc:$bi, 0) - 1659
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 15, crbitrc:$bi, 0) - 1662
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 7, crbitrc:$bi, 0) - 1665
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 8, crbitrc:$bi, 0) - 1668
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 0, crbitrc:$bi, 0) - 1671
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 10, crbitrc:$bi, 0) - 1674
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLR 2, crbitrc:$bi, 0) - 1677
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL u5imm:$bo, crbitrc:$bi, 0) - 1680
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 12, crbitrc:$bi, 0) - 1683
    {AliasPatternCond_K_Imm, (uint32_t)12},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 4, crbitrc:$bi, 0) - 1686
    {AliasPatternCond_K_Imm, (uint32_t)4},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 14, crbitrc:$bi, 0) - 1689
    {AliasPatternCond_K_Imm, (uint32_t)14},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 6, crbitrc:$bi, 0) - 1692
    {AliasPatternCond_K_Imm, (uint32_t)6},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 15, crbitrc:$bi, 0) - 1695
    {AliasPatternCond_K_Imm, (uint32_t)15},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 7, crbitrc:$bi, 0) - 1698
    {AliasPatternCond_K_Imm, (uint32_t)7},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 8, crbitrc:$bi, 0) - 1701
    {AliasPatternCond_K_Imm, (uint32_t)8},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 0, crbitrc:$bi, 0) - 1704
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 10, crbitrc:$bi, 0) - 1707
    {AliasPatternCond_K_Imm, (uint32_t)10},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLRL 2, crbitrc:$bi, 0) - 1710
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1713
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1716
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1719
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)3},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
    // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1722
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)2},
    {AliasPatternCond_K_RegClass, PPC_CRBITRCRegClassID},
  };

  static const char *AsmStrings[] = {
    /* 0 */ "li $\x01, $\xFF\x03\x01\0"
    /* 12 */ "lis $\x01, $\xFF\x03\x01\0"
    /* 25 */ "lnia $\x01\0"
    /* 33 */ "blt $\x02, $\xFF\x03\x02\0"
    /* 46 */ "blt $\xFF\x03\x02\0"
    /* 55 */ "blt- $\x02, $\xFF\x03\x02\0"
    /* 69 */ "blt- $\xFF\x03\x02\0"
    /* 79 */ "blt+ $\x02, $\xFF\x03\x02\0"
    /* 93 */ "blt+ $\xFF\x03\x02\0"
    /* 103 */ "bgt $\x02, $\xFF\x03\x02\0"
    /* 116 */ "bgt $\xFF\x03\x02\0"
    /* 125 */ "bgt- $\x02, $\xFF\x03\x02\0"
    /* 139 */ "bgt- $\xFF\x03\x02\0"
    /* 149 */ "bgt+ $\x02, $\xFF\x03\x02\0"
    /* 163 */ "bgt+ $\xFF\x03\x02\0"
    /* 173 */ "beq $\x02, $\xFF\x03\x02\0"
    /* 186 */ "beq $\xFF\x03\x02\0"
    /* 195 */ "beq- $\x02, $\xFF\x03\x02\0"
    /* 209 */ "beq- $\xFF\x03\x02\0"
    /* 219 */ "beq+ $\x02, $\xFF\x03\x02\0"
    /* 233 */ "beq+ $\xFF\x03\x02\0"
    /* 243 */ "bne $\x02, $\xFF\x03\x02\0"
    /* 256 */ "bne $\xFF\x03\x02\0"
    /* 265 */ "bne- $\x02, $\xFF\x03\x02\0"
    /* 279 */ "bne- $\xFF\x03\x02\0"
    /* 289 */ "bne+ $\x02, $\xFF\x03\x02\0"
    /* 303 */ "bne+ $\xFF\x03\x02\0"
    /* 313 */ "blta $\x02, $\xFF\x03\x03\0"
    /* 327 */ "blta $\xFF\x03\x03\0"
    /* 337 */ "blta- $\x02, $\xFF\x03\x03\0"
    /* 352 */ "blta- $\xFF\x03\x03\0"
    /* 363 */ "blta+ $\x02, $\xFF\x03\x03\0"
    /* 378 */ "blta+ $\xFF\x03\x03\0"
    /* 389 */ "bgta $\x02, $\xFF\x03\x03\0"
    /* 403 */ "bgta $\xFF\x03\x03\0"
    /* 413 */ "bgta- $\x02, $\xFF\x03\x03\0"
    /* 428 */ "bgta- $\xFF\x03\x03\0"
    /* 439 */ "bgta+ $\x02, $\xFF\x03\x03\0"
    /* 454 */ "bgta+ $\xFF\x03\x03\0"
    /* 465 */ "beqa $\x02, $\xFF\x03\x03\0"
    /* 479 */ "beqa $\xFF\x03\x03\0"
    /* 489 */ "beqa- $\x02, $\xFF\x03\x03\0"
    /* 504 */ "beqa- $\xFF\x03\x03\0"
    /* 515 */ "beqa+ $\x02, $\xFF\x03\x03\0"
    /* 530 */ "beqa+ $\xFF\x03\x03\0"
    /* 541 */ "bnea $\x02, $\xFF\x03\x03\0"
    /* 555 */ "bnea $\xFF\x03\x03\0"
    /* 565 */ "bnea- $\x02, $\xFF\x03\x03\0"
    /* 580 */ "bnea- $\xFF\x03\x03\0"
    /* 591 */ "bnea+ $\x02, $\xFF\x03\x03\0"
    /* 606 */ "bnea+ $\xFF\x03\x03\0"
    /* 617 */ "bltctr $\x02\0"
    /* 627 */ "bltctr\0"
    /* 634 */ "bltctr- $\x02\0"
    /* 645 */ "bltctr-\0"
    /* 653 */ "bltctr+ $\x02\0"
    /* 664 */ "bltctr+\0"
    /* 672 */ "bgtctr $\x02\0"
    /* 682 */ "bgtctr\0"
    /* 689 */ "bgtctr- $\x02\0"
    /* 700 */ "bgtctr-\0"
    /* 708 */ "bgtctr+ $\x02\0"
    /* 719 */ "bgtctr+\0"
    /* 727 */ "beqctr $\x02\0"
    /* 737 */ "beqctr\0"
    /* 744 */ "beqctr- $\x02\0"
    /* 755 */ "beqctr-\0"
    /* 763 */ "beqctr+ $\x02\0"
    /* 774 */ "beqctr+\0"
    /* 782 */ "bnectr $\x02\0"
    /* 792 */ "bnectr\0"
    /* 799 */ "bnectr- $\x02\0"
    /* 810 */ "bnectr-\0"
    /* 818 */ "bnectr+ $\x02\0"
    /* 829 */ "bnectr+\0"
    /* 837 */ "bltctrl $\x02\0"
    /* 848 */ "bltctrl\0"
    /* 856 */ "bltctrl- $\x02\0"
    /* 868 */ "bltctrl-\0"
    /* 877 */ "bltctrl+ $\x02\0"
    /* 889 */ "bltctrl+\0"
    /* 898 */ "bgtctrl $\x02\0"
    /* 909 */ "bgtctrl\0"
    /* 917 */ "bgtctrl- $\x02\0"
    /* 929 */ "bgtctrl-\0"
    /* 938 */ "bgtctrl+ $\x02\0"
    /* 950 */ "bgtctrl+\0"
    /* 959 */ "beqctrl $\x02\0"
    /* 970 */ "beqctrl\0"
    /* 978 */ "beqctrl- $\x02\0"
    /* 990 */ "beqctrl-\0"
    /* 999 */ "beqctrl+ $\x02\0"
    /* 1011 */ "beqctrl+\0"
    /* 1020 */ "bnectrl $\x02\0"
    /* 1031 */ "bnectrl\0"
    /* 1039 */ "bnectrl- $\x02\0"
    /* 1051 */ "bnectrl-\0"
    /* 1060 */ "bnectrl+ $\x02\0"
    /* 1072 */ "bnectrl+\0"
    /* 1081 */ "bltl $\x02, $\xFF\x03\x02\0"
    /* 1095 */ "bltl $\xFF\x03\x02\0"
    /* 1105 */ "bltl- $\x02, $\xFF\x03\x02\0"
    /* 1120 */ "bltl- $\xFF\x03\x02\0"
    /* 1131 */ "bltl+ $\x02, $\xFF\x03\x02\0"
    /* 1146 */ "bltl+ $\xFF\x03\x02\0"
    /* 1157 */ "bgtl $\x02, $\xFF\x03\x02\0"
    /* 1171 */ "bgtl $\xFF\x03\x02\0"
    /* 1181 */ "bgtl- $\x02, $\xFF\x03\x02\0"
    /* 1196 */ "bgtl- $\xFF\x03\x02\0"
    /* 1207 */ "bgtl+ $\x02, $\xFF\x03\x02\0"
    /* 1222 */ "bgtl+ $\xFF\x03\x02\0"
    /* 1233 */ "beql $\x02, $\xFF\x03\x02\0"
    /* 1247 */ "beql $\xFF\x03\x02\0"
    /* 1257 */ "beql- $\x02, $\xFF\x03\x02\0"
    /* 1272 */ "beql- $\xFF\x03\x02\0"
    /* 1283 */ "beql+ $\x02, $\xFF\x03\x02\0"
    /* 1298 */ "beql+ $\xFF\x03\x02\0"
    /* 1309 */ "bnel $\x02, $\xFF\x03\x02\0"
    /* 1323 */ "bnel $\xFF\x03\x02\0"
    /* 1333 */ "bnel- $\x02, $\xFF\x03\x02\0"
    /* 1348 */ "bnel- $\xFF\x03\x02\0"
    /* 1359 */ "bnel+ $\x02, $\xFF\x03\x02\0"
    /* 1374 */ "bnel+ $\xFF\x03\x02\0"
    /* 1385 */ "bltla $\x02, $\xFF\x03\x03\0"
    /* 1400 */ "bltla $\xFF\x03\x03\0"
    /* 1411 */ "bltla- $\x02, $\xFF\x03\x03\0"
    /* 1427 */ "bltla- $\xFF\x03\x03\0"
    /* 1439 */ "bltla+ $\x02, $\xFF\x03\x03\0"
    /* 1455 */ "bltla+ $\xFF\x03\x03\0"
    /* 1467 */ "bgtla $\x02, $\xFF\x03\x03\0"
    /* 1482 */ "bgtla $\xFF\x03\x03\0"
    /* 1493 */ "bgtla- $\x02, $\xFF\x03\x03\0"
    /* 1509 */ "bgtla- $\xFF\x03\x03\0"
    /* 1521 */ "bgtla+ $\x02, $\xFF\x03\x03\0"
    /* 1537 */ "bgtla+ $\xFF\x03\x03\0"
    /* 1549 */ "beqla $\x02, $\xFF\x03\x03\0"
    /* 1564 */ "beqla $\xFF\x03\x03\0"
    /* 1575 */ "beqla- $\x02, $\xFF\x03\x03\0"
    /* 1591 */ "beqla- $\xFF\x03\x03\0"
    /* 1603 */ "beqla+ $\x02, $\xFF\x03\x03\0"
    /* 1619 */ "beqla+ $\xFF\x03\x03\0"
    /* 1631 */ "bnela $\x02, $\xFF\x03\x03\0"
    /* 1646 */ "bnela $\xFF\x03\x03\0"
    /* 1657 */ "bnela- $\x02, $\xFF\x03\x03\0"
    /* 1673 */ "bnela- $\xFF\x03\x03\0"
    /* 1685 */ "bnela+ $\x02, $\xFF\x03\x03\0"
    /* 1701 */ "bnela+ $\xFF\x03\x03\0"
    /* 1713 */ "bltlr $\x02\0"
    /* 1722 */ "bltlr\0"
    /* 1728 */ "bltlr- $\x02\0"
    /* 1738 */ "bltlr-\0"
    /* 1745 */ "bltlr+ $\x02\0"
    /* 1755 */ "bltlr+\0"
    /* 1762 */ "bgtlr $\x02\0"
    /* 1771 */ "bgtlr\0"
    /* 1777 */ "bgtlr- $\x02\0"
    /* 1787 */ "bgtlr-\0"
    /* 1794 */ "bgtlr+ $\x02\0"
    /* 1804 */ "bgtlr+\0"
    /* 1811 */ "beqlr $\x02\0"
    /* 1820 */ "beqlr\0"
    /* 1826 */ "beqlr- $\x02\0"
    /* 1836 */ "beqlr-\0"
    /* 1843 */ "beqlr+ $\x02\0"
    /* 1853 */ "beqlr+\0"
    /* 1860 */ "bnelr $\x02\0"
    /* 1869 */ "bnelr\0"
    /* 1875 */ "bnelr- $\x02\0"
    /* 1885 */ "bnelr-\0"
    /* 1892 */ "bnelr+ $\x02\0"
    /* 1902 */ "bnelr+\0"
    /* 1909 */ "bltlrl $\x02\0"
    /* 1919 */ "bltlrl\0"
    /* 1926 */ "bltlrl- $\x02\0"
    /* 1937 */ "bltlrl-\0"
    /* 1945 */ "bltlrl+ $\x02\0"
    /* 1956 */ "bltlrl+\0"
    /* 1964 */ "bgtlrl $\x02\0"
    /* 1974 */ "bgtlrl\0"
    /* 1981 */ "bgtlrl- $\x02\0"
    /* 1992 */ "bgtlrl-\0"
    /* 2000 */ "bgtlrl+ $\x02\0"
    /* 2011 */ "bgtlrl+\0"
    /* 2019 */ "beqlrl $\x02\0"
    /* 2029 */ "beqlrl\0"
    /* 2036 */ "beqlrl- $\x02\0"
    /* 2047 */ "beqlrl-\0"
    /* 2055 */ "beqlrl+ $\x02\0"
    /* 2066 */ "beqlrl+\0"
    /* 2074 */ "bnelrl $\x02\0"
    /* 2084 */ "bnelrl\0"
    /* 2091 */ "bnelrl- $\x02\0"
    /* 2102 */ "bnelrl-\0"
    /* 2110 */ "bnelrl+ $\x02\0"
    /* 2121 */ "bnelrl+\0"
    /* 2129 */ "cmpd $\x02, $\x03\0"
    /* 2141 */ "cmpdi $\x02, $\xFF\x03\x01\0"
    /* 2156 */ "cmpld $\x02, $\x03\0"
    /* 2169 */ "cmpldi $\x02, $\xFF\x03\x04\0"
    /* 2185 */ "cmplw $\x02, $\x03\0"
    /* 2198 */ "cmplwi $\x02, $\xFF\x03\x04\0"
    /* 2214 */ "cmpw $\x02, $\x03\0"
    /* 2226 */ "cmpwi $\x02, $\xFF\x03\x01\0"
    /* 2241 */ "cntlzw $\x01, $\x02\0"
    /* 2255 */ "cntlzw. $\x01, $\x02\0"
    /* 2270 */ "paste. $\x01, $\x02\0"
    /* 2284 */ "crset $\x01\0"
    /* 2293 */ "crnot $\x01, $\x02\0"
    /* 2306 */ "crmove $\x01, $\x02\0"
    /* 2320 */ "crclr $\x01\0"
    /* 2329 */ "isellt $\x01, $\x02, $\x03\0"
    /* 2347 */ "iselgt $\x01, $\x02, $\x03\0"
    /* 2365 */ "iseleq $\x01, $\x02, $\x03\0"
    /* 2383 */ "mbar\0"
    /* 2388 */ "mfbr0 $\x01\0"
    /* 2397 */ "mfbr1 $\x01\0"
    /* 2406 */ "mfbr2 $\x01\0"
    /* 2415 */ "mfbr3 $\x01\0"
    /* 2424 */ "mfbr4 $\x01\0"
    /* 2433 */ "mfbr5 $\x01\0"
    /* 2442 */ "mfbr6 $\x01\0"
    /* 2451 */ "mfbr7 $\x01\0"
    /* 2460 */ "mfxer $\x01\0"
    /* 2469 */ "mfudscr $\x01\0"
    /* 2480 */ "mfrtcu $\x01\0"
    /* 2490 */ "mfrtcl $\x01\0"
    /* 2500 */ "mflr $\x01\0"
    /* 2508 */ "mfctr $\x01\0"
    /* 2517 */ "mfuamr $\x01\0"
    /* 2527 */ "mfdscr $\x01\0"
    /* 2537 */ "mfdsisr $\x01\0"
    /* 2548 */ "mfdar $\x01\0"
    /* 2557 */ "mfdec $\x01\0"
    /* 2566 */ "mfsdr1 $\x01\0"
    /* 2576 */ "mfsrr0 $\x01\0"
    /* 2586 */ "mfsrr1 $\x01\0"
    /* 2596 */ "mfcfar $\x01\0"
    /* 2606 */ "mfamr $\x01\0"
    /* 2615 */ "mfpid $\x01\0"
    /* 2624 */ "mfasr $\x01\0"
    /* 2633 */ "mfpvr $\x01\0"
    /* 2642 */ "mfspefscr $\x01\0"
    /* 2655 */ "mfdbatu $\x01, 0\0"
    /* 2669 */ "mfdbatl $\x01, 0\0"
    /* 2683 */ "mfibatu $\x01, 0\0"
    /* 2697 */ "mfibatl $\x01, 0\0"
    /* 2711 */ "mfdbatu $\x01, 1\0"
    /* 2725 */ "mfdbatl $\x01, 1\0"
    /* 2739 */ "mfibatu $\x01, 1\0"
    /* 2753 */ "mfibatl $\x01, 1\0"
    /* 2767 */ "mfdbatu $\x01, 2\0"
    /* 2781 */ "mfdbatl $\x01, 2\0"
    /* 2795 */ "mfibatu $\x01, 2\0"
    /* 2809 */ "mfibatl $\x01, 2\0"
    /* 2823 */ "mfdbatu $\x01, 3\0"
    /* 2837 */ "mfdbatl $\x01, 3\0"
    /* 2851 */ "mfibatu $\x01, 3\0"
    /* 2865 */ "mfibatl $\x01, 3\0"
    /* 2879 */ "mfppr $\x01\0"
    /* 2888 */ "mfesr $\x01\0"
    /* 2897 */ "mfdear $\x01\0"
    /* 2907 */ "mftcr $\x01\0"
    /* 2916 */ "mftbhi $\x01\0"
    /* 2926 */ "mftblo $\x01\0"
    /* 2936 */ "mfsrr2 $\x01\0"
    /* 2946 */ "mfsrr3 $\x01\0"
    /* 2956 */ "mfdccr $\x01\0"
    /* 2966 */ "mficcr $\x01\0"
    /* 2976 */ "mftbu $\x01\0"
    /* 2985 */ "mfvrsave $\x01\0"
    /* 2997 */ "mffprd $\x01, $\x02\0"
    /* 3011 */ "mffprwz $\x01, $\x02\0"
    /* 3026 */ "mtcr $\x02\0"
    /* 3034 */ "mtbr0 $\x01\0"
    /* 3043 */ "mtbr1 $\x01\0"
    /* 3052 */ "mtbr2 $\x01\0"
    /* 3061 */ "mtbr3 $\x01\0"
    /* 3070 */ "mtbr4 $\x01\0"
    /* 3079 */ "mtbr5 $\x01\0"
    /* 3088 */ "mtbr6 $\x01\0"
    /* 3097 */ "mtbr7 $\x01\0"
    /* 3106 */ "mtfsf $\x01, $\x02\0"
    /* 3119 */ "mtfsfi $\xFF\x01\x05, $\xFF\x02\x06\0"
    /* 3137 */ "mtfsfi. $\xFF\x01\x05, $\xFF\x02\x06\0"
    /* 3156 */ "mtfsf. $\x01, $\x02\0"
    /* 3170 */ "mtmsr $\x01\0"
    /* 3179 */ "mtmsrd $\x01\0"
    /* 3189 */ "mtxer $\x02\0"
    /* 3198 */ "mtudscr $\x02\0"
    /* 3209 */ "mtlr $\x02\0"
    /* 3217 */ "mtctr $\x02\0"
    /* 3226 */ "mtuamr $\x02\0"
    /* 3236 */ "mtdscr $\x02\0"
    /* 3246 */ "mtdsisr $\x02\0"
    /* 3257 */ "mtdar $\x02\0"
    /* 3266 */ "mtdec $\x02\0"
    /* 3275 */ "mtsdr1 $\x02\0"
    /* 3285 */ "mtsrr0 $\x02\0"
    /* 3295 */ "mtsrr1 $\x02\0"
    /* 3305 */ "mtcfar $\x02\0"
    /* 3315 */ "mtamr $\x02\0"
    /* 3324 */ "mtpid $\x02\0"
    /* 3333 */ "mtasr $\x02\0"
    /* 3342 */ "mttbl $\x02\0"
    /* 3351 */ "mttbu $\x02\0"
    /* 3360 */ "mtspefscr $\x02\0"
    /* 3373 */ "mtdbatu 0, $\x02\0"
    /* 3387 */ "mtdbatl 0, $\x02\0"
    /* 3401 */ "mtibatu 0, $\x02\0"
    /* 3415 */ "mtibatl 0, $\x02\0"
    /* 3429 */ "mtdbatu 1, $\x02\0"
    /* 3443 */ "mtdbatl 1, $\x02\0"
    /* 3457 */ "mtibatu 1, $\x02\0"
    /* 3471 */ "mtibatl 1, $\x02\0"
    /* 3485 */ "mtdbatu 2, $\x02\0"
    /* 3499 */ "mtdbatl 2, $\x02\0"
    /* 3513 */ "mtibatu 2, $\x02\0"
    /* 3527 */ "mtibatl 2, $\x02\0"
    /* 3541 */ "mtdbatu 3, $\x02\0"
    /* 3555 */ "mtdbatl 3, $\x02\0"
    /* 3569 */ "mtibatu 3, $\x02\0"
    /* 3583 */ "mtibatl 3, $\x02\0"
    /* 3597 */ "mtppr $\x02\0"
    /* 3606 */ "mtesr $\x02\0"
    /* 3615 */ "mtdear $\x02\0"
    /* 3625 */ "mttcr $\x02\0"
    /* 3634 */ "mttbhi $\x02\0"
    /* 3644 */ "mttblo $\x02\0"
    /* 3654 */ "mtsrr2 $\x02\0"
    /* 3664 */ "mtsrr3 $\x02\0"
    /* 3674 */ "mtdccr $\x02\0"
    /* 3684 */ "mticcr $\x02\0"
    /* 3694 */ "mtvrsave $\x01\0"
    /* 3706 */ "mtfprd $\x01, $\x02\0"
    /* 3720 */ "mtfprwa $\x01, $\x02\0"
    /* 3735 */ "mtfprwz $\x01, $\x02\0"
    /* 3750 */ "not $\x01, $\x02\0"
    /* 3761 */ "not. $\x01, $\x02\0"
    /* 3773 */ "mr $\x01, $\x02\0"
    /* 3783 */ "mr. $\x01, $\x02\0"
    /* 3794 */ "nop\0"
    /* 3798 */ "rfebb\0"
    /* 3804 */ "rotld $\x01, $\x02, $\x03\0"
    /* 3821 */ "rotld. $\x01, $\x02, $\x03\0"
    /* 3839 */ "rotldi $\x01, $\x02, $\xFF\x03\x07\0"
    /* 3859 */ "clrldi $\x01, $\x02, $\xFF\x04\x07\0"
    /* 3879 */ "rotldi. $\x01, $\x02, $\xFF\x03\x07\0"
    /* 3900 */ "clrldi. $\x01, $\x02, $\xFF\x04\x07\0"
    /* 3921 */ "rotlwi $\x01, $\x02, $\xFF\x03\x08\0"
    /* 3941 */ "clrlwi $\x01, $\x02, $\xFF\x04\x08\0"
    /* 3961 */ "rotlwi. $\x01, $\x02, $\xFF\x03\x08\0"
    /* 3982 */ "clrlwi. $\x01, $\x02, $\xFF\x04\x08\0"
    /* 4003 */ "rotlw $\x01, $\x02, $\x03\0"
    /* 4020 */ "rotlw. $\x01, $\x02, $\x03\0"
    /* 4038 */ "sc\0"
    /* 4041 */ "sub $\x01, $\x03, $\x02\0"
    /* 4056 */ "sub. $\x01, $\x03, $\x02\0"
    /* 4072 */ "subc $\x01, $\x03, $\x02\0"
    /* 4088 */ "subc. $\x01, $\x03, $\x02\0"
    /* 4105 */ "sync\0"
    /* 4110 */ "lwsync\0"
    /* 4117 */ "ptesync\0"
    /* 4125 */ "tdlt $\x02, $\x03\0"
    /* 4137 */ "tdeq $\x02, $\x03\0"
    /* 4149 */ "tdgt $\x02, $\x03\0"
    /* 4161 */ "tdne $\x02, $\x03\0"
    /* 4173 */ "tdllt $\x02, $\x03\0"
    /* 4186 */ "tdlgt $\x02, $\x03\0"
    /* 4199 */ "tdu $\x02, $\x03\0"
    /* 4210 */ "tdlti $\x02, $\xFF\x03\x01\0"
    /* 4225 */ "tdeqi $\x02, $\xFF\x03\x01\0"
    /* 4240 */ "tdgti $\x02, $\xFF\x03\x01\0"
    /* 4255 */ "tdnei $\x02, $\xFF\x03\x01\0"
    /* 4270 */ "tdllti $\x02, $\xFF\x03\x01\0"
    /* 4286 */ "tdlgti $\x02, $\xFF\x03\x01\0"
    /* 4302 */ "tdui $\x02, $\xFF\x03\x01\0"
    /* 4316 */ "tend.\0"
    /* 4322 */ "tendall.\0"
    /* 4331 */ "tlbie $\x02\0"
    /* 4340 */ "tlbrehi $\x01, $\x02\0"
    /* 4355 */ "tlbrelo $\x01, $\x02\0"
    /* 4370 */ "tlbwehi $\x01, $\x02\0"
    /* 4385 */ "tlbwelo $\x01, $\x02\0"
    /* 4400 */ "tsuspend.\0"
    /* 4410 */ "tresume.\0"
    /* 4419 */ "trap\0"
    /* 4424 */ "twlt $\x02, $\x03\0"
    /* 4436 */ "tweq $\x02, $\x03\0"
    /* 4448 */ "twgt $\x02, $\x03\0"
    /* 4460 */ "twne $\x02, $\x03\0"
    /* 4472 */ "twllt $\x02, $\x03\0"
    /* 4485 */ "twlgt $\x02, $\x03\0"
    /* 4498 */ "twu $\x02, $\x03\0"
    /* 4509 */ "twlti $\x02, $\xFF\x03\x01\0"
    /* 4524 */ "tweqi $\x02, $\xFF\x03\x01\0"
    /* 4539 */ "twgti $\x02, $\xFF\x03\x01\0"
    /* 4554 */ "twnei $\x02, $\xFF\x03\x01\0"
    /* 4569 */ "twllti $\x02, $\xFF\x03\x01\0"
    /* 4585 */ "twlgti $\x02, $\xFF\x03\x01\0"
    /* 4601 */ "twui $\x02, $\xFF\x03\x01\0"
    /* 4615 */ "vnot $\x01, $\x02\0"
    /* 4627 */ "vmr $\x01, $\x02\0"
    /* 4638 */ "wait\0"
    /* 4643 */ "waitrsv\0"
    /* 4651 */ "waitimpl\0"
    /* 4660 */ "xnop\0"
    /* 4665 */ "xvmovdp $\x01, $\x02\0"
    /* 4680 */ "xvmovsp $\x01, $\x02\0"
    /* 4695 */ "xxspltd $\x01, $\x02, 0\0"
    /* 4713 */ "xxspltd $\x01, $\x02, 1\0"
    /* 4731 */ "xxmrghd $\x01, $\x02, $\x03\0"
    /* 4750 */ "xxmrgld $\x01, $\x02, $\x03\0"
    /* 4769 */ "xxswapd $\x01, $\x02\0"
    /* 4784 */ "bt $\x02, $\xFF\x03\x02\0"
    /* 4796 */ "bf $\x02, $\xFF\x03\x02\0"
    /* 4808 */ "bt- $\x02, $\xFF\x03\x02\0"
    /* 4821 */ "bf- $\x02, $\xFF\x03\x02\0"
    /* 4834 */ "bt+ $\x02, $\xFF\x03\x02\0"
    /* 4847 */ "bf+ $\x02, $\xFF\x03\x02\0"
    /* 4860 */ "bdnzt $\x02, $\xFF\x03\x02\0"
    /* 4875 */ "bdnzf $\x02, $\xFF\x03\x02\0"
    /* 4890 */ "bdzt $\x02, $\xFF\x03\x02\0"
    /* 4904 */ "bdzf $\x02, $\xFF\x03\x02\0"
    /* 4918 */ "bta $\x02, $\xFF\x03\x03\0"
    /* 4931 */ "bfa $\x02, $\xFF\x03\x03\0"
    /* 4944 */ "bta- $\x02, $\xFF\x03\x03\0"
    /* 4958 */ "bfa- $\x02, $\xFF\x03\x03\0"
    /* 4972 */ "bta+ $\x02, $\xFF\x03\x03\0"
    /* 4986 */ "bfa+ $\x02, $\xFF\x03\x03\0"
    /* 5000 */ "bdnzta $\x02, $\xFF\x03\x03\0"
    /* 5016 */ "bdnzfa $\x02, $\xFF\x03\x03\0"
    /* 5032 */ "bdzta $\x02, $\xFF\x03\x03\0"
    /* 5047 */ "bdzfa $\x02, $\xFF\x03\x03\0"
    /* 5062 */ "bca+ $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5082 */ "bca- $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5102 */ "bcctr $\xFF\x01\x08, $\x02\0"
    /* 5117 */ "btctr $\x02\0"
    /* 5126 */ "bfctr $\x02\0"
    /* 5135 */ "btctr- $\x02\0"
    /* 5145 */ "bfctr- $\x02\0"
    /* 5155 */ "btctr+ $\x02\0"
    /* 5165 */ "bfctr+ $\x02\0"
    /* 5175 */ "bcctrl $\xFF\x01\x08, $\x02\0"
    /* 5191 */ "btctrl $\x02\0"
    /* 5201 */ "bfctrl $\x02\0"
    /* 5211 */ "btctrl- $\x02\0"
    /* 5222 */ "bfctrl- $\x02\0"
    /* 5233 */ "btctrl+ $\x02\0"
    /* 5244 */ "bfctrl+ $\x02\0"
    /* 5255 */ "btl $\x02, $\xFF\x03\x02\0"
    /* 5268 */ "bfl $\x02, $\xFF\x03\x02\0"
    /* 5281 */ "btl- $\x02, $\xFF\x03\x02\0"
    /* 5295 */ "bfl- $\x02, $\xFF\x03\x02\0"
    /* 5309 */ "btl+ $\x02, $\xFF\x03\x02\0"
    /* 5323 */ "bfl+ $\x02, $\xFF\x03\x02\0"
    /* 5337 */ "bdnztl $\x02, $\xFF\x03\x02\0"
    /* 5353 */ "bdnzfl $\x02, $\xFF\x03\x02\0"
    /* 5369 */ "bdztl $\x02, $\xFF\x03\x02\0"
    /* 5384 */ "bdzfl $\x02, $\xFF\x03\x02\0"
    /* 5399 */ "btla $\x02, $\xFF\x03\x03\0"
    /* 5413 */ "bfla $\x02, $\xFF\x03\x03\0"
    /* 5427 */ "btla- $\x02, $\xFF\x03\x03\0"
    /* 5442 */ "bfla- $\x02, $\xFF\x03\x03\0"
    /* 5457 */ "btla+ $\x02, $\xFF\x03\x03\0"
    /* 5472 */ "bfla+ $\x02, $\xFF\x03\x03\0"
    /* 5487 */ "bdnztla $\x02, $\xFF\x03\x03\0"
    /* 5504 */ "bdnzfla $\x02, $\xFF\x03\x03\0"
    /* 5521 */ "bdztla $\x02, $\xFF\x03\x03\0"
    /* 5537 */ "bdzfla $\x02, $\xFF\x03\x03\0"
    /* 5553 */ "bcla+ $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5574 */ "bcla- $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5595 */ "bclr $\xFF\x01\x08, $\x02\0"
    /* 5609 */ "btlr $\x02\0"
    /* 5617 */ "bflr $\x02\0"
    /* 5625 */ "btlr- $\x02\0"
    /* 5634 */ "bflr- $\x02\0"
    /* 5643 */ "btlr+ $\x02\0"
    /* 5652 */ "bflr+ $\x02\0"
    /* 5661 */ "bdnztlr $\x02\0"
    /* 5672 */ "bdnzflr $\x02\0"
    /* 5683 */ "bdztlr $\x02\0"
    /* 5693 */ "bdzflr $\x02\0"
    /* 5703 */ "bclrl $\xFF\x01\x08, $\x02\0"
    /* 5718 */ "btlrl $\x02\0"
    /* 5727 */ "bflrl $\x02\0"
    /* 5736 */ "btlrl- $\x02\0"
    /* 5746 */ "bflrl- $\x02\0"
    /* 5756 */ "btlrl+ $\x02\0"
    /* 5766 */ "bflrl+ $\x02\0"
    /* 5776 */ "bdnztlrl $\x02\0"
    /* 5788 */ "bdnzflrl $\x02\0"
    /* 5800 */ "bdztlrl $\x02\0"
    /* 5811 */ "bdzflrl $\x02\0"
    /* 5822 */ "bcl+ $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5842 */ "bcl- $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5862 */ "bc+ $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
    /* 5881 */ "bc- $\xFF\x01\x08, $\x03, $\xFF\x04\x02\0"
  };

  const char *AsmString = MCInstPrinter_matchAliasPatterns(MI, OpToPatterns, Patterns, Conds, AsmStrings, 119);
  if (!AsmString) return false;

  char* tmpString = cs_strdup(AsmString);

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;

  tmpString[I] = 0;
  SStream_concat0(OS, tmpString);

  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      SStream_concat0(OS, "\t");
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, ((unsigned)AsmString[I++]) - 1, OS);
      } else {
        SStream_concat1(OS, *(tmpString + (I++)));
      }
    } while (AsmString[I] != '\0');
  }

  return tmpString;
}

void printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         SStream *OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
// printS16ImmOperand
  case 0:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
// printBranchOperand
  case 1:
    printBranchOperand(MI, OpIdx, OS);
    break;
// printAbsBranchOperand
  case 2:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
// printU16ImmOperand
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
// printU3ImmOperand
  case 4:
    printU3ImmOperand(MI, OpIdx, OS);
    break;
// printU4ImmOperand
  case 5:
    printU4ImmOperand(MI, OpIdx, OS);
    break;
// printU6ImmOperand
  case 6:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
// printU5ImmOperand
  case 7:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, MCOI_TIED_TO/*0*/ }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo10[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI_OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_UACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo58[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { PPC_SPILLTOVSRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC_SPILLTOVSRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { -1, 0, MCOI_OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo126[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, };
static const MCOperandInfo OperandInfo141[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, };
static const MCOperandInfo OperandInfo142[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo153[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, };
static const MCOperandInfo OperandInfo154[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo155[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo156[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, };
static const MCOperandInfo OperandInfo157[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*1*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo158[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo159[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo160[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo161[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo162[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo163[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo164[] = { { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo165[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo166[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo167[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo168[] = { { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo169[] = { { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo170[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo171[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo172[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo173[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo174[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo175[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo176[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo177[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo178[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo179[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo180[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo181[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRSAVERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo182[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo183[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo184[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo185[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo186[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo187[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo188[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo189[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo190[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo191[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo192[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo193[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo194[] = { { PPC_VRSAVERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo195[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo196[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo197[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo198[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo199[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo200[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo201[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo202[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo203[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo204[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo205[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo206[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo207[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo208[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo209[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo210[] = { { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo211[] = { { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo212[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo213[] = { { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo214[] = { { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo215[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo216[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo217[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo218[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo219[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo220[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo221[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo222[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo223[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo224[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*1*/ }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo225[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*1*/ }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo226[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo227[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo228[] = { { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo229[] = { { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo230[] = { { PPC_UACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo231[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo232[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo233[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo234[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo235[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo236[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo237[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo238[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo239[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo240[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo241[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo242[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo243[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo244[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo245[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo246[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo247[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo248[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo249[] = { { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo250[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo251[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRC_NOR0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo252[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RC_NOX0RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo253[] = { { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_SPERCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo254[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo255[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo256[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo257[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo258[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo259[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo260[] = { { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo261[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo262[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8pRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo263[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo264[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo265[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo266[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo267[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo268[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_F8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo269[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_MEMORY, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo270[] = { { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_UNKNOWN, 0 }, { PPC_F4RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, MCOI_TIED_TO/*0*/ }, { 0, 0|(1<<MCOI_LookupPtrRegClass), MCOI_OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo271[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo272[] = { { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo273[] = { { -1, 0, MCOI_OPERAND_PCREL, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo274[] = { { PPC_CTRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo275[] = { { PPC_CTRRC8RegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo276[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo277[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo278[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo279[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo280[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo281[] = { { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo282[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo283[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo284[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo285[] = { { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo286[] = { { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo287[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo288[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo289[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo290[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo291[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo292[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_GPRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo293[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo294[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo295[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo296[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo297[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo298[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo299[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo300[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo301[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo302[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo303[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo304[] = { { PPC_VFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo305[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo306[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo307[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_G8RCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo308[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo309[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo310[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo311[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo312[] = { { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo313[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo314[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo315[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo316[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo317[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo318[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo319[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo320[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_EARLY_CLOBBER }, { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo321[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRpRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo322[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo323[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo324[] = { { PPC_CRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo325[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo326[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo327[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo328[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo329[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VRRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo330[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo331[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo332[] = { { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo333[] = { { PPC_VSSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo334[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, };
static const MCOperandInfo OperandInfo335[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo336[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSFRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo337[] = { { PPC_ACCRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo338[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, MCOI_TIED_TO/*0*/ }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo339[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo340[] = { { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { PPC_VSRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo341[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo342[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo343[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo344[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo345[] = { { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI_OPERAND_IMMEDIATE, 0 }, { PPC_CRBITRCRegClassID, 0, MCOI_OPERAND_REGISTER, 0 }, { -1, 0, MCOI_OPERAND_PCREL, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 1,	OperandInfo2 },  // Inst #0 = PHI
  { 0,	NULL },  // Inst #1 = INLINEASM
  { 0,	NULL },  // Inst #2 = INLINEASM_BR
  { 1,	OperandInfo3 },  // Inst #3 = CFI_INSTRUCTION
  { 1,	OperandInfo3 },  // Inst #4 = EH_LABEL
  { 1,	OperandInfo3 },  // Inst #5 = GC_LABEL
  { 1,	OperandInfo3 },  // Inst #6 = ANNOTATION_LABEL
  { 0,	NULL },  // Inst #7 = KILL
  { 3,	OperandInfo4 },  // Inst #8 = EXTRACT_SUBREG
  { 4,	OperandInfo5 },  // Inst #9 = INSERT_SUBREG
  { 1,	OperandInfo2 },  // Inst #10 = IMPLICIT_DEF
  { 4,	OperandInfo6 },  // Inst #11 = SUBREG_TO_REG
  { 3,	OperandInfo4 },  // Inst #12 = COPY_TO_REGCLASS
  { 0,	NULL },  // Inst #13 = DBG_VALUE
  { 0,	NULL },  // Inst #14 = DBG_VALUE_LIST
  { 0,	NULL },  // Inst #15 = DBG_INSTR_REF
  { 0,	NULL },  // Inst #16 = DBG_PHI
  { 1,	OperandInfo2 },  // Inst #17 = DBG_LABEL
  { 2,	OperandInfo7 },  // Inst #18 = REG_SEQUENCE
  { 2,	OperandInfo7 },  // Inst #19 = COPY
  { 0,	NULL },  // Inst #20 = BUNDLE
  { 1,	OperandInfo3 },  // Inst #21 = LIFETIME_START
  { 1,	OperandInfo3 },  // Inst #22 = LIFETIME_END
  { 4,	OperandInfo8 },  // Inst #23 = PSEUDO_PROBE
  { 2,	OperandInfo9 },  // Inst #24 = ARITH_FENCE
  { 2,	OperandInfo10 },  // Inst #25 = STACKMAP
  { 0,	NULL },  // Inst #26 = FENTRY_CALL
  { 6,	OperandInfo11 },  // Inst #27 = PATCHPOINT
  { 1,	OperandInfo12 },  // Inst #28 = LOAD_STACK_GUARD
  { 1,	OperandInfo3 },  // Inst #29 = PREALLOCATED_SETUP
  { 3,	OperandInfo13 },  // Inst #30 = PREALLOCATED_ARG
  { 0,	NULL },  // Inst #31 = STATEPOINT
  { 2,	OperandInfo14 },  // Inst #32 = LOCAL_ESCAPE
  { 1,	OperandInfo2 },  // Inst #33 = FAULTING_OP
  { 0,	NULL },  // Inst #34 = PATCHABLE_OP
  { 0,	NULL },  // Inst #35 = PATCHABLE_FUNCTION_ENTER
  { 0,	NULL },  // Inst #36 = PATCHABLE_RET
  { 0,	NULL },  // Inst #37 = PATCHABLE_FUNCTION_EXIT
  { 0,	NULL },  // Inst #38 = PATCHABLE_TAIL_CALL
  { 2,	OperandInfo15 },  // Inst #39 = PATCHABLE_EVENT_CALL
  { 3,	OperandInfo16 },  // Inst #40 = PATCHABLE_TYPED_EVENT_CALL
  { 0,	NULL },  // Inst #41 = ICALL_BRANCH_FUNNEL
  { 3,	OperandInfo17 },  // Inst #42 = G_ASSERT_SEXT
  { 3,	OperandInfo17 },  // Inst #43 = G_ASSERT_ZEXT
  { 3,	OperandInfo18 },  // Inst #44 = G_ADD
  { 3,	OperandInfo18 },  // Inst #45 = G_SUB
  { 3,	OperandInfo18 },  // Inst #46 = G_MUL
  { 3,	OperandInfo18 },  // Inst #47 = G_SDIV
  { 3,	OperandInfo18 },  // Inst #48 = G_UDIV
  { 3,	OperandInfo18 },  // Inst #49 = G_SREM
  { 3,	OperandInfo18 },  // Inst #50 = G_UREM
  { 4,	OperandInfo19 },  // Inst #51 = G_SDIVREM
  { 4,	OperandInfo19 },  // Inst #52 = G_UDIVREM
  { 3,	OperandInfo18 },  // Inst #53 = G_AND
  { 3,	OperandInfo18 },  // Inst #54 = G_OR
  { 3,	OperandInfo18 },  // Inst #55 = G_XOR
  { 1,	OperandInfo20 },  // Inst #56 = G_IMPLICIT_DEF
  { 1,	OperandInfo20 },  // Inst #57 = G_PHI
  { 2,	OperandInfo21 },  // Inst #58 = G_FRAME_INDEX
  { 2,	OperandInfo21 },  // Inst #59 = G_GLOBAL_VALUE
  { 3,	OperandInfo22 },  // Inst #60 = G_EXTRACT
  { 2,	OperandInfo23 },  // Inst #61 = G_UNMERGE_VALUES
  { 4,	OperandInfo24 },  // Inst #62 = G_INSERT
  { 2,	OperandInfo23 },  // Inst #63 = G_MERGE_VALUES
  { 2,	OperandInfo23 },  // Inst #64 = G_BUILD_VECTOR
  { 2,	OperandInfo23 },  // Inst #65 = G_BUILD_VECTOR_TRUNC
  { 2,	OperandInfo23 },  // Inst #66 = G_CONCAT_VECTORS
  { 2,	OperandInfo23 },  // Inst #67 = G_PTRTOINT
  { 2,	OperandInfo23 },  // Inst #68 = G_INTTOPTR
  { 2,	OperandInfo23 },  // Inst #69 = G_BITCAST
  { 2,	OperandInfo25 },  // Inst #70 = G_FREEZE
  { 2,	OperandInfo25 },  // Inst #71 = G_INTRINSIC_TRUNC
  { 2,	OperandInfo25 },  // Inst #72 = G_INTRINSIC_ROUND
  { 2,	OperandInfo23 },  // Inst #73 = G_INTRINSIC_LRINT
  { 2,	OperandInfo25 },  // Inst #74 = G_INTRINSIC_ROUNDEVEN
  { 1,	OperandInfo20 },  // Inst #75 = G_READCYCLECOUNTER
  { 2,	OperandInfo23 },  // Inst #76 = G_LOAD
  { 2,	OperandInfo23 },  // Inst #77 = G_SEXTLOAD
  { 2,	OperandInfo23 },  // Inst #78 = G_ZEXTLOAD
  { 5,	OperandInfo26 },  // Inst #79 = G_INDEXED_LOAD
  { 5,	OperandInfo26 },  // Inst #80 = G_INDEXED_SEXTLOAD
  { 5,	OperandInfo26 },  // Inst #81 = G_INDEXED_ZEXTLOAD
  { 2,	OperandInfo23 },  // Inst #82 = G_STORE
  { 5,	OperandInfo27 },  // Inst #83 = G_INDEXED_STORE
  { 5,	OperandInfo28 },  // Inst #84 = G_ATOMIC_CMPXCHG_WITH_SUCCESS
  { 4,	OperandInfo29 },  // Inst #85 = G_ATOMIC_CMPXCHG
  { 3,	OperandInfo30 },  // Inst #86 = G_ATOMICRMW_XCHG
  { 3,	OperandInfo30 },  // Inst #87 = G_ATOMICRMW_ADD
  { 3,	OperandInfo30 },  // Inst #88 = G_ATOMICRMW_SUB
  { 3,	OperandInfo30 },  // Inst #89 = G_ATOMICRMW_AND
  { 3,	OperandInfo30 },  // Inst #90 = G_ATOMICRMW_NAND
  { 3,	OperandInfo30 },  // Inst #91 = G_ATOMICRMW_OR
  { 3,	OperandInfo30 },  // Inst #92 = G_ATOMICRMW_XOR
  { 3,	OperandInfo30 },  // Inst #93 = G_ATOMICRMW_MAX
  { 3,	OperandInfo30 },  // Inst #94 = G_ATOMICRMW_MIN
  { 3,	OperandInfo30 },  // Inst #95 = G_ATOMICRMW_UMAX
  { 3,	OperandInfo30 },  // Inst #96 = G_ATOMICRMW_UMIN
  { 3,	OperandInfo30 },  // Inst #97 = G_ATOMICRMW_FADD
  { 3,	OperandInfo30 },  // Inst #98 = G_ATOMICRMW_FSUB
  { 2,	OperandInfo10 },  // Inst #99 = G_FENCE
  { 2,	OperandInfo21 },  // Inst #100 = G_BRCOND
  { 1,	OperandInfo20 },  // Inst #101 = G_BRINDIRECT
  { 1,	OperandInfo2 },  // Inst #102 = G_INTRINSIC
  { 1,	OperandInfo2 },  // Inst #103 = G_INTRINSIC_W_SIDE_EFFECTS
  { 2,	OperandInfo23 },  // Inst #104 = G_ANYEXT
  { 2,	OperandInfo23 },  // Inst #105 = G_TRUNC
  { 2,	OperandInfo21 },  // Inst #106 = G_CONSTANT
  { 2,	OperandInfo21 },  // Inst #107 = G_FCONSTANT
  { 1,	OperandInfo20 },  // Inst #108 = G_VASTART
  { 3,	OperandInfo31 },  // Inst #109 = G_VAARG
  { 2,	OperandInfo23 },  // Inst #110 = G_SEXT
  { 3,	OperandInfo17 },  // Inst #111 = G_SEXT_INREG
  { 2,	OperandInfo23 },  // Inst #112 = G_ZEXT
  { 3,	OperandInfo32 },  // Inst #113 = G_SHL
  { 3,	OperandInfo32 },  // Inst #114 = G_LSHR
  { 3,	OperandInfo32 },  // Inst #115 = G_ASHR
  { 4,	OperandInfo33 },  // Inst #116 = G_FSHL
  { 4,	OperandInfo33 },  // Inst #117 = G_FSHR
  { 3,	OperandInfo32 },  // Inst #118 = G_ROTR
  { 3,	OperandInfo32 },  // Inst #119 = G_ROTL
  { 4,	OperandInfo34 },  // Inst #120 = G_ICMP
  { 4,	OperandInfo34 },  // Inst #121 = G_FCMP
  { 4,	OperandInfo29 },  // Inst #122 = G_SELECT
  { 4,	OperandInfo29 },  // Inst #123 = G_UADDO
  { 5,	OperandInfo35 },  // Inst #124 = G_UADDE
  { 4,	OperandInfo29 },  // Inst #125 = G_USUBO
  { 5,	OperandInfo35 },  // Inst #126 = G_USUBE
  { 4,	OperandInfo29 },  // Inst #127 = G_SADDO
  { 5,	OperandInfo35 },  // Inst #128 = G_SADDE
  { 4,	OperandInfo29 },  // Inst #129 = G_SSUBO
  { 5,	OperandInfo35 },  // Inst #130 = G_SSUBE
  { 4,	OperandInfo29 },  // Inst #131 = G_UMULO
  { 4,	OperandInfo29 },  // Inst #132 = G_SMULO
  { 3,	OperandInfo18 },  // Inst #133 = G_UMULH
  { 3,	OperandInfo18 },  // Inst #134 = G_SMULH
  { 3,	OperandInfo18 },  // Inst #135 = G_UADDSAT
  { 3,	OperandInfo18 },  // Inst #136 = G_SADDSAT
  { 3,	OperandInfo18 },  // Inst #137 = G_USUBSAT
  { 3,	OperandInfo18 },  // Inst #138 = G_SSUBSAT
  { 3,	OperandInfo32 },  // Inst #139 = G_USHLSAT
  { 3,	OperandInfo32 },  // Inst #140 = G_SSHLSAT
  { 4,	OperandInfo36 },  // Inst #141 = G_SMULFIX
  { 4,	OperandInfo36 },  // Inst #142 = G_UMULFIX
  { 4,	OperandInfo36 },  // Inst #143 = G_SMULFIXSAT
  { 4,	OperandInfo36 },  // Inst #144 = G_UMULFIXSAT
  { 4,	OperandInfo36 },  // Inst #145 = G_SDIVFIX
  { 4,	OperandInfo36 },  // Inst #146 = G_UDIVFIX
  { 4,	OperandInfo36 },  // Inst #147 = G_SDIVFIXSAT
  { 4,	OperandInfo36 },  // Inst #148 = G_UDIVFIXSAT
  { 3,	OperandInfo18 },  // Inst #149 = G_FADD
  { 3,	OperandInfo18 },  // Inst #150 = G_FSUB
  { 3,	OperandInfo18 },  // Inst #151 = G_FMUL
  { 4,	OperandInfo19 },  // Inst #152 = G_FMA
  { 4,	OperandInfo19 },  // Inst #153 = G_FMAD
  { 3,	OperandInfo18 },  // Inst #154 = G_FDIV
  { 3,	OperandInfo18 },  // Inst #155 = G_FREM
  { 3,	OperandInfo18 },  // Inst #156 = G_FPOW
  { 3,	OperandInfo32 },  // Inst #157 = G_FPOWI
  { 2,	OperandInfo25 },  // Inst #158 = G_FEXP
  { 2,	OperandInfo25 },  // Inst #159 = G_FEXP2
  { 2,	OperandInfo25 },  // Inst #160 = G_FLOG
  { 2,	OperandInfo25 },  // Inst #161 = G_FLOG2
  { 2,	OperandInfo25 },  // Inst #162 = G_FLOG10
  { 2,	OperandInfo25 },  // Inst #163 = G_FNEG
  { 2,	OperandInfo23 },  // Inst #164 = G_FPEXT
  { 2,	OperandInfo23 },  // Inst #165 = G_FPTRUNC
  { 2,	OperandInfo23 },  // Inst #166 = G_FPTOSI
  { 2,	OperandInfo23 },  // Inst #167 = G_FPTOUI
  { 2,	OperandInfo23 },  // Inst #168 = G_SITOFP
  { 2,	OperandInfo23 },  // Inst #169 = G_UITOFP
  { 2,	OperandInfo25 },  // Inst #170 = G_FABS
  { 3,	OperandInfo32 },  // Inst #171 = G_FCOPYSIGN
  { 2,	OperandInfo25 },  // Inst #172 = G_FCANONICALIZE
  { 3,	OperandInfo18 },  // Inst #173 = G_FMINNUM
  { 3,	OperandInfo18 },  // Inst #174 = G_FMAXNUM
  { 3,	OperandInfo18 },  // Inst #175 = G_FMINNUM_IEEE
  { 3,	OperandInfo18 },  // Inst #176 = G_FMAXNUM_IEEE
  { 3,	OperandInfo18 },  // Inst #177 = G_FMINIMUM
  { 3,	OperandInfo18 },  // Inst #178 = G_FMAXIMUM
  { 3,	OperandInfo32 },  // Inst #179 = G_PTR_ADD
  { 3,	OperandInfo32 },  // Inst #180 = G_PTRMASK
  { 3,	OperandInfo18 },  // Inst #181 = G_SMIN
  { 3,	OperandInfo18 },  // Inst #182 = G_SMAX
  { 3,	OperandInfo18 },  // Inst #183 = G_UMIN
  { 3,	OperandInfo18 },  // Inst #184 = G_UMAX
  { 2,	OperandInfo25 },  // Inst #185 = G_ABS
  { 2,	OperandInfo23 },  // Inst #186 = G_LROUND
  { 2,	OperandInfo23 },  // Inst #187 = G_LLROUND
  { 1,	OperandInfo2 },  // Inst #188 = G_BR
  { 3,	OperandInfo37 },  // Inst #189 = G_BRJT
  { 4,	OperandInfo38 },  // Inst #190 = G_INSERT_VECTOR_ELT
  { 3,	OperandInfo39 },  // Inst #191 = G_EXTRACT_VECTOR_ELT
  { 4,	OperandInfo40 },  // Inst #192 = G_SHUFFLE_VECTOR
  { 2,	OperandInfo23 },  // Inst #193 = G_CTTZ
  { 2,	OperandInfo23 },  // Inst #194 = G_CTTZ_ZERO_UNDEF
  { 2,	OperandInfo23 },  // Inst #195 = G_CTLZ
  { 2,	OperandInfo23 },  // Inst #196 = G_CTLZ_ZERO_UNDEF
  { 2,	OperandInfo23 },  // Inst #197 = G_CTPOP
  { 2,	OperandInfo25 },  // Inst #198 = G_BSWAP
  { 2,	OperandInfo25 },  // Inst #199 = G_BITREVERSE
  { 2,	OperandInfo25 },  // Inst #200 = G_FCEIL
  { 2,	OperandInfo25 },  // Inst #201 = G_FCOS
  { 2,	OperandInfo25 },  // Inst #202 = G_FSIN
  { 2,	OperandInfo25 },  // Inst #203 = G_FSQRT
  { 2,	OperandInfo25 },  // Inst #204 = G_FFLOOR
  { 2,	OperandInfo25 },  // Inst #205 = G_FRINT
  { 2,	OperandInfo25 },  // Inst #206 = G_FNEARBYINT
  { 2,	OperandInfo23 },  // Inst #207 = G_ADDRSPACE_CAST
  { 2,	OperandInfo21 },  // Inst #208 = G_BLOCK_ADDR
  { 2,	OperandInfo21 },  // Inst #209 = G_JUMP_TABLE
  { 3,	OperandInfo22 },  // Inst #210 = G_DYN_STACKALLOC
  { 3,	OperandInfo18 },  // Inst #211 = G_STRICT_FADD
  { 3,	OperandInfo18 },  // Inst #212 = G_STRICT_FSUB
  { 3,	OperandInfo18 },  // Inst #213 = G_STRICT_FMUL
  { 3,	OperandInfo18 },  // Inst #214 = G_STRICT_FDIV
  { 3,	OperandInfo18 },  // Inst #215 = G_STRICT_FREM
  { 4,	OperandInfo19 },  // Inst #216 = G_STRICT_FMA
  { 2,	OperandInfo25 },  // Inst #217 = G_STRICT_FSQRT
  { 2,	OperandInfo21 },  // Inst #218 = G_READ_REGISTER
  { 2,	OperandInfo41 },  // Inst #219 = G_WRITE_REGISTER
  { 4,	OperandInfo42 },  // Inst #220 = G_MEMCPY
  { 3,	OperandInfo39 },  // Inst #221 = G_MEMCPY_INLINE
  { 4,	OperandInfo42 },  // Inst #222 = G_MEMMOVE
  { 4,	OperandInfo42 },  // Inst #223 = G_MEMSET
  { 3,	OperandInfo22 },  // Inst #224 = G_BZERO
  { 3,	OperandInfo39 },  // Inst #225 = G_VECREDUCE_SEQ_FADD
  { 3,	OperandInfo39 },  // Inst #226 = G_VECREDUCE_SEQ_FMUL
  { 2,	OperandInfo23 },  // Inst #227 = G_VECREDUCE_FADD
  { 2,	OperandInfo23 },  // Inst #228 = G_VECREDUCE_FMUL
  { 2,	OperandInfo23 },  // Inst #229 = G_VECREDUCE_FMAX
  { 2,	OperandInfo23 },  // Inst #230 = G_VECREDUCE_FMIN
  { 2,	OperandInfo23 },  // Inst #231 = G_VECREDUCE_ADD
  { 2,	OperandInfo23 },  // Inst #232 = G_VECREDUCE_MUL
  { 2,	OperandInfo23 },  // Inst #233 = G_VECREDUCE_AND
  { 2,	OperandInfo23 },  // Inst #234 = G_VECREDUCE_OR
  { 2,	OperandInfo23 },  // Inst #235 = G_VECREDUCE_XOR
  { 2,	OperandInfo23 },  // Inst #236 = G_VECREDUCE_SMAX
  { 2,	OperandInfo23 },  // Inst #237 = G_VECREDUCE_SMIN
  { 2,	OperandInfo23 },  // Inst #238 = G_VECREDUCE_UMAX
  { 2,	OperandInfo23 },  // Inst #239 = G_VECREDUCE_UMIN
  { 4,	OperandInfo43 },  // Inst #240 = G_SBFX
  { 4,	OperandInfo43 },  // Inst #241 = G_UBFX
  { 8,	OperandInfo44 },  // Inst #242 = ATOMIC_CMP_SWAP_I128
  { 6,	OperandInfo45 },  // Inst #243 = ATOMIC_LOAD_ADD_I128
  { 6,	OperandInfo45 },  // Inst #244 = ATOMIC_LOAD_AND_I128
  { 6,	OperandInfo45 },  // Inst #245 = ATOMIC_LOAD_NAND_I128
  { 6,	OperandInfo45 },  // Inst #246 = ATOMIC_LOAD_OR_I128
  { 6,	OperandInfo45 },  // Inst #247 = ATOMIC_LOAD_SUB_I128
  { 6,	OperandInfo45 },  // Inst #248 = ATOMIC_LOAD_XOR_I128
  { 6,	OperandInfo45 },  // Inst #249 = ATOMIC_SWAP_I128
  { 3,	OperandInfo46 },  // Inst #250 = BUILD_QUADWORD
  { 2,	OperandInfo47 },  // Inst #251 = BUILD_UACC
  { 1,	OperandInfo48 },  // Inst #252 = CFENCE8
  { 4,	OperandInfo49 },  // Inst #253 = CLRLSLDI
  { 4,	OperandInfo49 },  // Inst #254 = CLRLSLDI_rec
  { 4,	OperandInfo50 },  // Inst #255 = CLRLSLWI
  { 4,	OperandInfo50 },  // Inst #256 = CLRLSLWI_rec
  { 3,	OperandInfo51 },  // Inst #257 = CLRRDI
  { 3,	OperandInfo51 },  // Inst #258 = CLRRDI_rec
  { 3,	OperandInfo52 },  // Inst #259 = CLRRWI
  { 3,	OperandInfo52 },  // Inst #260 = CLRRWI_rec
  { 2,	OperandInfo53 },  // Inst #261 = DCBFL
  { 2,	OperandInfo53 },  // Inst #262 = DCBFLP
  { 2,	OperandInfo53 },  // Inst #263 = DCBFPS
  { 2,	OperandInfo53 },  // Inst #264 = DCBFx
  { 2,	OperandInfo53 },  // Inst #265 = DCBSTPS
  { 3,	OperandInfo54 },  // Inst #266 = DCBTCT
  { 3,	OperandInfo54 },  // Inst #267 = DCBTDS
  { 3,	OperandInfo54 },  // Inst #268 = DCBTSTCT
  { 3,	OperandInfo54 },  // Inst #269 = DCBTSTDS
  { 2,	OperandInfo53 },  // Inst #270 = DCBTSTT
  { 2,	OperandInfo53 },  // Inst #271 = DCBTSTx
  { 2,	OperandInfo53 },  // Inst #272 = DCBTT
  { 2,	OperandInfo53 },  // Inst #273 = DCBTx
  { 3,	OperandInfo55 },  // Inst #274 = DFLOADf32
  { 3,	OperandInfo56 },  // Inst #275 = DFLOADf64
  { 3,	OperandInfo55 },  // Inst #276 = DFSTOREf32
  { 3,	OperandInfo56 },  // Inst #277 = DFSTOREf64
  { 4,	OperandInfo49 },  // Inst #278 = EXTLDI
  { 4,	OperandInfo49 },  // Inst #279 = EXTLDI_rec
  { 4,	OperandInfo50 },  // Inst #280 = EXTLWI
  { 4,	OperandInfo50 },  // Inst #281 = EXTLWI_rec
  { 4,	OperandInfo49 },  // Inst #282 = EXTRDI
  { 4,	OperandInfo49 },  // Inst #283 = EXTRDI_rec
  { 4,	OperandInfo50 },  // Inst #284 = EXTRWI
  { 4,	OperandInfo50 },  // Inst #285 = EXTRWI_rec
  { 4,	OperandInfo50 },  // Inst #286 = INSLWI
  { 4,	OperandInfo50 },  // Inst #287 = INSLWI_rec
  { 4,	OperandInfo49 },  // Inst #288 = INSRDI
  { 4,	OperandInfo49 },  // Inst #289 = INSRDI_rec
  { 4,	OperandInfo50 },  // Inst #290 = INSRWI
  { 4,	OperandInfo50 },  // Inst #291 = INSRWI_rec
  { 2,	OperandInfo57 },  // Inst #292 = KILL_PAIR
  { 3,	OperandInfo58 },  // Inst #293 = LAx
  { 3,	OperandInfo59 },  // Inst #294 = LIWAX
  { 3,	OperandInfo59 },  // Inst #295 = LIWZX
  { 4,	OperandInfo49 },  // Inst #296 = RLWIMIbm
  { 4,	OperandInfo49 },  // Inst #297 = RLWIMIbm_rec
  { 4,	OperandInfo49 },  // Inst #298 = RLWINMbm
  { 4,	OperandInfo49 },  // Inst #299 = RLWINMbm_rec
  { 4,	OperandInfo49 },  // Inst #300 = RLWNMbm
  { 4,	OperandInfo49 },  // Inst #301 = RLWNMbm_rec
  { 3,	OperandInfo51 },  // Inst #302 = ROTRDI
  { 3,	OperandInfo51 },  // Inst #303 = ROTRDI_rec
  { 3,	OperandInfo52 },  // Inst #304 = ROTRWI
  { 3,	OperandInfo52 },  // Inst #305 = ROTRWI_rec
  { 3,	OperandInfo51 },  // Inst #306 = SLDI
  { 3,	OperandInfo51 },  // Inst #307 = SLDI_rec
  { 3,	OperandInfo52 },  // Inst #308 = SLWI
  { 3,	OperandInfo52 },  // Inst #309 = SLWI_rec
  { 3,	OperandInfo60 },  // Inst #310 = SPILLTOVSR_LD
  { 3,	OperandInfo61 },  // Inst #311 = SPILLTOVSR_LDX
  { 3,	OperandInfo60 },  // Inst #312 = SPILLTOVSR_ST
  { 3,	OperandInfo61 },  // Inst #313 = SPILLTOVSR_STX
  { 3,	OperandInfo51 },  // Inst #314 = SRDI
  { 3,	OperandInfo51 },  // Inst #315 = SRDI_rec
  { 3,	OperandInfo52 },  // Inst #316 = SRWI
  { 3,	OperandInfo52 },  // Inst #317 = SRWI_rec
  { 3,	OperandInfo59 },  // Inst #318 = STIWX
  { 3,	OperandInfo52 },  // Inst #319 = SUBI
  { 3,	OperandInfo52 },  // Inst #320 = SUBIC
  { 3,	OperandInfo52 },  // Inst #321 = SUBIC_rec
  { 3,	OperandInfo52 },  // Inst #322 = SUBIS
  { 2,	OperandInfo62 },  // Inst #323 = SUBPCIS
  { 3,	OperandInfo63 },  // Inst #324 = XFLOADf32
  { 3,	OperandInfo59 },  // Inst #325 = XFLOADf64
  { 3,	OperandInfo63 },  // Inst #326 = XFSTOREf32
  { 3,	OperandInfo59 },  // Inst #327 = XFSTOREf64
  { 3,	OperandInfo64 },  // Inst #328 = ADD4
  { 3,	OperandInfo64 },  // Inst #329 = ADD4O
  { 3,	OperandInfo64 },  // Inst #330 = ADD4O_rec
  { 3,	OperandInfo65 },  // Inst #331 = ADD4TLS
  { 3,	OperandInfo64 },  // Inst #332 = ADD4_rec
  { 3,	OperandInfo66 },  // Inst #333 = ADD8
  { 3,	OperandInfo66 },  // Inst #334 = ADD8O
  { 3,	OperandInfo66 },  // Inst #335 = ADD8O_rec
  { 3,	OperandInfo67 },  // Inst #336 = ADD8TLS
  { 3,	OperandInfo68 },  // Inst #337 = ADD8TLS_
  { 3,	OperandInfo66 },  // Inst #338 = ADD8_rec
  { 3,	OperandInfo64 },  // Inst #339 = ADDC
  { 3,	OperandInfo66 },  // Inst #340 = ADDC8
  { 3,	OperandInfo66 },  // Inst #341 = ADDC8O
  { 3,	OperandInfo66 },  // Inst #342 = ADDC8O_rec
  { 3,	OperandInfo66 },  // Inst #343 = ADDC8_rec
  { 3,	OperandInfo64 },  // Inst #344 = ADDCO
  { 3,	OperandInfo64 },  // Inst #345 = ADDCO_rec
  { 3,	OperandInfo64 },  // Inst #346 = ADDC_rec
  { 3,	OperandInfo64 },  // Inst #347 = ADDE
  { 3,	OperandInfo66 },  // Inst #348 = ADDE8
  { 3,	OperandInfo66 },  // Inst #349 = ADDE8O
  { 3,	OperandInfo66 },  // Inst #350 = ADDE8O_rec
  { 3,	OperandInfo66 },  // Inst #351 = ADDE8_rec
  { 3,	OperandInfo64 },  // Inst #352 = ADDEO
  { 3,	OperandInfo64 },  // Inst #353 = ADDEO_rec
  { 4,	OperandInfo69 },  // Inst #354 = ADDEX
  { 4,	OperandInfo70 },  // Inst #355 = ADDEX8
  { 3,	OperandInfo64 },  // Inst #356 = ADDE_rec
  { 3,	OperandInfo71 },  // Inst #357 = ADDI
  { 3,	OperandInfo72 },  // Inst #358 = ADDI8
  { 3,	OperandInfo52 },  // Inst #359 = ADDIC
  { 3,	OperandInfo51 },  // Inst #360 = ADDIC8
  { 3,	OperandInfo52 },  // Inst #361 = ADDIC_rec
  { 3,	OperandInfo71 },  // Inst #362 = ADDIS
  { 3,	OperandInfo72 },  // Inst #363 = ADDIS8
  { 3,	OperandInfo72 },  // Inst #364 = ADDISdtprelHA
  { 3,	OperandInfo71 },  // Inst #365 = ADDISdtprelHA32
  { 3,	OperandInfo72 },  // Inst #366 = ADDISgotTprelHA
  { 3,	OperandInfo72 },  // Inst #367 = ADDIStlsgdHA
  { 3,	OperandInfo72 },  // Inst #368 = ADDIStlsldHA
  { 3,	OperandInfo73 },  // Inst #369 = ADDIStocHA
  { 3,	OperandInfo67 },  // Inst #370 = ADDIStocHA8
  { 3,	OperandInfo72 },  // Inst #371 = ADDIdtprelL
  { 3,	OperandInfo71 },  // Inst #372 = ADDIdtprelL32
  { 3,	OperandInfo72 },  // Inst #373 = ADDItlsgdL
  { 3,	OperandInfo71 },  // Inst #374 = ADDItlsgdL32
  { 4,	OperandInfo74 },  // Inst #375 = ADDItlsgdLADDR
  { 4,	OperandInfo75 },  // Inst #376 = ADDItlsgdLADDR32
  { 3,	OperandInfo72 },  // Inst #377 = ADDItlsldL
  { 3,	OperandInfo71 },  // Inst #378 = ADDItlsldL32
  { 4,	OperandInfo74 },  // Inst #379 = ADDItlsldLADDR
  { 4,	OperandInfo75 },  // Inst #380 = ADDItlsldLADDR32
  { 3,	OperandInfo76 },  // Inst #381 = ADDItoc
  { 3,	OperandInfo67 },  // Inst #382 = ADDItocL
  { 2,	OperandInfo77 },  // Inst #383 = ADDME
  { 2,	OperandInfo78 },  // Inst #384 = ADDME8
  { 2,	OperandInfo78 },  // Inst #385 = ADDME8O
  { 2,	OperandInfo78 },  // Inst #386 = ADDME8O_rec
  { 2,	OperandInfo78 },  // Inst #387 = ADDME8_rec
  { 2,	OperandInfo77 },  // Inst #388 = ADDMEO
  { 2,	OperandInfo77 },  // Inst #389 = ADDMEO_rec
  { 2,	OperandInfo77 },  // Inst #390 = ADDME_rec
  { 2,	OperandInfo62 },  // Inst #391 = ADDPCIS
  { 2,	OperandInfo77 },  // Inst #392 = ADDZE
  { 2,	OperandInfo78 },  // Inst #393 = ADDZE8
  { 2,	OperandInfo78 },  // Inst #394 = ADDZE8O
  { 2,	OperandInfo78 },  // Inst #395 = ADDZE8O_rec
  { 2,	OperandInfo78 },  // Inst #396 = ADDZE8_rec
  { 2,	OperandInfo77 },  // Inst #397 = ADDZEO
  { 2,	OperandInfo77 },  // Inst #398 = ADDZEO_rec
  { 2,	OperandInfo77 },  // Inst #399 = ADDZE_rec
  { 2,	OperandInfo10 },  // Inst #400 = ADJCALLSTACKDOWN
  { 2,	OperandInfo10 },  // Inst #401 = ADJCALLSTACKUP
  { 3,	OperandInfo64 },  // Inst #402 = AND
  { 3,	OperandInfo66 },  // Inst #403 = AND8
  { 3,	OperandInfo66 },  // Inst #404 = AND8_rec
  { 3,	OperandInfo64 },  // Inst #405 = ANDC
  { 3,	OperandInfo66 },  // Inst #406 = ANDC8
  { 3,	OperandInfo66 },  // Inst #407 = ANDC8_rec
  { 3,	OperandInfo64 },  // Inst #408 = ANDC_rec
  { 3,	OperandInfo51 },  // Inst #409 = ANDI8_rec
  { 3,	OperandInfo51 },  // Inst #410 = ANDIS8_rec
  { 3,	OperandInfo52 },  // Inst #411 = ANDIS_rec
  { 3,	OperandInfo52 },  // Inst #412 = ANDI_rec
  { 2,	OperandInfo79 },  // Inst #413 = ANDI_rec_1_EQ_BIT
  { 2,	OperandInfo80 },  // Inst #414 = ANDI_rec_1_EQ_BIT8
  { 2,	OperandInfo79 },  // Inst #415 = ANDI_rec_1_GT_BIT
  { 2,	OperandInfo80 },  // Inst #416 = ANDI_rec_1_GT_BIT8
  { 3,	OperandInfo64 },  // Inst #417 = AND_rec
  { 5,	OperandInfo81 },  // Inst #418 = ATOMIC_CMP_SWAP_I16
  { 5,	OperandInfo81 },  // Inst #419 = ATOMIC_CMP_SWAP_I32
  { 5,	OperandInfo82 },  // Inst #420 = ATOMIC_CMP_SWAP_I64
  { 5,	OperandInfo81 },  // Inst #421 = ATOMIC_CMP_SWAP_I8
  { 4,	OperandInfo83 },  // Inst #422 = ATOMIC_LOAD_ADD_I16
  { 4,	OperandInfo83 },  // Inst #423 = ATOMIC_LOAD_ADD_I32
  { 4,	OperandInfo84 },  // Inst #424 = ATOMIC_LOAD_ADD_I64
  { 4,	OperandInfo83 },  // Inst #425 = ATOMIC_LOAD_ADD_I8
  { 4,	OperandInfo83 },  // Inst #426 = ATOMIC_LOAD_AND_I16
  { 4,	OperandInfo83 },  // Inst #427 = ATOMIC_LOAD_AND_I32
  { 4,	OperandInfo84 },  // Inst #428 = ATOMIC_LOAD_AND_I64
  { 4,	OperandInfo83 },  // Inst #429 = ATOMIC_LOAD_AND_I8
  { 4,	OperandInfo83 },  // Inst #430 = ATOMIC_LOAD_MAX_I16
  { 4,	OperandInfo83 },  // Inst #431 = ATOMIC_LOAD_MAX_I32
  { 4,	OperandInfo84 },  // Inst #432 = ATOMIC_LOAD_MAX_I64
  { 4,	OperandInfo83 },  // Inst #433 = ATOMIC_LOAD_MAX_I8
  { 4,	OperandInfo83 },  // Inst #434 = ATOMIC_LOAD_MIN_I16
  { 4,	OperandInfo83 },  // Inst #435 = ATOMIC_LOAD_MIN_I32
  { 4,	OperandInfo84 },  // Inst #436 = ATOMIC_LOAD_MIN_I64
  { 4,	OperandInfo83 },  // Inst #437 = ATOMIC_LOAD_MIN_I8
  { 4,	OperandInfo83 },  // Inst #438 = ATOMIC_LOAD_NAND_I16
  { 4,	OperandInfo83 },  // Inst #439 = ATOMIC_LOAD_NAND_I32
  { 4,	OperandInfo84 },  // Inst #440 = ATOMIC_LOAD_NAND_I64
  { 4,	OperandInfo83 },  // Inst #441 = ATOMIC_LOAD_NAND_I8
  { 4,	OperandInfo83 },  // Inst #442 = ATOMIC_LOAD_OR_I16
  { 4,	OperandInfo83 },  // Inst #443 = ATOMIC_LOAD_OR_I32
  { 4,	OperandInfo84 },  // Inst #444 = ATOMIC_LOAD_OR_I64
  { 4,	OperandInfo83 },  // Inst #445 = ATOMIC_LOAD_OR_I8
  { 4,	OperandInfo83 },  // Inst #446 = ATOMIC_LOAD_SUB_I16
  { 4,	OperandInfo83 },  // Inst #447 = ATOMIC_LOAD_SUB_I32
  { 4,	OperandInfo84 },  // Inst #448 = ATOMIC_LOAD_SUB_I64
  { 4,	OperandInfo83 },  // Inst #449 = ATOMIC_LOAD_SUB_I8
  { 4,	OperandInfo83 },  // Inst #450 = ATOMIC_LOAD_UMAX_I16
  { 4,	OperandInfo83 },  // Inst #451 = ATOMIC_LOAD_UMAX_I32
  { 4,	OperandInfo84 },  // Inst #452 = ATOMIC_LOAD_UMAX_I64
  { 4,	OperandInfo83 },  // Inst #453 = ATOMIC_LOAD_UMAX_I8
  { 4,	OperandInfo83 },  // Inst #454 = ATOMIC_LOAD_UMIN_I16
  { 4,	OperandInfo83 },  // Inst #455 = ATOMIC_LOAD_UMIN_I32
  { 4,	OperandInfo84 },  // Inst #456 = ATOMIC_LOAD_UMIN_I64
  { 4,	OperandInfo83 },  // Inst #457 = ATOMIC_LOAD_UMIN_I8
  { 4,	OperandInfo83 },  // Inst #458 = ATOMIC_LOAD_XOR_I16
  { 4,	OperandInfo83 },  // Inst #459 = ATOMIC_LOAD_XOR_I32
  { 4,	OperandInfo84 },  // Inst #460 = ATOMIC_LOAD_XOR_I64
  { 4,	OperandInfo83 },  // Inst #461 = ATOMIC_LOAD_XOR_I8
  { 4,	OperandInfo83 },  // Inst #462 = ATOMIC_SWAP_I16
  { 4,	OperandInfo83 },  // Inst #463 = ATOMIC_SWAP_I32
  { 4,	OperandInfo84 },  // Inst #464 = ATOMIC_SWAP_I64
  { 4,	OperandInfo83 },  // Inst #465 = ATOMIC_SWAP_I8
  { 0,	NULL },  // Inst #466 = ATTN
  { 1,	OperandInfo85 },  // Inst #467 = B
  { 1,	OperandInfo2 },  // Inst #468 = BA
  { 2,	OperandInfo86 },  // Inst #469 = BC
  { 3,	OperandInfo87 },  // Inst #470 = BCC
  { 3,	OperandInfo88 },  // Inst #471 = BCCA
  { 2,	OperandInfo89 },  // Inst #472 = BCCCTR
  { 2,	OperandInfo89 },  // Inst #473 = BCCCTR8
  { 2,	OperandInfo89 },  // Inst #474 = BCCCTRL
  { 2,	OperandInfo89 },  // Inst #475 = BCCCTRL8
  { 3,	OperandInfo87 },  // Inst #476 = BCCL
  { 3,	OperandInfo88 },  // Inst #477 = BCCLA
  { 2,	OperandInfo89 },  // Inst #478 = BCCLR
  { 2,	OperandInfo89 },  // Inst #479 = BCCLRL
  { 1,	OperandInfo90 },  // Inst #480 = BCCTR
  { 1,	OperandInfo90 },  // Inst #481 = BCCTR8
  { 1,	OperandInfo90 },  // Inst #482 = BCCTR8n
  { 1,	OperandInfo90 },  // Inst #483 = BCCTRL
  { 1,	OperandInfo90 },  // Inst #484 = BCCTRL8
  { 1,	OperandInfo90 },  // Inst #485 = BCCTRL8n
  { 1,	OperandInfo90 },  // Inst #486 = BCCTRLn
  { 1,	OperandInfo90 },  // Inst #487 = BCCTRn
  { 3,	OperandInfo91 },  // Inst #488 = BCDCFN_rec
  { 3,	OperandInfo91 },  // Inst #489 = BCDCFSQ_rec
  { 3,	OperandInfo91 },  // Inst #490 = BCDCFZ_rec
  { 3,	OperandInfo92 },  // Inst #491 = BCDCPSGN_rec
  { 2,	OperandInfo93 },  // Inst #492 = BCDCTN_rec
  { 2,	OperandInfo93 },  // Inst #493 = BCDCTSQ_rec
  { 3,	OperandInfo91 },  // Inst #494 = BCDCTZ_rec
  { 3,	OperandInfo91 },  // Inst #495 = BCDSETSGN_rec
  { 4,	OperandInfo94 },  // Inst #496 = BCDSR_rec
  { 4,	OperandInfo94 },  // Inst #497 = BCDS_rec
  { 4,	OperandInfo94 },  // Inst #498 = BCDTRUNC_rec
  { 3,	OperandInfo92 },  // Inst #499 = BCDUS_rec
  { 3,	OperandInfo92 },  // Inst #500 = BCDUTRUNC_rec
  { 2,	OperandInfo86 },  // Inst #501 = BCL
  { 1,	OperandInfo90 },  // Inst #502 = BCLR
  { 1,	OperandInfo90 },  // Inst #503 = BCLRL
  { 1,	OperandInfo90 },  // Inst #504 = BCLRLn
  { 1,	OperandInfo90 },  // Inst #505 = BCLRn
  { 1,	OperandInfo85 },  // Inst #506 = BCLalways
  { 2,	OperandInfo86 },  // Inst #507 = BCLn
  { 0,	NULL },  // Inst #508 = BCTR
  { 0,	NULL },  // Inst #509 = BCTR8
  { 0,	NULL },  // Inst #510 = BCTRL
  { 0,	NULL },  // Inst #511 = BCTRL8
  { 2,	OperandInfo95 },  // Inst #512 = BCTRL8_LDinto_toc
  { 2,	OperandInfo95 },  // Inst #513 = BCTRL8_LDinto_toc_RM
  { 0,	NULL },  // Inst #514 = BCTRL8_RM
  { 2,	OperandInfo95 },  // Inst #515 = BCTRL_LWZinto_toc
  { 2,	OperandInfo95 },  // Inst #516 = BCTRL_LWZinto_toc_RM
  { 0,	NULL },  // Inst #517 = BCTRL_RM
  { 2,	OperandInfo86 },  // Inst #518 = BCn
  { 1,	OperandInfo85 },  // Inst #519 = BDNZ
  { 1,	OperandInfo85 },  // Inst #520 = BDNZ8
  { 1,	OperandInfo2 },  // Inst #521 = BDNZA
  { 1,	OperandInfo2 },  // Inst #522 = BDNZAm
  { 1,	OperandInfo2 },  // Inst #523 = BDNZAp
  { 1,	OperandInfo85 },  // Inst #524 = BDNZL
  { 1,	OperandInfo2 },  // Inst #525 = BDNZLA
  { 1,	OperandInfo2 },  // Inst #526 = BDNZLAm
  { 1,	OperandInfo2 },  // Inst #527 = BDNZLAp
  { 0,	NULL },  // Inst #528 = BDNZLR
  { 0,	NULL },  // Inst #529 = BDNZLR8
  { 0,	NULL },  // Inst #530 = BDNZLRL
  { 0,	NULL },  // Inst #531 = BDNZLRLm
  { 0,	NULL },  // Inst #532 = BDNZLRLp
  { 0,	NULL },  // Inst #533 = BDNZLRm
  { 0,	NULL },  // Inst #534 = BDNZLRp
  { 1,	OperandInfo85 },  // Inst #535 = BDNZLm
  { 1,	OperandInfo85 },  // Inst #536 = BDNZLp
  { 1,	OperandInfo85 },  // Inst #537 = BDNZm
  { 1,	OperandInfo85 },  // Inst #538 = BDNZp
  { 1,	OperandInfo85 },  // Inst #539 = BDZ
  { 1,	OperandInfo85 },  // Inst #540 = BDZ8
  { 1,	OperandInfo2 },  // Inst #541 = BDZA
  { 1,	OperandInfo2 },  // Inst #542 = BDZAm
  { 1,	OperandInfo2 },  // Inst #543 = BDZAp
  { 1,	OperandInfo85 },  // Inst #544 = BDZL
  { 1,	OperandInfo2 },  // Inst #545 = BDZLA
  { 1,	OperandInfo2 },  // Inst #546 = BDZLAm
  { 1,	OperandInfo2 },  // Inst #547 = BDZLAp
  { 0,	NULL },  // Inst #548 = BDZLR
  { 0,	NULL },  // Inst #549 = BDZLR8
  { 0,	NULL },  // Inst #550 = BDZLRL
  { 0,	NULL },  // Inst #551 = BDZLRLm
  { 0,	NULL },  // Inst #552 = BDZLRLp
  { 0,	NULL },  // Inst #553 = BDZLRm
  { 0,	NULL },  // Inst #554 = BDZLRp
  { 1,	OperandInfo85 },  // Inst #555 = BDZLm
  { 1,	OperandInfo85 },  // Inst #556 = BDZLp
  { 1,	OperandInfo85 },  // Inst #557 = BDZm
  { 1,	OperandInfo85 },  // Inst #558 = BDZp
  { 1,	OperandInfo85 },  // Inst #559 = BL
  { 1,	OperandInfo85 },  // Inst #560 = BL8
  { 1,	OperandInfo85 },  // Inst #561 = BL8_NOP
  { 1,	OperandInfo85 },  // Inst #562 = BL8_NOP_RM
  { 2,	OperandInfo7 },  // Inst #563 = BL8_NOP_TLS
  { 1,	OperandInfo85 },  // Inst #564 = BL8_NOTOC
  { 1,	OperandInfo85 },  // Inst #565 = BL8_NOTOC_RM
  { 2,	OperandInfo7 },  // Inst #566 = BL8_NOTOC_TLS
  { 1,	OperandInfo85 },  // Inst #567 = BL8_RM
  { 2,	OperandInfo7 },  // Inst #568 = BL8_TLS
  { 2,	OperandInfo7 },  // Inst #569 = BL8_TLS_
  { 1,	OperandInfo2 },  // Inst #570 = BLA
  { 1,	OperandInfo2 },  // Inst #571 = BLA8
  { 1,	OperandInfo2 },  // Inst #572 = BLA8_NOP
  { 1,	OperandInfo2 },  // Inst #573 = BLA8_NOP_RM
  { 1,	OperandInfo2 },  // Inst #574 = BLA8_RM
  { 1,	OperandInfo2 },  // Inst #575 = BLA_RM
  { 0,	NULL },  // Inst #576 = BLR
  { 0,	NULL },  // Inst #577 = BLR8
  { 0,	NULL },  // Inst #578 = BLRL
  { 1,	OperandInfo85 },  // Inst #579 = BL_NOP
  { 1,	OperandInfo85 },  // Inst #580 = BL_NOP_RM
  { 1,	OperandInfo85 },  // Inst #581 = BL_RM
  { 2,	OperandInfo7 },  // Inst #582 = BL_TLS
  { 3,	OperandInfo66 },  // Inst #583 = BPERMD
  { 3,	OperandInfo64 },  // Inst #584 = BRINC
  { 3,	OperandInfo66 },  // Inst #585 = CFUGED
  { 0,	NULL },  // Inst #586 = CLRBHRB
  { 3,	OperandInfo64 },  // Inst #587 = CMPB
  { 3,	OperandInfo66 },  // Inst #588 = CMPB8
  { 3,	OperandInfo96 },  // Inst #589 = CMPD
  { 3,	OperandInfo97 },  // Inst #590 = CMPDI
  { 3,	OperandInfo96 },  // Inst #591 = CMPEQB
  { 3,	OperandInfo96 },  // Inst #592 = CMPLD
  { 3,	OperandInfo97 },  // Inst #593 = CMPLDI
  { 3,	OperandInfo98 },  // Inst #594 = CMPLW
  { 3,	OperandInfo99 },  // Inst #595 = CMPLWI
  { 4,	OperandInfo100 },  // Inst #596 = CMPRB
  { 4,	OperandInfo101 },  // Inst #597 = CMPRB8
  { 3,	OperandInfo98 },  // Inst #598 = CMPW
  { 3,	OperandInfo99 },  // Inst #599 = CMPWI
  { 2,	OperandInfo78 },  // Inst #600 = CNTLZD
  { 3,	OperandInfo66 },  // Inst #601 = CNTLZDM
  { 2,	OperandInfo78 },  // Inst #602 = CNTLZD_rec
  { 2,	OperandInfo77 },  // Inst #603 = CNTLZW
  { 2,	OperandInfo78 },  // Inst #604 = CNTLZW8
  { 2,	OperandInfo78 },  // Inst #605 = CNTLZW8_rec
  { 2,	OperandInfo77 },  // Inst #606 = CNTLZW_rec
  { 2,	OperandInfo78 },  // Inst #607 = CNTTZD
  { 3,	OperandInfo66 },  // Inst #608 = CNTTZDM
  { 2,	OperandInfo78 },  // Inst #609 = CNTTZD_rec
  { 2,	OperandInfo77 },  // Inst #610 = CNTTZW
  { 2,	OperandInfo78 },  // Inst #611 = CNTTZW8
  { 2,	OperandInfo78 },  // Inst #612 = CNTTZW8_rec
  { 2,	OperandInfo77 },  // Inst #613 = CNTTZW_rec
  { 0,	NULL },  // Inst #614 = CP_ABORT
  { 3,	OperandInfo52 },  // Inst #615 = CP_COPY
  { 3,	OperandInfo51 },  // Inst #616 = CP_COPY8
  { 3,	OperandInfo51 },  // Inst #617 = CP_PASTE8_rec
  { 3,	OperandInfo52 },  // Inst #618 = CP_PASTE_rec
  { 0,	NULL },  // Inst #619 = CR6SET
  { 0,	NULL },  // Inst #620 = CR6UNSET
  { 3,	OperandInfo102 },  // Inst #621 = CRAND
  { 3,	OperandInfo102 },  // Inst #622 = CRANDC
  { 3,	OperandInfo102 },  // Inst #623 = CREQV
  { 3,	OperandInfo102 },  // Inst #624 = CRNAND
  { 3,	OperandInfo102 },  // Inst #625 = CRNOR
  { 3,	OperandInfo102 },  // Inst #626 = CROR
  { 3,	OperandInfo102 },  // Inst #627 = CRORC
  { 1,	OperandInfo90 },  // Inst #628 = CRSET
  { 1,	OperandInfo90 },  // Inst #629 = CRUNSET
  { 3,	OperandInfo102 },  // Inst #630 = CRXOR
  { 3,	OperandInfo87 },  // Inst #631 = CTRL_DEP
  { 2,	OperandInfo62 },  // Inst #632 = DARN
  { 2,	OperandInfo53 },  // Inst #633 = DCBA
  { 3,	OperandInfo103 },  // Inst #634 = DCBF
  { 2,	OperandInfo53 },  // Inst #635 = DCBFEP
  { 2,	OperandInfo53 },  // Inst #636 = DCBI
  { 2,	OperandInfo53 },  // Inst #637 = DCBST
  { 2,	OperandInfo53 },  // Inst #638 = DCBSTEP
  { 3,	OperandInfo103 },  // Inst #639 = DCBT
  { 3,	OperandInfo54 },  // Inst #640 = DCBTEP
  { 3,	OperandInfo103 },  // Inst #641 = DCBTST
  { 3,	OperandInfo54 },  // Inst #642 = DCBTSTEP
  { 2,	OperandInfo53 },  // Inst #643 = DCBZ
  { 2,	OperandInfo53 },  // Inst #644 = DCBZEP
  { 2,	OperandInfo53 },  // Inst #645 = DCBZL
  { 2,	OperandInfo53 },  // Inst #646 = DCBZLEP
  { 2,	OperandInfo77 },  // Inst #647 = DCCCI
  { 3,	OperandInfo66 },  // Inst #648 = DIVD
  { 3,	OperandInfo66 },  // Inst #649 = DIVDE
  { 3,	OperandInfo66 },  // Inst #650 = DIVDEO
  { 3,	OperandInfo66 },  // Inst #651 = DIVDEO_rec
  { 3,	OperandInfo66 },  // Inst #652 = DIVDEU
  { 3,	OperandInfo66 },  // Inst #653 = DIVDEUO
  { 3,	OperandInfo66 },  // Inst #654 = DIVDEUO_rec
  { 3,	OperandInfo66 },  // Inst #655 = DIVDEU_rec
  { 3,	OperandInfo66 },  // Inst #656 = DIVDE_rec
  { 3,	OperandInfo66 },  // Inst #657 = DIVDO
  { 3,	OperandInfo66 },  // Inst #658 = DIVDO_rec
  { 3,	OperandInfo66 },  // Inst #659 = DIVDU
  { 3,	OperandInfo66 },  // Inst #660 = DIVDUO
  { 3,	OperandInfo66 },  // Inst #661 = DIVDUO_rec
  { 3,	OperandInfo66 },  // Inst #662 = DIVDU_rec
  { 3,	OperandInfo66 },  // Inst #663 = DIVD_rec
  { 3,	OperandInfo64 },  // Inst #664 = DIVW
  { 3,	OperandInfo64 },  // Inst #665 = DIVWE
  { 3,	OperandInfo64 },  // Inst #666 = DIVWEO
  { 3,	OperandInfo64 },  // Inst #667 = DIVWEO_rec
  { 3,	OperandInfo64 },  // Inst #668 = DIVWEU
  { 3,	OperandInfo64 },  // Inst #669 = DIVWEUO
  { 3,	OperandInfo64 },  // Inst #670 = DIVWEUO_rec
  { 3,	OperandInfo64 },  // Inst #671 = DIVWEU_rec
  { 3,	OperandInfo64 },  // Inst #672 = DIVWE_rec
  { 3,	OperandInfo64 },  // Inst #673 = DIVWO
  { 3,	OperandInfo64 },  // Inst #674 = DIVWO_rec
  { 3,	OperandInfo64 },  // Inst #675 = DIVWU
  { 3,	OperandInfo64 },  // Inst #676 = DIVWUO
  { 3,	OperandInfo64 },  // Inst #677 = DIVWUO_rec
  { 3,	OperandInfo64 },  // Inst #678 = DIVWU_rec
  { 3,	OperandInfo64 },  // Inst #679 = DIVW_rec
  { 1,	OperandInfo3 },  // Inst #680 = DSS
  { 0,	NULL },  // Inst #681 = DSSALL
  { 3,	OperandInfo104 },  // Inst #682 = DST
  { 3,	OperandInfo105 },  // Inst #683 = DST64
  { 3,	OperandInfo104 },  // Inst #684 = DSTST
  { 3,	OperandInfo105 },  // Inst #685 = DSTST64
  { 3,	OperandInfo104 },  // Inst #686 = DSTSTT
  { 3,	OperandInfo105 },  // Inst #687 = DSTSTT64
  { 3,	OperandInfo104 },  // Inst #688 = DSTT
  { 3,	OperandInfo105 },  // Inst #689 = DSTT64
  { 4,	OperandInfo106 },  // Inst #690 = DYNALLOC
  { 4,	OperandInfo107 },  // Inst #691 = DYNALLOC8
  { 3,	OperandInfo108 },  // Inst #692 = DYNAREAOFFSET
  { 3,	OperandInfo108 },  // Inst #693 = DYNAREAOFFSET8
  { 2,	OperandInfo109 },  // Inst #694 = EFDABS
  { 3,	OperandInfo110 },  // Inst #695 = EFDADD
  { 2,	OperandInfo111 },  // Inst #696 = EFDCFS
  { 2,	OperandInfo111 },  // Inst #697 = EFDCFSF
  { 2,	OperandInfo111 },  // Inst #698 = EFDCFSI
  { 2,	OperandInfo111 },  // Inst #699 = EFDCFSID
  { 2,	OperandInfo111 },  // Inst #700 = EFDCFUF
  { 2,	OperandInfo111 },  // Inst #701 = EFDCFUI
  { 2,	OperandInfo111 },  // Inst #702 = EFDCFUID
  { 3,	OperandInfo112 },  // Inst #703 = EFDCMPEQ
  { 3,	OperandInfo112 },  // Inst #704 = EFDCMPGT
  { 3,	OperandInfo112 },  // Inst #705 = EFDCMPLT
  { 2,	OperandInfo111 },  // Inst #706 = EFDCTSF
  { 2,	OperandInfo113 },  // Inst #707 = EFDCTSI
  { 2,	OperandInfo113 },  // Inst #708 = EFDCTSIDZ
  { 2,	OperandInfo113 },  // Inst #709 = EFDCTSIZ
  { 2,	OperandInfo111 },  // Inst #710 = EFDCTUF
  { 2,	OperandInfo113 },  // Inst #711 = EFDCTUI
  { 2,	OperandInfo113 },  // Inst #712 = EFDCTUIDZ
  { 2,	OperandInfo113 },  // Inst #713 = EFDCTUIZ
  { 3,	OperandInfo110 },  // Inst #714 = EFDDIV
  { 3,	OperandInfo110 },  // Inst #715 = EFDMUL
  { 2,	OperandInfo109 },  // Inst #716 = EFDNABS
  { 2,	OperandInfo109 },  // Inst #717 = EFDNEG
  { 3,	OperandInfo110 },  // Inst #718 = EFDSUB
  { 3,	OperandInfo112 },  // Inst #719 = EFDTSTEQ
  { 3,	OperandInfo112 },  // Inst #720 = EFDTSTGT
  { 3,	OperandInfo112 },  // Inst #721 = EFDTSTLT
  { 2,	OperandInfo77 },  // Inst #722 = EFSABS
  { 3,	OperandInfo64 },  // Inst #723 = EFSADD
  { 2,	OperandInfo113 },  // Inst #724 = EFSCFD
  { 2,	OperandInfo77 },  // Inst #725 = EFSCFSF
  { 2,	OperandInfo77 },  // Inst #726 = EFSCFSI
  { 2,	OperandInfo77 },  // Inst #727 = EFSCFUF
  { 2,	OperandInfo77 },  // Inst #728 = EFSCFUI
  { 3,	OperandInfo98 },  // Inst #729 = EFSCMPEQ
  { 3,	OperandInfo98 },  // Inst #730 = EFSCMPGT
  { 3,	OperandInfo98 },  // Inst #731 = EFSCMPLT
  { 2,	OperandInfo77 },  // Inst #732 = EFSCTSF
  { 2,	OperandInfo77 },  // Inst #733 = EFSCTSI
  { 2,	OperandInfo77 },  // Inst #734 = EFSCTSIZ
  { 2,	OperandInfo111 },  // Inst #735 = EFSCTUF
  { 2,	OperandInfo77 },  // Inst #736 = EFSCTUI
  { 2,	OperandInfo77 },  // Inst #737 = EFSCTUIZ
  { 3,	OperandInfo64 },  // Inst #738 = EFSDIV
  { 3,	OperandInfo64 },  // Inst #739 = EFSMUL
  { 2,	OperandInfo77 },  // Inst #740 = EFSNABS
  { 2,	OperandInfo77 },  // Inst #741 = EFSNEG
  { 3,	OperandInfo64 },  // Inst #742 = EFSSUB
  { 3,	OperandInfo112 },  // Inst #743 = EFSTSTEQ
  { 3,	OperandInfo112 },  // Inst #744 = EFSTSTGT
  { 3,	OperandInfo112 },  // Inst #745 = EFSTSTLT
  { 1,	OperandInfo114 },  // Inst #746 = EH_SjLj_LongJmp32
  { 1,	OperandInfo114 },  // Inst #747 = EH_SjLj_LongJmp64
  { 2,	OperandInfo115 },  // Inst #748 = EH_SjLj_SetJmp32
  { 2,	OperandInfo115 },  // Inst #749 = EH_SjLj_SetJmp64
  { 1,	OperandInfo85 },  // Inst #750 = EH_SjLj_Setup
  { 3,	OperandInfo64 },  // Inst #751 = EQV
  { 3,	OperandInfo66 },  // Inst #752 = EQV8
  { 3,	OperandInfo66 },  // Inst #753 = EQV8_rec
  { 3,	OperandInfo64 },  // Inst #754 = EQV_rec
  { 2,	OperandInfo109 },  // Inst #755 = EVABS
  { 3,	OperandInfo116 },  // Inst #756 = EVADDIW
  { 2,	OperandInfo109 },  // Inst #757 = EVADDSMIAAW
  { 2,	OperandInfo109 },  // Inst #758 = EVADDSSIAAW
  { 2,	OperandInfo109 },  // Inst #759 = EVADDUMIAAW
  { 2,	OperandInfo109 },  // Inst #760 = EVADDUSIAAW
  { 3,	OperandInfo110 },  // Inst #761 = EVADDW
  { 3,	OperandInfo110 },  // Inst #762 = EVAND
  { 3,	OperandInfo110 },  // Inst #763 = EVANDC
  { 3,	OperandInfo112 },  // Inst #764 = EVCMPEQ
  { 3,	OperandInfo112 },  // Inst #765 = EVCMPGTS
  { 3,	OperandInfo112 },  // Inst #766 = EVCMPGTU
  { 3,	OperandInfo112 },  // Inst #767 = EVCMPLTS
  { 3,	OperandInfo112 },  // Inst #768 = EVCMPLTU
  { 2,	OperandInfo109 },  // Inst #769 = EVCNTLSW
  { 2,	OperandInfo109 },  // Inst #770 = EVCNTLZW
  { 3,	OperandInfo110 },  // Inst #771 = EVDIVWS
  { 3,	OperandInfo110 },  // Inst #772 = EVDIVWU
  { 3,	OperandInfo110 },  // Inst #773 = EVEQV
  { 2,	OperandInfo109 },  // Inst #774 = EVEXTSB
  { 2,	OperandInfo109 },  // Inst #775 = EVEXTSH
  { 2,	OperandInfo109 },  // Inst #776 = EVFSABS
  { 3,	OperandInfo110 },  // Inst #777 = EVFSADD
  { 2,	OperandInfo109 },  // Inst #778 = EVFSCFSF
  { 2,	OperandInfo109 },  // Inst #779 = EVFSCFSI
  { 2,	OperandInfo109 },  // Inst #780 = EVFSCFUF
  { 2,	OperandInfo109 },  // Inst #781 = EVFSCFUI
  { 3,	OperandInfo112 },  // Inst #782 = EVFSCMPEQ
  { 3,	OperandInfo112 },  // Inst #783 = EVFSCMPGT
  { 3,	OperandInfo112 },  // Inst #784 = EVFSCMPLT
  { 2,	OperandInfo109 },  // Inst #785 = EVFSCTSF
  { 2,	OperandInfo109 },  // Inst #786 = EVFSCTSI
  { 2,	OperandInfo109 },  // Inst #787 = EVFSCTSIZ
  { 2,	OperandInfo109 },  // Inst #788 = EVFSCTUF
  { 2,	OperandInfo109 },  // Inst #789 = EVFSCTUI
  { 2,	OperandInfo109 },  // Inst #790 = EVFSCTUIZ
  { 3,	OperandInfo110 },  // Inst #791 = EVFSDIV
  { 3,	OperandInfo110 },  // Inst #792 = EVFSMUL
  { 2,	OperandInfo109 },  // Inst #793 = EVFSNABS
  { 2,	OperandInfo109 },  // Inst #794 = EVFSNEG
  { 3,	OperandInfo110 },  // Inst #795 = EVFSSUB
  { 3,	OperandInfo112 },  // Inst #796 = EVFSTSTEQ
  { 3,	OperandInfo112 },  // Inst #797 = EVFSTSTGT
  { 3,	OperandInfo112 },  // Inst #798 = EVFSTSTLT
  { 3,	OperandInfo117 },  // Inst #799 = EVLDD
  { 3,	OperandInfo118 },  // Inst #800 = EVLDDX
  { 3,	OperandInfo117 },  // Inst #801 = EVLDH
  { 3,	OperandInfo118 },  // Inst #802 = EVLDHX
  { 3,	OperandInfo117 },  // Inst #803 = EVLDW
  { 3,	OperandInfo118 },  // Inst #804 = EVLDWX
  { 3,	OperandInfo117 },  // Inst #805 = EVLHHESPLAT
  { 3,	OperandInfo118 },  // Inst #806 = EVLHHESPLATX
  { 3,	OperandInfo117 },  // Inst #807 = EVLHHOSSPLAT
  { 3,	OperandInfo118 },  // Inst #808 = EVLHHOSSPLATX
  { 3,	OperandInfo117 },  // Inst #809 = EVLHHOUSPLAT
  { 3,	OperandInfo118 },  // Inst #810 = EVLHHOUSPLATX
  { 3,	OperandInfo117 },  // Inst #811 = EVLWHE
  { 3,	OperandInfo118 },  // Inst #812 = EVLWHEX
  { 3,	OperandInfo117 },  // Inst #813 = EVLWHOS
  { 3,	OperandInfo118 },  // Inst #814 = EVLWHOSX
  { 3,	OperandInfo117 },  // Inst #815 = EVLWHOU
  { 3,	OperandInfo118 },  // Inst #816 = EVLWHOUX
  { 3,	OperandInfo117 },  // Inst #817 = EVLWHSPLAT
  { 3,	OperandInfo118 },  // Inst #818 = EVLWHSPLATX
  { 3,	OperandInfo117 },  // Inst #819 = EVLWWSPLAT
  { 3,	OperandInfo118 },  // Inst #820 = EVLWWSPLATX
  { 3,	OperandInfo110 },  // Inst #821 = EVMERGEHI
  { 3,	OperandInfo110 },  // Inst #822 = EVMERGEHILO
  { 3,	OperandInfo119 },  // Inst #823 = EVMERGELO
  { 3,	OperandInfo110 },  // Inst #824 = EVMERGELOHI
  { 3,	OperandInfo110 },  // Inst #825 = EVMHEGSMFAA
  { 3,	OperandInfo110 },  // Inst #826 = EVMHEGSMFAN
  { 3,	OperandInfo110 },  // Inst #827 = EVMHEGSMIAA
  { 3,	OperandInfo110 },  // Inst #828 = EVMHEGSMIAN
  { 3,	OperandInfo110 },  // Inst #829 = EVMHEGUMIAA
  { 3,	OperandInfo110 },  // Inst #830 = EVMHEGUMIAN
  { 3,	OperandInfo110 },  // Inst #831 = EVMHESMF
  { 3,	OperandInfo110 },  // Inst #832 = EVMHESMFA
  { 3,	OperandInfo110 },  // Inst #833 = EVMHESMFAAW
  { 3,	OperandInfo110 },  // Inst #834 = EVMHESMFANW
  { 3,	OperandInfo110 },  // Inst #835 = EVMHESMI
  { 3,	OperandInfo110 },  // Inst #836 = EVMHESMIA
  { 3,	OperandInfo110 },  // Inst #837 = EVMHESMIAAW
  { 3,	OperandInfo110 },  // Inst #838 = EVMHESMIANW
  { 3,	OperandInfo110 },  // Inst #839 = EVMHESSF
  { 3,	OperandInfo110 },  // Inst #840 = EVMHESSFA
  { 3,	OperandInfo110 },  // Inst #841 = EVMHESSFAAW
  { 3,	OperandInfo110 },  // Inst #842 = EVMHESSFANW
  { 3,	OperandInfo110 },  // Inst #843 = EVMHESSIAAW
  { 3,	OperandInfo110 },  // Inst #844 = EVMHESSIANW
  { 3,	OperandInfo110 },  // Inst #845 = EVMHEUMI
  { 3,	OperandInfo110 },  // Inst #846 = EVMHEUMIA
  { 3,	OperandInfo110 },  // Inst #847 = EVMHEUMIAAW
  { 3,	OperandInfo110 },  // Inst #848 = EVMHEUMIANW
  { 3,	OperandInfo110 },  // Inst #849 = EVMHEUSIAAW
  { 3,	OperandInfo110 },  // Inst #850 = EVMHEUSIANW
  { 3,	OperandInfo110 },  // Inst #851 = EVMHOGSMFAA
  { 3,	OperandInfo110 },  // Inst #852 = EVMHOGSMFAN
  { 3,	OperandInfo110 },  // Inst #853 = EVMHOGSMIAA
  { 3,	OperandInfo110 },  // Inst #854 = EVMHOGSMIAN
  { 3,	OperandInfo110 },  // Inst #855 = EVMHOGUMIAA
  { 3,	OperandInfo110 },  // Inst #856 = EVMHOGUMIAN
  { 3,	OperandInfo110 },  // Inst #857 = EVMHOSMF
  { 3,	OperandInfo110 },  // Inst #858 = EVMHOSMFA
  { 3,	OperandInfo110 },  // Inst #859 = EVMHOSMFAAW
  { 3,	OperandInfo110 },  // Inst #860 = EVMHOSMFANW
  { 3,	OperandInfo110 },  // Inst #861 = EVMHOSMI
  { 3,	OperandInfo110 },  // Inst #862 = EVMHOSMIA
  { 3,	OperandInfo110 },  // Inst #863 = EVMHOSMIAAW
  { 3,	OperandInfo110 },  // Inst #864 = EVMHOSMIANW
  { 3,	OperandInfo110 },  // Inst #865 = EVMHOSSF
  { 3,	OperandInfo110 },  // Inst #866 = EVMHOSSFA
  { 3,	OperandInfo110 },  // Inst #867 = EVMHOSSFAAW
  { 3,	OperandInfo110 },  // Inst #868 = EVMHOSSFANW
  { 3,	OperandInfo110 },  // Inst #869 = EVMHOSSIAAW
  { 3,	OperandInfo110 },  // Inst #870 = EVMHOSSIANW
  { 3,	OperandInfo110 },  // Inst #871 = EVMHOUMI
  { 3,	OperandInfo110 },  // Inst #872 = EVMHOUMIA
  { 3,	OperandInfo110 },  // Inst #873 = EVMHOUMIAAW
  { 3,	OperandInfo110 },  // Inst #874 = EVMHOUMIANW
  { 3,	OperandInfo110 },  // Inst #875 = EVMHOUSIAAW
  { 3,	OperandInfo110 },  // Inst #876 = EVMHOUSIANW
  { 2,	OperandInfo109 },  // Inst #877 = EVMRA
  { 3,	OperandInfo110 },  // Inst #878 = EVMWHSMF
  { 3,	OperandInfo110 },  // Inst #879 = EVMWHSMFA
  { 3,	OperandInfo110 },  // Inst #880 = EVMWHSMI
  { 3,	OperandInfo110 },  // Inst #881 = EVMWHSMIA
  { 3,	OperandInfo110 },  // Inst #882 = EVMWHSSF
  { 3,	OperandInfo110 },  // Inst #883 = EVMWHSSFA
  { 3,	OperandInfo110 },  // Inst #884 = EVMWHUMI
  { 3,	OperandInfo110 },  // Inst #885 = EVMWHUMIA
  { 3,	OperandInfo110 },  // Inst #886 = EVMWLSMIAAW
  { 3,	OperandInfo110 },  // Inst #887 = EVMWLSMIANW
  { 3,	OperandInfo110 },  // Inst #888 = EVMWLSSIAAW
  { 3,	OperandInfo110 },  // Inst #889 = EVMWLSSIANW
  { 3,	OperandInfo110 },  // Inst #890 = EVMWLUMI
  { 3,	OperandInfo110 },  // Inst #891 = EVMWLUMIA
  { 3,	OperandInfo110 },  // Inst #892 = EVMWLUMIAAW
  { 3,	OperandInfo110 },  // Inst #893 = EVMWLUMIANW
  { 3,	OperandInfo110 },  // Inst #894 = EVMWLUSIAAW
  { 3,	OperandInfo110 },  // Inst #895 = EVMWLUSIANW
  { 3,	OperandInfo110 },  // Inst #896 = EVMWSMF
  { 3,	OperandInfo110 },  // Inst #897 = EVMWSMFA
  { 3,	OperandInfo110 },  // Inst #898 = EVMWSMFAA
  { 3,	OperandInfo110 },  // Inst #899 = EVMWSMFAN
  { 3,	OperandInfo110 },  // Inst #900 = EVMWSMI
  { 3,	OperandInfo110 },  // Inst #901 = EVMWSMIA
  { 3,	OperandInfo110 },  // Inst #902 = EVMWSMIAA
  { 3,	OperandInfo110 },  // Inst #903 = EVMWSMIAN
  { 3,	OperandInfo110 },  // Inst #904 = EVMWSSF
  { 3,	OperandInfo110 },  // Inst #905 = EVMWSSFA
  { 3,	OperandInfo110 },  // Inst #906 = EVMWSSFAA
  { 3,	OperandInfo110 },  // Inst #907 = EVMWSSFAN
  { 3,	OperandInfo110 },  // Inst #908 = EVMWUMI
  { 3,	OperandInfo110 },  // Inst #909 = EVMWUMIA
  { 3,	OperandInfo110 },  // Inst #910 = EVMWUMIAA
  { 3,	OperandInfo110 },  // Inst #911 = EVMWUMIAN
  { 3,	OperandInfo110 },  // Inst #912 = EVNAND
  { 2,	OperandInfo109 },  // Inst #913 = EVNEG
  { 3,	OperandInfo110 },  // Inst #914 = EVNOR
  { 3,	OperandInfo110 },  // Inst #915 = EVOR
  { 3,	OperandInfo110 },  // Inst #916 = EVORC
  { 3,	OperandInfo110 },  // Inst #917 = EVRLW
  { 3,	OperandInfo116 },  // Inst #918 = EVRLWI
  { 2,	OperandInfo109 },  // Inst #919 = EVRNDW
  { 4,	OperandInfo120 },  // Inst #920 = EVSEL
  { 3,	OperandInfo110 },  // Inst #921 = EVSLW
  { 3,	OperandInfo116 },  // Inst #922 = EVSLWI
  { 2,	OperandInfo121 },  // Inst #923 = EVSPLATFI
  { 2,	OperandInfo121 },  // Inst #924 = EVSPLATI
  { 3,	OperandInfo116 },  // Inst #925 = EVSRWIS
  { 3,	OperandInfo116 },  // Inst #926 = EVSRWIU
  { 3,	OperandInfo110 },  // Inst #927 = EVSRWS
  { 3,	OperandInfo110 },  // Inst #928 = EVSRWU
  { 3,	OperandInfo117 },  // Inst #929 = EVSTDD
  { 3,	OperandInfo118 },  // Inst #930 = EVSTDDX
  { 3,	OperandInfo117 },  // Inst #931 = EVSTDH
  { 3,	OperandInfo118 },  // Inst #932 = EVSTDHX
  { 3,	OperandInfo117 },  // Inst #933 = EVSTDW
  { 3,	OperandInfo118 },  // Inst #934 = EVSTDWX
  { 3,	OperandInfo117 },  // Inst #935 = EVSTWHE
  { 3,	OperandInfo118 },  // Inst #936 = EVSTWHEX
  { 3,	OperandInfo117 },  // Inst #937 = EVSTWHO
  { 3,	OperandInfo118 },  // Inst #938 = EVSTWHOX
  { 3,	OperandInfo117 },  // Inst #939 = EVSTWWE
  { 3,	OperandInfo118 },  // Inst #940 = EVSTWWEX
  { 3,	OperandInfo117 },  // Inst #941 = EVSTWWO
  { 3,	OperandInfo118 },  // Inst #942 = EVSTWWOX
  { 2,	OperandInfo109 },  // Inst #943 = EVSUBFSMIAAW
  { 2,	OperandInfo109 },  // Inst #944 = EVSUBFSSIAAW
  { 2,	OperandInfo109 },  // Inst #945 = EVSUBFUMIAAW
  { 2,	OperandInfo109 },  // Inst #946 = EVSUBFUSIAAW
  { 3,	OperandInfo110 },  // Inst #947 = EVSUBFW
  { 3,	OperandInfo122 },  // Inst #948 = EVSUBIFW
  { 3,	OperandInfo110 },  // Inst #949 = EVXOR
  { 2,	OperandInfo77 },  // Inst #950 = EXTSB
  { 2,	OperandInfo78 },  // Inst #951 = EXTSB8
  { 2,	OperandInfo123 },  // Inst #952 = EXTSB8_32_64
  { 2,	OperandInfo78 },  // Inst #953 = EXTSB8_rec
  { 2,	OperandInfo77 },  // Inst #954 = EXTSB_rec
  { 2,	OperandInfo77 },  // Inst #955 = EXTSH
  { 2,	OperandInfo78 },  // Inst #956 = EXTSH8
  { 2,	OperandInfo123 },  // Inst #957 = EXTSH8_32_64
  { 2,	OperandInfo78 },  // Inst #958 = EXTSH8_rec
  { 2,	OperandInfo77 },  // Inst #959 = EXTSH_rec
  { 2,	OperandInfo78 },  // Inst #960 = EXTSW
  { 3,	OperandInfo51 },  // Inst #961 = EXTSWSLI
  { 3,	OperandInfo124 },  // Inst #962 = EXTSWSLI_32_64
  { 3,	OperandInfo124 },  // Inst #963 = EXTSWSLI_32_64_rec
  { 3,	OperandInfo51 },  // Inst #964 = EXTSWSLI_rec
  { 2,	OperandInfo77 },  // Inst #965 = EXTSW_32
  { 2,	OperandInfo123 },  // Inst #966 = EXTSW_32_64
  { 2,	OperandInfo123 },  // Inst #967 = EXTSW_32_64_rec
  { 2,	OperandInfo78 },  // Inst #968 = EXTSW_rec
  { 0,	NULL },  // Inst #969 = EnforceIEIO
  { 2,	OperandInfo125 },  // Inst #970 = FABSD
  { 2,	OperandInfo125 },  // Inst #971 = FABSD_rec
  { 2,	OperandInfo126 },  // Inst #972 = FABSS
  { 2,	OperandInfo126 },  // Inst #973 = FABSS_rec
  { 3,	OperandInfo127 },  // Inst #974 = FADD
  { 3,	OperandInfo128 },  // Inst #975 = FADDS
  { 3,	OperandInfo128 },  // Inst #976 = FADDS_rec
  { 3,	OperandInfo127 },  // Inst #977 = FADD_rec
  { 3,	OperandInfo127 },  // Inst #978 = FADDrtz
  { 2,	OperandInfo125 },  // Inst #979 = FCFID
  { 2,	OperandInfo129 },  // Inst #980 = FCFIDS
  { 2,	OperandInfo129 },  // Inst #981 = FCFIDS_rec
  { 2,	OperandInfo125 },  // Inst #982 = FCFIDU
  { 2,	OperandInfo129 },  // Inst #983 = FCFIDUS
  { 2,	OperandInfo129 },  // Inst #984 = FCFIDUS_rec
  { 2,	OperandInfo125 },  // Inst #985 = FCFIDU_rec
  { 2,	OperandInfo125 },  // Inst #986 = FCFID_rec
  { 3,	OperandInfo130 },  // Inst #987 = FCMPOD
  { 3,	OperandInfo131 },  // Inst #988 = FCMPOS
  { 3,	OperandInfo130 },  // Inst #989 = FCMPUD
  { 3,	OperandInfo131 },  // Inst #990 = FCMPUS
  { 3,	OperandInfo127 },  // Inst #991 = FCPSGND
  { 3,	OperandInfo127 },  // Inst #992 = FCPSGND_rec
  { 3,	OperandInfo128 },  // Inst #993 = FCPSGNS
  { 3,	OperandInfo128 },  // Inst #994 = FCPSGNS_rec
  { 2,	OperandInfo125 },  // Inst #995 = FCTID
  { 2,	OperandInfo125 },  // Inst #996 = FCTIDU
  { 2,	OperandInfo125 },  // Inst #997 = FCTIDUZ
  { 2,	OperandInfo125 },  // Inst #998 = FCTIDUZ_rec
  { 2,	OperandInfo125 },  // Inst #999 = FCTIDU_rec
  { 2,	OperandInfo125 },  // Inst #1000 = FCTIDZ
  { 2,	OperandInfo125 },  // Inst #1001 = FCTIDZ_rec
  { 2,	OperandInfo125 },  // Inst #1002 = FCTID_rec
  { 2,	OperandInfo125 },  // Inst #1003 = FCTIW
  { 2,	OperandInfo125 },  // Inst #1004 = FCTIWU
  { 2,	OperandInfo125 },  // Inst #1005 = FCTIWUZ
  { 2,	OperandInfo125 },  // Inst #1006 = FCTIWUZ_rec
  { 2,	OperandInfo125 },  // Inst #1007 = FCTIWU_rec
  { 2,	OperandInfo125 },  // Inst #1008 = FCTIWZ
  { 2,	OperandInfo125 },  // Inst #1009 = FCTIWZ_rec
  { 2,	OperandInfo125 },  // Inst #1010 = FCTIW_rec
  { 3,	OperandInfo127 },  // Inst #1011 = FDIV
  { 3,	OperandInfo128 },  // Inst #1012 = FDIVS
  { 3,	OperandInfo128 },  // Inst #1013 = FDIVS_rec
  { 3,	OperandInfo127 },  // Inst #1014 = FDIV_rec
  { 4,	OperandInfo132 },  // Inst #1015 = FMADD
  { 4,	OperandInfo133 },  // Inst #1016 = FMADDS
  { 4,	OperandInfo133 },  // Inst #1017 = FMADDS_rec
  { 4,	OperandInfo132 },  // Inst #1018 = FMADD_rec
  { 2,	OperandInfo126 },  // Inst #1019 = FMR
  { 2,	OperandInfo126 },  // Inst #1020 = FMR_rec
  { 4,	OperandInfo132 },  // Inst #1021 = FMSUB
  { 4,	OperandInfo133 },  // Inst #1022 = FMSUBS
  { 4,	OperandInfo133 },  // Inst #1023 = FMSUBS_rec
  { 4,	OperandInfo132 },  // Inst #1024 = FMSUB_rec
  { 3,	OperandInfo127 },  // Inst #1025 = FMUL
  { 3,	OperandInfo128 },  // Inst #1026 = FMULS
  { 3,	OperandInfo128 },  // Inst #1027 = FMULS_rec
  { 3,	OperandInfo127 },  // Inst #1028 = FMUL_rec
  { 2,	OperandInfo125 },  // Inst #1029 = FNABSD
  { 2,	OperandInfo125 },  // Inst #1030 = FNABSD_rec
  { 2,	OperandInfo126 },  // Inst #1031 = FNABSS
  { 2,	OperandInfo126 },  // Inst #1032 = FNABSS_rec
  { 2,	OperandInfo125 },  // Inst #1033 = FNEGD
  { 2,	OperandInfo125 },  // Inst #1034 = FNEGD_rec
  { 2,	OperandInfo126 },  // Inst #1035 = FNEGS
  { 2,	OperandInfo126 },  // Inst #1036 = FNEGS_rec
  { 4,	OperandInfo132 },  // Inst #1037 = FNMADD
  { 4,	OperandInfo133 },  // Inst #1038 = FNMADDS
  { 4,	OperandInfo133 },  // Inst #1039 = FNMADDS_rec
  { 4,	OperandInfo132 },  // Inst #1040 = FNMADD_rec
  { 4,	OperandInfo132 },  // Inst #1041 = FNMSUB
  { 4,	OperandInfo133 },  // Inst #1042 = FNMSUBS
  { 4,	OperandInfo133 },  // Inst #1043 = FNMSUBS_rec
  { 4,	OperandInfo132 },  // Inst #1044 = FNMSUB_rec
  { 2,	OperandInfo125 },  // Inst #1045 = FRE
  { 2,	OperandInfo126 },  // Inst #1046 = FRES
  { 2,	OperandInfo126 },  // Inst #1047 = FRES_rec
  { 2,	OperandInfo125 },  // Inst #1048 = FRE_rec
  { 2,	OperandInfo125 },  // Inst #1049 = FRIMD
  { 2,	OperandInfo125 },  // Inst #1050 = FRIMD_rec
  { 2,	OperandInfo126 },  // Inst #1051 = FRIMS
  { 2,	OperandInfo126 },  // Inst #1052 = FRIMS_rec
  { 2,	OperandInfo125 },  // Inst #1053 = FRIND
  { 2,	OperandInfo125 },  // Inst #1054 = FRIND_rec
  { 2,	OperandInfo126 },  // Inst #1055 = FRINS
  { 2,	OperandInfo126 },  // Inst #1056 = FRINS_rec
  { 2,	OperandInfo125 },  // Inst #1057 = FRIPD
  { 2,	OperandInfo125 },  // Inst #1058 = FRIPD_rec
  { 2,	OperandInfo126 },  // Inst #1059 = FRIPS
  { 2,	OperandInfo126 },  // Inst #1060 = FRIPS_rec
  { 2,	OperandInfo125 },  // Inst #1061 = FRIZD
  { 2,	OperandInfo125 },  // Inst #1062 = FRIZD_rec
  { 2,	OperandInfo126 },  // Inst #1063 = FRIZS
  { 2,	OperandInfo126 },  // Inst #1064 = FRIZS_rec
  { 2,	OperandInfo129 },  // Inst #1065 = FRSP
  { 2,	OperandInfo129 },  // Inst #1066 = FRSP_rec
  { 2,	OperandInfo125 },  // Inst #1067 = FRSQRTE
  { 2,	OperandInfo126 },  // Inst #1068 = FRSQRTES
  { 2,	OperandInfo126 },  // Inst #1069 = FRSQRTES_rec
  { 2,	OperandInfo125 },  // Inst #1070 = FRSQRTE_rec
  { 4,	OperandInfo132 },  // Inst #1071 = FSELD
  { 4,	OperandInfo132 },  // Inst #1072 = FSELD_rec
  { 4,	OperandInfo134 },  // Inst #1073 = FSELS
  { 4,	OperandInfo134 },  // Inst #1074 = FSELS_rec
  { 2,	OperandInfo125 },  // Inst #1075 = FSQRT
  { 2,	OperandInfo126 },  // Inst #1076 = FSQRTS
  { 2,	OperandInfo126 },  // Inst #1077 = FSQRTS_rec
  { 2,	OperandInfo125 },  // Inst #1078 = FSQRT_rec
  { 3,	OperandInfo127 },  // Inst #1079 = FSUB
  { 3,	OperandInfo128 },  // Inst #1080 = FSUBS
  { 3,	OperandInfo128 },  // Inst #1081 = FSUBS_rec
  { 3,	OperandInfo127 },  // Inst #1082 = FSUB_rec
  { 3,	OperandInfo130 },  // Inst #1083 = FTDIV
  { 2,	OperandInfo135 },  // Inst #1084 = FTSQRT
  { 3,	OperandInfo68 },  // Inst #1085 = GETtlsADDR
  { 3,	OperandInfo65 },  // Inst #1086 = GETtlsADDR32
  { 3,	OperandInfo64 },  // Inst #1087 = GETtlsADDR32AIX
  { 3,	OperandInfo66 },  // Inst #1088 = GETtlsADDR64AIX
  { 3,	OperandInfo68 },  // Inst #1089 = GETtlsADDRPCREL
  { 3,	OperandInfo68 },  // Inst #1090 = GETtlsldADDR
  { 3,	OperandInfo65 },  // Inst #1091 = GETtlsldADDR32
  { 3,	OperandInfo68 },  // Inst #1092 = GETtlsldADDRPCREL
  { 3,	OperandInfo136 },  // Inst #1093 = HASHCHK
  { 3,	OperandInfo136 },  // Inst #1094 = HASHCHKP
  { 3,	OperandInfo136 },  // Inst #1095 = HASHST
  { 3,	OperandInfo136 },  // Inst #1096 = HASHSTP
  { 0,	NULL },  // Inst #1097 = HRFID
  { 2,	OperandInfo53 },  // Inst #1098 = ICBI
  { 2,	OperandInfo53 },  // Inst #1099 = ICBIEP
  { 3,	OperandInfo103 },  // Inst #1100 = ICBLC
  { 3,	OperandInfo103 },  // Inst #1101 = ICBLQ
  { 3,	OperandInfo103 },  // Inst #1102 = ICBT
  { 3,	OperandInfo103 },  // Inst #1103 = ICBTLS
  { 2,	OperandInfo77 },  // Inst #1104 = ICCCI
  { 4,	OperandInfo137 },  // Inst #1105 = ISEL
  { 4,	OperandInfo138 },  // Inst #1106 = ISEL8
  { 0,	NULL },  // Inst #1107 = ISYNC
  { 3,	OperandInfo71 },  // Inst #1108 = LA
  { 3,	OperandInfo139 },  // Inst #1109 = LBARX
  { 3,	OperandInfo139 },  // Inst #1110 = LBARXL
  { 3,	OperandInfo139 },  // Inst #1111 = LBEPX
  { 3,	OperandInfo58 },  // Inst #1112 = LBZ
  { 3,	OperandInfo136 },  // Inst #1113 = LBZ8
  { 3,	OperandInfo64 },  // Inst #1114 = LBZCIX
  { 4,	OperandInfo140 },  // Inst #1115 = LBZU
  { 4,	OperandInfo141 },  // Inst #1116 = LBZU8
  { 4,	OperandInfo142 },  // Inst #1117 = LBZUX
  { 4,	OperandInfo143 },  // Inst #1118 = LBZUX8
  { 3,	OperandInfo139 },  // Inst #1119 = LBZX
  { 3,	OperandInfo144 },  // Inst #1120 = LBZX8
  { 3,	OperandInfo145 },  // Inst #1121 = LBZXTLS
  { 3,	OperandInfo145 },  // Inst #1122 = LBZXTLS_
  { 3,	OperandInfo146 },  // Inst #1123 = LBZXTLS_32
  { 3,	OperandInfo136 },  // Inst #1124 = LD
  { 3,	OperandInfo144 },  // Inst #1125 = LDARX
  { 3,	OperandInfo144 },  // Inst #1126 = LDARXL
  { 3,	OperandInfo51 },  // Inst #1127 = LDAT
  { 3,	OperandInfo144 },  // Inst #1128 = LDBRX
  { 3,	OperandInfo64 },  // Inst #1129 = LDCIX
  { 3,	OperandInfo144 },  // Inst #1130 = LDMX
  { 4,	OperandInfo141 },  // Inst #1131 = LDU
  { 4,	OperandInfo143 },  // Inst #1132 = LDUX
  { 3,	OperandInfo144 },  // Inst #1133 = LDX
  { 3,	OperandInfo145 },  // Inst #1134 = LDXTLS
  { 3,	OperandInfo145 },  // Inst #1135 = LDXTLS_
  { 3,	OperandInfo147 },  // Inst #1136 = LDgotTprelL
  { 3,	OperandInfo148 },  // Inst #1137 = LDgotTprelL32
  { 3,	OperandInfo149 },  // Inst #1138 = LDtoc
  { 3,	OperandInfo149 },  // Inst #1139 = LDtocBA
  { 3,	OperandInfo149 },  // Inst #1140 = LDtocCPT
  { 3,	OperandInfo149 },  // Inst #1141 = LDtocJTI
  { 3,	OperandInfo150 },  // Inst #1142 = LDtocL
  { 3,	OperandInfo151 },  // Inst #1143 = LFD
  { 3,	OperandInfo152 },  // Inst #1144 = LFDEPX
  { 4,	OperandInfo153 },  // Inst #1145 = LFDU
  { 4,	OperandInfo154 },  // Inst #1146 = LFDUX
  { 3,	OperandInfo152 },  // Inst #1147 = LFDX
  { 3,	OperandInfo152 },  // Inst #1148 = LFIWAX
  { 3,	OperandInfo152 },  // Inst #1149 = LFIWZX
  { 3,	OperandInfo155 },  // Inst #1150 = LFS
  { 4,	OperandInfo156 },  // Inst #1151 = LFSU
  { 4,	OperandInfo157 },  // Inst #1152 = LFSUX
  { 3,	OperandInfo158 },  // Inst #1153 = LFSX
  { 3,	OperandInfo58 },  // Inst #1154 = LHA
  { 3,	OperandInfo136 },  // Inst #1155 = LHA8
  { 3,	OperandInfo139 },  // Inst #1156 = LHARX
  { 3,	OperandInfo139 },  // Inst #1157 = LHARXL
  { 4,	OperandInfo140 },  // Inst #1158 = LHAU
  { 4,	OperandInfo141 },  // Inst #1159 = LHAU8
  { 4,	OperandInfo142 },  // Inst #1160 = LHAUX
  { 4,	OperandInfo143 },  // Inst #1161 = LHAUX8
  { 3,	OperandInfo139 },  // Inst #1162 = LHAX
  { 3,	OperandInfo144 },  // Inst #1163 = LHAX8
  { 3,	OperandInfo139 },  // Inst #1164 = LHBRX
  { 3,	OperandInfo144 },  // Inst #1165 = LHBRX8
  { 3,	OperandInfo139 },  // Inst #1166 = LHEPX
  { 3,	OperandInfo58 },  // Inst #1167 = LHZ
  { 3,	OperandInfo136 },  // Inst #1168 = LHZ8
  { 3,	OperandInfo64 },  // Inst #1169 = LHZCIX
  { 4,	OperandInfo140 },  // Inst #1170 = LHZU
  { 4,	OperandInfo141 },  // Inst #1171 = LHZU8
  { 4,	OperandInfo142 },  // Inst #1172 = LHZUX
  { 4,	OperandInfo143 },  // Inst #1173 = LHZUX8
  { 3,	OperandInfo139 },  // Inst #1174 = LHZX
  { 3,	OperandInfo144 },  // Inst #1175 = LHZX8
  { 3,	OperandInfo145 },  // Inst #1176 = LHZXTLS
  { 3,	OperandInfo145 },  // Inst #1177 = LHZXTLS_
  { 3,	OperandInfo146 },  // Inst #1178 = LHZXTLS_32
  { 2,	OperandInfo159 },  // Inst #1179 = LI
  { 2,	OperandInfo62 },  // Inst #1180 = LI8
  { 2,	OperandInfo159 },  // Inst #1181 = LIS
  { 2,	OperandInfo62 },  // Inst #1182 = LIS8
  { 3,	OperandInfo58 },  // Inst #1183 = LMW
  { 3,	OperandInfo160 },  // Inst #1184 = LQ
  { 3,	OperandInfo161 },  // Inst #1185 = LQARX
  { 3,	OperandInfo161 },  // Inst #1186 = LQARXL
  { 3,	OperandInfo161 },  // Inst #1187 = LQX_PSEUDO
  { 3,	OperandInfo52 },  // Inst #1188 = LSWI
  { 3,	OperandInfo162 },  // Inst #1189 = LVEBX
  { 3,	OperandInfo162 },  // Inst #1190 = LVEHX
  { 3,	OperandInfo162 },  // Inst #1191 = LVEWX
  { 3,	OperandInfo162 },  // Inst #1192 = LVSL
  { 3,	OperandInfo162 },  // Inst #1193 = LVSR
  { 3,	OperandInfo162 },  // Inst #1194 = LVX
  { 3,	OperandInfo162 },  // Inst #1195 = LVXL
  { 3,	OperandInfo136 },  // Inst #1196 = LWA
  { 3,	OperandInfo139 },  // Inst #1197 = LWARX
  { 3,	OperandInfo139 },  // Inst #1198 = LWARXL
  { 3,	OperandInfo52 },  // Inst #1199 = LWAT
  { 4,	OperandInfo143 },  // Inst #1200 = LWAUX
  { 3,	OperandInfo144 },  // Inst #1201 = LWAX
  { 3,	OperandInfo139 },  // Inst #1202 = LWAX_32
  { 3,	OperandInfo58 },  // Inst #1203 = LWA_32
  { 3,	OperandInfo139 },  // Inst #1204 = LWBRX
  { 3,	OperandInfo144 },  // Inst #1205 = LWBRX8
  { 3,	OperandInfo139 },  // Inst #1206 = LWEPX
  { 3,	OperandInfo58 },  // Inst #1207 = LWZ
  { 3,	OperandInfo136 },  // Inst #1208 = LWZ8
  { 3,	OperandInfo64 },  // Inst #1209 = LWZCIX
  { 4,	OperandInfo140 },  // Inst #1210 = LWZU
  { 4,	OperandInfo141 },  // Inst #1211 = LWZU8
  { 4,	OperandInfo142 },  // Inst #1212 = LWZUX
  { 4,	OperandInfo143 },  // Inst #1213 = LWZUX8
  { 3,	OperandInfo139 },  // Inst #1214 = LWZX
  { 3,	OperandInfo144 },  // Inst #1215 = LWZX8
  { 3,	OperandInfo145 },  // Inst #1216 = LWZXTLS
  { 3,	OperandInfo145 },  // Inst #1217 = LWZXTLS_
  { 3,	OperandInfo146 },  // Inst #1218 = LWZXTLS_32
  { 3,	OperandInfo76 },  // Inst #1219 = LWZtoc
  { 3,	OperandInfo163 },  // Inst #1220 = LWZtocL
  { 3,	OperandInfo164 },  // Inst #1221 = LXSD
  { 3,	OperandInfo59 },  // Inst #1222 = LXSDX
  { 3,	OperandInfo59 },  // Inst #1223 = LXSIBZX
  { 3,	OperandInfo59 },  // Inst #1224 = LXSIHZX
  { 3,	OperandInfo59 },  // Inst #1225 = LXSIWAX
  { 3,	OperandInfo59 },  // Inst #1226 = LXSIWZX
  { 3,	OperandInfo164 },  // Inst #1227 = LXSSP
  { 3,	OperandInfo63 },  // Inst #1228 = LXSSPX
  { 3,	OperandInfo165 },  // Inst #1229 = LXV
  { 3,	OperandInfo166 },  // Inst #1230 = LXVB16X
  { 3,	OperandInfo166 },  // Inst #1231 = LXVD2X
  { 3,	OperandInfo166 },  // Inst #1232 = LXVDSX
  { 3,	OperandInfo166 },  // Inst #1233 = LXVH8X
  { 3,	OperandInfo167 },  // Inst #1234 = LXVL
  { 3,	OperandInfo167 },  // Inst #1235 = LXVLL
  { 3,	OperandInfo168 },  // Inst #1236 = LXVP
  { 3,	OperandInfo169 },  // Inst #1237 = LXVPX
  { 3,	OperandInfo166 },  // Inst #1238 = LXVRBX
  { 3,	OperandInfo166 },  // Inst #1239 = LXVRDX
  { 3,	OperandInfo166 },  // Inst #1240 = LXVRHX
  { 3,	OperandInfo166 },  // Inst #1241 = LXVRWX
  { 3,	OperandInfo166 },  // Inst #1242 = LXVW4X
  { 3,	OperandInfo166 },  // Inst #1243 = LXVWSX
  { 3,	OperandInfo166 },  // Inst #1244 = LXVX
  { 4,	OperandInfo170 },  // Inst #1245 = MADDHD
  { 4,	OperandInfo170 },  // Inst #1246 = MADDHDU
  { 4,	OperandInfo171 },  // Inst #1247 = MADDLD
  { 4,	OperandInfo170 },  // Inst #1248 = MADDLD8
  { 1,	OperandInfo3 },  // Inst #1249 = MBAR
  { 2,	OperandInfo172 },  // Inst #1250 = MCRF
  { 2,	OperandInfo172 },  // Inst #1251 = MCRFS
  { 1,	OperandInfo173 },  // Inst #1252 = MCRXRX
  { 3,	OperandInfo174 },  // Inst #1253 = MFBHRBE
  { 1,	OperandInfo175 },  // Inst #1254 = MFCR
  { 1,	OperandInfo48 },  // Inst #1255 = MFCR8
  { 1,	OperandInfo175 },  // Inst #1256 = MFCTR
  { 1,	OperandInfo48 },  // Inst #1257 = MFCTR8
  { 2,	OperandInfo159 },  // Inst #1258 = MFDCR
  { 1,	OperandInfo176 },  // Inst #1259 = MFFS
  { 2,	OperandInfo125 },  // Inst #1260 = MFFSCDRN
  { 2,	OperandInfo177 },  // Inst #1261 = MFFSCDRNI
  { 1,	OperandInfo176 },  // Inst #1262 = MFFSCE
  { 2,	OperandInfo125 },  // Inst #1263 = MFFSCRN
  { 2,	OperandInfo177 },  // Inst #1264 = MFFSCRNI
  { 1,	OperandInfo176 },  // Inst #1265 = MFFSL
  { 1,	OperandInfo176 },  // Inst #1266 = MFFS_rec
  { 1,	OperandInfo175 },  // Inst #1267 = MFLR
  { 1,	OperandInfo48 },  // Inst #1268 = MFLR8
  { 1,	OperandInfo175 },  // Inst #1269 = MFMSR
  { 2,	OperandInfo178 },  // Inst #1270 = MFOCRF
  { 2,	OperandInfo179 },  // Inst #1271 = MFOCRF8
  { 2,	OperandInfo159 },  // Inst #1272 = MFPMR
  { 2,	OperandInfo159 },  // Inst #1273 = MFSPR
  { 2,	OperandInfo62 },  // Inst #1274 = MFSPR8
  { 2,	OperandInfo159 },  // Inst #1275 = MFSR
  { 2,	OperandInfo77 },  // Inst #1276 = MFSRIN
  { 2,	OperandInfo159 },  // Inst #1277 = MFTB
  { 1,	OperandInfo48 },  // Inst #1278 = MFTB8
  { 2,	OperandInfo180 },  // Inst #1279 = MFVRD
  { 1,	OperandInfo175 },  // Inst #1280 = MFVRSAVE
  { 2,	OperandInfo181 },  // Inst #1281 = MFVRSAVEv
  { 2,	OperandInfo182 },  // Inst #1282 = MFVRWZ
  { 1,	OperandInfo183 },  // Inst #1283 = MFVSCR
  { 2,	OperandInfo184 },  // Inst #1284 = MFVSRD
  { 2,	OperandInfo180 },  // Inst #1285 = MFVSRLD
  { 2,	OperandInfo185 },  // Inst #1286 = MFVSRWZ
  { 3,	OperandInfo66 },  // Inst #1287 = MODSD
  { 3,	OperandInfo64 },  // Inst #1288 = MODSW
  { 3,	OperandInfo66 },  // Inst #1289 = MODUD
  { 3,	OperandInfo64 },  // Inst #1290 = MODUW
  { 0,	NULL },  // Inst #1291 = MSGSYNC
  { 0,	NULL },  // Inst #1292 = MSYNC
  { 2,	OperandInfo186 },  // Inst #1293 = MTCRF
  { 2,	OperandInfo187 },  // Inst #1294 = MTCRF8
  { 1,	OperandInfo175 },  // Inst #1295 = MTCTR
  { 1,	OperandInfo48 },  // Inst #1296 = MTCTR8
  { 1,	OperandInfo48 },  // Inst #1297 = MTCTR8loop
  { 1,	OperandInfo175 },  // Inst #1298 = MTCTRloop
  { 2,	OperandInfo159 },  // Inst #1299 = MTDCR
  { 1,	OperandInfo3 },  // Inst #1300 = MTFSB0
  { 1,	OperandInfo3 },  // Inst #1301 = MTFSB1
  { 4,	OperandInfo188 },  // Inst #1302 = MTFSF
  { 3,	OperandInfo189 },  // Inst #1303 = MTFSFI
  { 3,	OperandInfo189 },  // Inst #1304 = MTFSFI_rec
  { 2,	OperandInfo10 },  // Inst #1305 = MTFSFIb
  { 4,	OperandInfo188 },  // Inst #1306 = MTFSF_rec
  { 2,	OperandInfo190 },  // Inst #1307 = MTFSFb
  { 1,	OperandInfo175 },  // Inst #1308 = MTLR
  { 1,	OperandInfo48 },  // Inst #1309 = MTLR8
  { 2,	OperandInfo159 },  // Inst #1310 = MTMSR
  { 2,	OperandInfo159 },  // Inst #1311 = MTMSRD
  { 2,	OperandInfo191 },  // Inst #1312 = MTOCRF
  { 2,	OperandInfo192 },  // Inst #1313 = MTOCRF8
  { 2,	OperandInfo186 },  // Inst #1314 = MTPMR
  { 2,	OperandInfo186 },  // Inst #1315 = MTSPR
  { 2,	OperandInfo187 },  // Inst #1316 = MTSPR8
  { 2,	OperandInfo159 },  // Inst #1317 = MTSR
  { 2,	OperandInfo77 },  // Inst #1318 = MTSRIN
  { 2,	OperandInfo193 },  // Inst #1319 = MTVRD
  { 1,	OperandInfo175 },  // Inst #1320 = MTVRSAVE
  { 2,	OperandInfo194 },  // Inst #1321 = MTVRSAVEv
  { 2,	OperandInfo195 },  // Inst #1322 = MTVRWA
  { 2,	OperandInfo195 },  // Inst #1323 = MTVRWZ
  { 1,	OperandInfo183 },  // Inst #1324 = MTVSCR
  { 2,	OperandInfo196 },  // Inst #1325 = MTVSRBM
  { 2,	OperandInfo197 },  // Inst #1326 = MTVSRBMI
  { 2,	OperandInfo198 },  // Inst #1327 = MTVSRD
  { 3,	OperandInfo199 },  // Inst #1328 = MTVSRDD
  { 2,	OperandInfo196 },  // Inst #1329 = MTVSRDM
  { 2,	OperandInfo196 },  // Inst #1330 = MTVSRHM
  { 2,	OperandInfo196 },  // Inst #1331 = MTVSRQM
  { 2,	OperandInfo200 },  // Inst #1332 = MTVSRWA
  { 2,	OperandInfo196 },  // Inst #1333 = MTVSRWM
  { 2,	OperandInfo195 },  // Inst #1334 = MTVSRWS
  { 2,	OperandInfo200 },  // Inst #1335 = MTVSRWZ
  { 3,	OperandInfo66 },  // Inst #1336 = MULHD
  { 3,	OperandInfo66 },  // Inst #1337 = MULHDU
  { 3,	OperandInfo66 },  // Inst #1338 = MULHDU_rec
  { 3,	OperandInfo66 },  // Inst #1339 = MULHD_rec
  { 3,	OperandInfo64 },  // Inst #1340 = MULHW
  { 3,	OperandInfo64 },  // Inst #1341 = MULHWU
  { 3,	OperandInfo64 },  // Inst #1342 = MULHWU_rec
  { 3,	OperandInfo64 },  // Inst #1343 = MULHW_rec
  { 3,	OperandInfo66 },  // Inst #1344 = MULLD
  { 3,	OperandInfo66 },  // Inst #1345 = MULLDO
  { 3,	OperandInfo66 },  // Inst #1346 = MULLDO_rec
  { 3,	OperandInfo66 },  // Inst #1347 = MULLD_rec
  { 3,	OperandInfo52 },  // Inst #1348 = MULLI
  { 3,	OperandInfo51 },  // Inst #1349 = MULLI8
  { 3,	OperandInfo64 },  // Inst #1350 = MULLW
  { 3,	OperandInfo64 },  // Inst #1351 = MULLWO
  { 3,	OperandInfo64 },  // Inst #1352 = MULLWO_rec
  { 3,	OperandInfo64 },  // Inst #1353 = MULLW_rec
  { 0,	NULL },  // Inst #1354 = MoveGOTtoLR
  { 0,	NULL },  // Inst #1355 = MovePCtoLR
  { 0,	NULL },  // Inst #1356 = MovePCtoLR8
  { 3,	OperandInfo64 },  // Inst #1357 = NAND
  { 3,	OperandInfo66 },  // Inst #1358 = NAND8
  { 3,	OperandInfo66 },  // Inst #1359 = NAND8_rec
  { 3,	OperandInfo64 },  // Inst #1360 = NAND_rec
  { 0,	NULL },  // Inst #1361 = NAP
  { 2,	OperandInfo77 },  // Inst #1362 = NEG
  { 2,	OperandInfo78 },  // Inst #1363 = NEG8
  { 2,	OperandInfo78 },  // Inst #1364 = NEG8O
  { 2,	OperandInfo78 },  // Inst #1365 = NEG8O_rec
  { 2,	OperandInfo78 },  // Inst #1366 = NEG8_rec
  { 2,	OperandInfo77 },  // Inst #1367 = NEGO
  { 2,	OperandInfo77 },  // Inst #1368 = NEGO_rec
  { 2,	OperandInfo77 },  // Inst #1369 = NEG_rec
  { 0,	NULL },  // Inst #1370 = NOP
  { 0,	NULL },  // Inst #1371 = NOP_GT_PWR6
  { 0,	NULL },  // Inst #1372 = NOP_GT_PWR7
  { 3,	OperandInfo64 },  // Inst #1373 = NOR
  { 3,	OperandInfo66 },  // Inst #1374 = NOR8
  { 3,	OperandInfo66 },  // Inst #1375 = NOR8_rec
  { 3,	OperandInfo64 },  // Inst #1376 = NOR_rec
  { 3,	OperandInfo64 },  // Inst #1377 = OR
  { 3,	OperandInfo66 },  // Inst #1378 = OR8
  { 3,	OperandInfo66 },  // Inst #1379 = OR8_rec
  { 3,	OperandInfo64 },  // Inst #1380 = ORC
  { 3,	OperandInfo66 },  // Inst #1381 = ORC8
  { 3,	OperandInfo66 },  // Inst #1382 = ORC8_rec
  { 3,	OperandInfo64 },  // Inst #1383 = ORC_rec
  { 3,	OperandInfo52 },  // Inst #1384 = ORI
  { 3,	OperandInfo51 },  // Inst #1385 = ORI8
  { 3,	OperandInfo52 },  // Inst #1386 = ORIS
  { 3,	OperandInfo51 },  // Inst #1387 = ORIS8
  { 3,	OperandInfo64 },  // Inst #1388 = OR_rec
  { 3,	OperandInfo52 },  // Inst #1389 = PADDI
  { 3,	OperandInfo51 },  // Inst #1390 = PADDI8
  { 3,	OperandInfo201 },  // Inst #1391 = PADDI8pc
  { 3,	OperandInfo72 },  // Inst #1392 = PADDIdtprel
  { 3,	OperandInfo174 },  // Inst #1393 = PADDIpc
  { 3,	OperandInfo66 },  // Inst #1394 = PDEPD
  { 3,	OperandInfo66 },  // Inst #1395 = PEXTD
  { 3,	OperandInfo202 },  // Inst #1396 = PLBZ
  { 3,	OperandInfo203 },  // Inst #1397 = PLBZ8
  { 3,	OperandInfo204 },  // Inst #1398 = PLBZ8pc
  { 3,	OperandInfo205 },  // Inst #1399 = PLBZpc
  { 3,	OperandInfo203 },  // Inst #1400 = PLD
  { 3,	OperandInfo204 },  // Inst #1401 = PLDpc
  { 3,	OperandInfo206 },  // Inst #1402 = PLFD
  { 3,	OperandInfo207 },  // Inst #1403 = PLFDpc
  { 3,	OperandInfo208 },  // Inst #1404 = PLFS
  { 3,	OperandInfo209 },  // Inst #1405 = PLFSpc
  { 3,	OperandInfo202 },  // Inst #1406 = PLHA
  { 3,	OperandInfo203 },  // Inst #1407 = PLHA8
  { 3,	OperandInfo204 },  // Inst #1408 = PLHA8pc
  { 3,	OperandInfo205 },  // Inst #1409 = PLHApc
  { 3,	OperandInfo202 },  // Inst #1410 = PLHZ
  { 3,	OperandInfo203 },  // Inst #1411 = PLHZ8
  { 3,	OperandInfo204 },  // Inst #1412 = PLHZ8pc
  { 3,	OperandInfo205 },  // Inst #1413 = PLHZpc
  { 2,	OperandInfo159 },  // Inst #1414 = PLI
  { 2,	OperandInfo62 },  // Inst #1415 = PLI8
  { 3,	OperandInfo202 },  // Inst #1416 = PLWA
  { 3,	OperandInfo203 },  // Inst #1417 = PLWA8
  { 3,	OperandInfo204 },  // Inst #1418 = PLWA8pc
  { 3,	OperandInfo205 },  // Inst #1419 = PLWApc
  { 3,	OperandInfo202 },  // Inst #1420 = PLWZ
  { 3,	OperandInfo203 },  // Inst #1421 = PLWZ8
  { 3,	OperandInfo204 },  // Inst #1422 = PLWZ8pc
  { 3,	OperandInfo205 },  // Inst #1423 = PLWZpc
  { 3,	OperandInfo210 },  // Inst #1424 = PLXSD
  { 3,	OperandInfo211 },  // Inst #1425 = PLXSDpc
  { 3,	OperandInfo210 },  // Inst #1426 = PLXSSP
  { 3,	OperandInfo211 },  // Inst #1427 = PLXSSPpc
  { 3,	OperandInfo212 },  // Inst #1428 = PLXV
  { 3,	OperandInfo213 },  // Inst #1429 = PLXVP
  { 3,	OperandInfo214 },  // Inst #1430 = PLXVPpc
  { 3,	OperandInfo215 },  // Inst #1431 = PLXVpc
  { 6,	OperandInfo216 },  // Inst #1432 = PMXVBF16GER2
  { 7,	OperandInfo217 },  // Inst #1433 = PMXVBF16GER2NN
  { 7,	OperandInfo217 },  // Inst #1434 = PMXVBF16GER2NP
  { 7,	OperandInfo217 },  // Inst #1435 = PMXVBF16GER2PN
  { 7,	OperandInfo217 },  // Inst #1436 = PMXVBF16GER2PP
  { 6,	OperandInfo216 },  // Inst #1437 = PMXVF16GER2
  { 7,	OperandInfo217 },  // Inst #1438 = PMXVF16GER2NN
  { 7,	OperandInfo217 },  // Inst #1439 = PMXVF16GER2NP
  { 7,	OperandInfo217 },  // Inst #1440 = PMXVF16GER2PN
  { 7,	OperandInfo217 },  // Inst #1441 = PMXVF16GER2PP
  { 5,	OperandInfo218 },  // Inst #1442 = PMXVF32GER
  { 6,	OperandInfo219 },  // Inst #1443 = PMXVF32GERNN
  { 6,	OperandInfo219 },  // Inst #1444 = PMXVF32GERNP
  { 6,	OperandInfo219 },  // Inst #1445 = PMXVF32GERPN
  { 6,	OperandInfo219 },  // Inst #1446 = PMXVF32GERPP
  { 5,	OperandInfo220 },  // Inst #1447 = PMXVF64GER
  { 6,	OperandInfo221 },  // Inst #1448 = PMXVF64GERNN
  { 6,	OperandInfo221 },  // Inst #1449 = PMXVF64GERNP
  { 6,	OperandInfo221 },  // Inst #1450 = PMXVF64GERPN
  { 6,	OperandInfo221 },  // Inst #1451 = PMXVF64GERPP
  { 6,	OperandInfo216 },  // Inst #1452 = PMXVI16GER2
  { 7,	OperandInfo217 },  // Inst #1453 = PMXVI16GER2PP
  { 6,	OperandInfo216 },  // Inst #1454 = PMXVI16GER2S
  { 7,	OperandInfo217 },  // Inst #1455 = PMXVI16GER2SPP
  { 6,	OperandInfo216 },  // Inst #1456 = PMXVI4GER8
  { 7,	OperandInfo217 },  // Inst #1457 = PMXVI4GER8PP
  { 6,	OperandInfo216 },  // Inst #1458 = PMXVI8GER4
  { 7,	OperandInfo217 },  // Inst #1459 = PMXVI8GER4PP
  { 7,	OperandInfo217 },  // Inst #1460 = PMXVI8GER4SPP
  { 2,	OperandInfo77 },  // Inst #1461 = POPCNTB
  { 2,	OperandInfo78 },  // Inst #1462 = POPCNTB8
  { 2,	OperandInfo78 },  // Inst #1463 = POPCNTD
  { 2,	OperandInfo77 },  // Inst #1464 = POPCNTW
  { 1,	OperandInfo175 },  // Inst #1465 = PPC32GOT
  { 2,	OperandInfo77 },  // Inst #1466 = PPC32PICGOT
  { 5,	OperandInfo222 },  // Inst #1467 = PREPARE_PROBED_ALLOCA_32
  { 5,	OperandInfo223 },  // Inst #1468 = PREPARE_PROBED_ALLOCA_64
  { 5,	OperandInfo224 },  // Inst #1469 = PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
  { 5,	OperandInfo225 },  // Inst #1470 = PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
  { 4,	OperandInfo106 },  // Inst #1471 = PROBED_ALLOCA_32
  { 4,	OperandInfo107 },  // Inst #1472 = PROBED_ALLOCA_64
  { 3,	OperandInfo52 },  // Inst #1473 = PROBED_STACKALLOC_32
  { 3,	OperandInfo51 },  // Inst #1474 = PROBED_STACKALLOC_64
  { 3,	OperandInfo202 },  // Inst #1475 = PSTB
  { 3,	OperandInfo203 },  // Inst #1476 = PSTB8
  { 3,	OperandInfo204 },  // Inst #1477 = PSTB8pc
  { 3,	OperandInfo205 },  // Inst #1478 = PSTBpc
  { 3,	OperandInfo203 },  // Inst #1479 = PSTD
  { 3,	OperandInfo204 },  // Inst #1480 = PSTDpc
  { 3,	OperandInfo206 },  // Inst #1481 = PSTFD
  { 3,	OperandInfo207 },  // Inst #1482 = PSTFDpc
  { 3,	OperandInfo208 },  // Inst #1483 = PSTFS
  { 3,	OperandInfo209 },  // Inst #1484 = PSTFSpc
  { 3,	OperandInfo202 },  // Inst #1485 = PSTH
  { 3,	OperandInfo203 },  // Inst #1486 = PSTH8
  { 3,	OperandInfo204 },  // Inst #1487 = PSTH8pc
  { 3,	OperandInfo205 },  // Inst #1488 = PSTHpc
  { 3,	OperandInfo202 },  // Inst #1489 = PSTW
  { 3,	OperandInfo203 },  // Inst #1490 = PSTW8
  { 3,	OperandInfo204 },  // Inst #1491 = PSTW8pc
  { 3,	OperandInfo205 },  // Inst #1492 = PSTWpc
  { 3,	OperandInfo210 },  // Inst #1493 = PSTXSD
  { 3,	OperandInfo211 },  // Inst #1494 = PSTXSDpc
  { 3,	OperandInfo210 },  // Inst #1495 = PSTXSSP
  { 3,	OperandInfo211 },  // Inst #1496 = PSTXSSPpc
  { 3,	OperandInfo212 },  // Inst #1497 = PSTXV
  { 3,	OperandInfo213 },  // Inst #1498 = PSTXVP
  { 3,	OperandInfo214 },  // Inst #1499 = PSTXVPpc
  { 3,	OperandInfo215 },  // Inst #1500 = PSTXVpc
  { 0,	NULL },  // Inst #1501 = PseudoEIEIO
  { 3,	OperandInfo226 },  // Inst #1502 = RESTORE_ACC
  { 3,	OperandInfo227 },  // Inst #1503 = RESTORE_CR
  { 3,	OperandInfo228 },  // Inst #1504 = RESTORE_CRBIT
  { 3,	OperandInfo229 },  // Inst #1505 = RESTORE_QUADWORD
  { 3,	OperandInfo230 },  // Inst #1506 = RESTORE_UACC
  { 0,	NULL },  // Inst #1507 = RFCI
  { 0,	NULL },  // Inst #1508 = RFDI
  { 1,	OperandInfo3 },  // Inst #1509 = RFEBB
  { 0,	NULL },  // Inst #1510 = RFI
  { 0,	NULL },  // Inst #1511 = RFID
  { 0,	NULL },  // Inst #1512 = RFMCI
  { 4,	OperandInfo231 },  // Inst #1513 = RLDCL
  { 4,	OperandInfo231 },  // Inst #1514 = RLDCL_rec
  { 4,	OperandInfo231 },  // Inst #1515 = RLDCR
  { 4,	OperandInfo231 },  // Inst #1516 = RLDCR_rec
  { 4,	OperandInfo49 },  // Inst #1517 = RLDIC
  { 4,	OperandInfo49 },  // Inst #1518 = RLDICL
  { 4,	OperandInfo50 },  // Inst #1519 = RLDICL_32
  { 4,	OperandInfo232 },  // Inst #1520 = RLDICL_32_64
  { 4,	OperandInfo50 },  // Inst #1521 = RLDICL_32_rec
  { 4,	OperandInfo49 },  // Inst #1522 = RLDICL_rec
  { 4,	OperandInfo49 },  // Inst #1523 = RLDICR
  { 4,	OperandInfo50 },  // Inst #1524 = RLDICR_32
  { 4,	OperandInfo49 },  // Inst #1525 = RLDICR_rec
  { 4,	OperandInfo49 },  // Inst #1526 = RLDIC_rec
  { 5,	OperandInfo233 },  // Inst #1527 = RLDIMI
  { 5,	OperandInfo233 },  // Inst #1528 = RLDIMI_rec
  { 6,	OperandInfo234 },  // Inst #1529 = RLWIMI
  { 6,	OperandInfo235 },  // Inst #1530 = RLWIMI8
  { 6,	OperandInfo235 },  // Inst #1531 = RLWIMI8_rec
  { 6,	OperandInfo234 },  // Inst #1532 = RLWIMI_rec
  { 5,	OperandInfo236 },  // Inst #1533 = RLWINM
  { 5,	OperandInfo237 },  // Inst #1534 = RLWINM8
  { 5,	OperandInfo237 },  // Inst #1535 = RLWINM8_rec
  { 5,	OperandInfo236 },  // Inst #1536 = RLWINM_rec
  { 5,	OperandInfo238 },  // Inst #1537 = RLWNM
  { 5,	OperandInfo239 },  // Inst #1538 = RLWNM8
  { 5,	OperandInfo239 },  // Inst #1539 = RLWNM8_rec
  { 5,	OperandInfo238 },  // Inst #1540 = RLWNM_rec
  { 2,	OperandInfo77 },  // Inst #1541 = ReadTB
  { 1,	OperandInfo3 },  // Inst #1542 = SC
  { 5,	OperandInfo240 },  // Inst #1543 = SELECT_CC_F16
  { 5,	OperandInfo241 },  // Inst #1544 = SELECT_CC_F4
  { 5,	OperandInfo242 },  // Inst #1545 = SELECT_CC_F8
  { 5,	OperandInfo243 },  // Inst #1546 = SELECT_CC_I4
  { 5,	OperandInfo244 },  // Inst #1547 = SELECT_CC_I8
  { 5,	OperandInfo245 },  // Inst #1548 = SELECT_CC_SPE
  { 5,	OperandInfo246 },  // Inst #1549 = SELECT_CC_SPE4
  { 5,	OperandInfo240 },  // Inst #1550 = SELECT_CC_VRRC
  { 5,	OperandInfo242 },  // Inst #1551 = SELECT_CC_VSFRC
  { 5,	OperandInfo247 },  // Inst #1552 = SELECT_CC_VSRC
  { 5,	OperandInfo241 },  // Inst #1553 = SELECT_CC_VSSRC
  { 4,	OperandInfo248 },  // Inst #1554 = SELECT_F16
  { 4,	OperandInfo249 },  // Inst #1555 = SELECT_F4
  { 4,	OperandInfo250 },  // Inst #1556 = SELECT_F8
  { 4,	OperandInfo251 },  // Inst #1557 = SELECT_I4
  { 4,	OperandInfo252 },  // Inst #1558 = SELECT_I8
  { 4,	OperandInfo253 },  // Inst #1559 = SELECT_SPE
  { 4,	OperandInfo254 },  // Inst #1560 = SELECT_SPE4
  { 4,	OperandInfo248 },  // Inst #1561 = SELECT_VRRC
  { 4,	OperandInfo250 },  // Inst #1562 = SELECT_VSFRC
  { 4,	OperandInfo255 },  // Inst #1563 = SELECT_VSRC
  { 4,	OperandInfo249 },  // Inst #1564 = SELECT_VSSRC
  { 2,	OperandInfo256 },  // Inst #1565 = SETB
  { 2,	OperandInfo257 },  // Inst #1566 = SETB8
  { 2,	OperandInfo258 },  // Inst #1567 = SETBC
  { 2,	OperandInfo259 },  // Inst #1568 = SETBC8
  { 2,	OperandInfo258 },  // Inst #1569 = SETBCR
  { 2,	OperandInfo259 },  // Inst #1570 = SETBCR8
  { 2,	OperandInfo125 },  // Inst #1571 = SETFLM
  { 2,	OperandInfo258 },  // Inst #1572 = SETNBC
  { 2,	OperandInfo259 },  // Inst #1573 = SETNBC8
  { 2,	OperandInfo258 },  // Inst #1574 = SETNBCR
  { 2,	OperandInfo259 },  // Inst #1575 = SETNBCR8
  { 2,	OperandInfo260 },  // Inst #1576 = SETRND
  { 2,	OperandInfo177 },  // Inst #1577 = SETRNDi
  { 2,	OperandInfo77 },  // Inst #1578 = SLBFEE_rec
  { 0,	NULL },  // Inst #1579 = SLBIA
  { 1,	OperandInfo175 },  // Inst #1580 = SLBIE
  { 2,	OperandInfo77 },  // Inst #1581 = SLBIEG
  { 2,	OperandInfo77 },  // Inst #1582 = SLBMFEE
  { 2,	OperandInfo77 },  // Inst #1583 = SLBMFEV
  { 2,	OperandInfo77 },  // Inst #1584 = SLBMTE
  { 0,	NULL },  // Inst #1585 = SLBSYNC
  { 3,	OperandInfo261 },  // Inst #1586 = SLD
  { 3,	OperandInfo261 },  // Inst #1587 = SLD_rec
  { 3,	OperandInfo64 },  // Inst #1588 = SLW
  { 3,	OperandInfo66 },  // Inst #1589 = SLW8
  { 3,	OperandInfo66 },  // Inst #1590 = SLW8_rec
  { 3,	OperandInfo64 },  // Inst #1591 = SLW_rec
  { 3,	OperandInfo58 },  // Inst #1592 = SPELWZ
  { 3,	OperandInfo139 },  // Inst #1593 = SPELWZX
  { 3,	OperandInfo58 },  // Inst #1594 = SPESTW
  { 3,	OperandInfo139 },  // Inst #1595 = SPESTWX
  { 3,	OperandInfo226 },  // Inst #1596 = SPILL_ACC
  { 3,	OperandInfo227 },  // Inst #1597 = SPILL_CR
  { 3,	OperandInfo228 },  // Inst #1598 = SPILL_CRBIT
  { 3,	OperandInfo229 },  // Inst #1599 = SPILL_QUADWORD
  { 3,	OperandInfo230 },  // Inst #1600 = SPILL_UACC
  { 3,	OperandInfo262 },  // Inst #1601 = SPLIT_QUADWORD
  { 3,	OperandInfo261 },  // Inst #1602 = SRAD
  { 3,	OperandInfo51 },  // Inst #1603 = SRADI
  { 3,	OperandInfo52 },  // Inst #1604 = SRADI_32
  { 3,	OperandInfo51 },  // Inst #1605 = SRADI_rec
  { 3,	OperandInfo261 },  // Inst #1606 = SRAD_rec
  { 3,	OperandInfo64 },  // Inst #1607 = SRAW
  { 3,	OperandInfo52 },  // Inst #1608 = SRAWI
  { 3,	OperandInfo52 },  // Inst #1609 = SRAWI_rec
  { 3,	OperandInfo64 },  // Inst #1610 = SRAW_rec
  { 3,	OperandInfo261 },  // Inst #1611 = SRD
  { 3,	OperandInfo261 },  // Inst #1612 = SRD_rec
  { 3,	OperandInfo64 },  // Inst #1613 = SRW
  { 3,	OperandInfo66 },  // Inst #1614 = SRW8
  { 3,	OperandInfo66 },  // Inst #1615 = SRW8_rec
  { 3,	OperandInfo64 },  // Inst #1616 = SRW_rec
  { 3,	OperandInfo58 },  // Inst #1617 = STB
  { 3,	OperandInfo136 },  // Inst #1618 = STB8
  { 3,	OperandInfo64 },  // Inst #1619 = STBCIX
  { 3,	OperandInfo139 },  // Inst #1620 = STBCX
  { 3,	OperandInfo139 },  // Inst #1621 = STBEPX
  { 4,	OperandInfo263 },  // Inst #1622 = STBU
  { 4,	OperandInfo264 },  // Inst #1623 = STBU8
  { 4,	OperandInfo265 },  // Inst #1624 = STBUX
  { 4,	OperandInfo266 },  // Inst #1625 = STBUX8
  { 3,	OperandInfo139 },  // Inst #1626 = STBX
  { 3,	OperandInfo144 },  // Inst #1627 = STBX8
  { 3,	OperandInfo145 },  // Inst #1628 = STBXTLS
  { 3,	OperandInfo145 },  // Inst #1629 = STBXTLS_
  { 3,	OperandInfo146 },  // Inst #1630 = STBXTLS_32
  { 3,	OperandInfo136 },  // Inst #1631 = STD
  { 3,	OperandInfo51 },  // Inst #1632 = STDAT
  { 3,	OperandInfo144 },  // Inst #1633 = STDBRX
  { 3,	OperandInfo64 },  // Inst #1634 = STDCIX
  { 3,	OperandInfo144 },  // Inst #1635 = STDCX
  { 4,	OperandInfo264 },  // Inst #1636 = STDU
  { 4,	OperandInfo266 },  // Inst #1637 = STDUX
  { 3,	OperandInfo144 },  // Inst #1638 = STDX
  { 3,	OperandInfo145 },  // Inst #1639 = STDXTLS
  { 3,	OperandInfo145 },  // Inst #1640 = STDXTLS_
  { 3,	OperandInfo151 },  // Inst #1641 = STFD
  { 3,	OperandInfo152 },  // Inst #1642 = STFDEPX
  { 4,	OperandInfo267 },  // Inst #1643 = STFDU
  { 4,	OperandInfo268 },  // Inst #1644 = STFDUX
  { 3,	OperandInfo152 },  // Inst #1645 = STFDX
  { 3,	OperandInfo152 },  // Inst #1646 = STFIWX
  { 3,	OperandInfo155 },  // Inst #1647 = STFS
  { 4,	OperandInfo269 },  // Inst #1648 = STFSU
  { 4,	OperandInfo270 },  // Inst #1649 = STFSUX
  { 3,	OperandInfo158 },  // Inst #1650 = STFSX
  { 3,	OperandInfo58 },  // Inst #1651 = STH
  { 3,	OperandInfo136 },  // Inst #1652 = STH8
  { 3,	OperandInfo139 },  // Inst #1653 = STHBRX
  { 3,	OperandInfo64 },  // Inst #1654 = STHCIX
  { 3,	OperandInfo139 },  // Inst #1655 = STHCX
  { 3,	OperandInfo139 },  // Inst #1656 = STHEPX
  { 4,	OperandInfo263 },  // Inst #1657 = STHU
  { 4,	OperandInfo264 },  // Inst #1658 = STHU8
  { 4,	OperandInfo265 },  // Inst #1659 = STHUX
  { 4,	OperandInfo266 },  // Inst #1660 = STHUX8
  { 3,	OperandInfo139 },  // Inst #1661 = STHX
  { 3,	OperandInfo144 },  // Inst #1662 = STHX8
  { 3,	OperandInfo145 },  // Inst #1663 = STHXTLS
  { 3,	OperandInfo145 },  // Inst #1664 = STHXTLS_
  { 3,	OperandInfo146 },  // Inst #1665 = STHXTLS_32
  { 3,	OperandInfo58 },  // Inst #1666 = STMW
  { 0,	NULL },  // Inst #1667 = STOP
  { 3,	OperandInfo229 },  // Inst #1668 = STQ
  { 3,	OperandInfo161 },  // Inst #1669 = STQCX
  { 3,	OperandInfo161 },  // Inst #1670 = STQX_PSEUDO
  { 3,	OperandInfo52 },  // Inst #1671 = STSWI
  { 3,	OperandInfo162 },  // Inst #1672 = STVEBX
  { 3,	OperandInfo162 },  // Inst #1673 = STVEHX
  { 3,	OperandInfo162 },  // Inst #1674 = STVEWX
  { 3,	OperandInfo162 },  // Inst #1675 = STVX
  { 3,	OperandInfo162 },  // Inst #1676 = STVXL
  { 3,	OperandInfo58 },  // Inst #1677 = STW
  { 3,	OperandInfo136 },  // Inst #1678 = STW8
  { 3,	OperandInfo52 },  // Inst #1679 = STWAT
  { 3,	OperandInfo139 },  // Inst #1680 = STWBRX
  { 3,	OperandInfo64 },  // Inst #1681 = STWCIX
  { 3,	OperandInfo139 },  // Inst #1682 = STWCX
  { 3,	OperandInfo139 },  // Inst #1683 = STWEPX
  { 4,	OperandInfo263 },  // Inst #1684 = STWU
  { 4,	OperandInfo264 },  // Inst #1685 = STWU8
  { 4,	OperandInfo265 },  // Inst #1686 = STWUX
  { 4,	OperandInfo266 },  // Inst #1687 = STWUX8
  { 3,	OperandInfo139 },  // Inst #1688 = STWX
  { 3,	OperandInfo144 },  // Inst #1689 = STWX8
  { 3,	OperandInfo145 },  // Inst #1690 = STWXTLS
  { 3,	OperandInfo145 },  // Inst #1691 = STWXTLS_
  { 3,	OperandInfo146 },  // Inst #1692 = STWXTLS_32
  { 3,	OperandInfo164 },  // Inst #1693 = STXSD
  { 3,	OperandInfo59 },  // Inst #1694 = STXSDX
  { 3,	OperandInfo59 },  // Inst #1695 = STXSIBX
  { 3,	OperandInfo166 },  // Inst #1696 = STXSIBXv
  { 3,	OperandInfo59 },  // Inst #1697 = STXSIHX
  { 3,	OperandInfo166 },  // Inst #1698 = STXSIHXv
  { 3,	OperandInfo59 },  // Inst #1699 = STXSIWX
  { 3,	OperandInfo164 },  // Inst #1700 = STXSSP
  { 3,	OperandInfo63 },  // Inst #1701 = STXSSPX
  { 3,	OperandInfo165 },  // Inst #1702 = STXV
  { 3,	OperandInfo166 },  // Inst #1703 = STXVB16X
  { 3,	OperandInfo166 },  // Inst #1704 = STXVD2X
  { 3,	OperandInfo166 },  // Inst #1705 = STXVH8X
  { 3,	OperandInfo167 },  // Inst #1706 = STXVL
  { 3,	OperandInfo167 },  // Inst #1707 = STXVLL
  { 3,	OperandInfo168 },  // Inst #1708 = STXVP
  { 3,	OperandInfo169 },  // Inst #1709 = STXVPX
  { 3,	OperandInfo166 },  // Inst #1710 = STXVRBX
  { 3,	OperandInfo166 },  // Inst #1711 = STXVRDX
  { 3,	OperandInfo166 },  // Inst #1712 = STXVRHX
  { 3,	OperandInfo166 },  // Inst #1713 = STXVRWX
  { 3,	OperandInfo166 },  // Inst #1714 = STXVW4X
  { 3,	OperandInfo166 },  // Inst #1715 = STXVX
  { 3,	OperandInfo64 },  // Inst #1716 = SUBF
  { 3,	OperandInfo66 },  // Inst #1717 = SUBF8
  { 3,	OperandInfo66 },  // Inst #1718 = SUBF8O
  { 3,	OperandInfo66 },  // Inst #1719 = SUBF8O_rec
  { 3,	OperandInfo66 },  // Inst #1720 = SUBF8_rec
  { 3,	OperandInfo64 },  // Inst #1721 = SUBFC
  { 3,	OperandInfo66 },  // Inst #1722 = SUBFC8
  { 3,	OperandInfo66 },  // Inst #1723 = SUBFC8O
  { 3,	OperandInfo66 },  // Inst #1724 = SUBFC8O_rec
  { 3,	OperandInfo66 },  // Inst #1725 = SUBFC8_rec
  { 3,	OperandInfo64 },  // Inst #1726 = SUBFCO
  { 3,	OperandInfo64 },  // Inst #1727 = SUBFCO_rec
  { 3,	OperandInfo64 },  // Inst #1728 = SUBFC_rec
  { 3,	OperandInfo64 },  // Inst #1729 = SUBFE
  { 3,	OperandInfo66 },  // Inst #1730 = SUBFE8
  { 3,	OperandInfo66 },  // Inst #1731 = SUBFE8O
  { 3,	OperandInfo66 },  // Inst #1732 = SUBFE8O_rec
  { 3,	OperandInfo66 },  // Inst #1733 = SUBFE8_rec
  { 3,	OperandInfo64 },  // Inst #1734 = SUBFEO
  { 3,	OperandInfo64 },  // Inst #1735 = SUBFEO_rec
  { 3,	OperandInfo64 },  // Inst #1736 = SUBFE_rec
  { 3,	OperandInfo52 },  // Inst #1737 = SUBFIC
  { 3,	OperandInfo51 },  // Inst #1738 = SUBFIC8
  { 2,	OperandInfo77 },  // Inst #1739 = SUBFME
  { 2,	OperandInfo78 },  // Inst #1740 = SUBFME8
  { 2,	OperandInfo78 },  // Inst #1741 = SUBFME8O
  { 2,	OperandInfo78 },  // Inst #1742 = SUBFME8O_rec
  { 2,	OperandInfo78 },  // Inst #1743 = SUBFME8_rec
  { 2,	OperandInfo77 },  // Inst #1744 = SUBFMEO
  { 2,	OperandInfo77 },  // Inst #1745 = SUBFMEO_rec
  { 2,	OperandInfo77 },  // Inst #1746 = SUBFME_rec
  { 3,	OperandInfo64 },  // Inst #1747 = SUBFO
  { 3,	OperandInfo64 },  // Inst #1748 = SUBFO_rec
  { 2,	OperandInfo77 },  // Inst #1749 = SUBFZE
  { 2,	OperandInfo78 },  // Inst #1750 = SUBFZE8
  { 2,	OperandInfo78 },  // Inst #1751 = SUBFZE8O
  { 2,	OperandInfo78 },  // Inst #1752 = SUBFZE8O_rec
  { 2,	OperandInfo78 },  // Inst #1753 = SUBFZE8_rec
  { 2,	OperandInfo77 },  // Inst #1754 = SUBFZEO
  { 2,	OperandInfo77 },  // Inst #1755 = SUBFZEO_rec
  { 2,	OperandInfo77 },  // Inst #1756 = SUBFZE_rec
  { 3,	OperandInfo64 },  // Inst #1757 = SUBF_rec
  { 1,	OperandInfo3 },  // Inst #1758 = SYNC
  { 1,	OperandInfo175 },  // Inst #1759 = TABORT
  { 3,	OperandInfo104 },  // Inst #1760 = TABORTDC
  { 3,	OperandInfo271 },  // Inst #1761 = TABORTDCI
  { 3,	OperandInfo104 },  // Inst #1762 = TABORTWC
  { 3,	OperandInfo271 },  // Inst #1763 = TABORTWCI
  { 1,	OperandInfo85 },  // Inst #1764 = TAILB
  { 1,	OperandInfo85 },  // Inst #1765 = TAILB8
  { 1,	OperandInfo2 },  // Inst #1766 = TAILBA
  { 1,	OperandInfo2 },  // Inst #1767 = TAILBA8
  { 0,	NULL },  // Inst #1768 = TAILBCTR
  { 0,	NULL },  // Inst #1769 = TAILBCTR8
  { 1,	OperandInfo3 },  // Inst #1770 = TBEGIN
  { 2,	OperandInfo159 },  // Inst #1771 = TBEGIN_RET
  { 1,	OperandInfo173 },  // Inst #1772 = TCHECK
  { 1,	OperandInfo175 },  // Inst #1773 = TCHECK_RET
  { 2,	OperandInfo272 },  // Inst #1774 = TCRETURNai
  { 2,	OperandInfo272 },  // Inst #1775 = TCRETURNai8
  { 2,	OperandInfo273 },  // Inst #1776 = TCRETURNdi
  { 2,	OperandInfo273 },  // Inst #1777 = TCRETURNdi8
  { 2,	OperandInfo274 },  // Inst #1778 = TCRETURNri
  { 2,	OperandInfo275 },  // Inst #1779 = TCRETURNri8
  { 3,	OperandInfo276 },  // Inst #1780 = TD
  { 3,	OperandInfo277 },  // Inst #1781 = TDI
  { 1,	OperandInfo3 },  // Inst #1782 = TEND
  { 0,	NULL },  // Inst #1783 = TLBIA
  { 2,	OperandInfo77 },  // Inst #1784 = TLBIE
  { 1,	OperandInfo175 },  // Inst #1785 = TLBIEL
  { 2,	OperandInfo77 },  // Inst #1786 = TLBIVAX
  { 1,	OperandInfo175 },  // Inst #1787 = TLBLD
  { 1,	OperandInfo175 },  // Inst #1788 = TLBLI
  { 0,	NULL },  // Inst #1789 = TLBRE
  { 3,	OperandInfo52 },  // Inst #1790 = TLBRE2
  { 2,	OperandInfo77 },  // Inst #1791 = TLBSX
  { 3,	OperandInfo64 },  // Inst #1792 = TLBSX2
  { 3,	OperandInfo64 },  // Inst #1793 = TLBSX2D
  { 0,	NULL },  // Inst #1794 = TLBSYNC
  { 0,	NULL },  // Inst #1795 = TLBWE
  { 3,	OperandInfo52 },  // Inst #1796 = TLBWE2
  { 3,	OperandInfo64 },  // Inst #1797 = TLSGDAIX
  { 3,	OperandInfo66 },  // Inst #1798 = TLSGDAIX8
  { 0,	NULL },  // Inst #1799 = TRAP
  { 0,	NULL },  // Inst #1800 = TRECHKPT
  { 1,	OperandInfo175 },  // Inst #1801 = TRECLAIM
  { 1,	OperandInfo3 },  // Inst #1802 = TSR
  { 3,	OperandInfo104 },  // Inst #1803 = TW
  { 3,	OperandInfo271 },  // Inst #1804 = TWI
  { 0,	NULL },  // Inst #1805 = UNENCODED_NOP
  { 3,	OperandInfo64 },  // Inst #1806 = UpdateGBR
  { 3,	OperandInfo92 },  // Inst #1807 = VABSDUB
  { 3,	OperandInfo92 },  // Inst #1808 = VABSDUH
  { 3,	OperandInfo92 },  // Inst #1809 = VABSDUW
  { 3,	OperandInfo92 },  // Inst #1810 = VADDCUQ
  { 3,	OperandInfo92 },  // Inst #1811 = VADDCUW
  { 4,	OperandInfo278 },  // Inst #1812 = VADDECUQ
  { 4,	OperandInfo278 },  // Inst #1813 = VADDEUQM
  { 3,	OperandInfo92 },  // Inst #1814 = VADDFP
  { 3,	OperandInfo92 },  // Inst #1815 = VADDSBS
  { 3,	OperandInfo92 },  // Inst #1816 = VADDSHS
  { 3,	OperandInfo92 },  // Inst #1817 = VADDSWS
  { 3,	OperandInfo92 },  // Inst #1818 = VADDUBM
  { 3,	OperandInfo92 },  // Inst #1819 = VADDUBS
  { 3,	OperandInfo92 },  // Inst #1820 = VADDUDM
  { 3,	OperandInfo92 },  // Inst #1821 = VADDUHM
  { 3,	OperandInfo92 },  // Inst #1822 = VADDUHS
  { 3,	OperandInfo92 },  // Inst #1823 = VADDUQM
  { 3,	OperandInfo92 },  // Inst #1824 = VADDUWM
  { 3,	OperandInfo92 },  // Inst #1825 = VADDUWS
  { 3,	OperandInfo92 },  // Inst #1826 = VAND
  { 3,	OperandInfo92 },  // Inst #1827 = VANDC
  { 3,	OperandInfo92 },  // Inst #1828 = VAVGSB
  { 3,	OperandInfo92 },  // Inst #1829 = VAVGSH
  { 3,	OperandInfo92 },  // Inst #1830 = VAVGSW
  { 3,	OperandInfo92 },  // Inst #1831 = VAVGUB
  { 3,	OperandInfo92 },  // Inst #1832 = VAVGUH
  { 3,	OperandInfo92 },  // Inst #1833 = VAVGUW
  { 3,	OperandInfo92 },  // Inst #1834 = VBPERMD
  { 3,	OperandInfo92 },  // Inst #1835 = VBPERMQ
  { 3,	OperandInfo279 },  // Inst #1836 = VCFSX
  { 2,	OperandInfo93 },  // Inst #1837 = VCFSX_0
  { 3,	OperandInfo92 },  // Inst #1838 = VCFUGED
  { 3,	OperandInfo279 },  // Inst #1839 = VCFUX
  { 2,	OperandInfo93 },  // Inst #1840 = VCFUX_0
  { 3,	OperandInfo92 },  // Inst #1841 = VCIPHER
  { 3,	OperandInfo92 },  // Inst #1842 = VCIPHERLAST
  { 3,	OperandInfo280 },  // Inst #1843 = VCLRLB
  { 3,	OperandInfo280 },  // Inst #1844 = VCLRRB
  { 2,	OperandInfo93 },  // Inst #1845 = VCLZB
  { 2,	OperandInfo93 },  // Inst #1846 = VCLZD
  { 3,	OperandInfo92 },  // Inst #1847 = VCLZDM
  { 2,	OperandInfo93 },  // Inst #1848 = VCLZH
  { 2,	OperandInfo281 },  // Inst #1849 = VCLZLSBB
  { 2,	OperandInfo93 },  // Inst #1850 = VCLZW
  { 3,	OperandInfo92 },  // Inst #1851 = VCMPBFP
  { 3,	OperandInfo92 },  // Inst #1852 = VCMPBFP_rec
  { 3,	OperandInfo92 },  // Inst #1853 = VCMPEQFP
  { 3,	OperandInfo92 },  // Inst #1854 = VCMPEQFP_rec
  { 3,	OperandInfo92 },  // Inst #1855 = VCMPEQUB
  { 3,	OperandInfo92 },  // Inst #1856 = VCMPEQUB_rec
  { 3,	OperandInfo92 },  // Inst #1857 = VCMPEQUD
  { 3,	OperandInfo92 },  // Inst #1858 = VCMPEQUD_rec
  { 3,	OperandInfo92 },  // Inst #1859 = VCMPEQUH
  { 3,	OperandInfo92 },  // Inst #1860 = VCMPEQUH_rec
  { 3,	OperandInfo92 },  // Inst #1861 = VCMPEQUQ
  { 3,	OperandInfo92 },  // Inst #1862 = VCMPEQUQ_rec
  { 3,	OperandInfo92 },  // Inst #1863 = VCMPEQUW
  { 3,	OperandInfo92 },  // Inst #1864 = VCMPEQUW_rec
  { 3,	OperandInfo92 },  // Inst #1865 = VCMPGEFP
  { 3,	OperandInfo92 },  // Inst #1866 = VCMPGEFP_rec
  { 3,	OperandInfo92 },  // Inst #1867 = VCMPGTFP
  { 3,	OperandInfo92 },  // Inst #1868 = VCMPGTFP_rec
  { 3,	OperandInfo92 },  // Inst #1869 = VCMPGTSB
  { 3,	OperandInfo92 },  // Inst #1870 = VCMPGTSB_rec
  { 3,	OperandInfo92 },  // Inst #1871 = VCMPGTSD
  { 3,	OperandInfo92 },  // Inst #1872 = VCMPGTSD_rec
  { 3,	OperandInfo92 },  // Inst #1873 = VCMPGTSH
  { 3,	OperandInfo92 },  // Inst #1874 = VCMPGTSH_rec
  { 3,	OperandInfo92 },  // Inst #1875 = VCMPGTSQ
  { 3,	OperandInfo92 },  // Inst #1876 = VCMPGTSQ_rec
  { 3,	OperandInfo92 },  // Inst #1877 = VCMPGTSW
  { 3,	OperandInfo92 },  // Inst #1878 = VCMPGTSW_rec
  { 3,	OperandInfo92 },  // Inst #1879 = VCMPGTUB
  { 3,	OperandInfo92 },  // Inst #1880 = VCMPGTUB_rec
  { 3,	OperandInfo92 },  // Inst #1881 = VCMPGTUD
  { 3,	OperandInfo92 },  // Inst #1882 = VCMPGTUD_rec
  { 3,	OperandInfo92 },  // Inst #1883 = VCMPGTUH
  { 3,	OperandInfo92 },  // Inst #1884 = VCMPGTUH_rec
  { 3,	OperandInfo92 },  // Inst #1885 = VCMPGTUQ
  { 3,	OperandInfo92 },  // Inst #1886 = VCMPGTUQ_rec
  { 3,	OperandInfo92 },  // Inst #1887 = VCMPGTUW
  { 3,	OperandInfo92 },  // Inst #1888 = VCMPGTUW_rec
  { 3,	OperandInfo92 },  // Inst #1889 = VCMPNEB
  { 3,	OperandInfo92 },  // Inst #1890 = VCMPNEB_rec
  { 3,	OperandInfo92 },  // Inst #1891 = VCMPNEH
  { 3,	OperandInfo92 },  // Inst #1892 = VCMPNEH_rec
  { 3,	OperandInfo92 },  // Inst #1893 = VCMPNEW
  { 3,	OperandInfo92 },  // Inst #1894 = VCMPNEW_rec
  { 3,	OperandInfo92 },  // Inst #1895 = VCMPNEZB
  { 3,	OperandInfo92 },  // Inst #1896 = VCMPNEZB_rec
  { 3,	OperandInfo92 },  // Inst #1897 = VCMPNEZH
  { 3,	OperandInfo92 },  // Inst #1898 = VCMPNEZH_rec
  { 3,	OperandInfo92 },  // Inst #1899 = VCMPNEZW
  { 3,	OperandInfo92 },  // Inst #1900 = VCMPNEZW_rec
  { 3,	OperandInfo282 },  // Inst #1901 = VCMPSQ
  { 3,	OperandInfo282 },  // Inst #1902 = VCMPUQ
  { 3,	OperandInfo283 },  // Inst #1903 = VCNTMBB
  { 3,	OperandInfo283 },  // Inst #1904 = VCNTMBD
  { 3,	OperandInfo283 },  // Inst #1905 = VCNTMBH
  { 3,	OperandInfo283 },  // Inst #1906 = VCNTMBW
  { 3,	OperandInfo279 },  // Inst #1907 = VCTSXS
  { 2,	OperandInfo93 },  // Inst #1908 = VCTSXS_0
  { 3,	OperandInfo279 },  // Inst #1909 = VCTUXS
  { 2,	OperandInfo93 },  // Inst #1910 = VCTUXS_0
  { 2,	OperandInfo93 },  // Inst #1911 = VCTZB
  { 2,	OperandInfo93 },  // Inst #1912 = VCTZD
  { 3,	OperandInfo92 },  // Inst #1913 = VCTZDM
  { 2,	OperandInfo93 },  // Inst #1914 = VCTZH
  { 2,	OperandInfo281 },  // Inst #1915 = VCTZLSBB
  { 2,	OperandInfo93 },  // Inst #1916 = VCTZW
  { 3,	OperandInfo92 },  // Inst #1917 = VDIVESD
  { 3,	OperandInfo92 },  // Inst #1918 = VDIVESQ
  { 3,	OperandInfo92 },  // Inst #1919 = VDIVESW
  { 3,	OperandInfo92 },  // Inst #1920 = VDIVEUD
  { 3,	OperandInfo92 },  // Inst #1921 = VDIVEUQ
  { 3,	OperandInfo92 },  // Inst #1922 = VDIVEUW
  { 3,	OperandInfo92 },  // Inst #1923 = VDIVSD
  { 3,	OperandInfo92 },  // Inst #1924 = VDIVSQ
  { 3,	OperandInfo92 },  // Inst #1925 = VDIVSW
  { 3,	OperandInfo92 },  // Inst #1926 = VDIVUD
  { 3,	OperandInfo92 },  // Inst #1927 = VDIVUQ
  { 3,	OperandInfo92 },  // Inst #1928 = VDIVUW
  { 3,	OperandInfo92 },  // Inst #1929 = VEQV
  { 2,	OperandInfo93 },  // Inst #1930 = VEXPANDBM
  { 2,	OperandInfo93 },  // Inst #1931 = VEXPANDDM
  { 2,	OperandInfo93 },  // Inst #1932 = VEXPANDHM
  { 2,	OperandInfo93 },  // Inst #1933 = VEXPANDQM
  { 2,	OperandInfo93 },  // Inst #1934 = VEXPANDWM
  { 2,	OperandInfo93 },  // Inst #1935 = VEXPTEFP
  { 4,	OperandInfo284 },  // Inst #1936 = VEXTDDVLX
  { 4,	OperandInfo284 },  // Inst #1937 = VEXTDDVRX
  { 4,	OperandInfo284 },  // Inst #1938 = VEXTDUBVLX
  { 4,	OperandInfo284 },  // Inst #1939 = VEXTDUBVRX
  { 4,	OperandInfo284 },  // Inst #1940 = VEXTDUHVLX
  { 4,	OperandInfo284 },  // Inst #1941 = VEXTDUHVRX
  { 4,	OperandInfo284 },  // Inst #1942 = VEXTDUWVLX
  { 4,	OperandInfo284 },  // Inst #1943 = VEXTDUWVRX
  { 2,	OperandInfo281 },  // Inst #1944 = VEXTRACTBM
  { 3,	OperandInfo279 },  // Inst #1945 = VEXTRACTD
  { 2,	OperandInfo281 },  // Inst #1946 = VEXTRACTDM
  { 2,	OperandInfo281 },  // Inst #1947 = VEXTRACTHM
  { 2,	OperandInfo281 },  // Inst #1948 = VEXTRACTQM
  { 3,	OperandInfo279 },  // Inst #1949 = VEXTRACTUB
  { 3,	OperandInfo279 },  // Inst #1950 = VEXTRACTUH
  { 3,	OperandInfo279 },  // Inst #1951 = VEXTRACTUW
  { 2,	OperandInfo281 },  // Inst #1952 = VEXTRACTWM
  { 2,	OperandInfo93 },  // Inst #1953 = VEXTSB2D
  { 2,	OperandInfo285 },  // Inst #1954 = VEXTSB2Ds
  { 2,	OperandInfo93 },  // Inst #1955 = VEXTSB2W
  { 2,	OperandInfo285 },  // Inst #1956 = VEXTSB2Ws
  { 2,	OperandInfo93 },  // Inst #1957 = VEXTSD2Q
  { 2,	OperandInfo93 },  // Inst #1958 = VEXTSH2D
  { 2,	OperandInfo285 },  // Inst #1959 = VEXTSH2Ds
  { 2,	OperandInfo93 },  // Inst #1960 = VEXTSH2W
  { 2,	OperandInfo285 },  // Inst #1961 = VEXTSH2Ws
  { 2,	OperandInfo93 },  // Inst #1962 = VEXTSW2D
  { 2,	OperandInfo285 },  // Inst #1963 = VEXTSW2Ds
  { 3,	OperandInfo286 },  // Inst #1964 = VEXTUBLX
  { 3,	OperandInfo286 },  // Inst #1965 = VEXTUBRX
  { 3,	OperandInfo286 },  // Inst #1966 = VEXTUHLX
  { 3,	OperandInfo286 },  // Inst #1967 = VEXTUHRX
  { 3,	OperandInfo286 },  // Inst #1968 = VEXTUWLX
  { 3,	OperandInfo286 },  // Inst #1969 = VEXTUWRX
  { 2,	OperandInfo93 },  // Inst #1970 = VGBBD
  { 3,	OperandInfo283 },  // Inst #1971 = VGNB
  { 4,	OperandInfo287 },  // Inst #1972 = VINSBLX
  { 4,	OperandInfo287 },  // Inst #1973 = VINSBRX
  { 4,	OperandInfo288 },  // Inst #1974 = VINSBVLX
  { 4,	OperandInfo288 },  // Inst #1975 = VINSBVRX
  { 4,	OperandInfo289 },  // Inst #1976 = VINSD
  { 4,	OperandInfo290 },  // Inst #1977 = VINSDLX
  { 4,	OperandInfo290 },  // Inst #1978 = VINSDRX
  { 4,	OperandInfo291 },  // Inst #1979 = VINSERTB
  { 3,	OperandInfo279 },  // Inst #1980 = VINSERTD
  { 4,	OperandInfo291 },  // Inst #1981 = VINSERTH
  { 3,	OperandInfo279 },  // Inst #1982 = VINSERTW
  { 4,	OperandInfo287 },  // Inst #1983 = VINSHLX
  { 4,	OperandInfo287 },  // Inst #1984 = VINSHRX
  { 4,	OperandInfo288 },  // Inst #1985 = VINSHVLX
  { 4,	OperandInfo288 },  // Inst #1986 = VINSHVRX
  { 4,	OperandInfo292 },  // Inst #1987 = VINSW
  { 4,	OperandInfo287 },  // Inst #1988 = VINSWLX
  { 4,	OperandInfo287 },  // Inst #1989 = VINSWRX
  { 4,	OperandInfo288 },  // Inst #1990 = VINSWVLX
  { 4,	OperandInfo288 },  // Inst #1991 = VINSWVRX
  { 2,	OperandInfo93 },  // Inst #1992 = VLOGEFP
  { 4,	OperandInfo278 },  // Inst #1993 = VMADDFP
  { 3,	OperandInfo92 },  // Inst #1994 = VMAXFP
  { 3,	OperandInfo92 },  // Inst #1995 = VMAXSB
  { 3,	OperandInfo92 },  // Inst #1996 = VMAXSD
  { 3,	OperandInfo92 },  // Inst #1997 = VMAXSH
  { 3,	OperandInfo92 },  // Inst #1998 = VMAXSW
  { 3,	OperandInfo92 },  // Inst #1999 = VMAXUB
  { 3,	OperandInfo92 },  // Inst #2000 = VMAXUD
  { 3,	OperandInfo92 },  // Inst #2001 = VMAXUH
  { 3,	OperandInfo92 },  // Inst #2002 = VMAXUW
  { 4,	OperandInfo278 },  // Inst #2003 = VMHADDSHS
  { 4,	OperandInfo278 },  // Inst #2004 = VMHRADDSHS
  { 3,	OperandInfo92 },  // Inst #2005 = VMINFP
  { 3,	OperandInfo92 },  // Inst #2006 = VMINSB
  { 3,	OperandInfo92 },  // Inst #2007 = VMINSD
  { 3,	OperandInfo92 },  // Inst #2008 = VMINSH
  { 3,	OperandInfo92 },  // Inst #2009 = VMINSW
  { 3,	OperandInfo92 },  // Inst #2010 = VMINUB
  { 3,	OperandInfo92 },  // Inst #2011 = VMINUD
  { 3,	OperandInfo92 },  // Inst #2012 = VMINUH
  { 3,	OperandInfo92 },  // Inst #2013 = VMINUW
  { 4,	OperandInfo278 },  // Inst #2014 = VMLADDUHM
  { 3,	OperandInfo92 },  // Inst #2015 = VMODSD
  { 3,	OperandInfo92 },  // Inst #2016 = VMODSQ
  { 3,	OperandInfo92 },  // Inst #2017 = VMODSW
  { 3,	OperandInfo92 },  // Inst #2018 = VMODUD
  { 3,	OperandInfo92 },  // Inst #2019 = VMODUQ
  { 3,	OperandInfo92 },  // Inst #2020 = VMODUW
  { 3,	OperandInfo92 },  // Inst #2021 = VMRGEW
  { 3,	OperandInfo92 },  // Inst #2022 = VMRGHB
  { 3,	OperandInfo92 },  // Inst #2023 = VMRGHH
  { 3,	OperandInfo92 },  // Inst #2024 = VMRGHW
  { 3,	OperandInfo92 },  // Inst #2025 = VMRGLB
  { 3,	OperandInfo92 },  // Inst #2026 = VMRGLH
  { 3,	OperandInfo92 },  // Inst #2027 = VMRGLW
  { 3,	OperandInfo92 },  // Inst #2028 = VMRGOW
  { 4,	OperandInfo278 },  // Inst #2029 = VMSUMCUD
  { 4,	OperandInfo278 },  // Inst #2030 = VMSUMMBM
  { 4,	OperandInfo278 },  // Inst #2031 = VMSUMSHM
  { 4,	OperandInfo278 },  // Inst #2032 = VMSUMSHS
  { 4,	OperandInfo278 },  // Inst #2033 = VMSUMUBM
  { 4,	OperandInfo278 },  // Inst #2034 = VMSUMUDM
  { 4,	OperandInfo278 },  // Inst #2035 = VMSUMUHM
  { 4,	OperandInfo278 },  // Inst #2036 = VMSUMUHS
  { 2,	OperandInfo93 },  // Inst #2037 = VMUL10CUQ
  { 3,	OperandInfo92 },  // Inst #2038 = VMUL10ECUQ
  { 3,	OperandInfo92 },  // Inst #2039 = VMUL10EUQ
  { 2,	OperandInfo93 },  // Inst #2040 = VMUL10UQ
  { 3,	OperandInfo92 },  // Inst #2041 = VMULESB
  { 3,	OperandInfo92 },  // Inst #2042 = VMULESD
  { 3,	OperandInfo92 },  // Inst #2043 = VMULESH
  { 3,	OperandInfo92 },  // Inst #2044 = VMULESW
  { 3,	OperandInfo92 },  // Inst #2045 = VMULEUB
  { 3,	OperandInfo92 },  // Inst #2046 = VMULEUD
  { 3,	OperandInfo92 },  // Inst #2047 = VMULEUH
  { 3,	OperandInfo92 },  // Inst #2048 = VMULEUW
  { 3,	OperandInfo92 },  // Inst #2049 = VMULHSD
  { 3,	OperandInfo92 },  // Inst #2050 = VMULHSW
  { 3,	OperandInfo92 },  // Inst #2051 = VMULHUD
  { 3,	OperandInfo92 },  // Inst #2052 = VMULHUW
  { 3,	OperandInfo92 },  // Inst #2053 = VMULLD
  { 3,	OperandInfo92 },  // Inst #2054 = VMULOSB
  { 3,	OperandInfo92 },  // Inst #2055 = VMULOSD
  { 3,	OperandInfo92 },  // Inst #2056 = VMULOSH
  { 3,	OperandInfo92 },  // Inst #2057 = VMULOSW
  { 3,	OperandInfo92 },  // Inst #2058 = VMULOUB
  { 3,	OperandInfo92 },  // Inst #2059 = VMULOUD
  { 3,	OperandInfo92 },  // Inst #2060 = VMULOUH
  { 3,	OperandInfo92 },  // Inst #2061 = VMULOUW
  { 3,	OperandInfo92 },  // Inst #2062 = VMULUWM
  { 3,	OperandInfo92 },  // Inst #2063 = VNAND
  { 3,	OperandInfo92 },  // Inst #2064 = VNCIPHER
  { 3,	OperandInfo92 },  // Inst #2065 = VNCIPHERLAST
  { 2,	OperandInfo93 },  // Inst #2066 = VNEGD
  { 2,	OperandInfo93 },  // Inst #2067 = VNEGW
  { 4,	OperandInfo278 },  // Inst #2068 = VNMSUBFP
  { 3,	OperandInfo92 },  // Inst #2069 = VNOR
  { 3,	OperandInfo92 },  // Inst #2070 = VOR
  { 3,	OperandInfo92 },  // Inst #2071 = VORC
  { 3,	OperandInfo92 },  // Inst #2072 = VPDEPD
  { 4,	OperandInfo278 },  // Inst #2073 = VPERM
  { 4,	OperandInfo278 },  // Inst #2074 = VPERMR
  { 4,	OperandInfo278 },  // Inst #2075 = VPERMXOR
  { 3,	OperandInfo92 },  // Inst #2076 = VPEXTD
  { 3,	OperandInfo92 },  // Inst #2077 = VPKPX
  { 3,	OperandInfo92 },  // Inst #2078 = VPKSDSS
  { 3,	OperandInfo92 },  // Inst #2079 = VPKSDUS
  { 3,	OperandInfo92 },  // Inst #2080 = VPKSHSS
  { 3,	OperandInfo92 },  // Inst #2081 = VPKSHUS
  { 3,	OperandInfo92 },  // Inst #2082 = VPKSWSS
  { 3,	OperandInfo92 },  // Inst #2083 = VPKSWUS
  { 3,	OperandInfo92 },  // Inst #2084 = VPKUDUM
  { 3,	OperandInfo92 },  // Inst #2085 = VPKUDUS
  { 3,	OperandInfo92 },  // Inst #2086 = VPKUHUM
  { 3,	OperandInfo92 },  // Inst #2087 = VPKUHUS
  { 3,	OperandInfo92 },  // Inst #2088 = VPKUWUM
  { 3,	OperandInfo92 },  // Inst #2089 = VPKUWUS
  { 3,	OperandInfo92 },  // Inst #2090 = VPMSUMB
  { 3,	OperandInfo92 },  // Inst #2091 = VPMSUMD
  { 3,	OperandInfo92 },  // Inst #2092 = VPMSUMH
  { 3,	OperandInfo92 },  // Inst #2093 = VPMSUMW
  { 2,	OperandInfo93 },  // Inst #2094 = VPOPCNTB
  { 2,	OperandInfo93 },  // Inst #2095 = VPOPCNTD
  { 2,	OperandInfo93 },  // Inst #2096 = VPOPCNTH
  { 2,	OperandInfo93 },  // Inst #2097 = VPOPCNTW
  { 2,	OperandInfo93 },  // Inst #2098 = VPRTYBD
  { 2,	OperandInfo93 },  // Inst #2099 = VPRTYBQ
  { 2,	OperandInfo93 },  // Inst #2100 = VPRTYBW
  { 2,	OperandInfo93 },  // Inst #2101 = VREFP
  { 2,	OperandInfo93 },  // Inst #2102 = VRFIM
  { 2,	OperandInfo93 },  // Inst #2103 = VRFIN
  { 2,	OperandInfo93 },  // Inst #2104 = VRFIP
  { 2,	OperandInfo93 },  // Inst #2105 = VRFIZ
  { 3,	OperandInfo92 },  // Inst #2106 = VRLB
  { 3,	OperandInfo92 },  // Inst #2107 = VRLD
  { 4,	OperandInfo293 },  // Inst #2108 = VRLDMI
  { 3,	OperandInfo92 },  // Inst #2109 = VRLDNM
  { 3,	OperandInfo92 },  // Inst #2110 = VRLH
  { 3,	OperandInfo92 },  // Inst #2111 = VRLQ
  { 4,	OperandInfo293 },  // Inst #2112 = VRLQMI
  { 3,	OperandInfo92 },  // Inst #2113 = VRLQNM
  { 3,	OperandInfo92 },  // Inst #2114 = VRLW
  { 4,	OperandInfo293 },  // Inst #2115 = VRLWMI
  { 3,	OperandInfo92 },  // Inst #2116 = VRLWNM
  { 2,	OperandInfo93 },  // Inst #2117 = VRSQRTEFP
  { 2,	OperandInfo93 },  // Inst #2118 = VSBOX
  { 4,	OperandInfo278 },  // Inst #2119 = VSEL
  { 4,	OperandInfo294 },  // Inst #2120 = VSHASIGMAD
  { 4,	OperandInfo294 },  // Inst #2121 = VSHASIGMAW
  { 3,	OperandInfo92 },  // Inst #2122 = VSL
  { 3,	OperandInfo92 },  // Inst #2123 = VSLB
  { 3,	OperandInfo92 },  // Inst #2124 = VSLD
  { 4,	OperandInfo94 },  // Inst #2125 = VSLDBI
  { 4,	OperandInfo94 },  // Inst #2126 = VSLDOI
  { 3,	OperandInfo92 },  // Inst #2127 = VSLH
  { 3,	OperandInfo92 },  // Inst #2128 = VSLO
  { 3,	OperandInfo92 },  // Inst #2129 = VSLQ
  { 3,	OperandInfo92 },  // Inst #2130 = VSLV
  { 3,	OperandInfo92 },  // Inst #2131 = VSLW
  { 3,	OperandInfo279 },  // Inst #2132 = VSPLTB
  { 3,	OperandInfo295 },  // Inst #2133 = VSPLTBs
  { 3,	OperandInfo279 },  // Inst #2134 = VSPLTH
  { 3,	OperandInfo295 },  // Inst #2135 = VSPLTHs
  { 2,	OperandInfo197 },  // Inst #2136 = VSPLTISB
  { 2,	OperandInfo197 },  // Inst #2137 = VSPLTISH
  { 2,	OperandInfo197 },  // Inst #2138 = VSPLTISW
  { 3,	OperandInfo279 },  // Inst #2139 = VSPLTW
  { 3,	OperandInfo92 },  // Inst #2140 = VSR
  { 3,	OperandInfo92 },  // Inst #2141 = VSRAB
  { 3,	OperandInfo92 },  // Inst #2142 = VSRAD
  { 3,	OperandInfo92 },  // Inst #2143 = VSRAH
  { 3,	OperandInfo92 },  // Inst #2144 = VSRAQ
  { 3,	OperandInfo92 },  // Inst #2145 = VSRAW
  { 3,	OperandInfo92 },  // Inst #2146 = VSRB
  { 3,	OperandInfo92 },  // Inst #2147 = VSRD
  { 4,	OperandInfo94 },  // Inst #2148 = VSRDBI
  { 3,	OperandInfo92 },  // Inst #2149 = VSRH
  { 3,	OperandInfo92 },  // Inst #2150 = VSRO
  { 3,	OperandInfo92 },  // Inst #2151 = VSRQ
  { 3,	OperandInfo92 },  // Inst #2152 = VSRV
  { 3,	OperandInfo92 },  // Inst #2153 = VSRW
  { 2,	OperandInfo93 },  // Inst #2154 = VSTRIBL
  { 2,	OperandInfo93 },  // Inst #2155 = VSTRIBL_rec
  { 2,	OperandInfo93 },  // Inst #2156 = VSTRIBR
  { 2,	OperandInfo93 },  // Inst #2157 = VSTRIBR_rec
  { 2,	OperandInfo93 },  // Inst #2158 = VSTRIHL
  { 2,	OperandInfo93 },  // Inst #2159 = VSTRIHL_rec
  { 2,	OperandInfo93 },  // Inst #2160 = VSTRIHR
  { 2,	OperandInfo93 },  // Inst #2161 = VSTRIHR_rec
  { 3,	OperandInfo92 },  // Inst #2162 = VSUBCUQ
  { 3,	OperandInfo92 },  // Inst #2163 = VSUBCUW
  { 4,	OperandInfo278 },  // Inst #2164 = VSUBECUQ
  { 4,	OperandInfo278 },  // Inst #2165 = VSUBEUQM
  { 3,	OperandInfo92 },  // Inst #2166 = VSUBFP
  { 3,	OperandInfo92 },  // Inst #2167 = VSUBSBS
  { 3,	OperandInfo92 },  // Inst #2168 = VSUBSHS
  { 3,	OperandInfo92 },  // Inst #2169 = VSUBSWS
  { 3,	OperandInfo92 },  // Inst #2170 = VSUBUBM
  { 3,	OperandInfo92 },  // Inst #2171 = VSUBUBS
  { 3,	OperandInfo92 },  // Inst #2172 = VSUBUDM
  { 3,	OperandInfo92 },  // Inst #2173 = VSUBUHM
  { 3,	OperandInfo92 },  // Inst #2174 = VSUBUHS
  { 3,	OperandInfo92 },  // Inst #2175 = VSUBUQM
  { 3,	OperandInfo92 },  // Inst #2176 = VSUBUWM
  { 3,	OperandInfo92 },  // Inst #2177 = VSUBUWS
  { 3,	OperandInfo92 },  // Inst #2178 = VSUM2SWS
  { 3,	OperandInfo92 },  // Inst #2179 = VSUM4SBS
  { 3,	OperandInfo92 },  // Inst #2180 = VSUM4SHS
  { 3,	OperandInfo92 },  // Inst #2181 = VSUM4UBS
  { 3,	OperandInfo92 },  // Inst #2182 = VSUMSWS
  { 2,	OperandInfo93 },  // Inst #2183 = VUPKHPX
  { 2,	OperandInfo93 },  // Inst #2184 = VUPKHSB
  { 2,	OperandInfo93 },  // Inst #2185 = VUPKHSH
  { 2,	OperandInfo93 },  // Inst #2186 = VUPKHSW
  { 2,	OperandInfo93 },  // Inst #2187 = VUPKLPX
  { 2,	OperandInfo93 },  // Inst #2188 = VUPKLSB
  { 2,	OperandInfo93 },  // Inst #2189 = VUPKLSH
  { 2,	OperandInfo93 },  // Inst #2190 = VUPKLSW
  { 3,	OperandInfo92 },  // Inst #2191 = VXOR
  { 1,	OperandInfo183 },  // Inst #2192 = V_SET0
  { 1,	OperandInfo183 },  // Inst #2193 = V_SET0B
  { 1,	OperandInfo183 },  // Inst #2194 = V_SET0H
  { 1,	OperandInfo183 },  // Inst #2195 = V_SETALLONES
  { 1,	OperandInfo183 },  // Inst #2196 = V_SETALLONESB
  { 1,	OperandInfo183 },  // Inst #2197 = V_SETALLONESH
  { 1,	OperandInfo3 },  // Inst #2198 = WAIT
  { 1,	OperandInfo175 },  // Inst #2199 = WRTEE
  { 1,	OperandInfo3 },  // Inst #2200 = WRTEEI
  { 3,	OperandInfo64 },  // Inst #2201 = XOR
  { 3,	OperandInfo66 },  // Inst #2202 = XOR8
  { 3,	OperandInfo66 },  // Inst #2203 = XOR8_rec
  { 3,	OperandInfo52 },  // Inst #2204 = XORI
  { 3,	OperandInfo51 },  // Inst #2205 = XORI8
  { 3,	OperandInfo52 },  // Inst #2206 = XORIS
  { 3,	OperandInfo51 },  // Inst #2207 = XORIS8
  { 3,	OperandInfo64 },  // Inst #2208 = XOR_rec
  { 2,	OperandInfo296 },  // Inst #2209 = XSABSDP
  { 2,	OperandInfo93 },  // Inst #2210 = XSABSQP
  { 3,	OperandInfo297 },  // Inst #2211 = XSADDDP
  { 3,	OperandInfo92 },  // Inst #2212 = XSADDQP
  { 3,	OperandInfo92 },  // Inst #2213 = XSADDQPO
  { 3,	OperandInfo298 },  // Inst #2214 = XSADDSP
  { 3,	OperandInfo299 },  // Inst #2215 = XSCMPEQDP
  { 3,	OperandInfo300 },  // Inst #2216 = XSCMPEXPDP
  { 3,	OperandInfo282 },  // Inst #2217 = XSCMPEXPQP
  { 3,	OperandInfo299 },  // Inst #2218 = XSCMPGEDP
  { 3,	OperandInfo299 },  // Inst #2219 = XSCMPGTDP
  { 3,	OperandInfo300 },  // Inst #2220 = XSCMPODP
  { 3,	OperandInfo282 },  // Inst #2221 = XSCMPOQP
  { 3,	OperandInfo300 },  // Inst #2222 = XSCMPUDP
  { 3,	OperandInfo282 },  // Inst #2223 = XSCMPUQP
  { 3,	OperandInfo297 },  // Inst #2224 = XSCPSGNDP
  { 3,	OperandInfo92 },  // Inst #2225 = XSCPSGNQP
  { 2,	OperandInfo296 },  // Inst #2226 = XSCVDPHP
  { 2,	OperandInfo301 },  // Inst #2227 = XSCVDPQP
  { 2,	OperandInfo296 },  // Inst #2228 = XSCVDPSP
  { 2,	OperandInfo302 },  // Inst #2229 = XSCVDPSPN
  { 2,	OperandInfo296 },  // Inst #2230 = XSCVDPSXDS
  { 2,	OperandInfo303 },  // Inst #2231 = XSCVDPSXDSs
  { 2,	OperandInfo296 },  // Inst #2232 = XSCVDPSXWS
  { 2,	OperandInfo303 },  // Inst #2233 = XSCVDPSXWSs
  { 2,	OperandInfo296 },  // Inst #2234 = XSCVDPUXDS
  { 2,	OperandInfo303 },  // Inst #2235 = XSCVDPUXDSs
  { 2,	OperandInfo296 },  // Inst #2236 = XSCVDPUXWS
  { 2,	OperandInfo303 },  // Inst #2237 = XSCVDPUXWSs
  { 2,	OperandInfo296 },  // Inst #2238 = XSCVHPDP
  { 2,	OperandInfo304 },  // Inst #2239 = XSCVQPDP
  { 2,	OperandInfo304 },  // Inst #2240 = XSCVQPDPO
  { 2,	OperandInfo93 },  // Inst #2241 = XSCVQPSDZ
  { 2,	OperandInfo93 },  // Inst #2242 = XSCVQPSQZ
  { 2,	OperandInfo93 },  // Inst #2243 = XSCVQPSWZ
  { 2,	OperandInfo93 },  // Inst #2244 = XSCVQPUDZ
  { 2,	OperandInfo93 },  // Inst #2245 = XSCVQPUQZ
  { 2,	OperandInfo93 },  // Inst #2246 = XSCVQPUWZ
  { 2,	OperandInfo301 },  // Inst #2247 = XSCVSDQP
  { 2,	OperandInfo296 },  // Inst #2248 = XSCVSPDP
  { 2,	OperandInfo305 },  // Inst #2249 = XSCVSPDPN
  { 2,	OperandInfo93 },  // Inst #2250 = XSCVSQQP
  { 2,	OperandInfo296 },  // Inst #2251 = XSCVSXDDP
  { 2,	OperandInfo306 },  // Inst #2252 = XSCVSXDSP
  { 2,	OperandInfo301 },  // Inst #2253 = XSCVUDQP
  { 2,	OperandInfo93 },  // Inst #2254 = XSCVUQQP
  { 2,	OperandInfo296 },  // Inst #2255 = XSCVUXDDP
  { 2,	OperandInfo306 },  // Inst #2256 = XSCVUXDSP
  { 3,	OperandInfo297 },  // Inst #2257 = XSDIVDP
  { 3,	OperandInfo92 },  // Inst #2258 = XSDIVQP
  { 3,	OperandInfo92 },  // Inst #2259 = XSDIVQPO
  { 3,	OperandInfo298 },  // Inst #2260 = XSDIVSP
  { 3,	OperandInfo307 },  // Inst #2261 = XSIEXPDP
  { 3,	OperandInfo308 },  // Inst #2262 = XSIEXPQP
  { 4,	OperandInfo309 },  // Inst #2263 = XSMADDADP
  { 4,	OperandInfo310 },  // Inst #2264 = XSMADDASP
  { 4,	OperandInfo309 },  // Inst #2265 = XSMADDMDP
  { 4,	OperandInfo310 },  // Inst #2266 = XSMADDMSP
  { 4,	OperandInfo311 },  // Inst #2267 = XSMADDQP
  { 4,	OperandInfo311 },  // Inst #2268 = XSMADDQPO
  { 3,	OperandInfo297 },  // Inst #2269 = XSMAXCDP
  { 3,	OperandInfo297 },  // Inst #2270 = XSMAXDP
  { 3,	OperandInfo299 },  // Inst #2271 = XSMAXJDP
  { 3,	OperandInfo297 },  // Inst #2272 = XSMINCDP
  { 3,	OperandInfo297 },  // Inst #2273 = XSMINDP
  { 3,	OperandInfo299 },  // Inst #2274 = XSMINJDP
  { 4,	OperandInfo309 },  // Inst #2275 = XSMSUBADP
  { 4,	OperandInfo310 },  // Inst #2276 = XSMSUBASP
  { 4,	OperandInfo309 },  // Inst #2277 = XSMSUBMDP
  { 4,	OperandInfo310 },  // Inst #2278 = XSMSUBMSP
  { 4,	OperandInfo311 },  // Inst #2279 = XSMSUBQP
  { 4,	OperandInfo311 },  // Inst #2280 = XSMSUBQPO
  { 3,	OperandInfo297 },  // Inst #2281 = XSMULDP
  { 3,	OperandInfo92 },  // Inst #2282 = XSMULQP
  { 3,	OperandInfo92 },  // Inst #2283 = XSMULQPO
  { 3,	OperandInfo298 },  // Inst #2284 = XSMULSP
  { 2,	OperandInfo296 },  // Inst #2285 = XSNABSDP
  { 2,	OperandInfo93 },  // Inst #2286 = XSNABSQP
  { 2,	OperandInfo296 },  // Inst #2287 = XSNEGDP
  { 2,	OperandInfo93 },  // Inst #2288 = XSNEGQP
  { 4,	OperandInfo309 },  // Inst #2289 = XSNMADDADP
  { 4,	OperandInfo310 },  // Inst #2290 = XSNMADDASP
  { 4,	OperandInfo309 },  // Inst #2291 = XSNMADDMDP
  { 4,	OperandInfo310 },  // Inst #2292 = XSNMADDMSP
  { 4,	OperandInfo311 },  // Inst #2293 = XSNMADDQP
  { 4,	OperandInfo311 },  // Inst #2294 = XSNMADDQPO
  { 4,	OperandInfo309 },  // Inst #2295 = XSNMSUBADP
  { 4,	OperandInfo310 },  // Inst #2296 = XSNMSUBASP
  { 4,	OperandInfo309 },  // Inst #2297 = XSNMSUBMDP
  { 4,	OperandInfo310 },  // Inst #2298 = XSNMSUBMSP
  { 4,	OperandInfo311 },  // Inst #2299 = XSNMSUBQP
  { 4,	OperandInfo311 },  // Inst #2300 = XSNMSUBQPO
  { 2,	OperandInfo296 },  // Inst #2301 = XSRDPI
  { 2,	OperandInfo296 },  // Inst #2302 = XSRDPIC
  { 2,	OperandInfo296 },  // Inst #2303 = XSRDPIM
  { 2,	OperandInfo296 },  // Inst #2304 = XSRDPIP
  { 2,	OperandInfo296 },  // Inst #2305 = XSRDPIZ
  { 2,	OperandInfo296 },  // Inst #2306 = XSREDP
  { 2,	OperandInfo303 },  // Inst #2307 = XSRESP
  { 4,	OperandInfo312 },  // Inst #2308 = XSRQPI
  { 4,	OperandInfo312 },  // Inst #2309 = XSRQPIX
  { 4,	OperandInfo312 },  // Inst #2310 = XSRQPXP
  { 2,	OperandInfo306 },  // Inst #2311 = XSRSP
  { 2,	OperandInfo296 },  // Inst #2312 = XSRSQRTEDP
  { 2,	OperandInfo303 },  // Inst #2313 = XSRSQRTESP
  { 2,	OperandInfo296 },  // Inst #2314 = XSSQRTDP
  { 2,	OperandInfo93 },  // Inst #2315 = XSSQRTQP
  { 2,	OperandInfo93 },  // Inst #2316 = XSSQRTQPO
  { 2,	OperandInfo303 },  // Inst #2317 = XSSQRTSP
  { 3,	OperandInfo297 },  // Inst #2318 = XSSUBDP
  { 3,	OperandInfo92 },  // Inst #2319 = XSSUBQP
  { 3,	OperandInfo92 },  // Inst #2320 = XSSUBQPO
  { 3,	OperandInfo298 },  // Inst #2321 = XSSUBSP
  { 3,	OperandInfo300 },  // Inst #2322 = XSTDIVDP
  { 2,	OperandInfo313 },  // Inst #2323 = XSTSQRTDP
  { 3,	OperandInfo314 },  // Inst #2324 = XSTSTDCDP
  { 3,	OperandInfo315 },  // Inst #2325 = XSTSTDCQP
  { 3,	OperandInfo314 },  // Inst #2326 = XSTSTDCSP
  { 2,	OperandInfo184 },  // Inst #2327 = XSXEXPDP
  { 2,	OperandInfo93 },  // Inst #2328 = XSXEXPQP
  { 2,	OperandInfo184 },  // Inst #2329 = XSXSIGDP
  { 2,	OperandInfo93 },  // Inst #2330 = XSXSIGQP
  { 2,	OperandInfo316 },  // Inst #2331 = XVABSDP
  { 2,	OperandInfo316 },  // Inst #2332 = XVABSSP
  { 3,	OperandInfo317 },  // Inst #2333 = XVADDDP
  { 3,	OperandInfo317 },  // Inst #2334 = XVADDSP
  { 3,	OperandInfo318 },  // Inst #2335 = XVBF16GER2
  { 4,	OperandInfo319 },  // Inst #2336 = XVBF16GER2NN
  { 4,	OperandInfo319 },  // Inst #2337 = XVBF16GER2NP
  { 4,	OperandInfo319 },  // Inst #2338 = XVBF16GER2PN
  { 4,	OperandInfo319 },  // Inst #2339 = XVBF16GER2PP
  { 3,	OperandInfo317 },  // Inst #2340 = XVCMPEQDP
  { 3,	OperandInfo317 },  // Inst #2341 = XVCMPEQDP_rec
  { 3,	OperandInfo317 },  // Inst #2342 = XVCMPEQSP
  { 3,	OperandInfo317 },  // Inst #2343 = XVCMPEQSP_rec
  { 3,	OperandInfo317 },  // Inst #2344 = XVCMPGEDP
  { 3,	OperandInfo317 },  // Inst #2345 = XVCMPGEDP_rec
  { 3,	OperandInfo317 },  // Inst #2346 = XVCMPGESP
  { 3,	OperandInfo317 },  // Inst #2347 = XVCMPGESP_rec
  { 3,	OperandInfo317 },  // Inst #2348 = XVCMPGTDP
  { 3,	OperandInfo317 },  // Inst #2349 = XVCMPGTDP_rec
  { 3,	OperandInfo317 },  // Inst #2350 = XVCMPGTSP
  { 3,	OperandInfo317 },  // Inst #2351 = XVCMPGTSP_rec
  { 3,	OperandInfo317 },  // Inst #2352 = XVCPSGNDP
  { 3,	OperandInfo317 },  // Inst #2353 = XVCPSGNSP
  { 2,	OperandInfo316 },  // Inst #2354 = XVCVBF16SPN
  { 2,	OperandInfo316 },  // Inst #2355 = XVCVDPSP
  { 2,	OperandInfo316 },  // Inst #2356 = XVCVDPSXDS
  { 2,	OperandInfo316 },  // Inst #2357 = XVCVDPSXWS
  { 2,	OperandInfo316 },  // Inst #2358 = XVCVDPUXDS
  { 2,	OperandInfo316 },  // Inst #2359 = XVCVDPUXWS
  { 2,	OperandInfo316 },  // Inst #2360 = XVCVHPSP
  { 2,	OperandInfo316 },  // Inst #2361 = XVCVSPBF16
  { 2,	OperandInfo316 },  // Inst #2362 = XVCVSPDP
  { 2,	OperandInfo316 },  // Inst #2363 = XVCVSPHP
  { 2,	OperandInfo316 },  // Inst #2364 = XVCVSPSXDS
  { 2,	OperandInfo316 },  // Inst #2365 = XVCVSPSXWS
  { 2,	OperandInfo316 },  // Inst #2366 = XVCVSPUXDS
  { 2,	OperandInfo316 },  // Inst #2367 = XVCVSPUXWS
  { 2,	OperandInfo316 },  // Inst #2368 = XVCVSXDDP
  { 2,	OperandInfo316 },  // Inst #2369 = XVCVSXDSP
  { 2,	OperandInfo316 },  // Inst #2370 = XVCVSXWDP
  { 2,	OperandInfo316 },  // Inst #2371 = XVCVSXWSP
  { 2,	OperandInfo316 },  // Inst #2372 = XVCVUXDDP
  { 2,	OperandInfo316 },  // Inst #2373 = XVCVUXDSP
  { 2,	OperandInfo316 },  // Inst #2374 = XVCVUXWDP
  { 2,	OperandInfo316 },  // Inst #2375 = XVCVUXWSP
  { 3,	OperandInfo317 },  // Inst #2376 = XVDIVDP
  { 3,	OperandInfo317 },  // Inst #2377 = XVDIVSP
  { 3,	OperandInfo318 },  // Inst #2378 = XVF16GER2
  { 4,	OperandInfo319 },  // Inst #2379 = XVF16GER2NN
  { 4,	OperandInfo319 },  // Inst #2380 = XVF16GER2NP
  { 4,	OperandInfo319 },  // Inst #2381 = XVF16GER2PN
  { 4,	OperandInfo319 },  // Inst #2382 = XVF16GER2PP
  { 3,	OperandInfo318 },  // Inst #2383 = XVF32GER
  { 4,	OperandInfo319 },  // Inst #2384 = XVF32GERNN
  { 4,	OperandInfo319 },  // Inst #2385 = XVF32GERNP
  { 4,	OperandInfo319 },  // Inst #2386 = XVF32GERPN
  { 4,	OperandInfo319 },  // Inst #2387 = XVF32GERPP
  { 3,	OperandInfo320 },  // Inst #2388 = XVF64GER
  { 4,	OperandInfo321 },  // Inst #2389 = XVF64GERNN
  { 4,	OperandInfo321 },  // Inst #2390 = XVF64GERNP
  { 4,	OperandInfo321 },  // Inst #2391 = XVF64GERPN
  { 4,	OperandInfo321 },  // Inst #2392 = XVF64GERPP
  { 3,	OperandInfo318 },  // Inst #2393 = XVI16GER2
  { 4,	OperandInfo319 },  // Inst #2394 = XVI16GER2PP
  { 3,	OperandInfo318 },  // Inst #2395 = XVI16GER2S
  { 4,	OperandInfo319 },  // Inst #2396 = XVI16GER2SPP
  { 3,	OperandInfo318 },  // Inst #2397 = XVI4GER8
  { 4,	OperandInfo319 },  // Inst #2398 = XVI4GER8PP
  { 3,	OperandInfo318 },  // Inst #2399 = XVI8GER4
  { 4,	OperandInfo319 },  // Inst #2400 = XVI8GER4PP
  { 4,	OperandInfo319 },  // Inst #2401 = XVI8GER4SPP
  { 3,	OperandInfo317 },  // Inst #2402 = XVIEXPDP
  { 3,	OperandInfo317 },  // Inst #2403 = XVIEXPSP
  { 4,	OperandInfo322 },  // Inst #2404 = XVMADDADP
  { 4,	OperandInfo322 },  // Inst #2405 = XVMADDASP
  { 4,	OperandInfo322 },  // Inst #2406 = XVMADDMDP
  { 4,	OperandInfo322 },  // Inst #2407 = XVMADDMSP
  { 3,	OperandInfo317 },  // Inst #2408 = XVMAXDP
  { 3,	OperandInfo317 },  // Inst #2409 = XVMAXSP
  { 3,	OperandInfo317 },  // Inst #2410 = XVMINDP
  { 3,	OperandInfo317 },  // Inst #2411 = XVMINSP
  { 4,	OperandInfo322 },  // Inst #2412 = XVMSUBADP
  { 4,	OperandInfo322 },  // Inst #2413 = XVMSUBASP
  { 4,	OperandInfo322 },  // Inst #2414 = XVMSUBMDP
  { 4,	OperandInfo322 },  // Inst #2415 = XVMSUBMSP
  { 3,	OperandInfo317 },  // Inst #2416 = XVMULDP
  { 3,	OperandInfo317 },  // Inst #2417 = XVMULSP
  { 2,	OperandInfo316 },  // Inst #2418 = XVNABSDP
  { 2,	OperandInfo316 },  // Inst #2419 = XVNABSSP
  { 2,	OperandInfo316 },  // Inst #2420 = XVNEGDP
  { 2,	OperandInfo316 },  // Inst #2421 = XVNEGSP
  { 4,	OperandInfo322 },  // Inst #2422 = XVNMADDADP
  { 4,	OperandInfo322 },  // Inst #2423 = XVNMADDASP
  { 4,	OperandInfo322 },  // Inst #2424 = XVNMADDMDP
  { 4,	OperandInfo322 },  // Inst #2425 = XVNMADDMSP
  { 4,	OperandInfo322 },  // Inst #2426 = XVNMSUBADP
  { 4,	OperandInfo322 },  // Inst #2427 = XVNMSUBASP
  { 4,	OperandInfo322 },  // Inst #2428 = XVNMSUBMDP
  { 4,	OperandInfo322 },  // Inst #2429 = XVNMSUBMSP
  { 2,	OperandInfo316 },  // Inst #2430 = XVRDPI
  { 2,	OperandInfo316 },  // Inst #2431 = XVRDPIC
  { 2,	OperandInfo316 },  // Inst #2432 = XVRDPIM
  { 2,	OperandInfo316 },  // Inst #2433 = XVRDPIP
  { 2,	OperandInfo316 },  // Inst #2434 = XVRDPIZ
  { 2,	OperandInfo316 },  // Inst #2435 = XVREDP
  { 2,	OperandInfo316 },  // Inst #2436 = XVRESP
  { 2,	OperandInfo316 },  // Inst #2437 = XVRSPI
  { 2,	OperandInfo316 },  // Inst #2438 = XVRSPIC
  { 2,	OperandInfo316 },  // Inst #2439 = XVRSPIM
  { 2,	OperandInfo316 },  // Inst #2440 = XVRSPIP
  { 2,	OperandInfo316 },  // Inst #2441 = XVRSPIZ
  { 2,	OperandInfo316 },  // Inst #2442 = XVRSQRTEDP
  { 2,	OperandInfo316 },  // Inst #2443 = XVRSQRTESP
  { 2,	OperandInfo316 },  // Inst #2444 = XVSQRTDP
  { 2,	OperandInfo316 },  // Inst #2445 = XVSQRTSP
  { 3,	OperandInfo317 },  // Inst #2446 = XVSUBDP
  { 3,	OperandInfo317 },  // Inst #2447 = XVSUBSP
  { 3,	OperandInfo323 },  // Inst #2448 = XVTDIVDP
  { 3,	OperandInfo323 },  // Inst #2449 = XVTDIVSP
  { 2,	OperandInfo324 },  // Inst #2450 = XVTLSBB
  { 2,	OperandInfo324 },  // Inst #2451 = XVTSQRTDP
  { 2,	OperandInfo324 },  // Inst #2452 = XVTSQRTSP
  { 3,	OperandInfo325 },  // Inst #2453 = XVTSTDCDP
  { 3,	OperandInfo325 },  // Inst #2454 = XVTSTDCSP
  { 2,	OperandInfo316 },  // Inst #2455 = XVXEXPDP
  { 2,	OperandInfo316 },  // Inst #2456 = XVXEXPSP
  { 2,	OperandInfo316 },  // Inst #2457 = XVXSIGDP
  { 2,	OperandInfo316 },  // Inst #2458 = XVXSIGSP
  { 4,	OperandInfo326 },  // Inst #2459 = XXBLENDVB
  { 4,	OperandInfo326 },  // Inst #2460 = XXBLENDVD
  { 4,	OperandInfo326 },  // Inst #2461 = XXBLENDVH
  { 4,	OperandInfo326 },  // Inst #2462 = XXBLENDVW
  { 2,	OperandInfo316 },  // Inst #2463 = XXBRD
  { 2,	OperandInfo316 },  // Inst #2464 = XXBRH
  { 2,	OperandInfo316 },  // Inst #2465 = XXBRQ
  { 2,	OperandInfo316 },  // Inst #2466 = XXBRW
  { 5,	OperandInfo327 },  // Inst #2467 = XXEVAL
  { 3,	OperandInfo328 },  // Inst #2468 = XXEXTRACTUW
  { 3,	OperandInfo329 },  // Inst #2469 = XXGENPCVBM
  { 3,	OperandInfo329 },  // Inst #2470 = XXGENPCVDM
  { 3,	OperandInfo329 },  // Inst #2471 = XXGENPCVHM
  { 3,	OperandInfo329 },  // Inst #2472 = XXGENPCVWM
  { 4,	OperandInfo330 },  // Inst #2473 = XXINSERTW
  { 3,	OperandInfo317 },  // Inst #2474 = XXLAND
  { 3,	OperandInfo317 },  // Inst #2475 = XXLANDC
  { 3,	OperandInfo317 },  // Inst #2476 = XXLEQV
  { 1,	OperandInfo331 },  // Inst #2477 = XXLEQVOnes
  { 3,	OperandInfo317 },  // Inst #2478 = XXLNAND
  { 3,	OperandInfo317 },  // Inst #2479 = XXLNOR
  { 3,	OperandInfo317 },  // Inst #2480 = XXLOR
  { 3,	OperandInfo317 },  // Inst #2481 = XXLORC
  { 3,	OperandInfo297 },  // Inst #2482 = XXLORf
  { 3,	OperandInfo317 },  // Inst #2483 = XXLXOR
  { 1,	OperandInfo332 },  // Inst #2484 = XXLXORdpz
  { 1,	OperandInfo333 },  // Inst #2485 = XXLXORspz
  { 1,	OperandInfo331 },  // Inst #2486 = XXLXORz
  { 2,	OperandInfo334 },  // Inst #2487 = XXMFACC
  { 3,	OperandInfo317 },  // Inst #2488 = XXMRGHW
  { 3,	OperandInfo317 },  // Inst #2489 = XXMRGLW
  { 2,	OperandInfo334 },  // Inst #2490 = XXMTACC
  { 3,	OperandInfo317 },  // Inst #2491 = XXPERM
  { 4,	OperandInfo335 },  // Inst #2492 = XXPERMDI
  { 3,	OperandInfo336 },  // Inst #2493 = XXPERMDIs
  { 3,	OperandInfo317 },  // Inst #2494 = XXPERMR
  { 5,	OperandInfo327 },  // Inst #2495 = XXPERMX
  { 4,	OperandInfo326 },  // Inst #2496 = XXSEL
  { 1,	OperandInfo337 },  // Inst #2497 = XXSETACCZ
  { 4,	OperandInfo335 },  // Inst #2498 = XXSLDWI
  { 3,	OperandInfo336 },  // Inst #2499 = XXSLDWIs
  { 4,	OperandInfo338 },  // Inst #2500 = XXSPLTI32DX
  { 2,	OperandInfo339 },  // Inst #2501 = XXSPLTIB
  { 2,	OperandInfo339 },  // Inst #2502 = XXSPLTIDP
  { 2,	OperandInfo339 },  // Inst #2503 = XXSPLTIW
  { 3,	OperandInfo340 },  // Inst #2504 = XXSPLTW
  { 3,	OperandInfo336 },  // Inst #2505 = XXSPLTWs
  { 3,	OperandInfo341 },  // Inst #2506 = gBC
  { 3,	OperandInfo342 },  // Inst #2507 = gBCA
  { 4,	OperandInfo343 },  // Inst #2508 = gBCAat
  { 3,	OperandInfo344 },  // Inst #2509 = gBCCTR
  { 3,	OperandInfo344 },  // Inst #2510 = gBCCTRL
  { 3,	OperandInfo341 },  // Inst #2511 = gBCL
  { 3,	OperandInfo342 },  // Inst #2512 = gBCLA
  { 4,	OperandInfo343 },  // Inst #2513 = gBCLAat
  { 3,	OperandInfo344 },  // Inst #2514 = gBCLR
  { 3,	OperandInfo344 },  // Inst #2515 = gBCLRL
  { 4,	OperandInfo345 },  // Inst #2516 = gBCLat
  { 4,	OperandInfo345 },  // Inst #2517 = gBCat
};


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
extern const char PPCInstrNameData[] = {
  /* 0 */ "G_FLOG10\0"
  /* 9 */ "MTFSB0\0"
  /* 16 */ "V_SET0\0"
  /* 23 */ "VCTSXS_0\0"
  /* 32 */ "VCTUXS_0\0"
  /* 41 */ "VCFSX_0\0"
  /* 49 */ "VCFUX_0\0"
  /* 57 */ "MTFSB1\0"
  /* 64 */ "ADDISdtprelHA32\0"
  /* 80 */ "ATOMIC_LOAD_SUB_I32\0"
  /* 100 */ "ATOMIC_LOAD_ADD_I32\0"
  /* 120 */ "ATOMIC_LOAD_NAND_I32\0"
  /* 141 */ "ATOMIC_LOAD_AND_I32\0"
  /* 161 */ "ATOMIC_LOAD_UMIN_I32\0"
  /* 182 */ "ATOMIC_LOAD_MIN_I32\0"
  /* 202 */ "ATOMIC_SWAP_I32\0"
  /* 218 */ "ATOMIC_CMP_SWAP_I32\0"
  /* 238 */ "ATOMIC_LOAD_XOR_I32\0"
  /* 258 */ "ATOMIC_LOAD_OR_I32\0"
  /* 277 */ "ATOMIC_LOAD_UMAX_I32\0"
  /* 298 */ "ATOMIC_LOAD_MAX_I32\0"
  /* 318 */ "ADDItlsgdL32\0"
  /* 331 */ "ADDItlsldL32\0"
  /* 344 */ "LDgotTprelL32\0"
  /* 358 */ "ADDIdtprelL32\0"
  /* 372 */ "ADDItlsgdLADDR32\0"
  /* 389 */ "ADDItlsldLADDR32\0"
  /* 406 */ "GETtlsldADDR32\0"
  /* 421 */ "GETtlsADDR32\0"
  /* 434 */ "PREPARE_PROBED_ALLOCA_32\0"
  /* 459 */ "LWA_32\0"
  /* 466 */ "PROBED_STACKALLOC_32\0"
  /* 487 */ "PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32\0"
  /* 529 */ "SRADI_32\0"
  /* 538 */ "RLDICL_32\0"
  /* 548 */ "RLDICR_32\0"
  /* 558 */ "STBXTLS_32\0"
  /* 569 */ "STHXTLS_32\0"
  /* 580 */ "STWXTLS_32\0"
  /* 591 */ "LBZXTLS_32\0"
  /* 602 */ "LHZXTLS_32\0"
  /* 613 */ "LWZXTLS_32\0"
  /* 624 */ "EXTSW_32\0"
  /* 633 */ "LWAX_32\0"
  /* 641 */ "DFLOADf32\0"
  /* 651 */ "XFLOADf32\0"
  /* 661 */ "DFSTOREf32\0"
  /* 672 */ "XFSTOREf32\0"
  /* 683 */ "EH_SjLj_LongJmp32\0"
  /* 701 */ "EH_SjLj_SetJmp32\0"
  /* 718 */ "TLBRE2\0"
  /* 725 */ "TLBWE2\0"
  /* 732 */ "G_FLOG2\0"
  /* 740 */ "G_FEXP2\0"
  /* 748 */ "PMXVBF16GER2\0"
  /* 761 */ "PMXVF16GER2\0"
  /* 773 */ "PMXVI16GER2\0"
  /* 785 */ "TLBSX2\0"
  /* 792 */ "ATOMIC_LOAD_SUB_I64\0"
  /* 812 */ "ATOMIC_LOAD_ADD_I64\0"
  /* 832 */ "ATOMIC_LOAD_NAND_I64\0"
  /* 853 */ "ATOMIC_LOAD_AND_I64\0"
  /* 873 */ "ATOMIC_LOAD_UMIN_I64\0"
  /* 894 */ "ATOMIC_LOAD_MIN_I64\0"
  /* 914 */ "ATOMIC_SWAP_I64\0"
  /* 930 */ "ATOMIC_CMP_SWAP_I64\0"
  /* 950 */ "ATOMIC_LOAD_XOR_I64\0"
  /* 970 */ "ATOMIC_LOAD_OR_I64\0"
  /* 989 */ "ATOMIC_LOAD_UMAX_I64\0"
  /* 1010 */ "ATOMIC_LOAD_MAX_I64\0"
  /* 1030 */ "DST64\0"
  /* 1036 */ "DSTST64\0"
  /* 1044 */ "DSTT64\0"
  /* 1051 */ "DSTSTT64\0"
  /* 1060 */ "EXTSB8_32_64\0"
  /* 1073 */ "EXTSH8_32_64\0"
  /* 1086 */ "EXTSWSLI_32_64\0"
  /* 1101 */ "RLDICL_32_64\0"
  /* 1114 */ "EXTSW_32_64\0"
  /* 1126 */ "PREPARE_PROBED_ALLOCA_64\0"
  /* 1151 */ "PROBED_STACKALLOC_64\0"
  /* 1172 */ "PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64\0"
  /* 1214 */ "DFLOADf64\0"
  /* 1224 */ "XFLOADf64\0"
  /* 1234 */ "DFSTOREf64\0"
  /* 1245 */ "XFSTOREf64\0"
  /* 1256 */ "EH_SjLj_LongJmp64\0"
  /* 1274 */ "EH_SjLj_SetJmp64\0"
  /* 1291 */ "ADD4\0"
  /* 1296 */ "SELECT_CC_SPE4\0"
  /* 1311 */ "SELECT_SPE4\0"
  /* 1323 */ "SELECT_CC_F4\0"
  /* 1336 */ "SELECT_F4\0"
  /* 1346 */ "SELECT_CC_I4\0"
  /* 1359 */ "SELECT_I4\0"
  /* 1369 */ "PMXVI8GER4\0"
  /* 1380 */ "XVCVSPBF16\0"
  /* 1391 */ "SELECT_CC_F16\0"
  /* 1405 */ "SELECT_F16\0"
  /* 1416 */ "ATOMIC_LOAD_SUB_I16\0"
  /* 1436 */ "ATOMIC_LOAD_ADD_I16\0"
  /* 1456 */ "ATOMIC_LOAD_NAND_I16\0"
  /* 1477 */ "ATOMIC_LOAD_AND_I16\0"
  /* 1497 */ "ATOMIC_LOAD_UMIN_I16\0"
  /* 1518 */ "ATOMIC_LOAD_MIN_I16\0"
  /* 1538 */ "ATOMIC_SWAP_I16\0"
  /* 1554 */ "ATOMIC_CMP_SWAP_I16\0"
  /* 1574 */ "ATOMIC_LOAD_XOR_I16\0"
  /* 1594 */ "ATOMIC_LOAD_OR_I16\0"
  /* 1613 */ "ATOMIC_LOAD_UMAX_I16\0"
  /* 1634 */ "ATOMIC_LOAD_MAX_I16\0"
  /* 1654 */ "NOP_GT_PWR6\0"
  /* 1666 */ "NOP_GT_PWR7\0"
  /* 1678 */ "ATOMIC_LOAD_SUB_I128\0"
  /* 1699 */ "ATOMIC_LOAD_ADD_I128\0"
  /* 1720 */ "ATOMIC_LOAD_NAND_I128\0"
  /* 1742 */ "ATOMIC_LOAD_AND_I128\0"
  /* 1763 */ "ATOMIC_SWAP_I128\0"
  /* 1780 */ "ATOMIC_CMP_SWAP_I128\0"
  /* 1801 */ "ATOMIC_LOAD_XOR_I128\0"
  /* 1822 */ "ATOMIC_LOAD_OR_I128\0"
  /* 1842 */ "TAILBA8\0"
  /* 1850 */ "PLHA8\0"
  /* 1856 */ "ADDIStocHA8\0"
  /* 1868 */ "BLA8\0"
  /* 1873 */ "PLWA8\0"
  /* 1879 */ "TAILB8\0"
  /* 1886 */ "CMPB8\0"
  /* 1892 */ "CMPRB8\0"
  /* 1899 */ "EXTSB8\0"
  /* 1906 */ "SETB8\0"
  /* 1912 */ "MFTB8\0"
  /* 1918 */ "POPCNTB8\0"
  /* 1927 */ "PSTB8\0"
  /* 1933 */ "SETNBC8\0"
  /* 1941 */ "SETBC8\0"
  /* 1948 */ "ADDC8\0"
  /* 1954 */ "ANDC8\0"
  /* 1960 */ "SUBFC8\0"
  /* 1967 */ "ADDIC8\0"
  /* 1974 */ "SUBFIC8\0"
  /* 1982 */ "DYNALLOC8\0"
  /* 1992 */ "ORC8\0"
  /* 1997 */ "ADD8\0"
  /* 2002 */ "MADDLD8\0"
  /* 2010 */ "NAND8\0"
  /* 2016 */ "CFENCE8\0"
  /* 2024 */ "ADDE8\0"
  /* 2030 */ "SUBFE8\0"
  /* 2037 */ "ADDME8\0"
  /* 2044 */ "SUBFME8\0"
  /* 2052 */ "ADDZE8\0"
  /* 2059 */ "SUBFZE8\0"
  /* 2067 */ "SUBF8\0"
  /* 2073 */ "MFOCRF8\0"
  /* 2081 */ "MTOCRF8\0"
  /* 2089 */ "MTCRF8\0"
  /* 2096 */ "SELECT_CC_F8\0"
  /* 2109 */ "SELECT_F8\0"
  /* 2119 */ "NEG8\0"
  /* 2124 */ "EXTSH8\0"
  /* 2131 */ "PSTH8\0"
  /* 2137 */ "PADDI8\0"
  /* 2144 */ "MULLI8\0"
  /* 2151 */ "PLI8\0"
  /* 2156 */ "RLWIMI8\0"
  /* 2164 */ "XORI8\0"
  /* 2170 */ "ATOMIC_LOAD_SUB_I8\0"
  /* 2189 */ "SELECT_CC_I8\0"
  /* 2202 */ "ATOMIC_LOAD_ADD_I8\0"
  /* 2221 */ "ATOMIC_LOAD_NAND_I8\0"
  /* 2241 */ "ATOMIC_LOAD_AND_I8\0"
  /* 2260 */ "ATOMIC_LOAD_UMIN_I8\0"
  /* 2280 */ "ATOMIC_LOAD_MIN_I8\0"
  /* 2299 */ "ATOMIC_SWAP_I8\0"
  /* 2314 */ "ATOMIC_CMP_SWAP_I8\0"
  /* 2333 */ "ATOMIC_LOAD_XOR_I8\0"
  /* 2352 */ "ATOMIC_LOAD_OR_I8\0"
  /* 2370 */ "SELECT_I8\0"
  /* 2380 */ "ATOMIC_LOAD_UMAX_I8\0"
  /* 2400 */ "ATOMIC_LOAD_MAX_I8\0"
  /* 2419 */ "BL8\0"
  /* 2423 */ "ISEL8\0"
  /* 2429 */ "BCTRL8\0"
  /* 2436 */ "BCCTRL8\0"
  /* 2444 */ "BCCCTRL8\0"
  /* 2453 */ "RLWINM8\0"
  /* 2461 */ "RLWNM8\0"
  /* 2468 */ "SETNBCR8\0"
  /* 2477 */ "SETBCR8\0"
  /* 2485 */ "MFCR8\0"
  /* 2491 */ "PMXVI4GER8\0"
  /* 2502 */ "BLR8\0"
  /* 2507 */ "MFLR8\0"
  /* 2513 */ "MTLR8\0"
  /* 2519 */ "BDZLR8\0"
  /* 2526 */ "BDNZLR8\0"
  /* 2534 */ "MovePCtoLR8\0"
  /* 2546 */ "NOR8\0"
  /* 2551 */ "XOR8\0"
  /* 2556 */ "MFSPR8\0"
  /* 2563 */ "MTSPR8\0"
  /* 2570 */ "TAILBCTR8\0"
  /* 2580 */ "BCCTR8\0"
  /* 2587 */ "BCCCTR8\0"
  /* 2595 */ "MFCTR8\0"
  /* 2602 */ "MTCTR8\0"
  /* 2609 */ "ADDIS8\0"
  /* 2616 */ "LIS8\0"
  /* 2621 */ "XORIS8\0"
  /* 2628 */ "DYNAREAOFFSET8\0"
  /* 2643 */ "ANDI_rec_1_EQ_BIT8\0"
  /* 2662 */ "ANDI_rec_1_GT_BIT8\0"
  /* 2681 */ "LHAU8\0"
  /* 2687 */ "STBU8\0"
  /* 2693 */ "STHU8\0"
  /* 2699 */ "STWU8\0"
  /* 2705 */ "LBZU8\0"
  /* 2711 */ "LHZU8\0"
  /* 2717 */ "LWZU8\0"
  /* 2723 */ "EQV8\0"
  /* 2728 */ "SLW8\0"
  /* 2733 */ "SRW8\0"
  /* 2738 */ "PSTW8\0"
  /* 2744 */ "CNTLZW8\0"
  /* 2752 */ "CNTTZW8\0"
  /* 2760 */ "LHAX8\0"
  /* 2766 */ "STBX8\0"
  /* 2772 */ "ADDEX8\0"
  /* 2779 */ "STHX8\0"
  /* 2785 */ "TLSGDAIX8\0"
  /* 2795 */ "LHBRX8\0"
  /* 2802 */ "LWBRX8\0"
  /* 2809 */ "LHAUX8\0"
  /* 2816 */ "STBUX8\0"
  /* 2823 */ "STHUX8\0"
  /* 2830 */ "STWUX8\0"
  /* 2837 */ "LBZUX8\0"
  /* 2844 */ "LHZUX8\0"
  /* 2851 */ "LWZUX8\0"
  /* 2858 */ "STWX8\0"
  /* 2864 */ "LBZX8\0"
  /* 2870 */ "LHZX8\0"
  /* 2876 */ "LWZX8\0"
  /* 2882 */ "CP_COPY8\0"
  /* 2891 */ "PLBZ8\0"
  /* 2897 */ "BDZ8\0"
  /* 2902 */ "PLHZ8\0"
  /* 2908 */ "BDNZ8\0"
  /* 2914 */ "PLWZ8\0"
  /* 2920 */ "TCRETURNai8\0"
  /* 2932 */ "TCRETURNdi8\0"
  /* 2944 */ "TCRETURNri8\0"
  /* 2956 */ "EVMHEGSMFAA\0"
  /* 2968 */ "EVMHOGSMFAA\0"
  /* 2980 */ "EVMWSMFAA\0"
  /* 2990 */ "EVMWSSFAA\0"
  /* 3000 */ "EVMHEGSMIAA\0"
  /* 3012 */ "EVMHOGSMIAA\0"
  /* 3024 */ "EVMWSMIAA\0"
  /* 3034 */ "EVMHEGUMIAA\0"
  /* 3046 */ "EVMHOGUMIAA\0"
  /* 3058 */ "EVMWUMIAA\0"
  /* 3068 */ "DCBA\0"
  /* 3073 */ "TAILBA\0"
  /* 3080 */ "LDtocBA\0"
  /* 3088 */ "gBCA\0"
  /* 3093 */ "BCCA\0"
  /* 3098 */ "EVMHESMFA\0"
  /* 3108 */ "EVMWHSMFA\0"
  /* 3118 */ "EVMHOSMFA\0"
  /* 3128 */ "EVMWSMFA\0"
  /* 3137 */ "EVMHESSFA\0"
  /* 3147 */ "EVMWHSSFA\0"
  /* 3157 */ "EVMHOSSFA\0"
  /* 3167 */ "EVMWSSFA\0"
  /* 3176 */ "PLHA\0"
  /* 3181 */ "ADDIStocHA\0"
  /* 3192 */ "ADDIStlsgdHA\0"
  /* 3205 */ "ADDIStlsldHA\0"
  /* 3218 */ "ADDISgotTprelHA\0"
  /* 3234 */ "ADDISdtprelHA\0"
  /* 3248 */ "SLBIA\0"
  /* 3254 */ "TLBIA\0"
  /* 3260 */ "EVMHESMIA\0"
  /* 3270 */ "EVMWHSMIA\0"
  /* 3280 */ "EVMHOSMIA\0"
  /* 3290 */ "EVMWSMIA\0"
  /* 3299 */ "EVMHEUMIA\0"
  /* 3309 */ "EVMWHUMIA\0"
  /* 3319 */ "EVMWLUMIA\0"
  /* 3329 */ "EVMHOUMIA\0"
  /* 3339 */ "EVMWUMIA\0"
  /* 3348 */ "BLA\0"
  /* 3352 */ "gBCLA\0"
  /* 3358 */ "BCCLA\0"
  /* 3364 */ "BDZLA\0"
  /* 3370 */ "BDNZLA\0"
  /* 3377 */ "G_FMA\0"
  /* 3383 */ "G_STRICT_FMA\0"
  /* 3396 */ "EVMRA\0"
  /* 3402 */ "PLWA\0"
  /* 3407 */ "MTVSRWA\0"
  /* 3415 */ "MTVRWA\0"
  /* 3422 */ "BDZA\0"
  /* 3427 */ "BDNZA\0"
  /* 3433 */ "V_SET0B\0"
  /* 3441 */ "VSRAB\0"
  /* 3447 */ "RFEBB\0"
  /* 3453 */ "VCNTMBB\0"
  /* 3461 */ "XVTLSBB\0"
  /* 3469 */ "VCLZLSBB\0"
  /* 3478 */ "VCTZLSBB\0"
  /* 3487 */ "VCMPNEB\0"
  /* 3495 */ "VMRGHB\0"
  /* 3502 */ "XXSPLTIB\0"
  /* 3511 */ "VMRGLB\0"
  /* 3518 */ "TAILB\0"
  /* 3524 */ "VCLRLB\0"
  /* 3531 */ "VRLB\0"
  /* 3536 */ "VSLB\0"
  /* 3541 */ "VPMSUMB\0"
  /* 3549 */ "VGNB\0"
  /* 3554 */ "CMPB\0"
  /* 3559 */ "CMPEQB\0"
  /* 3566 */ "CLRBHRB\0"
  /* 3574 */ "CMPRB\0"
  /* 3580 */ "VCLRRB\0"
  /* 3587 */ "VSRB\0"
  /* 3592 */ "VMULESB\0"
  /* 3600 */ "V_SETALLONESB\0"
  /* 3614 */ "VAVGSB\0"
  /* 3621 */ "VUPKHSB\0"
  /* 3629 */ "VSPLTISB\0"
  /* 3638 */ "VUPKLSB\0"
  /* 3646 */ "VMINSB\0"
  /* 3653 */ "VMULOSB\0"
  /* 3661 */ "VCMPGTSB\0"
  /* 3670 */ "EVEXTSB\0"
  /* 3678 */ "VMAXSB\0"
  /* 3685 */ "SETB\0"
  /* 3690 */ "MFTB\0"
  /* 3695 */ "VSPLTB\0"
  /* 3702 */ "VPOPCNTB\0"
  /* 3711 */ "VINSERTB\0"
  /* 3720 */ "PSTB\0"
  /* 3725 */ "ReadTB\0"
  /* 3732 */ "VABSDUB\0"
  /* 3740 */ "VMULEUB\0"
  /* 3748 */ "VAVGUB\0"
  /* 3755 */ "VMINUB\0"
  /* 3762 */ "VMULOUB\0"
  /* 3770 */ "VCMPEQUB\0"
  /* 3779 */ "EFDSUB\0"
  /* 3786 */ "G_FSUB\0"
  /* 3793 */ "G_STRICT_FSUB\0"
  /* 3807 */ "G_ATOMICRMW_FSUB\0"
  /* 3824 */ "FMSUB\0"
  /* 3830 */ "FNMSUB\0"
  /* 3837 */ "EFSSUB\0"
  /* 3844 */ "EVFSSUB\0"
  /* 3852 */ "G_SUB\0"
  /* 3858 */ "G_ATOMICRMW_SUB\0"
  /* 3874 */ "VEXTRACTUB\0"
  /* 3885 */ "VCMPGTUB\0"
  /* 3894 */ "VMAXUB\0"
  /* 3901 */ "XXBLENDVB\0"
  /* 3911 */ "VCMPNEZB\0"
  /* 3920 */ "VCLZB\0"
  /* 3926 */ "VCTZB\0"
  /* 3932 */ "SETNBC\0"
  /* 3939 */ "SETBC\0"
  /* 3945 */ "gBC\0"
  /* 3949 */ "XXMFACC\0"
  /* 3957 */ "XXMTACC\0"
  /* 3965 */ "BUILD_UACC\0"
  /* 3976 */ "RESTORE_UACC\0"
  /* 3989 */ "SPILL_UACC\0"
  /* 4000 */ "RESTORE_ACC\0"
  /* 4012 */ "SPILL_ACC\0"
  /* 4022 */ "BCC\0"
  /* 4026 */ "ADDC\0"
  /* 4031 */ "XXLANDC\0"
  /* 4039 */ "CRANDC\0"
  /* 4046 */ "EVANDC\0"
  /* 4053 */ "TABORTDC\0"
  /* 4062 */ "SUBFC\0"
  /* 4068 */ "SUBIC\0"
  /* 4074 */ "ADDIC\0"
  /* 4080 */ "RLDIC\0"
  /* 4086 */ "SUBFIC\0"
  /* 4093 */ "XSRDPIC\0"
  /* 4101 */ "XVRDPIC\0"
  /* 4109 */ "XVRSPIC\0"
  /* 4117 */ "G_INTRINSIC\0"
  /* 4129 */ "ICBLC\0"
  /* 4135 */ "BRINC\0"
  /* 4141 */ "G_FPTRUNC\0"
  /* 4151 */ "G_INTRINSIC_TRUNC\0"
  /* 4169 */ "G_TRUNC\0"
  /* 4177 */ "G_BUILD_VECTOR_TRUNC\0"
  /* 4198 */ "SLBSYNC\0"
  /* 4206 */ "TLBSYNC\0"
  /* 4214 */ "MSGSYNC\0"
  /* 4222 */ "ISYNC\0"
  /* 4228 */ "MSYNC\0"
  /* 4234 */ "G_DYN_STACKALLOC\0"
  /* 4251 */ "DYNALLOC\0"
  /* 4260 */ "BL8_NOTOC\0"
  /* 4270 */ "SELECT_CC_VSFRC\0"
  /* 4286 */ "SELECT_VSFRC\0"
  /* 4299 */ "XXLORC\0"
  /* 4306 */ "CRORC\0"
  /* 4312 */ "EVORC\0"
  /* 4318 */ "SELECT_CC_VRRC\0"
  /* 4333 */ "SELECT_VRRC\0"
  /* 4345 */ "SELECT_CC_VSSRC\0"
  /* 4361 */ "SELECT_VSSRC\0"
  /* 4374 */ "SELECT_CC_VSRC\0"
  /* 4389 */ "SELECT_VSRC\0"
  /* 4401 */ "SC\0"
  /* 4404 */ "TABORTWC\0"
  /* 4413 */ "VEXTSB2D\0"
  /* 4422 */ "VEXTSH2D\0"
  /* 4431 */ "VEXTSW2D\0"
  /* 4440 */ "TLBSX2D\0"
  /* 4448 */ "G_FMAD\0"
  /* 4455 */ "VSHASIGMAD\0"
  /* 4466 */ "G_INDEXED_SEXTLOAD\0"
  /* 4485 */ "G_SEXTLOAD\0"
  /* 4496 */ "G_INDEXED_ZEXTLOAD\0"
  /* 4515 */ "G_ZEXTLOAD\0"
  /* 4526 */ "G_INDEXED_LOAD\0"
  /* 4541 */ "G_LOAD\0"
  /* 4548 */ "VSRAD\0"
  /* 4554 */ "VGBBD\0"
  /* 4560 */ "VCNTMBD\0"
  /* 4568 */ "VPRTYBD\0"
  /* 4576 */ "EFDADD\0"
  /* 4583 */ "G_VECREDUCE_FADD\0"
  /* 4600 */ "G_FADD\0"
  /* 4607 */ "G_VECREDUCE_SEQ_FADD\0"
  /* 4628 */ "G_STRICT_FADD\0"
  /* 4642 */ "G_ATOMICRMW_FADD\0"
  /* 4659 */ "FMADD\0"
  /* 4665 */ "FNMADD\0"
  /* 4672 */ "EFSADD\0"
  /* 4679 */ "EVFSADD\0"
  /* 4687 */ "G_VECREDUCE_ADD\0"
  /* 4703 */ "G_ADD\0"
  /* 4709 */ "G_PTR_ADD\0"
  /* 4719 */ "G_ATOMICRMW_ADD\0"
  /* 4735 */ "EVLDD\0"
  /* 4741 */ "MTVSRDD\0"
  /* 4749 */ "EVSTDD\0"
  /* 4756 */ "VCFUGED\0"
  /* 4764 */ "EFSCFD\0"
  /* 4771 */ "PLFD\0"
  /* 4776 */ "PSTFD\0"
  /* 4782 */ "FNEGD\0"
  /* 4788 */ "VNEGD\0"
  /* 4794 */ "MADDHD\0"
  /* 4801 */ "MULHD\0"
  /* 4807 */ "FCFID\0"
  /* 4813 */ "HRFID\0"
  /* 4819 */ "EFDCFSID\0"
  /* 4828 */ "FCTID\0"
  /* 4834 */ "EFDCFUID\0"
  /* 4843 */ "TLBLD\0"
  /* 4849 */ "MADDLD\0"
  /* 4856 */ "FSELD\0"
  /* 4862 */ "VMULLD\0"
  /* 4869 */ "CMPLD\0"
  /* 4875 */ "MFVSRLD\0"
  /* 4883 */ "VRLD\0"
  /* 4888 */ "VSLD\0"
  /* 4893 */ "SPILLTOVSR_LD\0"
  /* 4907 */ "FRIMD\0"
  /* 4913 */ "VBPERMD\0"
  /* 4921 */ "VPMSUMD\0"
  /* 4929 */ "XXLAND\0"
  /* 4936 */ "XXLNAND\0"
  /* 4944 */ "CRNAND\0"
  /* 4951 */ "EVNAND\0"
  /* 4958 */ "G_ATOMICRMW_NAND\0"
  /* 4975 */ "CRAND\0"
  /* 4981 */ "EVAND\0"
  /* 4987 */ "G_VECREDUCE_AND\0"
  /* 5003 */ "G_AND\0"
  /* 5009 */ "G_ATOMICRMW_AND\0"
  /* 5025 */ "TEND\0"
  /* 5030 */ "LIFETIME_END\0"
  /* 5043 */ "FCPSGND\0"
  /* 5051 */ "FRIND\0"
  /* 5057 */ "G_BRCOND\0"
  /* 5066 */ "SETRND\0"
  /* 5073 */ "G_LLROUND\0"
  /* 5083 */ "G_LROUND\0"
  /* 5092 */ "G_INTRINSIC_ROUND\0"
  /* 5110 */ "FCMPOD\0"
  /* 5117 */ "VPDEPD\0"
  /* 5124 */ "FRIPD\0"
  /* 5130 */ "CMPD\0"
  /* 5135 */ "LOAD_STACK_GUARD\0"
  /* 5152 */ "XXBRD\0"
  /* 5158 */ "BUILD_QUADWORD\0"
  /* 5173 */ "RESTORE_QUADWORD\0"
  /* 5190 */ "SPILL_QUADWORD\0"
  /* 5205 */ "SPLIT_QUADWORD\0"
  /* 5220 */ "MTMSRD\0"
  /* 5227 */ "MFVSRD\0"
  /* 5234 */ "MTVSRD\0"
  /* 5241 */ "MFVRD\0"
  /* 5247 */ "MTVRD\0"
  /* 5253 */ "FABSD\0"
  /* 5259 */ "FNABSD\0"
  /* 5266 */ "VMODSD\0"
  /* 5273 */ "VMULESD\0"
  /* 5281 */ "VDIVESD\0"
  /* 5289 */ "VMULHSD\0"
  /* 5297 */ "VMINSD\0"
  /* 5304 */ "VINSD\0"
  /* 5310 */ "VMULOSD\0"
  /* 5318 */ "VCMPGTSD\0"
  /* 5327 */ "VDIVSD\0"
  /* 5334 */ "VMAXSD\0"
  /* 5341 */ "PLXSD\0"
  /* 5347 */ "PSTXSD\0"
  /* 5354 */ "VEXTRACTD\0"
  /* 5364 */ "VPOPCNTD\0"
  /* 5373 */ "VINSERTD\0"
  /* 5382 */ "PSTD\0"
  /* 5387 */ "VPEXTD\0"
  /* 5394 */ "VMSUMCUD\0"
  /* 5403 */ "VMODUD\0"
  /* 5410 */ "VMULEUD\0"
  /* 5418 */ "VDIVEUD\0"
  /* 5426 */ "VMULHUD\0"
  /* 5434 */ "VMINUD\0"
  /* 5441 */ "VMULOUD\0"
  /* 5449 */ "FCMPUD\0"
  /* 5456 */ "VCMPEQUD\0"
  /* 5465 */ "VCMPGTUD\0"
  /* 5474 */ "VDIVUD\0"
  /* 5481 */ "VMAXUD\0"
  /* 5488 */ "XXBLENDVD\0"
  /* 5498 */ "DIVD\0"
  /* 5503 */ "FRIZD\0"
  /* 5509 */ "VCLZD\0"
  /* 5515 */ "CNTLZD\0"
  /* 5522 */ "VCTZD\0"
  /* 5528 */ "CNTTZD\0"
  /* 5535 */ "PSEUDO_PROBE\0"
  /* 5548 */ "MFBHRBE\0"
  /* 5556 */ "G_SSUBE\0"
  /* 5564 */ "G_USUBE\0"
  /* 5572 */ "G_FENCE\0"
  /* 5580 */ "ARITH_FENCE\0"
  /* 5592 */ "REG_SEQUENCE\0"
  /* 5605 */ "MFFSCE\0"
  /* 5612 */ "G_SADDE\0"
  /* 5620 */ "G_UADDE\0"
  /* 5628 */ "DIVDE\0"
  /* 5634 */ "G_FMINNUM_IEEE\0"
  /* 5649 */ "G_FMAXNUM_IEEE\0"
  /* 5664 */ "SLBMFEE\0"
  /* 5672 */ "WRTEE\0"
  /* 5678 */ "SUBFE\0"
  /* 5684 */ "EVLWHE\0"
  /* 5691 */ "EVSTWHE\0"
  /* 5699 */ "SLBIE\0"
  /* 5705 */ "TLBIE\0"
  /* 5711 */ "G_JUMP_TABLE\0"
  /* 5724 */ "BUNDLE\0"
  /* 5731 */ "ADDME\0"
  /* 5737 */ "SUBFME\0"
  /* 5744 */ "G_MEMCPY_INLINE\0"
  /* 5760 */ "LOCAL_ESCAPE\0"
  /* 5773 */ "SELECT_CC_SPE\0"
  /* 5787 */ "SELECT_SPE\0"
  /* 5798 */ "TLBRE\0"
  /* 5804 */ "FRE\0"
  /* 5808 */ "G_INDEXED_STORE\0"
  /* 5824 */ "G_STORE\0"
  /* 5832 */ "G_BITREVERSE\0"
  /* 5845 */ "SLBMTE\0"
  /* 5852 */ "FRSQRTE\0"
  /* 5860 */ "DBG_VALUE\0"
  /* 5870 */ "G_GLOBAL_VALUE\0"
  /* 5885 */ "MFVRSAVE\0"
  /* 5894 */ "MTVRSAVE\0"
  /* 5903 */ "G_MEMMOVE\0"
  /* 5913 */ "TLBWE\0"
  /* 5919 */ "DIVWE\0"
  /* 5925 */ "EVSTWWE\0"
  /* 5933 */ "ADDZE\0"
  /* 5939 */ "G_FREEZE\0"
  /* 5948 */ "SUBFZE\0"
  /* 5955 */ "G_FCANONICALIZE\0"
  /* 5971 */ "DCBF\0"
  /* 5976 */ "SUBF\0"
  /* 5981 */ "G_CTLZ_ZERO_UNDEF\0"
  /* 5999 */ "G_CTTZ_ZERO_UNDEF\0"
  /* 6017 */ "G_IMPLICIT_DEF\0"
  /* 6032 */ "DBG_INSTR_REF\0"
  /* 6046 */ "EVMHESMF\0"
  /* 6055 */ "EVMWHSMF\0"
  /* 6064 */ "EVMHOSMF\0"
  /* 6073 */ "EVMWSMF\0"
  /* 6081 */ "MCRF\0"
  /* 6086 */ "MFOCRF\0"
  /* 6093 */ "MTOCRF\0"
  /* 6100 */ "MTCRF\0"
  /* 6106 */ "EFDCFSF\0"
  /* 6114 */ "EFSCFSF\0"
  /* 6122 */ "EVFSCFSF\0"
  /* 6131 */ "MTFSF\0"
  /* 6137 */ "EVMHESSF\0"
  /* 6146 */ "EVMWHSSF\0"
  /* 6155 */ "EVMHOSSF\0"
  /* 6164 */ "EVMWSSF\0"
  /* 6172 */ "EFDCTSF\0"
  /* 6180 */ "EFSCTSF\0"
  /* 6188 */ "EVFSCTSF\0"
  /* 6197 */ "EFDCFUF\0"
  /* 6205 */ "EFSCFUF\0"
  /* 6213 */ "EVFSCFUF\0"
  /* 6222 */ "EFDCTUF\0"
  /* 6230 */ "EFSCTUF\0"
  /* 6238 */ "EVFSCTUF\0"
  /* 6247 */ "SLBIEG\0"
  /* 6254 */ "EFDNEG\0"
  /* 6261 */ "G_FNEG\0"
  /* 6268 */ "EFSNEG\0"
  /* 6275 */ "EVFSNEG\0"
  /* 6283 */ "EVNEG\0"
  /* 6289 */ "EXTRACT_SUBREG\0"
  /* 6304 */ "INSERT_SUBREG\0"
  /* 6318 */ "G_SEXT_INREG\0"
  /* 6331 */ "SUBREG_TO_REG\0"
  /* 6345 */ "G_ATOMIC_CMPXCHG\0"
  /* 6362 */ "G_ATOMICRMW_XCHG\0"
  /* 6379 */ "G_FLOG\0"
  /* 6386 */ "G_VAARG\0"
  /* 6394 */ "PREALLOCATED_ARG\0"
  /* 6411 */ "V_SET0H\0"
  /* 6419 */ "VSRAH\0"
  /* 6425 */ "VCNTMBH\0"
  /* 6433 */ "EVLDH\0"
  /* 6439 */ "EVSTDH\0"
  /* 6446 */ "VCMPNEH\0"
  /* 6454 */ "VMRGHH\0"
  /* 6461 */ "VMRGLH\0"
  /* 6468 */ "VRLH\0"
  /* 6473 */ "VSLH\0"
  /* 6478 */ "G_SMULH\0"
  /* 6486 */ "G_UMULH\0"
  /* 6494 */ "VPMSUMH\0"
  /* 6502 */ "XXBRH\0"
  /* 6508 */ "VSRH\0"
  /* 6513 */ "VMULESH\0"
  /* 6521 */ "V_SETALLONESH\0"
  /* 6535 */ "VAVGSH\0"
  /* 6542 */ "VUPKHSH\0"
  /* 6550 */ "VSPLTISH\0"
  /* 6559 */ "VUPKLSH\0"
  /* 6567 */ "VMINSH\0"
  /* 6574 */ "VMULOSH\0"
  /* 6582 */ "VCMPGTSH\0"
  /* 6591 */ "EVEXTSH\0"
  /* 6599 */ "VMAXSH\0"
  /* 6606 */ "VSPLTH\0"
  /* 6613 */ "VPOPCNTH\0"
  /* 6622 */ "VINSERTH\0"
  /* 6631 */ "PSTH\0"
  /* 6636 */ "VABSDUH\0"
  /* 6644 */ "VMULEUH\0"
  /* 6652 */ "VAVGUH\0"
  /* 6659 */ "VMINUH\0"
  /* 6666 */ "VMULOUH\0"
  /* 6674 */ "VCMPEQUH\0"
  /* 6683 */ "VEXTRACTUH\0"
  /* 6694 */ "VCMPGTUH\0"
  /* 6703 */ "VMAXUH\0"
  /* 6710 */ "XXBLENDVH\0"
  /* 6720 */ "VCMPNEZH\0"
  /* 6729 */ "VCLZH\0"
  /* 6735 */ "VCTZH\0"
  /* 6741 */ "DCBI\0"
  /* 6746 */ "ICBI\0"
  /* 6751 */ "VSLDBI\0"
  /* 6758 */ "VSRDBI\0"
  /* 6765 */ "SUBI\0"
  /* 6770 */ "DCCCI\0"
  /* 6776 */ "ICCCI\0"
  /* 6782 */ "TABORTDCI\0"
  /* 6792 */ "RFCI\0"
  /* 6797 */ "RFMCI\0"
  /* 6803 */ "TABORTWCI\0"
  /* 6813 */ "SRADI\0"
  /* 6819 */ "PADDI\0"
  /* 6825 */ "RFDI\0"
  /* 6830 */ "CMPLDI\0"
  /* 6837 */ "CLRLSLDI\0"
  /* 6846 */ "EXTLDI\0"
  /* 6853 */ "XXPERMDI\0"
  /* 6862 */ "CMPDI\0"
  /* 6868 */ "CLRRDI\0"
  /* 6875 */ "INSRDI\0"
  /* 6882 */ "ROTRDI\0"
  /* 6889 */ "EXTRDI\0"
  /* 6896 */ "TDI\0"
  /* 6900 */ "WRTEEI\0"
  /* 6907 */ "RFI\0"
  /* 6911 */ "MTFSFI\0"
  /* 6918 */ "EVSPLATFI\0"
  /* 6928 */ "EVMERGEHI\0"
  /* 6938 */ "EVMERGELOHI\0"
  /* 6950 */ "DBG_PHI\0"
  /* 6958 */ "TLBLI\0"
  /* 6964 */ "MULLI\0"
  /* 6970 */ "PLI\0"
  /* 6974 */ "EXTSWSLI\0"
  /* 6983 */ "MTVSRBMI\0"
  /* 6992 */ "VRLDMI\0"
  /* 6999 */ "RLDIMI\0"
  /* 7006 */ "RLWIMI\0"
  /* 7013 */ "VRLQMI\0"
  /* 7020 */ "EVMHESMI\0"
  /* 7029 */ "EVMWHSMI\0"
  /* 7038 */ "EVMHOSMI\0"
  /* 7047 */ "EVMWSMI\0"
  /* 7055 */ "EVMHEUMI\0"
  /* 7064 */ "EVMWHUMI\0"
  /* 7073 */ "EVMWLUMI\0"
  /* 7082 */ "EVMHOUMI\0"
  /* 7091 */ "EVMWUMI\0"
  /* 7099 */ "VRLWMI\0"
  /* 7106 */ "MFFSCRNI\0"
  /* 7115 */ "MFFSCDRNI\0"
  /* 7125 */ "VSLDOI\0"
  /* 7132 */ "XSRDPI\0"
  /* 7139 */ "XVRDPI\0"
  /* 7146 */ "XSRQPI\0"
  /* 7153 */ "XVRSPI\0"
  /* 7160 */ "XORI\0"
  /* 7165 */ "EFDCFSI\0"
  /* 7173 */ "EFSCFSI\0"
  /* 7181 */ "EVFSCFSI\0"
  /* 7190 */ "G_FPTOSI\0"
  /* 7199 */ "EFDCTSI\0"
  /* 7207 */ "EFSCTSI\0"
  /* 7215 */ "EVFSCTSI\0"
  /* 7224 */ "EVSPLATI\0"
  /* 7233 */ "LDtocJTI\0"
  /* 7242 */ "EFDCFUI\0"
  /* 7250 */ "EFSCFUI\0"
  /* 7258 */ "EVFSCFUI\0"
  /* 7267 */ "G_FPTOUI\0"
  /* 7276 */ "EFDCTUI\0"
  /* 7284 */ "EFSCTUI\0"
  /* 7292 */ "EVFSCTUI\0"
  /* 7301 */ "SRAWI\0"
  /* 7307 */ "XXSLDWI\0"
  /* 7315 */ "CMPLWI\0"
  /* 7322 */ "EVRLWI\0"
  /* 7329 */ "CLRLSLWI\0"
  /* 7338 */ "INSLWI\0"
  /* 7345 */ "EVSLWI\0"
  /* 7352 */ "EXTLWI\0"
  /* 7359 */ "G_FPOWI\0"
  /* 7367 */ "CMPWI\0"
  /* 7373 */ "CLRRWI\0"
  /* 7380 */ "INSRWI\0"
  /* 7387 */ "ROTRWI\0"
  /* 7394 */ "EXTRWI\0"
  /* 7401 */ "LSWI\0"
  /* 7406 */ "STSWI\0"
  /* 7412 */ "TWI\0"
  /* 7416 */ "TCHECK\0"
  /* 7423 */ "HASHCHK\0"
  /* 7431 */ "G_PTRMASK\0"
  /* 7441 */ "XXEVAL\0"
  /* 7448 */ "VSTRIBL\0"
  /* 7456 */ "gBCL\0"
  /* 7461 */ "BCCL\0"
  /* 7466 */ "RLDCL\0"
  /* 7472 */ "RLDICL\0"
  /* 7479 */ "GC_LABEL\0"
  /* 7488 */ "DBG_LABEL\0"
  /* 7498 */ "EH_LABEL\0"
  /* 7507 */ "ANNOTATION_LABEL\0"
  /* 7524 */ "TLBIEL\0"
  /* 7531 */ "ICALL_BRANCH_FUNNEL\0"
  /* 7551 */ "GETtlsldADDRPCREL\0"
  /* 7569 */ "GETtlsADDRPCREL\0"
  /* 7585 */ "ISEL\0"
  /* 7590 */ "EVSEL\0"
  /* 7596 */ "XXSEL\0"
  /* 7602 */ "DCBFL\0"
  /* 7608 */ "VSTRIHL\0"
  /* 7616 */ "G_FSHL\0"
  /* 7623 */ "G_SHL\0"
  /* 7629 */ "G_FCEIL\0"
  /* 7637 */ "PATCHABLE_TAIL_CALL\0"
  /* 7657 */ "PATCHABLE_TYPED_EVENT_CALL\0"
  /* 7684 */ "PATCHABLE_EVENT_CALL\0"
  /* 7705 */ "FENTRY_CALL\0"
  /* 7717 */ "DSSALL\0"
  /* 7724 */ "KILL\0"
  /* 7729 */ "LXVLL\0"
  /* 7735 */ "STXVLL\0"
  /* 7742 */ "BLRL\0"
  /* 7747 */ "gBCLRL\0"
  /* 7754 */ "BCCLRL\0"
  /* 7761 */ "BDZLRL\0"
  /* 7768 */ "BDNZLRL\0"
  /* 7776 */ "BCTRL\0"
  /* 7782 */ "gBCCTRL\0"
  /* 7790 */ "BCCCTRL\0"
  /* 7798 */ "MFFSL\0"
  /* 7804 */ "LVSL\0"
  /* 7809 */ "G_ROTL\0"
  /* 7816 */ "EFDMUL\0"
  /* 7823 */ "G_VECREDUCE_FMUL\0"
  /* 7840 */ "G_FMUL\0"
  /* 7847 */ "G_VECREDUCE_SEQ_FMUL\0"
  /* 7868 */ "G_STRICT_FMUL\0"
  /* 7882 */ "EFSMUL\0"
  /* 7889 */ "EVFSMUL\0"
  /* 7897 */ "G_VECREDUCE_MUL\0"
  /* 7913 */ "G_MUL\0"
  /* 7919 */ "LXVL\0"
  /* 7924 */ "STXVL\0"
  /* 7930 */ "LBARXL\0"
  /* 7937 */ "LDARXL\0"
  /* 7944 */ "LHARXL\0"
  /* 7951 */ "LQARXL\0"
  /* 7958 */ "LWARXL\0"
  /* 7965 */ "LVXL\0"
  /* 7970 */ "STVXL\0"
  /* 7976 */ "DCBZL\0"
  /* 7982 */ "BDZL\0"
  /* 7987 */ "BDNZL\0"
  /* 7993 */ "LDtocL\0"
  /* 8000 */ "ADDItocL\0"
  /* 8009 */ "LWZtocL\0"
  /* 8017 */ "ADDItlsgdL\0"
  /* 8028 */ "ADDItlsldL\0"
  /* 8039 */ "LDgotTprelL\0"
  /* 8051 */ "ADDIdtprelL\0"
  /* 8063 */ "VEXPANDBM\0"
  /* 8073 */ "VMSUMMBM\0"
  /* 8082 */ "MTVSRBM\0"
  /* 8090 */ "VEXTRACTBM\0"
  /* 8101 */ "VSUBUBM\0"
  /* 8109 */ "VADDUBM\0"
  /* 8117 */ "VMSUMUBM\0"
  /* 8126 */ "XXGENPCVBM\0"
  /* 8137 */ "VEXPANDDM\0"
  /* 8147 */ "MTVSRDM\0"
  /* 8155 */ "VEXTRACTDM\0"
  /* 8166 */ "VSUBUDM\0"
  /* 8174 */ "VADDUDM\0"
  /* 8182 */ "VMSUMUDM\0"
  /* 8191 */ "XXGENPCVDM\0"
  /* 8202 */ "VCLZDM\0"
  /* 8209 */ "CNTLZDM\0"
  /* 8217 */ "VCTZDM\0"
  /* 8224 */ "CNTTZDM\0"
  /* 8232 */ "G_FREM\0"
  /* 8239 */ "G_STRICT_FREM\0"
  /* 8253 */ "G_SREM\0"
  /* 8260 */ "G_UREM\0"
  /* 8267 */ "G_SDIVREM\0"
  /* 8277 */ "G_UDIVREM\0"
  /* 8287 */ "VEXPANDHM\0"
  /* 8297 */ "MTVSRHM\0"
  /* 8305 */ "VMSUMSHM\0"
  /* 8314 */ "VEXTRACTHM\0"
  /* 8325 */ "VSUBUHM\0"
  /* 8333 */ "VMLADDUHM\0"
  /* 8343 */ "VADDUHM\0"
  /* 8351 */ "VMSUMUHM\0"
  /* 8360 */ "XXGENPCVHM\0"
  /* 8371 */ "TRECLAIM\0"
  /* 8380 */ "VRFIM\0"
  /* 8386 */ "XSRDPIM\0"
  /* 8394 */ "XVRDPIM\0"
  /* 8402 */ "XVRSPIM\0"
  /* 8410 */ "SETFLM\0"
  /* 8417 */ "VRLDNM\0"
  /* 8424 */ "RLWINM\0"
  /* 8431 */ "VRLQNM\0"
  /* 8438 */ "VRLWNM\0"
  /* 8445 */ "VEXPANDQM\0"
  /* 8455 */ "MTVSRQM\0"
  /* 8463 */ "VEXTRACTQM\0"
  /* 8474 */ "VSUBUQM\0"
  /* 8482 */ "VADDUQM\0"
  /* 8490 */ "VSUBEUQM\0"
  /* 8499 */ "VADDEUQM\0"
  /* 8508 */ "VPERM\0"
  /* 8514 */ "XXPERM\0"
  /* 8521 */ "BLA8_RM\0"
  /* 8529 */ "BL8_RM\0"
  /* 8536 */ "BCTRL8_RM\0"
  /* 8546 */ "BLA_RM\0"
  /* 8553 */ "BL8_NOTOC_RM\0"
  /* 8566 */ "BL_RM\0"
  /* 8572 */ "BCTRL_RM\0"
  /* 8581 */ "BLA8_NOP_RM\0"
  /* 8593 */ "BL8_NOP_RM\0"
  /* 8604 */ "BL_NOP_RM\0"
  /* 8614 */ "BCTRL8_LDinto_toc_RM\0"
  /* 8635 */ "BCTRL_LWZinto_toc_RM\0"
  /* 8656 */ "INLINEASM\0"
  /* 8666 */ "VPKUDUM\0"
  /* 8674 */ "VPKUHUM\0"
  /* 8682 */ "G_FMINIMUM\0"
  /* 8693 */ "G_FMAXIMUM\0"
  /* 8704 */ "G_FMINNUM\0"
  /* 8714 */ "G_FMAXNUM\0"
  /* 8724 */ "VPKUWUM\0"
  /* 8732 */ "VEXPANDWM\0"
  /* 8742 */ "MTVSRWM\0"
  /* 8750 */ "VEXTRACTWM\0"
  /* 8761 */ "VSUBUWM\0"
  /* 8769 */ "VADDUWM\0"
  /* 8777 */ "VMULUWM\0"
  /* 8785 */ "XXGENPCVWM\0"
  /* 8796 */ "EVMHEGSMFAN\0"
  /* 8808 */ "EVMHOGSMFAN\0"
  /* 8820 */ "EVMWSMFAN\0"
  /* 8830 */ "EVMWSSFAN\0"
  /* 8840 */ "EVMHEGSMIAN\0"
  /* 8852 */ "EVMHOGSMIAN\0"
  /* 8864 */ "EVMWSMIAN\0"
  /* 8874 */ "EVMHEGUMIAN\0"
  /* 8886 */ "EVMHOGUMIAN\0"
  /* 8898 */ "EVMWUMIAN\0"
  /* 8908 */ "G_INTRINSIC_ROUNDEVEN\0"
  /* 8930 */ "G_FCOPYSIGN\0"
  /* 8942 */ "VRFIN\0"
  /* 8948 */ "TBEGIN\0"
  /* 8955 */ "G_VECREDUCE_FMIN\0"
  /* 8972 */ "G_VECREDUCE_SMIN\0"
  /* 8989 */ "G_SMIN\0"
  /* 8996 */ "G_VECREDUCE_UMIN\0"
  /* 9013 */ "G_UMIN\0"
  /* 9020 */ "G_ATOMICRMW_UMIN\0"
  /* 9037 */ "G_ATOMICRMW_MIN\0"
  /* 9053 */ "MFSRIN\0"
  /* 9060 */ "MTSRIN\0"
  /* 9067 */ "G_FSIN\0"
  /* 9074 */ "PMXVBF16GER2NN\0"
  /* 9089 */ "PMXVF16GER2NN\0"
  /* 9103 */ "PMXVF32GERNN\0"
  /* 9116 */ "PMXVF64GERNN\0"
  /* 9129 */ "CFI_INSTRUCTION\0"
  /* 9145 */ "PMXVBF16GER2PN\0"
  /* 9160 */ "PMXVF16GER2PN\0"
  /* 9174 */ "XSCVSPDPN\0"
  /* 9184 */ "PMXVF32GERPN\0"
  /* 9197 */ "PMXVF64GERPN\0"
  /* 9210 */ "XVCVBF16SPN\0"
  /* 9222 */ "XSCVDPSPN\0"
  /* 9232 */ "DARN\0"
  /* 9237 */ "MFFSCRN\0"
  /* 9245 */ "MFFSCDRN\0"
  /* 9254 */ "ATTN\0"
  /* 9259 */ "ADJCALLSTACKDOWN\0"
  /* 9276 */ "ADD4O\0"
  /* 9282 */ "ADDC8O\0"
  /* 9289 */ "SUBFC8O\0"
  /* 9297 */ "ADD8O\0"
  /* 9303 */ "ADDE8O\0"
  /* 9310 */ "SUBFE8O\0"
  /* 9318 */ "ADDME8O\0"
  /* 9326 */ "SUBFME8O\0"
  /* 9335 */ "ADDZE8O\0"
  /* 9343 */ "SUBFZE8O\0"
  /* 9352 */ "SUBF8O\0"
  /* 9359 */ "NEG8O\0"
  /* 9365 */ "G_SSUBO\0"
  /* 9373 */ "G_USUBO\0"
  /* 9381 */ "ADDCO\0"
  /* 9387 */ "SUBFCO\0"
  /* 9394 */ "G_SADDO\0"
  /* 9402 */ "G_UADDO\0"
  /* 9410 */ "MULLDO\0"
  /* 9417 */ "LQX_PSEUDO\0"
  /* 9428 */ "STQX_PSEUDO\0"
  /* 9440 */ "DIVDO\0"
  /* 9446 */ "ADDEO\0"
  /* 9452 */ "DIVDEO\0"
  /* 9459 */ "SUBFEO\0"
  /* 9466 */ "ADDMEO\0"
  /* 9473 */ "SUBFMEO\0"
  /* 9481 */ "DIVWEO\0"
  /* 9488 */ "ADDZEO\0"
  /* 9495 */ "SUBFZEO\0"
  /* 9503 */ "SUBFO\0"
  /* 9509 */ "NEGO\0"
  /* 9514 */ "EVSTWHO\0"
  /* 9522 */ "PseudoEIEIO\0"
  /* 9534 */ "EnforceIEIO\0"
  /* 9546 */ "EVMERGELO\0"
  /* 9556 */ "EVMERGEHILO\0"
  /* 9568 */ "VSLO\0"
  /* 9573 */ "G_SMULO\0"
  /* 9581 */ "G_UMULO\0"
  /* 9589 */ "XSCVQPDPO\0"
  /* 9599 */ "XSNMSUBQPO\0"
  /* 9610 */ "XSMSUBQPO\0"
  /* 9620 */ "XSSUBQPO\0"
  /* 9629 */ "XSNMADDQPO\0"
  /* 9640 */ "XSMADDQPO\0"
  /* 9650 */ "XSADDQPO\0"
  /* 9659 */ "XSMULQPO\0"
  /* 9668 */ "XSSQRTQPO\0"
  /* 9678 */ "XSDIVQPO\0"
  /* 9687 */ "G_BZERO\0"
  /* 9695 */ "VSRO\0"
  /* 9700 */ "DIVDUO\0"
  /* 9707 */ "DIVDEUO\0"
  /* 9715 */ "DIVWEUO\0"
  /* 9723 */ "DIVWUO\0"
  /* 9730 */ "MULLWO\0"
  /* 9737 */ "DIVWO\0"
  /* 9743 */ "EVSTWWO\0"
  /* 9751 */ "STACKMAP\0"
  /* 9760 */ "NAP\0"
  /* 9764 */ "TRAP\0"
  /* 9769 */ "G_BSWAP\0"
  /* 9777 */ "XSNMSUBADP\0"
  /* 9788 */ "XVNMSUBADP\0"
  /* 9799 */ "XSMSUBADP\0"
  /* 9809 */ "XVMSUBADP\0"
  /* 9819 */ "XSNMADDADP\0"
  /* 9830 */ "XVNMADDADP\0"
  /* 9841 */ "XSMADDADP\0"
  /* 9851 */ "XVMADDADP\0"
  /* 9861 */ "XSSUBDP\0"
  /* 9869 */ "XVSUBDP\0"
  /* 9877 */ "XSTSTDCDP\0"
  /* 9887 */ "XVTSTDCDP\0"
  /* 9897 */ "XSMINCDP\0"
  /* 9906 */ "XSMAXCDP\0"
  /* 9915 */ "XSADDDP\0"
  /* 9923 */ "XVADDDP\0"
  /* 9931 */ "XSCVSXDDP\0"
  /* 9941 */ "XVCVSXDDP\0"
  /* 9951 */ "XSCVUXDDP\0"
  /* 9961 */ "XVCVUXDDP\0"
  /* 9971 */ "XSCMPGEDP\0"
  /* 9981 */ "XVCMPGEDP\0"
  /* 9991 */ "XSREDP\0"
  /* 9998 */ "XVREDP\0"
  /* 10005 */ "XSRSQRTEDP\0"
  /* 10016 */ "XVRSQRTEDP\0"
  /* 10027 */ "XSNEGDP\0"
  /* 10035 */ "XVNEGDP\0"
  /* 10043 */ "XSXSIGDP\0"
  /* 10052 */ "XVXSIGDP\0"
  /* 10061 */ "XXSPLTIDP\0"
  /* 10071 */ "XSMINJDP\0"
  /* 10080 */ "XSMAXJDP\0"
  /* 10089 */ "XSMULDP\0"
  /* 10097 */ "XVMULDP\0"
  /* 10105 */ "XSNMSUBMDP\0"
  /* 10116 */ "XVNMSUBMDP\0"
  /* 10127 */ "XSMSUBMDP\0"
  /* 10137 */ "XVMSUBMDP\0"
  /* 10147 */ "XSNMADDMDP\0"
  /* 10158 */ "XVNMADDMDP\0"
  /* 10169 */ "XSMADDMDP\0"
  /* 10179 */ "XVMADDMDP\0"
  /* 10189 */ "XSCPSGNDP\0"
  /* 10199 */ "XVCPSGNDP\0"
  /* 10209 */ "XSMINDP\0"
  /* 10217 */ "XVMINDP\0"
  /* 10225 */ "XSCMPODP\0"
  /* 10234 */ "XSCVHPDP\0"
  /* 10243 */ "XSCVQPDP\0"
  /* 10252 */ "XSCVSPDP\0"
  /* 10261 */ "XVCVSPDP\0"
  /* 10270 */ "XSIEXPDP\0"
  /* 10279 */ "XVIEXPDP\0"
  /* 10288 */ "XSCMPEXPDP\0"
  /* 10299 */ "XSXEXPDP\0"
  /* 10308 */ "XVXEXPDP\0"
  /* 10317 */ "XSCMPEQDP\0"
  /* 10327 */ "XVCMPEQDP\0"
  /* 10337 */ "XSNABSDP\0"
  /* 10346 */ "XVNABSDP\0"
  /* 10355 */ "XSABSDP\0"
  /* 10363 */ "XVABSDP\0"
  /* 10371 */ "XSCMPGTDP\0"
  /* 10381 */ "XVCMPGTDP\0"
  /* 10391 */ "XSSQRTDP\0"
  /* 10400 */ "XSTSQRTDP\0"
  /* 10410 */ "XVTSQRTDP\0"
  /* 10420 */ "XVSQRTDP\0"
  /* 10429 */ "XSCMPUDP\0"
  /* 10438 */ "XSDIVDP\0"
  /* 10446 */ "XSTDIVDP\0"
  /* 10455 */ "XVTDIVDP\0"
  /* 10464 */ "XVDIVDP\0"
  /* 10472 */ "XVCVSXWDP\0"
  /* 10482 */ "XVCVUXWDP\0"
  /* 10492 */ "XSMAXDP\0"
  /* 10500 */ "XVMAXDP\0"
  /* 10508 */ "CTRL_DEP\0"
  /* 10517 */ "DCBFEP\0"
  /* 10524 */ "ICBIEP\0"
  /* 10531 */ "DCBZLEP\0"
  /* 10539 */ "DCBTEP\0"
  /* 10546 */ "DCBSTEP\0"
  /* 10554 */ "DCBTSTEP\0"
  /* 10563 */ "DCBZEP\0"
  /* 10570 */ "VCMPBFP\0"
  /* 10578 */ "VNMSUBFP\0"
  /* 10587 */ "VSUBFP\0"
  /* 10594 */ "VMADDFP\0"
  /* 10602 */ "VADDFP\0"
  /* 10609 */ "VLOGEFP\0"
  /* 10617 */ "VCMPGEFP\0"
  /* 10626 */ "VREFP\0"
  /* 10632 */ "VEXPTEFP\0"
  /* 10641 */ "VRSQRTEFP\0"
  /* 10651 */ "VMINFP\0"
  /* 10658 */ "G_SITOFP\0"
  /* 10667 */ "G_UITOFP\0"
  /* 10676 */ "VCMPEQFP\0"
  /* 10685 */ "VCMPGTFP\0"
  /* 10694 */ "VMAXFP\0"
  /* 10701 */ "XSCVDPHP\0"
  /* 10710 */ "XVCVSPHP\0"
  /* 10719 */ "VRFIP\0"
  /* 10725 */ "XSRDPIP\0"
  /* 10733 */ "XVRDPIP\0"
  /* 10741 */ "XVRSPIP\0"
  /* 10749 */ "HASHCHKP\0"
  /* 10758 */ "DCBFLP\0"
  /* 10765 */ "G_FCMP\0"
  /* 10772 */ "G_ICMP\0"
  /* 10779 */ "PMXVBF16GER2NP\0"
  /* 10794 */ "PMXVF16GER2NP\0"
  /* 10808 */ "PMXVF32GERNP\0"
  /* 10821 */ "PMXVF64GERNP\0"
  /* 10834 */ "BLA8_NOP\0"
  /* 10843 */ "BL8_NOP\0"
  /* 10851 */ "UNENCODED_NOP\0"
  /* 10865 */ "BL_NOP\0"
  /* 10872 */ "G_CTPOP\0"
  /* 10880 */ "STOP\0"
  /* 10885 */ "PATCHABLE_OP\0"
  /* 10898 */ "FAULTING_OP\0"
  /* 10910 */ "PMXVBF16GER2PP\0"
  /* 10925 */ "PMXVF16GER2PP\0"
  /* 10939 */ "PMXVI16GER2PP\0"
  /* 10953 */ "PMXVI8GER4PP\0"
  /* 10966 */ "PMXVI4GER8PP\0"
  /* 10979 */ "PMXVF32GERPP\0"
  /* 10992 */ "PMXVF64GERPP\0"
  /* 11005 */ "PMXVI16GER2SPP\0"
  /* 11020 */ "PMXVI8GER4SPP\0"
  /* 11034 */ "XSNMSUBQP\0"
  /* 11044 */ "XSMSUBQP\0"
  /* 11053 */ "XSSUBQP\0"
  /* 11061 */ "XSTSTDCQP\0"
  /* 11071 */ "XSNMADDQP\0"
  /* 11081 */ "XSMADDQP\0"
  /* 11090 */ "XSADDQP\0"
  /* 11098 */ "XSCVSDQP\0"
  /* 11107 */ "XSCVUDQP\0"
  /* 11116 */ "XSNEGQP\0"
  /* 11124 */ "XSXSIGQP\0"
  /* 11133 */ "XSMULQP\0"
  /* 11141 */ "XSCPSGNQP\0"
  /* 11151 */ "XSCMPOQP\0"
  /* 11160 */ "XSCVDPQP\0"
  /* 11169 */ "XSIEXPQP\0"
  /* 11178 */ "XSCMPEXPQP\0"
  /* 11189 */ "XSXEXPQP\0"
  /* 11198 */ "XSCVSQQP\0"
  /* 11207 */ "XSCVUQQP\0"
  /* 11216 */ "XSNABSQP\0"
  /* 11225 */ "XSABSQP\0"
  /* 11233 */ "XSSQRTQP\0"
  /* 11242 */ "XSCMPUQP\0"
  /* 11251 */ "XSDIVQP\0"
  /* 11259 */ "XSNMSUBASP\0"
  /* 11270 */ "XVNMSUBASP\0"
  /* 11281 */ "XSMSUBASP\0"
  /* 11291 */ "XVMSUBASP\0"
  /* 11301 */ "XSNMADDASP\0"
  /* 11312 */ "XVNMADDASP\0"
  /* 11323 */ "XSMADDASP\0"
  /* 11333 */ "XVMADDASP\0"
  /* 11343 */ "XSSUBSP\0"
  /* 11351 */ "XVSUBSP\0"
  /* 11359 */ "XSTSTDCSP\0"
  /* 11369 */ "XVTSTDCSP\0"
  /* 11379 */ "XSADDSP\0"
  /* 11387 */ "XVADDSP\0"
  /* 11395 */ "XSCVSXDSP\0"
  /* 11405 */ "XVCVSXDSP\0"
  /* 11415 */ "XSCVUXDSP\0"
  /* 11425 */ "XVCVUXDSP\0"
  /* 11435 */ "XVCMPGESP\0"
  /* 11445 */ "XSRESP\0"
  /* 11452 */ "XVRESP\0"
  /* 11459 */ "XSRSQRTESP\0"
  /* 11470 */ "XVRSQRTESP\0"
  /* 11481 */ "XVNEGSP\0"
  /* 11489 */ "XVXSIGSP\0"
  /* 11498 */ "XSMULSP\0"
  /* 11506 */ "XVMULSP\0"
  /* 11514 */ "XSNMSUBMSP\0"
  /* 11525 */ "XVNMSUBMSP\0"
  /* 11536 */ "XSMSUBMSP\0"
  /* 11546 */ "XVMSUBMSP\0"
  /* 11556 */ "XSNMADDMSP\0"
  /* 11567 */ "XVNMADDMSP\0"
  /* 11578 */ "XSMADDMSP\0"
  /* 11588 */ "XVMADDMSP\0"
  /* 11598 */ "XVCPSGNSP\0"
  /* 11608 */ "XVMINSP\0"
  /* 11616 */ "XSCVDPSP\0"
  /* 11625 */ "XVCVDPSP\0"
  /* 11634 */ "XVCVHPSP\0"
  /* 11643 */ "XVIEXPSP\0"
  /* 11652 */ "XVXEXPSP\0"
  /* 11661 */ "XVCMPEQSP\0"
  /* 11671 */ "FRSP\0"
  /* 11676 */ "XSRSP\0"
  /* 11682 */ "XVNABSSP\0"
  /* 11691 */ "XVABSSP\0"
  /* 11699 */ "PLXSSP\0"
  /* 11706 */ "PSTXSSP\0"
  /* 11714 */ "XVCMPGTSP\0"
  /* 11724 */ "XSSQRTSP\0"
  /* 11733 */ "XVTSQRTSP\0"
  /* 11743 */ "XVSQRTSP\0"
  /* 11752 */ "XSDIVSP\0"
  /* 11760 */ "XVTDIVSP\0"
  /* 11769 */ "XVDIVSP\0"
  /* 11777 */ "XVCVSXWSP\0"
  /* 11787 */ "XVCVUXWSP\0"
  /* 11797 */ "XVMAXSP\0"
  /* 11805 */ "HASHSTP\0"
  /* 11813 */ "ADJCALLSTACKUP\0"
  /* 11828 */ "PREALLOCATED_SETUP\0"
  /* 11847 */ "PLXVP\0"
  /* 11853 */ "PSTXVP\0"
  /* 11860 */ "G_FEXP\0"
  /* 11867 */ "XSRQPXP\0"
  /* 11875 */ "VEXTSD2Q\0"
  /* 11884 */ "VSRAQ\0"
  /* 11890 */ "VPRTYBQ\0"
  /* 11898 */ "EFDCMPEQ\0"
  /* 11907 */ "EFSCMPEQ\0"
  /* 11916 */ "EVFSCMPEQ\0"
  /* 11926 */ "EVCMPEQ\0"
  /* 11934 */ "EFDTSTEQ\0"
  /* 11943 */ "EFSTSTEQ\0"
  /* 11952 */ "EVFSTSTEQ\0"
  /* 11962 */ "ICBLQ\0"
  /* 11968 */ "VRLQ\0"
  /* 11973 */ "VSLQ\0"
  /* 11978 */ "VBPERMQ\0"
  /* 11986 */ "XXBRQ\0"
  /* 11992 */ "VSRQ\0"
  /* 11997 */ "VMODSQ\0"
  /* 12004 */ "VDIVESQ\0"
  /* 12012 */ "VCMPSQ\0"
  /* 12019 */ "VCMPGTSQ\0"
  /* 12028 */ "VDIVSQ\0"
  /* 12035 */ "STQ\0"
  /* 12039 */ "VMUL10UQ\0"
  /* 12048 */ "VMUL10CUQ\0"
  /* 12058 */ "VSUBCUQ\0"
  /* 12066 */ "VADDCUQ\0"
  /* 12074 */ "VMUL10ECUQ\0"
  /* 12085 */ "VSUBECUQ\0"
  /* 12094 */ "VADDECUQ\0"
  /* 12103 */ "VMODUQ\0"
  /* 12110 */ "VMUL10EUQ\0"
  /* 12120 */ "VDIVEUQ\0"
  /* 12128 */ "VCMPUQ\0"
  /* 12135 */ "VCMPEQUQ\0"
  /* 12144 */ "VCMPGTUQ\0"
  /* 12153 */ "VDIVUQ\0"
  /* 12160 */ "MBAR\0"
  /* 12165 */ "UpdateGBR\0"
  /* 12175 */ "VSTRIBR\0"
  /* 12183 */ "G_BR\0"
  /* 12188 */ "INLINEASM_BR\0"
  /* 12201 */ "SETNBCR\0"
  /* 12209 */ "SETBCR\0"
  /* 12216 */ "MFDCR\0"
  /* 12222 */ "RLDCR\0"
  /* 12228 */ "MTDCR\0"
  /* 12234 */ "MFCR\0"
  /* 12239 */ "RLDICR\0"
  /* 12246 */ "MFVSCR\0"
  /* 12253 */ "MTVSCR\0"
  /* 12260 */ "RESTORE_CR\0"
  /* 12271 */ "SPILL_CR\0"
  /* 12280 */ "ADDItlsgdLADDR\0"
  /* 12295 */ "ADDItlsldLADDR\0"
  /* 12310 */ "G_BLOCK_ADDR\0"
  /* 12323 */ "GETtlsldADDR\0"
  /* 12336 */ "GETtlsADDR\0"
  /* 12347 */ "PMXVF32GER\0"
  /* 12358 */ "PMXVF64GER\0"
  /* 12369 */ "VNCIPHER\0"
  /* 12378 */ "VCIPHER\0"
  /* 12386 */ "PATCHABLE_FUNCTION_ENTER\0"
  /* 12411 */ "G_READCYCLECOUNTER\0"
  /* 12430 */ "G_READ_REGISTER\0"
  /* 12446 */ "G_WRITE_REGISTER\0"
  /* 12463 */ "VSTRIHR\0"
  /* 12471 */ "G_ASHR\0"
  /* 12478 */ "G_FSHR\0"
  /* 12485 */ "G_LSHR\0"
  /* 12492 */ "KILL_PAIR\0"
  /* 12502 */ "BLR\0"
  /* 12506 */ "gBCLR\0"
  /* 12512 */ "BCCLR\0"
  /* 12518 */ "MFLR\0"
  /* 12523 */ "MTLR\0"
  /* 12528 */ "BDZLR\0"
  /* 12534 */ "BDNZLR\0"
  /* 12541 */ "MovePCtoLR\0"
  /* 12552 */ "MoveGOTtoLR\0"
  /* 12564 */ "FMR\0"
  /* 12568 */ "MFPMR\0"
  /* 12574 */ "MTPMR\0"
  /* 12580 */ "VPERMR\0"
  /* 12587 */ "XXPERMR\0"
  /* 12595 */ "XXLOR\0"
  /* 12601 */ "XXLNOR\0"
  /* 12608 */ "CRNOR\0"
  /* 12614 */ "EVNOR\0"
  /* 12620 */ "G_FFLOOR\0"
  /* 12629 */ "CROR\0"
  /* 12634 */ "G_BUILD_VECTOR\0"
  /* 12649 */ "G_SHUFFLE_VECTOR\0"
  /* 12666 */ "EVOR\0"
  /* 12671 */ "XXLXOR\0"
  /* 12678 */ "VPERMXOR\0"
  /* 12687 */ "CRXOR\0"
  /* 12693 */ "EVXOR\0"
  /* 12699 */ "G_VECREDUCE_XOR\0"
  /* 12715 */ "G_XOR\0"
  /* 12721 */ "G_ATOMICRMW_XOR\0"
  /* 12737 */ "G_VECREDUCE_OR\0"
  /* 12752 */ "G_OR\0"
  /* 12757 */ "G_ATOMICRMW_OR\0"
  /* 12772 */ "MFSPR\0"
  /* 12778 */ "MTSPR\0"
  /* 12784 */ "MFSR\0"
  /* 12789 */ "MFMSR\0"
  /* 12795 */ "MTMSR\0"
  /* 12801 */ "MTSR\0"
  /* 12806 */ "LVSR\0"
  /* 12811 */ "TAILBCTR\0"
  /* 12820 */ "gBCCTR\0"
  /* 12827 */ "BCCCTR\0"
  /* 12834 */ "MFCTR\0"
  /* 12840 */ "MTCTR\0"
  /* 12846 */ "G_ROTR\0"
  /* 12853 */ "G_INTTOPTR\0"
  /* 12864 */ "PMXVI16GER2S\0"
  /* 12877 */ "EFDABS\0"
  /* 12884 */ "G_FABS\0"
  /* 12891 */ "EFDNABS\0"
  /* 12899 */ "EFSNABS\0"
  /* 12907 */ "EVFSNABS\0"
  /* 12916 */ "EFSABS\0"
  /* 12923 */ "EVFSABS\0"
  /* 12931 */ "EVABS\0"
  /* 12937 */ "G_ABS\0"
  /* 12943 */ "VSUM4SBS\0"
  /* 12952 */ "VSUBSBS\0"
  /* 12960 */ "VADDSBS\0"
  /* 12968 */ "VSUM4UBS\0"
  /* 12977 */ "VSUBUBS\0"
  /* 12985 */ "VADDUBS\0"
  /* 12993 */ "FSUBS\0"
  /* 12999 */ "FMSUBS\0"
  /* 13006 */ "FNMSUBS\0"
  /* 13014 */ "FADDS\0"
  /* 13020 */ "FMADDS\0"
  /* 13027 */ "FNMADDS\0"
  /* 13035 */ "FCFIDS\0"
  /* 13042 */ "DCBTDS\0"
  /* 13049 */ "DCBTSTDS\0"
  /* 13058 */ "XSCVDPSXDS\0"
  /* 13069 */ "XVCVDPSXDS\0"
  /* 13080 */ "XVCVSPSXDS\0"
  /* 13091 */ "XSCVDPUXDS\0"
  /* 13102 */ "XVCVDPUXDS\0"
  /* 13113 */ "XVCVSPUXDS\0"
  /* 13124 */ "V_SETALLONES\0"
  /* 13137 */ "FRES\0"
  /* 13142 */ "FRSQRTES\0"
  /* 13151 */ "G_UNMERGE_VALUES\0"
  /* 13168 */ "G_MERGE_VALUES\0"
  /* 13183 */ "EFDCFS\0"
  /* 13190 */ "MFFS\0"
  /* 13195 */ "PLFS\0"
  /* 13200 */ "MCRFS\0"
  /* 13206 */ "PSTFS\0"
  /* 13212 */ "FNEGS\0"
  /* 13218 */ "VSUM4SHS\0"
  /* 13227 */ "VSUBSHS\0"
  /* 13235 */ "VMHADDSHS\0"
  /* 13245 */ "VMHRADDSHS\0"
  /* 13256 */ "VADDSHS\0"
  /* 13264 */ "VMSUMSHS\0"
  /* 13273 */ "VSUBUHS\0"
  /* 13281 */ "VADDUHS\0"
  /* 13289 */ "VMSUMUHS\0"
  /* 13298 */ "SUBIS\0"
  /* 13304 */ "SUBPCIS\0"
  /* 13312 */ "ADDPCIS\0"
  /* 13320 */ "ADDIS\0"
  /* 13326 */ "LIS\0"
  /* 13330 */ "XORIS\0"
  /* 13336 */ "EVSRWIS\0"
  /* 13344 */ "FSELS\0"
  /* 13350 */ "ADD4TLS\0"
  /* 13358 */ "ADD8TLS\0"
  /* 13366 */ "ICBTLS\0"
  /* 13373 */ "STBXTLS\0"
  /* 13381 */ "LDXTLS\0"
  /* 13388 */ "STDXTLS\0"
  /* 13396 */ "STHXTLS\0"
  /* 13404 */ "STWXTLS\0"
  /* 13412 */ "LBZXTLS\0"
  /* 13420 */ "LHZXTLS\0"
  /* 13428 */ "LWZXTLS\0"
  /* 13436 */ "BL8_TLS\0"
  /* 13444 */ "BL8_NOTOC_TLS\0"
  /* 13458 */ "BL_TLS\0"
  /* 13465 */ "BL8_NOP_TLS\0"
  /* 13477 */ "FMULS\0"
  /* 13483 */ "FRIMS\0"
  /* 13489 */ "FCPSGNS\0"
  /* 13497 */ "FRINS\0"
  /* 13503 */ "G_FCOS\0"
  /* 13510 */ "EVLWHOS\0"
  /* 13518 */ "FCMPOS\0"
  /* 13525 */ "DCBFPS\0"
  /* 13532 */ "FRIPS\0"
  /* 13538 */ "DCBSTPS\0"
  /* 13546 */ "G_CONCAT_VECTORS\0"
  /* 13563 */ "COPY_TO_REGCLASS\0"
  /* 13580 */ "FABSS\0"
  /* 13586 */ "FNABSS\0"
  /* 13593 */ "VPKSDSS\0"
  /* 13601 */ "G_ATOMIC_CMPXCHG_WITH_SUCCESS\0"
  /* 13631 */ "VPKSHSS\0"
  /* 13639 */ "VPKSWSS\0"
  /* 13647 */ "G_INTRINSIC_W_SIDE_EFFECTS\0"
  /* 13674 */ "EVCMPGTS\0"
  /* 13683 */ "EVCMPLTS\0"
  /* 13692 */ "FSQRTS\0"
  /* 13699 */ "FCFIDUS\0"
  /* 13707 */ "VPKSDUS\0"
  /* 13715 */ "VPKUDUS\0"
  /* 13723 */ "VPKSHUS\0"
  /* 13731 */ "VPKUHUS\0"
  /* 13739 */ "FCMPUS\0"
  /* 13746 */ "VPKSWUS\0"
  /* 13754 */ "VPKUWUS\0"
  /* 13762 */ "FDIVS\0"
  /* 13768 */ "EVSRWS\0"
  /* 13775 */ "MTVSRWS\0"
  /* 13783 */ "VSUM2SWS\0"
  /* 13792 */ "VSUBSWS\0"
  /* 13800 */ "VADDSWS\0"
  /* 13808 */ "VSUMSWS\0"
  /* 13816 */ "VSUBUWS\0"
  /* 13824 */ "VADDUWS\0"
  /* 13832 */ "EVDIVWS\0"
  /* 13840 */ "XSCVDPSXWS\0"
  /* 13851 */ "XVCVDPSXWS\0"
  /* 13862 */ "XVCVSPSXWS\0"
  /* 13873 */ "XSCVDPUXWS\0"
  /* 13884 */ "XVCVDPUXWS\0"
  /* 13895 */ "XVCVSPUXWS\0"
  /* 13906 */ "VCTSXS\0"
  /* 13913 */ "VCTUXS\0"
  /* 13920 */ "FRIZS\0"
  /* 13926 */ "LDAT\0"
  /* 13931 */ "STDAT\0"
  /* 13937 */ "EVLHHESPLAT\0"
  /* 13949 */ "EVLWHSPLAT\0"
  /* 13960 */ "EVLHHOSSPLAT\0"
  /* 13973 */ "EVLHHOUSPLAT\0"
  /* 13986 */ "EVLWWSPLAT\0"
  /* 13997 */ "G_SSUBSAT\0"
  /* 14007 */ "G_USUBSAT\0"
  /* 14017 */ "G_SADDSAT\0"
  /* 14027 */ "G_UADDSAT\0"
  /* 14037 */ "G_SSHLSAT\0"
  /* 14047 */ "G_USHLSAT\0"
  /* 14057 */ "G_SMULFIXSAT\0"
  /* 14070 */ "G_UMULFIXSAT\0"
  /* 14083 */ "G_SDIVFIXSAT\0"
  /* 14096 */ "G_UDIVFIXSAT\0"
  /* 14109 */ "LWAT\0"
  /* 14114 */ "STWAT\0"
  /* 14120 */ "DCBT\0"
  /* 14125 */ "ICBT\0"
  /* 14130 */ "G_EXTRACT\0"
  /* 14140 */ "G_SELECT\0"
  /* 14149 */ "G_BRINDIRECT\0"
  /* 14162 */ "DCBTCT\0"
  /* 14169 */ "DCBTSTCT\0"
  /* 14178 */ "PATCHABLE_RET\0"
  /* 14192 */ "TCHECK_RET\0"
  /* 14203 */ "TBEGIN_RET\0"
  /* 14214 */ "CR6SET\0"
  /* 14221 */ "DYNAREAOFFSET\0"
  /* 14235 */ "G_MEMSET\0"
  /* 14244 */ "CR6UNSET\0"
  /* 14253 */ "CRUNSET\0"
  /* 14261 */ "CRSET\0"
  /* 14267 */ "EFDCMPGT\0"
  /* 14276 */ "EFSCMPGT\0"
  /* 14285 */ "EVFSCMPGT\0"
  /* 14295 */ "EFDTSTGT\0"
  /* 14304 */ "EFSTSTGT\0"
  /* 14313 */ "EVFSTSTGT\0"
  /* 14323 */ "WAIT\0"
  /* 14328 */ "RESTORE_CRBIT\0"
  /* 14342 */ "SPILL_CRBIT\0"
  /* 14354 */ "ANDI_rec_1_EQ_BIT\0"
  /* 14372 */ "ANDI_rec_1_GT_BIT\0"
  /* 14390 */ "PATCHABLE_FUNCTION_EXIT\0"
  /* 14414 */ "G_BRJT\0"
  /* 14421 */ "G_EXTRACT_VECTOR_ELT\0"
  /* 14442 */ "G_INSERT_VECTOR_ELT\0"
  /* 14462 */ "EFDCMPLT\0"
  /* 14471 */ "EFSCMPLT\0"
  /* 14480 */ "EVFSCMPLT\0"
  /* 14490 */ "EFDTSTLT\0"
  /* 14499 */ "EFSTSTLT\0"
  /* 14508 */ "EVFSTSTLT\0"
  /* 14518 */ "G_FCONSTANT\0"
  /* 14530 */ "G_CONSTANT\0"
  /* 14541 */ "STATEPOINT\0"
  /* 14552 */ "PATCHPOINT\0"
  /* 14563 */ "G_PTRTOINT\0"
  /* 14574 */ "G_FRINT\0"
  /* 14582 */ "G_INTRINSIC_LRINT\0"
  /* 14600 */ "G_FNEARBYINT\0"
  /* 14613 */ "PPC32GOT\0"
  /* 14622 */ "PPC32PICGOT\0"
  /* 14634 */ "LDtocCPT\0"
  /* 14643 */ "TRECHKPT\0"
  /* 14652 */ "G_VASTART\0"
  /* 14662 */ "LIFETIME_START\0"
  /* 14677 */ "G_INSERT\0"
  /* 14686 */ "TABORT\0"
  /* 14693 */ "CP_ABORT\0"
  /* 14702 */ "G_FSQRT\0"
  /* 14710 */ "G_STRICT_FSQRT\0"
  /* 14725 */ "FTSQRT\0"
  /* 14732 */ "G_BITCAST\0"
  /* 14742 */ "G_ADDRSPACE_CAST\0"
  /* 14759 */ "VNCIPHERLAST\0"
  /* 14772 */ "VCIPHERLAST\0"
  /* 14784 */ "DCBST\0"
  /* 14790 */ "DST\0"
  /* 14794 */ "HASHST\0"
  /* 14801 */ "DBG_VALUE_LIST\0"
  /* 14816 */ "DCBTST\0"
  /* 14823 */ "DSTST\0"
  /* 14829 */ "SPILLTOVSR_ST\0"
  /* 14843 */ "DCBTT\0"
  /* 14849 */ "DSTT\0"
  /* 14854 */ "DCBTSTT\0"
  /* 14862 */ "DSTSTT\0"
  /* 14869 */ "G_FPEXT\0"
  /* 14877 */ "G_SEXT\0"
  /* 14884 */ "G_ASSERT_SEXT\0"
  /* 14898 */ "G_ANYEXT\0"
  /* 14907 */ "G_ZEXT\0"
  /* 14914 */ "G_ASSERT_ZEXT\0"
  /* 14928 */ "LHAU\0"
  /* 14933 */ "STBU\0"
  /* 14938 */ "LFDU\0"
  /* 14943 */ "STFDU\0"
  /* 14949 */ "MADDHDU\0"
  /* 14957 */ "MULHDU\0"
  /* 14964 */ "FCFIDU\0"
  /* 14971 */ "FCTIDU\0"
  /* 14978 */ "LDU\0"
  /* 14982 */ "STDU\0"
  /* 14987 */ "DIVDU\0"
  /* 14993 */ "DIVDEU\0"
  /* 15000 */ "DIVWEU\0"
  /* 15007 */ "STHU\0"
  /* 15012 */ "EVSRWIU\0"
  /* 15020 */ "EVLWHOU\0"
  /* 15028 */ "LFSU\0"
  /* 15033 */ "STFSU\0"
  /* 15039 */ "EVCMPGTU\0"
  /* 15048 */ "EVCMPLTU\0"
  /* 15057 */ "MULHWU\0"
  /* 15064 */ "FCTIWU\0"
  /* 15071 */ "EVSRWU\0"
  /* 15078 */ "STWU\0"
  /* 15083 */ "EVDIVWU\0"
  /* 15091 */ "LBZU\0"
  /* 15096 */ "LHZU\0"
  /* 15101 */ "LWZU\0"
  /* 15106 */ "SLBMFEV\0"
  /* 15114 */ "EFDDIV\0"
  /* 15121 */ "G_FDIV\0"
  /* 15128 */ "G_STRICT_FDIV\0"
  /* 15142 */ "EFSDIV\0"
  /* 15149 */ "EVFSDIV\0"
  /* 15157 */ "G_SDIV\0"
  /* 15164 */ "FTDIV\0"
  /* 15170 */ "G_UDIV\0"
  /* 15177 */ "VSLV\0"
  /* 15182 */ "XXLEQV\0"
  /* 15189 */ "CREQV\0"
  /* 15195 */ "EVEQV\0"
  /* 15201 */ "VSRV\0"
  /* 15206 */ "PLXV\0"
  /* 15211 */ "PSTXV\0"
  /* 15217 */ "VEXTSB2W\0"
  /* 15226 */ "VEXTSH2W\0"
  /* 15235 */ "EVMHESMFAAW\0"
  /* 15247 */ "EVMHOSMFAAW\0"
  /* 15259 */ "EVMHESSFAAW\0"
  /* 15271 */ "EVMHOSSFAAW\0"
  /* 15283 */ "EVADDSMIAAW\0"
  /* 15295 */ "EVMHESMIAAW\0"
  /* 15307 */ "EVSUBFSMIAAW\0"
  /* 15320 */ "EVMWLSMIAAW\0"
  /* 15332 */ "EVMHOSMIAAW\0"
  /* 15344 */ "EVADDUMIAAW\0"
  /* 15356 */ "EVMHEUMIAAW\0"
  /* 15368 */ "EVSUBFUMIAAW\0"
  /* 15381 */ "EVMWLUMIAAW\0"
  /* 15393 */ "EVMHOUMIAAW\0"
  /* 15405 */ "EVADDSSIAAW\0"
  /* 15417 */ "EVMHESSIAAW\0"
  /* 15429 */ "EVSUBFSSIAAW\0"
  /* 15442 */ "EVMWLSSIAAW\0"
  /* 15454 */ "EVMHOSSIAAW\0"
  /* 15466 */ "EVADDUSIAAW\0"
  /* 15478 */ "EVMHEUSIAAW\0"
  /* 15490 */ "EVSUBFUSIAAW\0"
  /* 15503 */ "EVMWLUSIAAW\0"
  /* 15515 */ "EVMHOUSIAAW\0"
  /* 15527 */ "VSHASIGMAW\0"
  /* 15538 */ "VSRAW\0"
  /* 15544 */ "VCNTMBW\0"
  /* 15552 */ "VPRTYBW\0"
  /* 15560 */ "EVADDW\0"
  /* 15567 */ "EVLDW\0"
  /* 15573 */ "EVRNDW\0"
  /* 15580 */ "EVSTDW\0"
  /* 15587 */ "VMRGEW\0"
  /* 15594 */ "VCMPNEW\0"
  /* 15602 */ "EVSUBFW\0"
  /* 15610 */ "EVSUBIFW\0"
  /* 15619 */ "VNEGW\0"
  /* 15625 */ "VMRGHW\0"
  /* 15632 */ "XXMRGHW\0"
  /* 15640 */ "MULHW\0"
  /* 15646 */ "EVADDIW\0"
  /* 15654 */ "FCTIW\0"
  /* 15660 */ "XXSPLTIW\0"
  /* 15669 */ "VMRGLW\0"
  /* 15676 */ "XXMRGLW\0"
  /* 15684 */ "MULLW\0"
  /* 15690 */ "CMPLW\0"
  /* 15696 */ "EVRLW\0"
  /* 15702 */ "EVSLW\0"
  /* 15708 */ "LMW\0"
  /* 15712 */ "STMW\0"
  /* 15717 */ "VPMSUMW\0"
  /* 15725 */ "EVMHESMFANW\0"
  /* 15737 */ "EVMHOSMFANW\0"
  /* 15749 */ "EVMHESSFANW\0"
  /* 15761 */ "EVMHOSSFANW\0"
  /* 15773 */ "EVMHESMIANW\0"
  /* 15785 */ "EVMWLSMIANW\0"
  /* 15797 */ "EVMHOSMIANW\0"
  /* 15809 */ "EVMHEUMIANW\0"
  /* 15821 */ "EVMWLUMIANW\0"
  /* 15833 */ "EVMHOUMIANW\0"
  /* 15845 */ "EVMHESSIANW\0"
  /* 15857 */ "EVMWLSSIANW\0"
  /* 15869 */ "EVMHOSSIANW\0"
  /* 15881 */ "EVMHEUSIANW\0"
  /* 15893 */ "EVMWLUSIANW\0"
  /* 15905 */ "EVMHOUSIANW\0"
  /* 15917 */ "VMRGOW\0"
  /* 15924 */ "G_FPOW\0"
  /* 15931 */ "CMPW\0"
  /* 15936 */ "XXBRW\0"
  /* 15942 */ "VSRW\0"
  /* 15947 */ "VMODSW\0"
  /* 15954 */ "VMULESW\0"
  /* 15962 */ "VDIVESW\0"
  /* 15970 */ "VAVGSW\0"
  /* 15977 */ "VUPKHSW\0"
  /* 15985 */ "VMULHSW\0"
  /* 15993 */ "VSPLTISW\0"
  /* 16002 */ "VUPKLSW\0"
  /* 16010 */ "EVCNTLSW\0"
  /* 16019 */ "VMINSW\0"
  /* 16026 */ "VINSW\0"
  /* 16032 */ "VMULOSW\0"
  /* 16040 */ "VCMPGTSW\0"
  /* 16049 */ "EXTSW\0"
  /* 16055 */ "VDIVSW\0"
  /* 16062 */ "VMAXSW\0"
  /* 16069 */ "VSPLTW\0"
  /* 16076 */ "XXSPLTW\0"
  /* 16084 */ "VPOPCNTW\0"
  /* 16093 */ "VINSERTW\0"
  /* 16102 */ "XXINSERTW\0"
  /* 16112 */ "SPESTW\0"
  /* 16119 */ "PSTW\0"
  /* 16124 */ "VSUBCUW\0"
  /* 16132 */ "VADDCUW\0"
  /* 16140 */ "VMODUW\0"
  /* 16147 */ "VABSDUW\0"
  /* 16155 */ "VMULEUW\0"
  /* 16163 */ "VDIVEUW\0"
  /* 16171 */ "VAVGUW\0"
  /* 16178 */ "VMULHUW\0"
  /* 16186 */ "VMINUW\0"
  /* 16193 */ "VMULOUW\0"
  /* 16201 */ "VCMPEQUW\0"
  /* 16210 */ "VEXTRACTUW\0"
  /* 16221 */ "XXEXTRACTUW\0"
  /* 16233 */ "VCMPGTUW\0"
  /* 16242 */ "VDIVUW\0"
  /* 16249 */ "VMAXUW\0"
  /* 16256 */ "XXBLENDVW\0"
  /* 16266 */ "DIVW\0"
  /* 16271 */ "VCMPNEZW\0"
  /* 16280 */ "VCLZW\0"
  /* 16286 */ "EVCNTLZW\0"
  /* 16295 */ "VCTZW\0"
  /* 16301 */ "CNTTZW\0"
  /* 16308 */ "LXVD2X\0"
  /* 16315 */ "STXVD2X\0"
  /* 16323 */ "LXVW4X\0"
  /* 16330 */ "STXVW4X\0"
  /* 16338 */ "LXVB16X\0"
  /* 16346 */ "STXVB16X\0"
  /* 16355 */ "LXVH8X\0"
  /* 16362 */ "STXVH8X\0"
  /* 16370 */ "LHAX\0"
  /* 16375 */ "G_VECREDUCE_FMAX\0"
  /* 16392 */ "G_VECREDUCE_SMAX\0"
  /* 16409 */ "G_SMAX\0"
  /* 16416 */ "G_VECREDUCE_UMAX\0"
  /* 16433 */ "G_UMAX\0"
  /* 16440 */ "G_ATOMICRMW_UMAX\0"
  /* 16457 */ "G_ATOMICRMW_MAX\0"
  /* 16473 */ "TLBIVAX\0"
  /* 16481 */ "LFIWAX\0"
  /* 16488 */ "LIWAX\0"
  /* 16494 */ "LXSIWAX\0"
  /* 16502 */ "LWAX\0"
  /* 16507 */ "LVEBX\0"
  /* 16513 */ "STVEBX\0"
  /* 16520 */ "STXSIBX\0"
  /* 16528 */ "LXVRBX\0"
  /* 16535 */ "STXVRBX\0"
  /* 16543 */ "STBX\0"
  /* 16548 */ "STBCX\0"
  /* 16554 */ "STDCX\0"
  /* 16560 */ "STHCX\0"
  /* 16566 */ "STQCX\0"
  /* 16572 */ "STWCX\0"
  /* 16578 */ "XXSPLTI32DX\0"
  /* 16590 */ "EVLDDX\0"
  /* 16597 */ "EVSTDDX\0"
  /* 16605 */ "LFDX\0"
  /* 16610 */ "STFDX\0"
  /* 16616 */ "SPILLTOVSR_LDX\0"
  /* 16631 */ "LXVRDX\0"
  /* 16638 */ "STXVRDX\0"
  /* 16646 */ "LXSDX\0"
  /* 16652 */ "STXSDX\0"
  /* 16659 */ "STDX\0"
  /* 16664 */ "ADDEX\0"
  /* 16670 */ "G_FRAME_INDEX\0"
  /* 16684 */ "EVLWHEX\0"
  /* 16692 */ "EVSTWHEX\0"
  /* 16701 */ "EVSTWWEX\0"
  /* 16710 */ "G_SBFX\0"
  /* 16717 */ "G_UBFX\0"
  /* 16724 */ "EVLDHX\0"
  /* 16731 */ "EVSTDHX\0"
  /* 16739 */ "LVEHX\0"
  /* 16745 */ "STVEHX\0"
  /* 16752 */ "STXSIHX\0"
  /* 16760 */ "LXVRHX\0"
  /* 16767 */ "STXVRHX\0"
  /* 16775 */ "STHX\0"
  /* 16780 */ "GETtlsADDR32AIX\0"
  /* 16796 */ "GETtlsADDR64AIX\0"
  /* 16812 */ "TLSGDAIX\0"
  /* 16821 */ "STBCIX\0"
  /* 16828 */ "LDCIX\0"
  /* 16834 */ "STDCIX\0"
  /* 16841 */ "STHCIX\0"
  /* 16848 */ "STWCIX\0"
  /* 16855 */ "LBZCIX\0"
  /* 16862 */ "LHZCIX\0"
  /* 16869 */ "LWZCIX\0"
  /* 16876 */ "G_SMULFIX\0"
  /* 16886 */ "G_UMULFIX\0"
  /* 16896 */ "G_SDIVFIX\0"
  /* 16906 */ "G_UDIVFIX\0"
  /* 16916 */ "XSRQPIX\0"
  /* 16924 */ "VINSBLX\0"
  /* 16932 */ "VEXTUBLX\0"
  /* 16941 */ "VINSDLX\0"
  /* 16949 */ "VINSHLX\0"
  /* 16957 */ "VEXTUHLX\0"
  /* 16966 */ "VINSBVLX\0"
  /* 16975 */ "VEXTDUBVLX\0"
  /* 16986 */ "VEXTDDVLX\0"
  /* 16996 */ "VINSHVLX\0"
  /* 17005 */ "VEXTDUHVLX\0"
  /* 17016 */ "VINSWVLX\0"
  /* 17025 */ "VEXTDUWVLX\0"
  /* 17036 */ "VINSWLX\0"
  /* 17044 */ "VEXTUWLX\0"
  /* 17053 */ "LDMX\0"
  /* 17058 */ "XXPERMX\0"
  /* 17066 */ "VSBOX\0"
  /* 17072 */ "EVSTWHOX\0"
  /* 17081 */ "EVSTWWOX\0"
  /* 17090 */ "LBEPX\0"
  /* 17096 */ "STBEPX\0"
  /* 17103 */ "LFDEPX\0"
  /* 17110 */ "STFDEPX\0"
  /* 17118 */ "LHEPX\0"
  /* 17124 */ "STHEPX\0"
  /* 17131 */ "LWEPX\0"
  /* 17137 */ "STWEPX\0"
  /* 17144 */ "VUPKHPX\0"
  /* 17152 */ "VPKPX\0"
  /* 17158 */ "VUPKLPX\0"
  /* 17166 */ "LXSSPX\0"
  /* 17173 */ "STXSSPX\0"
  /* 17181 */ "LXVPX\0"
  /* 17187 */ "STXVPX\0"
  /* 17194 */ "LBARX\0"
  /* 17200 */ "LDARX\0"
  /* 17206 */ "LHARX\0"
  /* 17212 */ "LQARX\0"
  /* 17218 */ "LWARX\0"
  /* 17224 */ "LDBRX\0"
  /* 17230 */ "STDBRX\0"
  /* 17237 */ "LHBRX\0"
  /* 17243 */ "STHBRX\0"
  /* 17250 */ "VINSBRX\0"
  /* 17258 */ "VEXTUBRX\0"
  /* 17267 */ "LWBRX\0"
  /* 17273 */ "STWBRX\0"
  /* 17280 */ "VINSDRX\0"
  /* 17288 */ "VINSHRX\0"
  /* 17296 */ "VEXTUHRX\0"
  /* 17305 */ "VINSBVRX\0"
  /* 17314 */ "VEXTDUBVRX\0"
  /* 17325 */ "VEXTDDVRX\0"
  /* 17335 */ "VINSHVRX\0"
  /* 17344 */ "VEXTDUHVRX\0"
  /* 17355 */ "VINSWVRX\0"
  /* 17364 */ "VEXTDUWVRX\0"
  /* 17375 */ "VINSWRX\0"
  /* 17383 */ "VEXTUWRX\0"
  /* 17392 */ "MCRXRX\0"
  /* 17399 */ "TLBSX\0"
  /* 17405 */ "LXVDSX\0"
  /* 17412 */ "VCFSX\0"
  /* 17418 */ "LFSX\0"
  /* 17423 */ "STFSX\0"
  /* 17429 */ "EVLWHOSX\0"
  /* 17438 */ "LXVWSX\0"
  /* 17445 */ "EVLHHESPLATX\0"
  /* 17458 */ "EVLWHSPLATX\0"
  /* 17470 */ "EVLHHOSSPLATX\0"
  /* 17484 */ "EVLHHOUSPLATX\0"
  /* 17498 */ "EVLWWSPLATX\0"
  /* 17510 */ "SPILLTOVSR_STX\0"
  /* 17525 */ "LHAUX\0"
  /* 17531 */ "LWAUX\0"
  /* 17537 */ "STBUX\0"
  /* 17543 */ "LFDUX\0"
  /* 17549 */ "STFDUX\0"
  /* 17556 */ "LDUX\0"
  /* 17561 */ "STDUX\0"
  /* 17567 */ "VCFUX\0"
  /* 17573 */ "STHUX\0"
  /* 17579 */ "EVLWHOUX\0"
  /* 17588 */ "LFSUX\0"
  /* 17594 */ "STFSUX\0"
  /* 17601 */ "STWUX\0"
  /* 17607 */ "LBZUX\0"
  /* 17613 */ "LHZUX\0"
  /* 17619 */ "LWZUX\0"
  /* 17625 */ "LVX\0"
  /* 17629 */ "STVX\0"
  /* 17634 */ "LXVX\0"
  /* 17639 */ "STXVX\0"
  /* 17645 */ "EVLDWX\0"
  /* 17652 */ "EVSTDWX\0"
  /* 17660 */ "LVEWX\0"
  /* 17666 */ "STVEWX\0"
  /* 17673 */ "STFIWX\0"
  /* 17680 */ "STXSIWX\0"
  /* 17688 */ "STIWX\0"
  /* 17694 */ "LXVRWX\0"
  /* 17701 */ "STXVRWX\0"
  /* 17709 */ "SPESTWX\0"
  /* 17717 */ "LXSIBZX\0"
  /* 17725 */ "LBZX\0"
  /* 17730 */ "LXSIHZX\0"
  /* 17738 */ "LHZX\0"
  /* 17743 */ "LFIWZX\0"
  /* 17750 */ "LIWZX\0"
  /* 17756 */ "LXSIWZX\0"
  /* 17764 */ "SPELWZX\0"
  /* 17772 */ "G_MEMCPY\0"
  /* 17781 */ "CP_COPY\0"
  /* 17789 */ "DCBZ\0"
  /* 17794 */ "PLBZ\0"
  /* 17799 */ "XXSETACCZ\0"
  /* 17809 */ "BDZ\0"
  /* 17813 */ "EFDCTSIDZ\0"
  /* 17823 */ "FCTIDZ\0"
  /* 17830 */ "EFDCTUIDZ\0"
  /* 17840 */ "XSCVQPSDZ\0"
  /* 17850 */ "XSCVQPUDZ\0"
  /* 17860 */ "PLHZ\0"
  /* 17865 */ "VRFIZ\0"
  /* 17871 */ "XSRDPIZ\0"
  /* 17879 */ "XVRDPIZ\0"
  /* 17887 */ "XVRSPIZ\0"
  /* 17895 */ "EFDCTSIZ\0"
  /* 17904 */ "EFSCTSIZ\0"
  /* 17913 */ "EVFSCTSIZ\0"
  /* 17923 */ "EFDCTUIZ\0"
  /* 17932 */ "EFSCTUIZ\0"
  /* 17941 */ "EVFSCTUIZ\0"
  /* 17951 */ "G_CTLZ\0"
  /* 17958 */ "BDNZ\0"
  /* 17963 */ "XSCVQPSQZ\0"
  /* 17973 */ "XSCVQPUQZ\0"
  /* 17983 */ "G_CTTZ\0"
  /* 17990 */ "FCTIDUZ\0"
  /* 17998 */ "FCTIWUZ\0"
  /* 18006 */ "FCTIWZ\0"
  /* 18013 */ "SPELWZ\0"
  /* 18020 */ "PLWZ\0"
  /* 18025 */ "MFVSRWZ\0"
  /* 18033 */ "MTVSRWZ\0"
  /* 18041 */ "MFVRWZ\0"
  /* 18048 */ "MTVRWZ\0"
  /* 18055 */ "XSCVQPSWZ\0"
  /* 18065 */ "XSCVQPUWZ\0"
  /* 18075 */ "ADD8TLS_\0"
  /* 18084 */ "STBXTLS_\0"
  /* 18093 */ "LDXTLS_\0"
  /* 18101 */ "STDXTLS_\0"
  /* 18110 */ "STHXTLS_\0"
  /* 18119 */ "STWXTLS_\0"
  /* 18128 */ "LBZXTLS_\0"
  /* 18137 */ "LHZXTLS_\0"
  /* 18146 */ "LWZXTLS_\0"
  /* 18155 */ "BL8_TLS_\0"
  /* 18164 */ "MTFSFb\0"
  /* 18171 */ "MTFSFIb\0"
  /* 18179 */ "RLDICL_32_rec\0"
  /* 18193 */ "EXTSWSLI_32_64_rec\0"
  /* 18212 */ "EXTSW_32_64_rec\0"
  /* 18228 */ "ADD4_rec\0"
  /* 18237 */ "EXTSB8_rec\0"
  /* 18248 */ "ADDC8_rec\0"
  /* 18258 */ "ANDC8_rec\0"
  /* 18268 */ "SUBFC8_rec\0"
  /* 18279 */ "ORC8_rec\0"
  /* 18288 */ "ADD8_rec\0"
  /* 18297 */ "NAND8_rec\0"
  /* 18307 */ "ADDE8_rec\0"
  /* 18317 */ "SUBFE8_rec\0"
  /* 18328 */ "ADDME8_rec\0"
  /* 18339 */ "SUBFME8_rec\0"
  /* 18351 */ "CP_PASTE8_rec\0"
  /* 18365 */ "ADDZE8_rec\0"
  /* 18376 */ "SUBFZE8_rec\0"
  /* 18388 */ "SUBF8_rec\0"
  /* 18398 */ "NEG8_rec\0"
  /* 18407 */ "EXTSH8_rec\0"
  /* 18418 */ "ANDI8_rec\0"
  /* 18428 */ "RLWIMI8_rec\0"
  /* 18440 */ "RLWINM8_rec\0"
  /* 18452 */ "RLWNM8_rec\0"
  /* 18463 */ "NOR8_rec\0"
  /* 18472 */ "XOR8_rec\0"
  /* 18481 */ "ANDIS8_rec\0"
  /* 18492 */ "EQV8_rec\0"
  /* 18501 */ "SLW8_rec\0"
  /* 18510 */ "SRW8_rec\0"
  /* 18519 */ "CNTLZW8_rec\0"
  /* 18531 */ "CNTTZW8_rec\0"
  /* 18543 */ "VCMPNEB_rec\0"
  /* 18555 */ "VCMPGTSB_rec\0"
  /* 18568 */ "EXTSB_rec\0"
  /* 18578 */ "VCMPEQUB_rec\0"
  /* 18591 */ "FSUB_rec\0"
  /* 18600 */ "FMSUB_rec\0"
  /* 18610 */ "FNMSUB_rec\0"
  /* 18621 */ "VCMPGTUB_rec\0"
  /* 18634 */ "VCMPNEZB_rec\0"
  /* 18647 */ "ADDC_rec\0"
  /* 18656 */ "ANDC_rec\0"
  /* 18665 */ "SUBFC_rec\0"
  /* 18675 */ "SUBIC_rec\0"
  /* 18685 */ "ADDIC_rec\0"
  /* 18695 */ "RLDIC_rec\0"
  /* 18705 */ "BCDTRUNC_rec\0"
  /* 18718 */ "BCDUTRUNC_rec\0"
  /* 18732 */ "ORC_rec\0"
  /* 18740 */ "SRAD_rec\0"
  /* 18749 */ "FADD_rec\0"
  /* 18758 */ "FMADD_rec\0"
  /* 18768 */ "FNMADD_rec\0"
  /* 18779 */ "FNEGD_rec\0"
  /* 18789 */ "MULHD_rec\0"
  /* 18799 */ "FCFID_rec\0"
  /* 18809 */ "FCTID_rec\0"
  /* 18819 */ "FSELD_rec\0"
  /* 18829 */ "MULLD_rec\0"
  /* 18839 */ "SLD_rec\0"
  /* 18847 */ "FRIMD_rec\0"
  /* 18857 */ "NAND_rec\0"
  /* 18866 */ "FCPSGND_rec\0"
  /* 18878 */ "FRIND_rec\0"
  /* 18888 */ "FRIPD_rec\0"
  /* 18898 */ "SRD_rec\0"
  /* 18906 */ "FABSD_rec\0"
  /* 18916 */ "FNABSD_rec\0"
  /* 18927 */ "VCMPGTSD_rec\0"
  /* 18940 */ "VCMPEQUD_rec\0"
  /* 18953 */ "VCMPGTUD_rec\0"
  /* 18966 */ "DIVD_rec\0"
  /* 18975 */ "FRIZD_rec\0"
  /* 18985 */ "CNTLZD_rec\0"
  /* 18996 */ "CNTTZD_rec\0"
  /* 19007 */ "ADDE_rec\0"
  /* 19016 */ "DIVDE_rec\0"
  /* 19026 */ "SLBFEE_rec\0"
  /* 19037 */ "SUBFE_rec\0"
  /* 19047 */ "ADDME_rec\0"
  /* 19057 */ "SUBFME_rec\0"
  /* 19068 */ "FRE_rec\0"
  /* 19076 */ "FRSQRTE_rec\0"
  /* 19088 */ "CP_PASTE_rec\0"
  /* 19101 */ "DIVWE_rec\0"
  /* 19111 */ "ADDZE_rec\0"
  /* 19121 */ "SUBFZE_rec\0"
  /* 19132 */ "SUBF_rec\0"
  /* 19141 */ "MTFSF_rec\0"
  /* 19151 */ "NEG_rec\0"
  /* 19159 */ "VCMPNEH_rec\0"
  /* 19171 */ "VCMPGTSH_rec\0"
  /* 19184 */ "EXTSH_rec\0"
  /* 19194 */ "VCMPEQUH_rec\0"
  /* 19207 */ "VCMPGTUH_rec\0"
  /* 19220 */ "VCMPNEZH_rec\0"
  /* 19233 */ "SRADI_rec\0"
  /* 19243 */ "CLRLSLDI_rec\0"
  /* 19256 */ "EXTLDI_rec\0"
  /* 19267 */ "ANDI_rec\0"
  /* 19276 */ "CLRRDI_rec\0"
  /* 19287 */ "INSRDI_rec\0"
  /* 19298 */ "ROTRDI_rec\0"
  /* 19309 */ "EXTRDI_rec\0"
  /* 19320 */ "MTFSFI_rec\0"
  /* 19331 */ "EXTSWSLI_rec\0"
  /* 19344 */ "RLDIMI_rec\0"
  /* 19355 */ "RLWIMI_rec\0"
  /* 19366 */ "SRAWI_rec\0"
  /* 19376 */ "CLRLSLWI_rec\0"
  /* 19389 */ "INSLWI_rec\0"
  /* 19400 */ "EXTLWI_rec\0"
  /* 19411 */ "CLRRWI_rec\0"
  /* 19422 */ "INSRWI_rec\0"
  /* 19433 */ "ROTRWI_rec\0"
  /* 19444 */ "EXTRWI_rec\0"
  /* 19455 */ "VSTRIBL_rec\0"
  /* 19467 */ "RLDCL_rec\0"
  /* 19477 */ "RLDICL_rec\0"
  /* 19488 */ "VSTRIHL_rec\0"
  /* 19500 */ "FMUL_rec\0"
  /* 19509 */ "RLWINM_rec\0"
  /* 19520 */ "RLWNM_rec\0"
  /* 19530 */ "BCDCFN_rec\0"
  /* 19541 */ "BCDCPSGN_rec\0"
  /* 19554 */ "BCDSETSGN_rec\0"
  /* 19568 */ "BCDCTN_rec\0"
  /* 19579 */ "ADD4O_rec\0"
  /* 19589 */ "ADDC8O_rec\0"
  /* 19600 */ "SUBFC8O_rec\0"
  /* 19612 */ "ADD8O_rec\0"
  /* 19622 */ "ADDE8O_rec\0"
  /* 19633 */ "SUBFE8O_rec\0"
  /* 19645 */ "ADDME8O_rec\0"
  /* 19657 */ "SUBFME8O_rec\0"
  /* 19670 */ "ADDZE8O_rec\0"
  /* 19682 */ "SUBFZE8O_rec\0"
  /* 19695 */ "SUBF8O_rec\0"
  /* 19706 */ "NEG8O_rec\0"
  /* 19716 */ "ADDCO_rec\0"
  /* 19726 */ "SUBFCO_rec\0"
  /* 19737 */ "MULLDO_rec\0"
  /* 19748 */ "DIVDO_rec\0"
  /* 19758 */ "ADDEO_rec\0"
  /* 19768 */ "DIVDEO_rec\0"
  /* 19779 */ "SUBFEO_rec\0"
  /* 19790 */ "ADDMEO_rec\0"
  /* 19801 */ "SUBFMEO_rec\0"
  /* 19813 */ "DIVWEO_rec\0"
  /* 19824 */ "ADDZEO_rec\0"
  /* 19835 */ "SUBFZEO_rec\0"
  /* 19847 */ "SUBFO_rec\0"
  /* 19857 */ "NEGO_rec\0"
  /* 19866 */ "DIVDUO_rec\0"
  /* 19877 */ "DIVDEUO_rec\0"
  /* 19889 */ "DIVWEUO_rec\0"
  /* 19901 */ "DIVWUO_rec\0"
  /* 19912 */ "MULLWO_rec\0"
  /* 19923 */ "DIVWO_rec\0"
  /* 19933 */ "XVCMPGEDP_rec\0"
  /* 19947 */ "XVCMPEQDP_rec\0"
  /* 19961 */ "XVCMPGTDP_rec\0"
  /* 19975 */ "VCMPBFP_rec\0"
  /* 19987 */ "VCMPGEFP_rec\0"
  /* 20000 */ "VCMPEQFP_rec\0"
  /* 20013 */ "VCMPGTFP_rec\0"
  /* 20026 */ "XVCMPGESP_rec\0"
  /* 20040 */ "XVCMPEQSP_rec\0"
  /* 20054 */ "FRSP_rec\0"
  /* 20063 */ "XVCMPGTSP_rec\0"
  /* 20077 */ "BCDCFSQ_rec\0"
  /* 20089 */ "BCDCTSQ_rec\0"
  /* 20101 */ "VCMPGTSQ_rec\0"
  /* 20114 */ "VCMPEQUQ_rec\0"
  /* 20127 */ "VCMPGTUQ_rec\0"
  /* 20140 */ "VSTRIBR_rec\0"
  /* 20152 */ "RLDCR_rec\0"
  /* 20162 */ "RLDICR_rec\0"
  /* 20173 */ "VSTRIHR_rec\0"
  /* 20185 */ "FMR_rec\0"
  /* 20193 */ "NOR_rec\0"
  /* 20201 */ "XOR_rec\0"
  /* 20209 */ "BCDSR_rec\0"
  /* 20219 */ "FSUBS_rec\0"
  /* 20229 */ "FMSUBS_rec\0"
  /* 20240 */ "FNMSUBS_rec\0"
  /* 20252 */ "BCDS_rec\0"
  /* 20261 */ "FADDS_rec\0"
  /* 20271 */ "FMADDS_rec\0"
  /* 20282 */ "FNMADDS_rec\0"
  /* 20294 */ "FCFIDS_rec\0"
  /* 20305 */ "FRES_rec\0"
  /* 20314 */ "FRSQRTES_rec\0"
  /* 20327 */ "MFFS_rec\0"
  /* 20336 */ "FNEGS_rec\0"
  /* 20346 */ "ANDIS_rec\0"
  /* 20356 */ "FSELS_rec\0"
  /* 20366 */ "FMULS_rec\0"
  /* 20376 */ "FRIMS_rec\0"
  /* 20386 */ "FCPSGNS_rec\0"
  /* 20398 */ "FRINS_rec\0"
  /* 20408 */ "FRIPS_rec\0"
  /* 20418 */ "FABSS_rec\0"
  /* 20428 */ "FNABSS_rec\0"
  /* 20439 */ "FSQRTS_rec\0"
  /* 20450 */ "BCDUS_rec\0"
  /* 20460 */ "FCFIDUS_rec\0"
  /* 20472 */ "FDIVS_rec\0"
  /* 20482 */ "FRIZS_rec\0"
  /* 20492 */ "FSQRT_rec\0"
  /* 20502 */ "MULHDU_rec\0"
  /* 20513 */ "FCFIDU_rec\0"
  /* 20524 */ "FCTIDU_rec\0"
  /* 20535 */ "DIVDU_rec\0"
  /* 20545 */ "DIVDEU_rec\0"
  /* 20556 */ "DIVWEU_rec\0"
  /* 20567 */ "MULHWU_rec\0"
  /* 20578 */ "FCTIWU_rec\0"
  /* 20589 */ "DIVWU_rec\0"
  /* 20599 */ "FDIV_rec\0"
  /* 20608 */ "EQV_rec\0"
  /* 20616 */ "SRAW_rec\0"
  /* 20625 */ "VCMPNEW_rec\0"
  /* 20637 */ "MULHW_rec\0"
  /* 20647 */ "FCTIW_rec\0"
  /* 20657 */ "MULLW_rec\0"
  /* 20667 */ "SLW_rec\0"
  /* 20675 */ "SRW_rec\0"
  /* 20683 */ "VCMPGTSW_rec\0"
  /* 20696 */ "EXTSW_rec\0"
  /* 20706 */ "VCMPEQUW_rec\0"
  /* 20719 */ "VCMPGTUW_rec\0"
  /* 20732 */ "DIVW_rec\0"
  /* 20741 */ "VCMPNEZW_rec\0"
  /* 20754 */ "CNTLZW_rec\0"
  /* 20765 */ "CNTTZW_rec\0"
  /* 20776 */ "FCTIDZ_rec\0"
  /* 20787 */ "BCDCFZ_rec\0"
  /* 20798 */ "BCDCTZ_rec\0"
  /* 20809 */ "FCTIDUZ_rec\0"
  /* 20821 */ "FCTIWUZ_rec\0"
  /* 20833 */ "FCTIWZ_rec\0"
  /* 20844 */ "RLWIMIbm_rec\0"
  /* 20857 */ "RLWINMbm_rec\0"
  /* 20870 */ "RLWNMbm_rec\0"
  /* 20882 */ "LDtoc\0"
  /* 20888 */ "ADDItoc\0"
  /* 20896 */ "LWZtoc\0"
  /* 20903 */ "BCTRL8_LDinto_toc\0"
  /* 20921 */ "BCTRL_LWZinto_toc\0"
  /* 20939 */ "PLHA8pc\0"
  /* 20947 */ "PLWA8pc\0"
  /* 20955 */ "PSTB8pc\0"
  /* 20963 */ "PSTH8pc\0"
  /* 20971 */ "PADDI8pc\0"
  /* 20980 */ "PSTW8pc\0"
  /* 20988 */ "PLBZ8pc\0"
  /* 20996 */ "PLHZ8pc\0"
  /* 21004 */ "PLWZ8pc\0"
  /* 21012 */ "PLHApc\0"
  /* 21019 */ "PLWApc\0"
  /* 21026 */ "PSTBpc\0"
  /* 21033 */ "PLFDpc\0"
  /* 21040 */ "PSTFDpc\0"
  /* 21048 */ "PLDpc\0"
  /* 21054 */ "PLXSDpc\0"
  /* 21062 */ "PSTXSDpc\0"
  /* 21071 */ "PSTDpc\0"
  /* 21078 */ "PSTHpc\0"
  /* 21085 */ "PADDIpc\0"
  /* 21093 */ "PLXSSPpc\0"
  /* 21102 */ "PSTXSSPpc\0"
  /* 21112 */ "PLXVPpc\0"
  /* 21120 */ "PSTXVPpc\0"
  /* 21129 */ "PLFSpc\0"
  /* 21136 */ "PSTFSpc\0"
  /* 21144 */ "PLXVpc\0"
  /* 21151 */ "PSTXVpc\0"
  /* 21159 */ "PSTWpc\0"
  /* 21166 */ "PLBZpc\0"
  /* 21173 */ "PLHZpc\0"
  /* 21180 */ "PLWZpc\0"
  /* 21187 */ "XXLORf\0"
  /* 21194 */ "SETRNDi\0"
  /* 21202 */ "TCRETURNai\0"
  /* 21213 */ "TCRETURNdi\0"
  /* 21224 */ "TCRETURNri\0"
  /* 21235 */ "PADDIdtprel\0"
  /* 21247 */ "BDZLAm\0"
  /* 21254 */ "BDNZLAm\0"
  /* 21262 */ "BDZAm\0"
  /* 21268 */ "BDNZAm\0"
  /* 21275 */ "BDZLRLm\0"
  /* 21283 */ "BDNZLRLm\0"
  /* 21292 */ "BDZLm\0"
  /* 21298 */ "BDNZLm\0"
  /* 21305 */ "BDZLRm\0"
  /* 21312 */ "BDNZLRm\0"
  /* 21320 */ "BDZm\0"
  /* 21325 */ "BDNZm\0"
  /* 21331 */ "RLWIMIbm\0"
  /* 21340 */ "RLWINMbm\0"
  /* 21349 */ "RLWNMbm\0"
  /* 21357 */ "BCCTRL8n\0"
  /* 21366 */ "BCCTR8n\0"
  /* 21374 */ "BCn\0"
  /* 21378 */ "BCLn\0"
  /* 21383 */ "BCLRLn\0"
  /* 21390 */ "BCCTRLn\0"
  /* 21398 */ "BCLRn\0"
  /* 21404 */ "BCCTRn\0"
  /* 21411 */ "BDZLAp\0"
  /* 21418 */ "BDNZLAp\0"
  /* 21426 */ "BDZAp\0"
  /* 21432 */ "BDNZAp\0"
  /* 21439 */ "BDZLRLp\0"
  /* 21447 */ "BDNZLRLp\0"
  /* 21456 */ "BDZLp\0"
  /* 21462 */ "BDNZLp\0"
  /* 21469 */ "BDZLRp\0"
  /* 21476 */ "BDNZLRp\0"
  /* 21484 */ "BDZp\0"
  /* 21489 */ "BDNZp\0"
  /* 21495 */ "MTCTR8loop\0"
  /* 21506 */ "MTCTRloop\0"
  /* 21516 */ "EH_SjLj_Setup\0"
  /* 21530 */ "VSPLTBs\0"
  /* 21538 */ "VEXTSB2Ds\0"
  /* 21548 */ "VEXTSH2Ds\0"
  /* 21558 */ "VEXTSW2Ds\0"
  /* 21568 */ "VSPLTHs\0"
  /* 21576 */ "XXPERMDIs\0"
  /* 21586 */ "XXSLDWIs\0"
  /* 21595 */ "XSCVDPSXDSs\0"
  /* 21607 */ "XSCVDPUXDSs\0"
  /* 21619 */ "XSCVDPSXWSs\0"
  /* 21631 */ "XSCVDPUXWSs\0"
  /* 21643 */ "VEXTSB2Ws\0"
  /* 21653 */ "VEXTSH2Ws\0"
  /* 21663 */ "XXSPLTWs\0"
  /* 21672 */ "XXLEQVOnes\0"
  /* 21683 */ "BCLalways\0"
  /* 21693 */ "gBCAat\0"
  /* 21700 */ "gBCLAat\0"
  /* 21708 */ "gBCat\0"
  /* 21714 */ "gBCLat\0"
  /* 21721 */ "MFVRSAVEv\0"
  /* 21731 */ "MTVRSAVEv\0"
  /* 21741 */ "STXSIBXv\0"
  /* 21750 */ "STXSIHXv\0"
  /* 21759 */ "LAx\0"
  /* 21763 */ "DCBFx\0"
  /* 21769 */ "DCBTx\0"
  /* 21775 */ "DCBTSTx\0"
  /* 21783 */ "XXLXORz\0"
  /* 21791 */ "XXLXORdpz\0"
  /* 21801 */ "XXLXORspz\0"
  /* 21811 */ "FADDrtz\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

extern const unsigned PPCInstrNameIndices[] = {
    6954U, 8656U, 12188U, 9129U, 7498U, 7479U, 7507U, 7724U, 
    6289U, 6304U, 6019U, 6331U, 13563U, 5860U, 14801U, 6032U, 
    6950U, 7488U, 5592U, 17784U, 5724U, 14662U, 5030U, 5535U, 
    5580U, 9751U, 7705U, 14552U, 5135U, 11828U, 6394U, 14541U, 
    5760U, 10898U, 10885U, 12386U, 14178U, 14390U, 7637U, 7684U, 
    7657U, 7531U, 14884U, 14914U, 4703U, 3852U, 7913U, 15157U, 
    15170U, 8253U, 8260U, 8267U, 8277U, 5003U, 12752U, 12715U, 
    6017U, 6952U, 16670U, 5870U, 14130U, 13151U, 14677U, 13168U, 
    12634U, 4177U, 13546U, 14563U, 12853U, 14732U, 5939U, 4151U, 
    5092U, 14582U, 8908U, 12411U, 4541U, 4485U, 4515U, 4526U, 
    4466U, 4496U, 5824U, 5808U, 13601U, 6345U, 6362U, 4719U, 
    3858U, 5009U, 4958U, 12757U, 12721U, 16457U, 9037U, 16440U, 
    9020U, 4642U, 3807U, 5572U, 5057U, 14149U, 4117U, 13647U, 
    14898U, 4169U, 14530U, 14518U, 14652U, 6386U, 14877U, 6318U, 
    14907U, 7623U, 12485U, 12471U, 7616U, 12478U, 12846U, 7809U, 
    10772U, 10765U, 14140U, 9402U, 5620U, 9373U, 5564U, 9394U, 
    5612U, 9365U, 5556U, 9581U, 9573U, 6486U, 6478U, 14027U, 
    14017U, 14007U, 13997U, 14047U, 14037U, 16876U, 16886U, 14057U, 
    14070U, 16896U, 16906U, 14083U, 14096U, 4600U, 3786U, 7840U, 
    3377U, 4448U, 15121U, 8232U, 15924U, 7359U, 11860U, 740U, 
    6379U, 732U, 0U, 6261U, 14869U, 4141U, 7190U, 7267U, 
    10658U, 10667U, 12884U, 8930U, 5955U, 8704U, 8714U, 5634U, 
    5649U, 8682U, 8693U, 4709U, 7431U, 8989U, 16409U, 9013U, 
    16433U, 12937U, 5083U, 5073U, 12183U, 14414U, 14442U, 14421U, 
    12649U, 17983U, 5999U, 17951U, 5981U, 10872U, 9769U, 5832U, 
    7629U, 13503U, 9067U, 14702U, 12620U, 14574U, 14600U, 14742U, 
    12310U, 5711U, 4234U, 4628U, 3793U, 7868U, 15128U, 8239U, 
    3383U, 14710U, 12430U, 12446U, 17772U, 5744U, 5903U, 14235U, 
    9687U, 4607U, 7847U, 4583U, 7823U, 16375U, 8955U, 4687U, 
    7897U, 4987U, 12737U, 12699U, 16392U, 8972U, 16416U, 8996U, 
    16710U, 16717U, 1780U, 1699U, 1742U, 1720U, 1822U, 1678U, 
    1801U, 1763U, 5158U, 3965U, 2016U, 6837U, 19243U, 7329U, 
    19376U, 6868U, 19276U, 7373U, 19411U, 7602U, 10758U, 13525U, 
    21763U, 13538U, 14162U, 13042U, 14169U, 13049U, 14854U, 21775U, 
    14843U, 21769U, 641U, 1214U, 661U, 1234U, 6846U, 19256U, 
    7352U, 19400U, 6889U, 19309U, 7394U, 19444U, 7338U, 19389U, 
    6875U, 19287U, 7380U, 19422U, 12492U, 21759U, 16488U, 17750U, 
    21331U, 20844U, 21340U, 20857U, 21349U, 20870U, 6882U, 19298U, 
    7387U, 19433U, 6841U, 19247U, 7333U, 19380U, 4893U, 16616U, 
    14829U, 17510U, 6877U, 19289U, 7382U, 19424U, 17688U, 6765U, 
    4068U, 18675U, 13298U, 13304U, 651U, 1224U, 672U, 1245U, 
    1291U, 9276U, 19579U, 13350U, 18228U, 1997U, 9297U, 19612U, 
    13358U, 18075U, 18288U, 4026U, 1948U, 9282U, 19589U, 18248U, 
    9381U, 19716U, 18647U, 5615U, 2024U, 9303U, 19622U, 18307U, 
    9446U, 19758U, 16664U, 2772U, 19007U, 6820U, 2138U, 4074U, 
    1967U, 18685U, 13320U, 2609U, 3234U, 64U, 3218U, 3192U, 
    3205U, 3181U, 1856U, 8051U, 358U, 8017U, 318U, 12280U, 
    372U, 8028U, 331U, 12295U, 389U, 20888U, 8000U, 5731U, 
    2037U, 9318U, 19645U, 18328U, 9466U, 19790U, 19047U, 13312U, 
    5933U, 2052U, 9335U, 19670U, 18365U, 9488U, 19824U, 19111U, 
    9259U, 11813U, 4932U, 2011U, 18298U, 4034U, 1954U, 18258U, 
    18656U, 18418U, 18481U, 20346U, 19267U, 14354U, 2643U, 14372U, 
    2662U, 18858U, 1554U, 218U, 930U, 2314U, 1436U, 100U, 
    812U, 2202U, 1477U, 141U, 853U, 2241U, 1634U, 298U, 
    1010U, 2400U, 1518U, 182U, 894U, 2280U, 1456U, 120U, 
    832U, 2221U, 1594U, 258U, 970U, 2352U, 1416U, 80U, 
    792U, 2170U, 1613U, 277U, 989U, 2380U, 1497U, 161U, 
    873U, 2260U, 1574U, 238U, 950U, 2333U, 1538U, 202U, 
    914U, 2299U, 9254U, 3439U, 3070U, 3936U, 4022U, 3093U, 
    12827U, 2587U, 7790U, 2444U, 7461U, 3358U, 12512U, 7754U, 
    12821U, 2580U, 21366U, 7783U, 2436U, 21357U, 21390U, 21404U, 
    19530U, 20077U, 20787U, 19541U, 19568U, 20089U, 20798U, 19554U, 
    20209U, 20252U, 18705U, 20450U, 18718U, 7457U, 12507U, 7748U, 
    21383U, 21398U, 21683U, 21378U, 12815U, 2574U, 7776U, 2429U, 
    20903U, 8614U, 8536U, 20921U, 8635U, 8572U, 21374U, 17958U, 
    2908U, 3427U, 21268U, 21432U, 7987U, 3370U, 21254U, 21418U, 
    12534U, 2526U, 7768U, 21283U, 21447U, 21312U, 21476U, 21298U, 
    21462U, 21325U, 21489U, 17809U, 2897U, 3422U, 21262U, 21426U, 
    7982U, 3364U, 21247U, 21411U, 12528U, 2519U, 7761U, 21275U, 
    21439U, 21305U, 21469U, 21292U, 21456U, 21320U, 21484U, 7453U, 
    2419U, 10843U, 8593U, 13465U, 4260U, 8553U, 13444U, 8529U, 
    13436U, 18155U, 3348U, 1868U, 10834U, 8581U, 8521U, 8546U, 
    12502U, 2502U, 7742U, 10865U, 8604U, 8566U, 13458U, 4914U, 
    4135U, 4757U, 3566U, 3554U, 1886U, 5130U, 6862U, 3559U, 
    4869U, 6830U, 15690U, 7315U, 3574U, 1892U, 15931U, 7367U, 
    5515U, 8209U, 18985U, 16288U, 2744U, 18519U, 20754U, 5528U, 
    8224U, 18996U, 16301U, 2752U, 18531U, 20765U, 14693U, 17781U, 
    2882U, 18351U, 19088U, 14214U, 14244U, 4975U, 4039U, 15189U, 
    4944U, 12608U, 12629U, 4306U, 14261U, 14253U, 12687U, 10508U, 
    9232U, 3068U, 5971U, 10517U, 6741U, 14784U, 10546U, 14120U, 
    10539U, 14816U, 10554U, 17789U, 10563U, 7976U, 10531U, 6770U, 
    5498U, 5628U, 9452U, 19768U, 14993U, 9707U, 19877U, 20545U, 
    19016U, 9440U, 19748U, 14987U, 9700U, 19866U, 20535U, 18966U, 
    16266U, 5919U, 9481U, 19813U, 15000U, 9715U, 19889U, 20556U, 
    19101U, 9737U, 19923U, 15085U, 9723U, 19901U, 20589U, 20732U, 
    13597U, 7717U, 14790U, 1030U, 14823U, 1036U, 14862U, 1051U, 
    14849U, 1044U, 4251U, 1982U, 14221U, 2628U, 12877U, 4576U, 
    13183U, 6106U, 7165U, 4819U, 6197U, 7242U, 4834U, 11898U, 
    14267U, 14462U, 6172U, 7199U, 17813U, 17895U, 6222U, 7276U, 
    17830U, 17923U, 15114U, 7816U, 12891U, 6254U, 3779U, 11934U, 
    14295U, 14490U, 12916U, 4672U, 4764U, 6114U, 7173U, 6205U, 
    7250U, 11907U, 14276U, 14471U, 6180U, 7207U, 17904U, 6230U, 
    7284U, 17932U, 15142U, 7882U, 12899U, 6268U, 3837U, 11943U, 
    14304U, 14499U, 683U, 1256U, 701U, 1274U, 21516U, 15185U, 
    2723U, 18492U, 20608U, 12931U, 15646U, 15283U, 15405U, 15344U, 
    15466U, 15560U, 4981U, 4046U, 11926U, 13674U, 15039U, 13683U, 
    15048U, 16010U, 16286U, 13832U, 15083U, 15195U, 3670U, 6591U, 
    12923U, 4679U, 6122U, 7181U, 6213U, 7258U, 11916U, 14285U, 
    14480U, 6188U, 7215U, 17913U, 6238U, 7292U, 17941U, 15149U, 
    7889U, 12907U, 6275U, 3844U, 11952U, 14313U, 14508U, 4735U, 
    16590U, 6433U, 16724U, 15567U, 17645U, 13937U, 17445U, 13960U, 
    17470U, 13973U, 17484U, 5684U, 16684U, 13510U, 17429U, 15020U, 
    17579U, 13949U, 17458U, 13986U, 17498U, 6928U, 9556U, 9546U, 
    6938U, 2956U, 8796U, 3000U, 8840U, 3034U, 8874U, 6046U, 
    3098U, 15235U, 15725U, 7020U, 3260U, 15295U, 15773U, 6137U, 
    3137U, 15259U, 15749U, 15417U, 15845U, 7055U, 3299U, 15356U, 
    15809U, 15478U, 15881U, 2968U, 8808U, 3012U, 8852U, 3046U, 
    8886U, 6064U, 3118U, 15247U, 15737U, 7038U, 3280U, 15332U, 
    15797U, 6155U, 3157U, 15271U, 15761U, 15454U, 15869U, 7082U, 
    3329U, 15393U, 15833U, 15515U, 15905U, 3396U, 6055U, 3108U, 
    7029U, 3270U, 6146U, 3147U, 7064U, 3309U, 15320U, 15785U, 
    15442U, 15857U, 7073U, 3319U, 15381U, 15821U, 15503U, 15893U, 
    6073U, 3128U, 2980U, 8820U, 7047U, 3290U, 3024U, 8864U, 
    6164U, 3167U, 2990U, 8830U, 7091U, 3339U, 3058U, 8898U, 
    4951U, 6283U, 12614U, 12666U, 4312U, 15696U, 7322U, 15573U, 
    7590U, 15702U, 7345U, 6918U, 7224U, 13336U, 15012U, 13768U, 
    15071U, 4749U, 16597U, 6439U, 16731U, 15580U, 17652U, 5691U, 
    16692U, 9514U, 17072U, 5925U, 16701U, 9743U, 17081U, 15307U, 
    15429U, 15368U, 15490U, 15602U, 15610U, 12693U, 3672U, 1899U, 
    1060U, 18237U, 18568U, 6593U, 2124U, 1073U, 18407U, 19184U, 
    16049U, 6974U, 1086U, 18193U, 19331U, 624U, 1114U, 18212U, 
    20696U, 9534U, 5253U, 18906U, 13580U, 20418U, 4595U, 13014U, 
    20261U, 18749U, 21811U, 4807U, 13035U, 20294U, 14964U, 13699U, 
    20460U, 20513U, 18799U, 5110U, 13518U, 5449U, 13739U, 5043U, 
    18866U, 13489U, 20386U, 4828U, 14971U, 17990U, 20809U, 20524U, 
    17823U, 20776U, 18809U, 15654U, 15064U, 17998U, 20821U, 20578U, 
    18006U, 20833U, 20647U, 15123U, 13762U, 20472U, 20599U, 4659U, 
    13020U, 20271U, 18758U, 12564U, 20185U, 3824U, 12999U, 20229U, 
    18600U, 7835U, 13477U, 20366U, 19500U, 5259U, 18916U, 13586U, 
    20428U, 4782U, 18779U, 13212U, 20336U, 4665U, 13027U, 20282U, 
    18768U, 3830U, 13006U, 20240U, 18610U, 5804U, 13137U, 20305U, 
    19068U, 4907U, 18847U, 13483U, 20376U, 5051U, 18878U, 13497U, 
    20398U, 5124U, 18888U, 13532U, 20408U, 5503U, 18975U, 13920U, 
    20482U, 11671U, 20054U, 5852U, 13142U, 20314U, 19076U, 4856U, 
    18819U, 13344U, 20356U, 14704U, 13692U, 20439U, 20492U, 3788U, 
    12993U, 20219U, 18591U, 15164U, 14725U, 12336U, 421U, 16780U, 
    16796U, 7569U, 12323U, 406U, 7551U, 7423U, 10749U, 14794U, 
    11805U, 4813U, 6746U, 10524U, 4129U, 11962U, 14125U, 13366U, 
    6776U, 7585U, 2423U, 4222U, 3349U, 17194U, 7930U, 17090U, 
    17795U, 2892U, 16855U, 15091U, 2705U, 17607U, 2837U, 17725U, 
    2864U, 13412U, 18128U, 591U, 4846U, 17200U, 7937U, 13926U, 
    17224U, 16828U, 17053U, 14978U, 17556U, 16627U, 13381U, 18093U, 
    8039U, 344U, 20882U, 3080U, 14634U, 7233U, 7993U, 4772U, 
    17103U, 14938U, 17543U, 16605U, 16481U, 17743U, 13196U, 15028U, 
    17588U, 17418U, 3177U, 1851U, 17206U, 7944U, 14928U, 2681U, 
    17525U, 2809U, 16370U, 2760U, 17237U, 2795U, 17118U, 17861U, 
    2903U, 16862U, 15096U, 2711U, 17613U, 2844U, 17738U, 2870U, 
    13420U, 18137U, 602U, 6961U, 2147U, 13326U, 2616U, 15708U, 
    11965U, 17212U, 7951U, 9417U, 7401U, 16507U, 16739U, 17660U, 
    7804U, 12806U, 17625U, 7965U, 3403U, 17218U, 7958U, 14109U, 
    17531U, 16502U, 633U, 459U, 17267U, 2802U, 17131U, 18016U, 
    2915U, 16869U, 15101U, 2717U, 17619U, 2851U, 17767U, 2876U, 
    13428U, 18146U, 613U, 20896U, 8009U, 5342U, 16646U, 17717U, 
    17730U, 16494U, 17756U, 11700U, 17166U, 15207U, 16338U, 16308U, 
    17405U, 16355U, 7919U, 7729U, 11848U, 17181U, 16528U, 16631U, 
    16760U, 17694U, 16323U, 17438U, 17634U, 4794U, 14949U, 4849U, 
    2002U, 12160U, 6081U, 13200U, 17392U, 5548U, 12234U, 2485U, 
    12834U, 2595U, 12216U, 13190U, 9245U, 7115U, 5605U, 9237U, 
    7106U, 7798U, 20327U, 12518U, 2507U, 12789U, 6086U, 2073U, 
    12568U, 12772U, 2556U, 12784U, 9053U, 3690U, 1912U, 5241U, 
    5885U, 21721U, 18041U, 12246U, 5227U, 4875U, 18025U, 5267U, 
    15948U, 5404U, 16141U, 4214U, 4228U, 6100U, 2089U, 12840U, 
    2602U, 21495U, 21506U, 12228U, 9U, 57U, 6131U, 6911U, 
    19320U, 18171U, 19141U, 18164U, 12523U, 2513U, 12795U, 5220U, 
    6093U, 2081U, 12574U, 12778U, 2563U, 12801U, 9060U, 5247U, 
    5894U, 21731U, 3415U, 18048U, 12253U, 8082U, 6983U, 5234U, 
    4741U, 8147U, 8297U, 8455U, 3407U, 8742U, 13775U, 18033U, 
    4801U, 14957U, 20502U, 18789U, 15640U, 15057U, 20567U, 20637U, 
    4863U, 9410U, 19737U, 18829U, 6964U, 2144U, 15684U, 9730U, 
    19912U, 20657U, 12552U, 12541U, 2534U, 4939U, 2010U, 18297U, 
    18857U, 9760U, 6257U, 2119U, 9359U, 19706U, 18398U, 9509U, 
    19857U, 19151U, 10839U, 1654U, 1666U, 12604U, 2546U, 18463U, 
    20193U, 12598U, 2547U, 18464U, 4302U, 1992U, 18279U, 18732U, 
    7161U, 2165U, 13331U, 2622U, 20194U, 6819U, 2137U, 20971U, 
    21235U, 21085U, 5118U, 5388U, 17794U, 2891U, 20988U, 21166U, 
    4871U, 21048U, 4771U, 21033U, 13195U, 21129U, 3176U, 1850U, 
    20939U, 21012U, 17860U, 2902U, 20996U, 21173U, 6970U, 2151U, 
    3402U, 1873U, 20947U, 21019U, 18020U, 2914U, 21004U, 21180U, 
    5341U, 21054U, 11699U, 21093U, 15206U, 11847U, 21112U, 21144U, 
    748U, 9074U, 10779U, 9145U, 10910U, 761U, 9089U, 10794U, 
    9160U, 10925U, 12347U, 9103U, 10808U, 9184U, 10979U, 12358U, 
    9116U, 10821U, 9197U, 10992U, 773U, 10939U, 12864U, 11005U, 
    2491U, 10966U, 1369U, 10953U, 11020U, 3703U, 1918U, 5365U, 
    16085U, 14613U, 14622U, 434U, 1126U, 487U, 1172U, 442U, 
    1134U, 466U, 1151U, 3720U, 1927U, 20955U, 21026U, 5382U, 
    21071U, 4776U, 21040U, 13206U, 21136U, 6631U, 2131U, 20963U, 
    21078U, 16119U, 2738U, 20980U, 21159U, 5347U, 21062U, 11706U, 
    21102U, 15211U, 11853U, 21120U, 21151U, 9522U, 4000U, 12260U, 
    14328U, 5173U, 3976U, 6792U, 6825U, 3447U, 6907U, 4814U, 
    6797U, 7466U, 19467U, 12222U, 20152U, 4080U, 7472U, 538U, 
    1101U, 18179U, 19477U, 12239U, 548U, 20162U, 18695U, 6999U, 
    19344U, 7006U, 2156U, 18428U, 19355U, 8424U, 2453U, 18440U, 
    19509U, 8439U, 2461U, 18452U, 19520U, 3725U, 4401U, 1391U, 
    1323U, 2096U, 1346U, 2189U, 5773U, 1296U, 4318U, 4270U, 
    4374U, 4345U, 1405U, 1336U, 2109U, 1359U, 2370U, 5787U, 
    1311U, 4333U, 4286U, 4389U, 4361U, 3685U, 1906U, 3939U, 
    1941U, 12209U, 2477U, 8410U, 3932U, 1933U, 12201U, 2468U, 
    5066U, 21194U, 19026U, 3248U, 5699U, 6247U, 5664U, 15106U, 
    5845U, 4198U, 4889U, 18839U, 15704U, 2728U, 18501U, 20667U, 
    18013U, 17764U, 16112U, 17709U, 4012U, 12271U, 14342U, 5190U, 
    3989U, 5205U, 4549U, 6813U, 529U, 19233U, 18740U, 15539U, 
    7301U, 19366U, 20616U, 5223U, 18898U, 15943U, 2733U, 18510U, 
    20675U, 3721U, 1928U, 16821U, 16548U, 17096U, 14933U, 2687U, 
    17537U, 2816U, 16543U, 2766U, 13373U, 18084U, 558U, 5383U, 
    13931U, 17230U, 16834U, 16554U, 14982U, 17561U, 16659U, 13388U, 
    18101U, 4777U, 17110U, 14943U, 17549U, 16610U, 17673U, 13207U, 
    15033U, 17594U, 17423U, 6632U, 2132U, 17243U, 16841U, 16560U, 
    17124U, 15007U, 2693U, 17573U, 2823U, 16775U, 2779U, 13396U, 
    18110U, 569U, 15712U, 10880U, 12035U, 16566U, 9428U, 7406U, 
    16513U, 16745U, 17666U, 17629U, 7970U, 16115U, 2739U, 14114U, 
    17273U, 16848U, 16572U, 17137U, 15078U, 2699U, 17601U, 2830U, 
    17712U, 2858U, 13404U, 18119U, 580U, 5348U, 16652U, 16520U, 
    21741U, 16752U, 21750U, 17680U, 11707U, 17173U, 15212U, 16346U, 
    16315U, 16362U, 7924U, 7735U, 11854U, 17187U, 16535U, 16638U, 
    16767U, 17701U, 16330U, 17639U, 5976U, 2067U, 9352U, 19695U, 
    18388U, 4062U, 1960U, 9289U, 19600U, 18268U, 9387U, 19726U, 
    18665U, 5678U, 2030U, 9310U, 19633U, 18317U, 9459U, 19779U, 
    19037U, 4086U, 1974U, 5737U, 2044U, 9326U, 19657U, 18339U, 
    9473U, 19801U, 19057U, 9503U, 19847U, 5948U, 2059U, 9343U, 
    19682U, 18376U, 9495U, 19835U, 19121U, 19132U, 4201U, 14686U, 
    4053U, 6782U, 4404U, 6803U, 3518U, 1879U, 3073U, 1842U, 
    12811U, 2570U, 8948U, 14203U, 7416U, 14192U, 21202U, 2920U, 
    21213U, 2932U, 21224U, 2944U, 5361U, 6896U, 5025U, 3254U, 
    5705U, 7524U, 16473U, 4843U, 6958U, 5798U, 718U, 17399U, 
    785U, 4440U, 4206U, 5913U, 725U, 16812U, 2785U, 9764U, 
    14643U, 8371U, 12802U, 16073U, 7412U, 10851U, 12165U, 3732U, 
    6636U, 16147U, 12066U, 16132U, 12094U, 8499U, 10602U, 12960U, 
    13256U, 13800U, 8109U, 12985U, 8174U, 8343U, 13281U, 8482U, 
    8769U, 13824U, 4982U, 4047U, 3614U, 6535U, 15970U, 3748U, 
    6652U, 16171U, 4913U, 11978U, 17412U, 41U, 4756U, 17567U, 
    49U, 12378U, 14772U, 3524U, 3580U, 3920U, 5509U, 8202U, 
    6729U, 3469U, 16280U, 10570U, 19975U, 10676U, 20000U, 3770U, 
    18578U, 5456U, 18940U, 6674U, 19194U, 12135U, 20114U, 16201U, 
    20706U, 10617U, 19987U, 10685U, 20013U, 3661U, 18555U, 5318U, 
    18927U, 6582U, 19171U, 12019U, 20101U, 16040U, 20683U, 3885U, 
    18621U, 5465U, 18953U, 6694U, 19207U, 12144U, 20127U, 16233U, 
    20719U, 3487U, 18543U, 6446U, 19159U, 15594U, 20625U, 3911U, 
    18634U, 6720U, 19220U, 16271U, 20741U, 12012U, 12128U, 3453U, 
    4560U, 6425U, 15544U, 13906U, 23U, 13913U, 32U, 3926U, 
    5522U, 8217U, 6735U, 3478U, 16295U, 5281U, 12004U, 15962U, 
    5418U, 12120U, 16163U, 5327U, 12028U, 16055U, 5474U, 12153U, 
    16242U, 15196U, 8063U, 8137U, 8287U, 8445U, 8732U, 10632U, 
    16986U, 17325U, 16975U, 17314U, 17005U, 17344U, 17025U, 17364U, 
    8090U, 5354U, 8155U, 8314U, 8463U, 3874U, 6683U, 16210U, 
    8750U, 4413U, 21538U, 15217U, 21643U, 11875U, 4422U, 21548U, 
    15226U, 21653U, 4431U, 21558U, 16932U, 17258U, 16957U, 17296U, 
    17044U, 17383U, 4554U, 3549U, 16924U, 17250U, 16966U, 17305U, 
    5304U, 16941U, 17280U, 3711U, 5373U, 6622U, 16093U, 16949U, 
    17288U, 16996U, 17335U, 16026U, 17036U, 17375U, 17016U, 17355U, 
    10609U, 10594U, 10694U, 3678U, 5334U, 6599U, 16062U, 3894U, 
    5481U, 6703U, 16249U, 13235U, 13245U, 10651U, 3646U, 5297U, 
    6567U, 16019U, 3755U, 5434U, 6659U, 16186U, 8333U, 5266U, 
    11997U, 15947U, 5403U, 12103U, 16140U, 15587U, 3495U, 6454U, 
    15625U, 3511U, 6461U, 15669U, 15917U, 5394U, 8073U, 8305U, 
    13264U, 8117U, 8182U, 8351U, 13289U, 12048U, 12074U, 12110U, 
    12039U, 3592U, 5273U, 6513U, 15954U, 3740U, 5410U, 6644U, 
    16155U, 5289U, 15985U, 5426U, 16178U, 4862U, 3653U, 5310U, 
    6574U, 16032U, 3762U, 5441U, 6666U, 16193U, 8777U, 4952U, 
    12369U, 14759U, 4788U, 15619U, 10578U, 12615U, 12667U, 4313U, 
    5117U, 8508U, 12580U, 12678U, 5387U, 17152U, 13593U, 13707U, 
    13631U, 13723U, 13639U, 13746U, 8666U, 13715U, 8674U, 13731U, 
    8724U, 13754U, 3541U, 4921U, 6494U, 15717U, 3702U, 5364U, 
    6613U, 16084U, 4568U, 11890U, 15552U, 10626U, 8380U, 8942U, 
    10719U, 17865U, 3531U, 4883U, 6992U, 8417U, 6468U, 11968U, 
    7013U, 8431U, 15697U, 7099U, 8438U, 10641U, 17066U, 7591U, 
    4455U, 15527U, 7805U, 3536U, 4888U, 6751U, 7125U, 6473U, 
    9568U, 11973U, 15177U, 15703U, 3695U, 21530U, 6606U, 21568U, 
    3629U, 6550U, 15993U, 16069U, 12807U, 3441U, 4548U, 6419U, 
    11884U, 15538U, 3587U, 5229U, 6758U, 6508U, 9695U, 11992U, 
    15201U, 15942U, 7448U, 19455U, 12175U, 20140U, 7608U, 19488U, 
    12463U, 20173U, 12058U, 16124U, 12085U, 8490U, 10587U, 12952U, 
    13227U, 13792U, 8101U, 12977U, 8166U, 8325U, 13273U, 8474U, 
    8761U, 13816U, 13783U, 12943U, 13218U, 12968U, 13808U, 17144U, 
    3621U, 6542U, 15977U, 17158U, 3638U, 6559U, 16002U, 12694U, 
    16U, 3433U, 6411U, 13124U, 3600U, 6521U, 14323U, 5672U, 
    6900U, 12674U, 2551U, 18472U, 7160U, 2164U, 13330U, 2621U, 
    20201U, 10355U, 11225U, 9915U, 11090U, 9650U, 11379U, 10317U, 
    10288U, 11178U, 9971U, 10371U, 10225U, 11151U, 10429U, 11242U, 
    10189U, 11141U, 10701U, 11160U, 11616U, 9222U, 13058U, 21595U, 
    13840U, 21619U, 13091U, 21607U, 13873U, 21631U, 10234U, 10243U, 
    9589U, 17840U, 17963U, 18055U, 17850U, 17973U, 18065U, 11098U, 
    10252U, 9174U, 11198U, 9931U, 11395U, 11107U, 11207U, 9951U, 
    11415U, 10438U, 11251U, 9678U, 11752U, 10270U, 11169U, 9841U, 
    11323U, 10169U, 11578U, 11081U, 9640U, 9906U, 10492U, 10080U, 
    9897U, 10209U, 10071U, 9799U, 11281U, 10127U, 11536U, 11044U, 
    9610U, 10089U, 11133U, 9659U, 11498U, 10337U, 11216U, 10027U, 
    11116U, 9819U, 11301U, 10147U, 11556U, 11071U, 9629U, 9777U, 
    11259U, 10105U, 11514U, 11034U, 9599U, 7132U, 4093U, 8386U, 
    10725U, 17871U, 9991U, 11445U, 7146U, 16916U, 11867U, 11676U, 
    10005U, 11459U, 10391U, 11233U, 9668U, 11724U, 9861U, 11053U, 
    9620U, 11343U, 10446U, 10400U, 9877U, 11061U, 11359U, 10299U, 
    11189U, 10043U, 11124U, 10363U, 11691U, 9923U, 11387U, 750U, 
    9076U, 10781U, 9147U, 10912U, 10327U, 19947U, 11661U, 20040U, 
    9981U, 19933U, 11435U, 20026U, 10381U, 19961U, 11714U, 20063U, 
    10199U, 11598U, 9210U, 11625U, 13069U, 13851U, 13102U, 13884U, 
    11634U, 1380U, 10261U, 10710U, 13080U, 13862U, 13113U, 13895U, 
    9941U, 11405U, 10472U, 11777U, 9961U, 11425U, 10482U, 11787U, 
    10464U, 11769U, 763U, 9091U, 10796U, 9162U, 10927U, 12349U, 
    9105U, 10810U, 9186U, 10981U, 12360U, 9118U, 10823U, 9199U, 
    10994U, 775U, 10941U, 12866U, 11007U, 2493U, 10968U, 1371U, 
    10955U, 11022U, 10279U, 11643U, 9851U, 11333U, 10179U, 11588U, 
    10500U, 11797U, 10217U, 11608U, 9809U, 11291U, 10137U, 11546U, 
    10097U, 11506U, 10346U, 11682U, 10035U, 11481U, 9830U, 11312U, 
    10158U, 11567U, 9788U, 11270U, 10116U, 11525U, 7139U, 4101U, 
    8394U, 10733U, 17879U, 9998U, 11452U, 7153U, 4109U, 8402U, 
    10741U, 17887U, 10016U, 11470U, 10420U, 11743U, 9869U, 11351U, 
    10455U, 11760U, 3461U, 10410U, 11733U, 9887U, 11369U, 10308U, 
    11652U, 10052U, 11489U, 3901U, 5488U, 6710U, 16256U, 5152U, 
    6502U, 11986U, 15936U, 7441U, 16221U, 8126U, 8191U, 8360U, 
    8785U, 16102U, 4929U, 4031U, 15182U, 21672U, 4936U, 12601U, 
    12595U, 4299U, 21187U, 12671U, 21791U, 21801U, 21783U, 3949U, 
    15632U, 15676U, 3957U, 8514U, 6853U, 21576U, 12587U, 17058U, 
    7596U, 17799U, 7307U, 21586U, 16578U, 3502U, 10061U, 15660U, 
    16076U, 21663U, 3945U, 3088U, 21693U, 12820U, 7782U, 7456U, 
    3352U, 21700U, 12506U, 7747U, 21714U, 21708U, 
};

#endif // GET_INSTRINFO_MC_DESC

