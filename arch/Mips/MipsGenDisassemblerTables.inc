#include "../../MCInst.h"
#include "../../LEB128.h"


#define Mips_FeatureAbs2008 0ULL
#define Mips_FeatureCRC 1ULL
#define Mips_FeatureCnMips 2ULL
#define Mips_FeatureCnMipsP 3ULL
#define Mips_FeatureDSP 4ULL
#define Mips_FeatureDSPR2 5ULL
#define Mips_FeatureDSPR3 6ULL
#define Mips_FeatureEVA 7ULL
#define Mips_FeatureFP64Bit 8ULL
#define Mips_FeatureFPXX 9ULL
#define Mips_FeatureGINV 10ULL
#define Mips_FeatureGP64Bit 11ULL
#define Mips_FeatureLongCalls 12ULL
#define Mips_FeatureMSA 13ULL
#define Mips_FeatureMT 14ULL
#define Mips_FeatureMicroMips 15ULL
#define Mips_FeatureMips1 16ULL
#define Mips_FeatureMips2 17ULL
#define Mips_FeatureMips3 18ULL
#define Mips_FeatureMips3D 19ULL
#define Mips_FeatureMips3_32 20ULL
#define Mips_FeatureMips3_32r2 21ULL
#define Mips_FeatureMips4 22ULL
#define Mips_FeatureMips4_32 23ULL
#define Mips_FeatureMips4_32r2 24ULL
#define Mips_FeatureMips5 25ULL
#define Mips_FeatureMips5_32r2 26ULL
#define Mips_FeatureMips16 27ULL
#define Mips_FeatureMips32 28ULL
#define Mips_FeatureMips32r2 29ULL
#define Mips_FeatureMips32r3 30ULL
#define Mips_FeatureMips32r5 31ULL
#define Mips_FeatureMips32r6 32ULL
#define Mips_FeatureMips64 33ULL
#define Mips_FeatureMips64r2 34ULL
#define Mips_FeatureMips64r3 35ULL
#define Mips_FeatureMips64r5 36ULL
#define Mips_FeatureMips64r6 37ULL
#define Mips_FeatureNaN2008 38ULL
#define Mips_FeatureNoABICalls 39ULL
#define Mips_FeatureNoMadd4 40ULL
#define Mips_FeatureNoOddSPReg 41ULL
#define Mips_FeaturePTR64Bit 42ULL
#define Mips_FeatureSingleFloat 43ULL
#define Mips_FeatureSoftFloat 44ULL
#define Mips_FeatureSym32 45ULL
#define Mips_FeatureUseIndirectJumpsHazard 46ULL
#define Mips_FeatureUseTCCInDIV 47ULL
#define Mips_FeatureVFPU 48ULL
#define Mips_FeatureVirt 49ULL
#define Mips_FeatureXGOT 50ULL
#define Mips_ImplP5600 51ULL
#ifdef MIPS_GET_DISASSEMBLER
#undef MIPS_GET_DISASSEMBLER

// Helper function for extracting fields from encoded instructions.
#define FieldFromInstruction(fname, InsnType) \
static InsnType fname(InsnType insn, unsigned startBit, unsigned numBits) \
{ \
  InsnType fieldMask; \
  if (numBits == sizeof(InsnType)*8) \
    fieldMask = (InsnType)(-1LL); \
  else \
    fieldMask = (((InsnType)1 << numBits) - 1) << startBit; \
  return (insn & fieldMask) >> startBit; \
}

static const uint8_t DecoderTable16[] = {
/* 0 */       MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3 */       MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 17
/* 8 */       MCD_OPC_CheckPredicate, 0, 71, 2, 0, // Skip to: 596
/* 13 */      MCD_OPC_Decode, 130, 8, 0, // Opcode: Bimm16
/* 17 */      MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 31
/* 22 */      MCD_OPC_CheckPredicate, 0, 57, 2, 0, // Skip to: 596
/* 27 */      MCD_OPC_Decode, 128, 8, 1, // Opcode: BeqzRxImm16
/* 31 */      MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 45
/* 36 */      MCD_OPC_CheckPredicate, 0, 43, 2, 0, // Skip to: 596
/* 41 */      MCD_OPC_Decode, 132, 8, 1, // Opcode: BnezRxImm16
/* 45 */      MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 59
/* 50 */      MCD_OPC_CheckPredicate, 0, 29, 2, 0, // Skip to: 596
/* 55 */      MCD_OPC_Decode, 191, 6, 2, // Opcode: AddiuRxRxImm16
/* 59 */      MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 73
/* 64 */      MCD_OPC_CheckPredicate, 0, 15, 2, 0, // Skip to: 596
/* 69 */      MCD_OPC_Decode, 174, 21, 1, // Opcode: SltiRxImm16
/* 73 */      MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 87
/* 78 */      MCD_OPC_CheckPredicate, 0, 1, 2, 0, // Skip to: 596
/* 83 */      MCD_OPC_Decode, 176, 21, 1, // Opcode: SltiuRxImm16
/* 87 */      MCD_OPC_FilterValue, 12, 73, 0, 0, // Skip to: 165
/* 92 */      MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 95 */      MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 109
/* 100 */     MCD_OPC_CheckPredicate, 0, 235, 1, 0, // Skip to: 596
/* 105 */     MCD_OPC_Decode, 135, 8, 0, // Opcode: Bteqz16
/* 109 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 123
/* 114 */     MCD_OPC_CheckPredicate, 0, 221, 1, 0, // Skip to: 596
/* 119 */     MCD_OPC_Decode, 137, 8, 0, // Opcode: Btnez16
/* 123 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 137
/* 128 */     MCD_OPC_CheckPredicate, 0, 207, 1, 0, // Skip to: 596
/* 133 */     MCD_OPC_Decode, 194, 6, 0, // Opcode: AddiuSpImm16
/* 137 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 151
/* 142 */     MCD_OPC_CheckPredicate, 0, 193, 1, 0, // Skip to: 596
/* 147 */     MCD_OPC_Decode, 180, 17, 3, // Opcode: Move32R16
/* 151 */     MCD_OPC_FilterValue, 7, 184, 1, 0, // Skip to: 596
/* 156 */     MCD_OPC_CheckPredicate, 0, 179, 1, 0, // Skip to: 596
/* 161 */     MCD_OPC_Decode, 181, 17, 4, // Opcode: MoveR3216
/* 165 */     MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 179
/* 170 */     MCD_OPC_CheckPredicate, 0, 165, 1, 0, // Skip to: 596
/* 175 */     MCD_OPC_Decode, 134, 15, 1, // Opcode: LiRxImm16
/* 179 */     MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 193
/* 184 */     MCD_OPC_CheckPredicate, 0, 151, 1, 0, // Skip to: 596
/* 189 */     MCD_OPC_Decode, 201, 10, 1, // Opcode: CmpiRxImm16
/* 193 */     MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 207
/* 198 */     MCD_OPC_CheckPredicate, 0, 137, 1, 0, // Skip to: 596
/* 203 */     MCD_OPC_Decode, 137, 15, 1, // Opcode: LwRxPcTcp16
/* 207 */     MCD_OPC_FilterValue, 28, 31, 0, 0, // Skip to: 243
/* 212 */     MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 215 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 229
/* 220 */     MCD_OPC_CheckPredicate, 0, 115, 1, 0, // Skip to: 596
/* 225 */     MCD_OPC_Decode, 196, 6, 5, // Opcode: AdduRxRyRz16
/* 229 */     MCD_OPC_FilterValue, 3, 106, 1, 0, // Skip to: 596
/* 234 */     MCD_OPC_CheckPredicate, 0, 101, 1, 0, // Skip to: 596
/* 239 */     MCD_OPC_Decode, 183, 21, 5, // Opcode: SubuRxRyRz16
/* 243 */     MCD_OPC_FilterValue, 29, 92, 1, 0, // Skip to: 596
/* 248 */     MCD_OPC_ExtractField, 0, 5,  // Inst{4-0} ...
/* 251 */     MCD_OPC_FilterValue, 0, 73, 0, 0, // Skip to: 329
/* 256 */     MCD_OPC_ExtractField, 5, 3,  // Inst{7-5} ...
/* 259 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 273
/* 264 */     MCD_OPC_CheckPredicate, 0, 71, 1, 0, // Skip to: 596
/* 269 */     MCD_OPC_Decode, 141, 14, 0, // Opcode: JumpLinkReg16
/* 273 */     MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 294
/* 278 */     MCD_OPC_CheckPredicate, 0, 57, 1, 0, // Skip to: 596
/* 283 */     MCD_OPC_CheckField, 8, 3, 0, 50, 1, 0, // Skip to: 596
/* 290 */     MCD_OPC_Decode, 138, 14, 0, // Opcode: JrRa16
/* 294 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 308
/* 299 */     MCD_OPC_CheckPredicate, 0, 36, 1, 0, // Skip to: 596
/* 304 */     MCD_OPC_Decode, 140, 14, 1, // Opcode: JrcRx16
/* 308 */     MCD_OPC_FilterValue, 7, 27, 1, 0, // Skip to: 596
/* 313 */     MCD_OPC_CheckPredicate, 0, 22, 1, 0, // Skip to: 596
/* 318 */     MCD_OPC_CheckField, 8, 3, 0, 15, 1, 0, // Skip to: 596
/* 325 */     MCD_OPC_Decode, 139, 14, 0, // Opcode: JrcRa16
/* 329 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 343
/* 334 */     MCD_OPC_CheckPredicate, 0, 1, 1, 0, // Skip to: 596
/* 339 */     MCD_OPC_Decode, 173, 21, 6, // Opcode: SltRxRy16
/* 343 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 357
/* 348 */     MCD_OPC_CheckPredicate, 0, 243, 0, 0, // Skip to: 596
/* 353 */     MCD_OPC_Decode, 178, 21, 6, // Opcode: SltuRxRy16
/* 357 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 371
/* 362 */     MCD_OPC_CheckPredicate, 0, 229, 0, 0, // Skip to: 596
/* 367 */     MCD_OPC_Decode, 172, 21, 7, // Opcode: SllvRxRy16
/* 371 */     MCD_OPC_FilterValue, 5, 16, 0, 0, // Skip to: 392
/* 376 */     MCD_OPC_CheckPredicate, 0, 215, 0, 0, // Skip to: 596
/* 381 */     MCD_OPC_CheckField, 5, 6, 0, 208, 0, 0, // Skip to: 596
/* 388 */     MCD_OPC_Decode, 134, 8, 0, // Opcode: Break16
/* 392 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 406
/* 397 */     MCD_OPC_CheckPredicate, 0, 194, 0, 0, // Skip to: 596
/* 402 */     MCD_OPC_Decode, 182, 21, 7, // Opcode: SrlvRxRy16
/* 406 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 420
/* 411 */     MCD_OPC_CheckPredicate, 0, 180, 0, 0, // Skip to: 596
/* 416 */     MCD_OPC_Decode, 180, 21, 7, // Opcode: SravRxRy16
/* 420 */     MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 434
/* 425 */     MCD_OPC_CheckPredicate, 0, 166, 0, 0, // Skip to: 596
/* 430 */     MCD_OPC_Decode, 200, 10, 6, // Opcode: CmpRxRy16
/* 434 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 448
/* 439 */     MCD_OPC_CheckPredicate, 0, 152, 0, 0, // Skip to: 596
/* 444 */     MCD_OPC_Decode, 197, 6, 7, // Opcode: AndRxRxRy16
/* 448 */     MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 462
/* 453 */     MCD_OPC_CheckPredicate, 0, 138, 0, 0, // Skip to: 596
/* 458 */     MCD_OPC_Decode, 222, 17, 7, // Opcode: OrRxRxRy16
/* 462 */     MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 476
/* 467 */     MCD_OPC_CheckPredicate, 0, 124, 0, 0, // Skip to: 596
/* 472 */     MCD_OPC_Decode, 147, 22, 7, // Opcode: XorRxRxRy16
/* 476 */     MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 490
/* 481 */     MCD_OPC_CheckPredicate, 0, 110, 0, 0, // Skip to: 596
/* 486 */     MCD_OPC_Decode, 209, 17, 6, // Opcode: NotRxRy16
/* 490 */     MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 504
/* 495 */     MCD_OPC_CheckPredicate, 0, 96, 0, 0, // Skip to: 596
/* 500 */     MCD_OPC_Decode, 178, 17, 1, // Opcode: Mfhi16
/* 504 */     MCD_OPC_FilterValue, 17, 31, 0, 0, // Skip to: 540
/* 509 */     MCD_OPC_ExtractField, 5, 3,  // Inst{7-5} ...
/* 512 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 526
/* 517 */     MCD_OPC_CheckPredicate, 0, 74, 0, 0, // Skip to: 596
/* 522 */     MCD_OPC_Decode, 168, 21, 2, // Opcode: SebRx16
/* 526 */     MCD_OPC_FilterValue, 5, 65, 0, 0, // Skip to: 596
/* 531 */     MCD_OPC_CheckPredicate, 0, 60, 0, 0, // Skip to: 596
/* 536 */     MCD_OPC_Decode, 169, 21, 2, // Opcode: SehRx16
/* 540 */     MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 554
/* 545 */     MCD_OPC_CheckPredicate, 0, 46, 0, 0, // Skip to: 596
/* 550 */     MCD_OPC_Decode, 179, 17, 1, // Opcode: Mflo16
/* 554 */     MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 568
/* 559 */     MCD_OPC_CheckPredicate, 0, 32, 0, 0, // Skip to: 596
/* 564 */     MCD_OPC_Decode, 210, 11, 6, // Opcode: DivRxRy16
/* 568 */     MCD_OPC_FilterValue, 27, 9, 0, 0, // Skip to: 582
/* 573 */     MCD_OPC_CheckPredicate, 0, 18, 0, 0, // Skip to: 596
/* 578 */     MCD_OPC_Decode, 211, 11, 6, // Opcode: DivuRxRy16
/* 582 */     MCD_OPC_FilterValue, 29, 9, 0, 0, // Skip to: 596
/* 587 */     MCD_OPC_CheckPredicate, 0, 4, 0, 0, // Skip to: 596
/* 592 */     MCD_OPC_Decode, 208, 17, 6, // Opcode: NegRxRy16
/* 596 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTable32[] = {
/* 0 */       MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3 */       MCD_OPC_FilterValue, 1, 23, 0, 0, // Skip to: 31
/* 8 */       MCD_OPC_CheckPredicate, 0, 2, 2, 0, // Skip to: 527
/* 13 */      MCD_OPC_CheckField, 27, 5, 30, 251, 1, 0, // Skip to: 527
/* 20 */      MCD_OPC_CheckField, 5, 3, 0, 244, 1, 0, // Skip to: 527
/* 27 */      MCD_OPC_Decode, 190, 6, 1, // Opcode: AddiuRxPcImmX16
/* 31 */      MCD_OPC_FilterValue, 2, 23, 0, 0, // Skip to: 59
/* 36 */      MCD_OPC_CheckPredicate, 0, 230, 1, 0, // Skip to: 527
/* 41 */      MCD_OPC_CheckField, 27, 5, 30, 223, 1, 0, // Skip to: 527
/* 48 */      MCD_OPC_CheckField, 5, 6, 0, 216, 1, 0, // Skip to: 527
/* 55 */      MCD_OPC_Decode, 131, 8, 8, // Opcode: BimmX16
/* 59 */      MCD_OPC_FilterValue, 4, 23, 0, 0, // Skip to: 87
/* 64 */      MCD_OPC_CheckPredicate, 0, 202, 1, 0, // Skip to: 527
/* 69 */      MCD_OPC_CheckField, 27, 5, 30, 195, 1, 0, // Skip to: 527
/* 76 */      MCD_OPC_CheckField, 5, 3, 0, 188, 1, 0, // Skip to: 527
/* 83 */      MCD_OPC_Decode, 129, 8, 1, // Opcode: BeqzRxImmX16
/* 87 */      MCD_OPC_FilterValue, 5, 23, 0, 0, // Skip to: 115
/* 92 */      MCD_OPC_CheckPredicate, 0, 174, 1, 0, // Skip to: 527
/* 97 */      MCD_OPC_CheckField, 27, 5, 30, 167, 1, 0, // Skip to: 527
/* 104 */     MCD_OPC_CheckField, 5, 3, 0, 160, 1, 0, // Skip to: 527
/* 111 */     MCD_OPC_Decode, 133, 8, 1, // Opcode: BnezRxImmX16
/* 115 */     MCD_OPC_FilterValue, 6, 106, 0, 0, // Skip to: 226
/* 120 */     MCD_OPC_ExtractField, 27, 5,  // Inst{31-27} ...
/* 123 */     MCD_OPC_FilterValue, 30, 143, 1, 0, // Skip to: 527
/* 128 */     MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 131 */     MCD_OPC_FilterValue, 0, 45, 0, 0, // Skip to: 181
/* 136 */     MCD_OPC_ExtractField, 0, 5,  // Inst{4-0} ...
/* 139 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 153
/* 144 */     MCD_OPC_CheckPredicate, 0, 32, 0, 0, // Skip to: 181
/* 149 */     MCD_OPC_Decode, 171, 21, 6, // Opcode: SllX16
/* 153 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 167
/* 158 */     MCD_OPC_CheckPredicate, 0, 18, 0, 0, // Skip to: 181
/* 163 */     MCD_OPC_Decode, 181, 21, 6, // Opcode: SrlX16
/* 167 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 181
/* 172 */     MCD_OPC_CheckPredicate, 0, 4, 0, 0, // Skip to: 181
/* 177 */     MCD_OPC_Decode, 179, 21, 6, // Opcode: SraX16
/* 181 */     MCD_OPC_ExtractField, 5, 6,  // Inst{10-5} ...
/* 184 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 198
/* 189 */     MCD_OPC_CheckPredicate, 0, 77, 1, 0, // Skip to: 527
/* 194 */     MCD_OPC_Decode, 136, 8, 0, // Opcode: BteqzX16
/* 198 */     MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 212
/* 203 */     MCD_OPC_CheckPredicate, 0, 63, 1, 0, // Skip to: 527
/* 208 */     MCD_OPC_Decode, 138, 8, 0, // Opcode: BtnezX16
/* 212 */     MCD_OPC_FilterValue, 24, 54, 1, 0, // Skip to: 527
/* 217 */     MCD_OPC_CheckPredicate, 0, 49, 1, 0, // Skip to: 527
/* 222 */     MCD_OPC_Decode, 195, 6, 0, // Opcode: AddiuSpImmX16
/* 226 */     MCD_OPC_FilterValue, 8, 23, 0, 0, // Skip to: 254
/* 231 */     MCD_OPC_CheckPredicate, 0, 35, 1, 0, // Skip to: 527
/* 236 */     MCD_OPC_CheckField, 27, 5, 30, 28, 1, 0, // Skip to: 527
/* 243 */     MCD_OPC_CheckField, 4, 1, 0, 21, 1, 0, // Skip to: 527
/* 250 */     MCD_OPC_Decode, 193, 6, 9, // Opcode: AddiuRxRyOffMemX16
/* 254 */     MCD_OPC_FilterValue, 9, 23, 0, 0, // Skip to: 282
/* 259 */     MCD_OPC_CheckPredicate, 0, 7, 1, 0, // Skip to: 527
/* 264 */     MCD_OPC_CheckField, 27, 5, 30, 0, 1, 0, // Skip to: 527
/* 271 */     MCD_OPC_CheckField, 5, 3, 0, 249, 0, 0, // Skip to: 527
/* 278 */     MCD_OPC_Decode, 189, 6, 1, // Opcode: AddiuRxImmX16
/* 282 */     MCD_OPC_FilterValue, 10, 23, 0, 0, // Skip to: 310
/* 287 */     MCD_OPC_CheckPredicate, 0, 235, 0, 0, // Skip to: 527
/* 292 */     MCD_OPC_CheckField, 27, 5, 30, 228, 0, 0, // Skip to: 527
/* 299 */     MCD_OPC_CheckField, 5, 3, 0, 221, 0, 0, // Skip to: 527
/* 306 */     MCD_OPC_Decode, 175, 21, 1, // Opcode: SltiRxImmX16
/* 310 */     MCD_OPC_FilterValue, 11, 23, 0, 0, // Skip to: 338
/* 315 */     MCD_OPC_CheckPredicate, 0, 207, 0, 0, // Skip to: 527
/* 320 */     MCD_OPC_CheckField, 27, 5, 30, 200, 0, 0, // Skip to: 527
/* 327 */     MCD_OPC_CheckField, 5, 3, 0, 193, 0, 0, // Skip to: 527
/* 334 */     MCD_OPC_Decode, 177, 21, 1, // Opcode: SltiuRxImmX16
/* 338 */     MCD_OPC_FilterValue, 13, 23, 0, 0, // Skip to: 366
/* 343 */     MCD_OPC_CheckPredicate, 0, 179, 0, 0, // Skip to: 527
/* 348 */     MCD_OPC_CheckField, 27, 5, 30, 172, 0, 0, // Skip to: 527
/* 355 */     MCD_OPC_CheckField, 5, 3, 0, 165, 0, 0, // Skip to: 527
/* 362 */     MCD_OPC_Decode, 136, 15, 1, // Opcode: LiRxImmX16
/* 366 */     MCD_OPC_FilterValue, 14, 23, 0, 0, // Skip to: 394
/* 371 */     MCD_OPC_CheckPredicate, 0, 151, 0, 0, // Skip to: 527
/* 376 */     MCD_OPC_CheckField, 27, 5, 30, 144, 0, 0, // Skip to: 527
/* 383 */     MCD_OPC_CheckField, 5, 3, 0, 137, 0, 0, // Skip to: 527
/* 390 */     MCD_OPC_Decode, 202, 10, 1, // Opcode: CmpiRxImmX16
/* 394 */     MCD_OPC_FilterValue, 18, 16, 0, 0, // Skip to: 415
/* 399 */     MCD_OPC_CheckPredicate, 0, 123, 0, 0, // Skip to: 527
/* 404 */     MCD_OPC_CheckField, 27, 5, 30, 116, 0, 0, // Skip to: 527
/* 411 */     MCD_OPC_Decode, 140, 15, 9, // Opcode: LwRxSpImmX16
/* 415 */     MCD_OPC_FilterValue, 22, 23, 0, 0, // Skip to: 443
/* 420 */     MCD_OPC_CheckPredicate, 0, 102, 0, 0, // Skip to: 527
/* 425 */     MCD_OPC_CheckField, 27, 5, 30, 95, 0, 0, // Skip to: 527
/* 432 */     MCD_OPC_CheckField, 5, 3, 0, 88, 0, 0, // Skip to: 527
/* 439 */     MCD_OPC_Decode, 138, 15, 1, // Opcode: LwRxPcTcpX16
/* 443 */     MCD_OPC_FilterValue, 24, 16, 0, 0, // Skip to: 464
/* 448 */     MCD_OPC_CheckPredicate, 0, 74, 0, 0, // Skip to: 527
/* 453 */     MCD_OPC_CheckField, 27, 5, 30, 67, 0, 0, // Skip to: 527
/* 460 */     MCD_OPC_Decode, 167, 21, 9, // Opcode: SbRxRyOffMemX16
/* 464 */     MCD_OPC_FilterValue, 25, 16, 0, 0, // Skip to: 485
/* 469 */     MCD_OPC_CheckPredicate, 0, 53, 0, 0, // Skip to: 527
/* 474 */     MCD_OPC_CheckField, 27, 5, 30, 46, 0, 0, // Skip to: 527
/* 481 */     MCD_OPC_Decode, 170, 21, 9, // Opcode: ShRxRyOffMemX16
/* 485 */     MCD_OPC_FilterValue, 26, 16, 0, 0, // Skip to: 506
/* 490 */     MCD_OPC_CheckPredicate, 0, 32, 0, 0, // Skip to: 527
/* 495 */     MCD_OPC_CheckField, 27, 5, 30, 25, 0, 0, // Skip to: 527
/* 502 */     MCD_OPC_Decode, 185, 21, 9, // Opcode: SwRxSpImmX16
/* 506 */     MCD_OPC_FilterValue, 27, 16, 0, 0, // Skip to: 527
/* 511 */     MCD_OPC_CheckPredicate, 0, 11, 0, 0, // Skip to: 527
/* 516 */     MCD_OPC_CheckField, 27, 5, 30, 4, 0, 0, // Skip to: 527
/* 523 */     MCD_OPC_Decode, 184, 21, 9, // Opcode: SwRxRyOffMemX16
/* 527 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableCOP3_32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 51, 9, 0, 0, // Skip to: 17
/* 8 */       MCD_OPC_CheckPredicate, 1, 46, 0, 0, // Skip to: 59
/* 13 */      MCD_OPC_Decode, 225, 14, 10, // Opcode: LWC3
/* 17 */      MCD_OPC_FilterValue, 55, 9, 0, 0, // Skip to: 31
/* 22 */      MCD_OPC_CheckPredicate, 2, 32, 0, 0, // Skip to: 59
/* 27 */      MCD_OPC_Decode, 165, 14, 10, // Opcode: LDC3
/* 31 */      MCD_OPC_FilterValue, 59, 9, 0, 0, // Skip to: 45
/* 36 */      MCD_OPC_CheckPredicate, 1, 18, 0, 0, // Skip to: 59
/* 41 */      MCD_OPC_Decode, 132, 21, 10, // Opcode: SWC3
/* 45 */      MCD_OPC_FilterValue, 63, 9, 0, 0, // Skip to: 59
/* 50 */      MCD_OPC_CheckPredicate, 2, 4, 0, 0, // Skip to: 59
/* 55 */      MCD_OPC_Decode, 128, 19, 10, // Opcode: SDC3
/* 59 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableCnMips32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 18, 31, 0, 0, // Skip to: 39
/* 8 */       MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 11 */      MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 25
/* 16 */      MCD_OPC_CheckPredicate, 3, 239, 1, 0, // Skip to: 516
/* 21 */      MCD_OPC_Decode, 248, 10, 11, // Opcode: DMFC2_OCTEON
/* 25 */      MCD_OPC_FilterValue, 5, 230, 1, 0, // Skip to: 516
/* 30 */      MCD_OPC_CheckPredicate, 3, 225, 1, 0, // Skip to: 516
/* 35 */      MCD_OPC_Decode, 128, 11, 11, // Opcode: DMTC2_OCTEON
/* 39 */      MCD_OPC_FilterValue, 28, 160, 1, 0, // Skip to: 460
/* 44 */      MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 47 */      MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 68
/* 52 */      MCD_OPC_CheckPredicate, 3, 203, 1, 0, // Skip to: 516
/* 57 */      MCD_OPC_CheckField, 6, 5, 0, 196, 1, 0, // Skip to: 516
/* 64 */      MCD_OPC_Decode, 132, 11, 12, // Opcode: DMUL
/* 68 */      MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 89
/* 73 */      MCD_OPC_CheckPredicate, 3, 182, 1, 0, // Skip to: 516
/* 78 */      MCD_OPC_CheckField, 6, 15, 0, 175, 1, 0, // Skip to: 516
/* 85 */      MCD_OPC_Decode, 248, 16, 13, // Opcode: MTM0
/* 89 */      MCD_OPC_FilterValue, 9, 16, 0, 0, // Skip to: 110
/* 94 */      MCD_OPC_CheckPredicate, 3, 161, 1, 0, // Skip to: 516
/* 99 */      MCD_OPC_CheckField, 6, 15, 0, 154, 1, 0, // Skip to: 516
/* 106 */     MCD_OPC_Decode, 251, 16, 13, // Opcode: MTP0
/* 110 */     MCD_OPC_FilterValue, 10, 16, 0, 0, // Skip to: 131
/* 115 */     MCD_OPC_CheckPredicate, 3, 140, 1, 0, // Skip to: 516
/* 120 */     MCD_OPC_CheckField, 6, 15, 0, 133, 1, 0, // Skip to: 516
/* 127 */     MCD_OPC_Decode, 252, 16, 13, // Opcode: MTP1
/* 131 */     MCD_OPC_FilterValue, 11, 16, 0, 0, // Skip to: 152
/* 136 */     MCD_OPC_CheckPredicate, 3, 119, 1, 0, // Skip to: 516
/* 141 */     MCD_OPC_CheckField, 6, 15, 0, 112, 1, 0, // Skip to: 516
/* 148 */     MCD_OPC_Decode, 253, 16, 13, // Opcode: MTP2
/* 152 */     MCD_OPC_FilterValue, 12, 16, 0, 0, // Skip to: 173
/* 157 */     MCD_OPC_CheckPredicate, 3, 98, 1, 0, // Skip to: 516
/* 162 */     MCD_OPC_CheckField, 6, 15, 0, 91, 1, 0, // Skip to: 516
/* 169 */     MCD_OPC_Decode, 249, 16, 13, // Opcode: MTM1
/* 173 */     MCD_OPC_FilterValue, 13, 16, 0, 0, // Skip to: 194
/* 178 */     MCD_OPC_CheckPredicate, 3, 77, 1, 0, // Skip to: 516
/* 183 */     MCD_OPC_CheckField, 6, 15, 0, 70, 1, 0, // Skip to: 516
/* 190 */     MCD_OPC_Decode, 250, 16, 13, // Opcode: MTM2
/* 194 */     MCD_OPC_FilterValue, 15, 16, 0, 0, // Skip to: 215
/* 199 */     MCD_OPC_CheckPredicate, 3, 56, 1, 0, // Skip to: 516
/* 204 */     MCD_OPC_CheckField, 6, 5, 0, 49, 1, 0, // Skip to: 516
/* 211 */     MCD_OPC_Decode, 249, 21, 12, // Opcode: VMULU
/* 215 */     MCD_OPC_FilterValue, 16, 16, 0, 0, // Skip to: 236
/* 220 */     MCD_OPC_CheckPredicate, 3, 35, 1, 0, // Skip to: 516
/* 225 */     MCD_OPC_CheckField, 6, 5, 0, 28, 1, 0, // Skip to: 516
/* 232 */     MCD_OPC_Decode, 248, 21, 12, // Opcode: VMM0
/* 236 */     MCD_OPC_FilterValue, 17, 16, 0, 0, // Skip to: 257
/* 241 */     MCD_OPC_CheckPredicate, 3, 14, 1, 0, // Skip to: 516
/* 246 */     MCD_OPC_CheckField, 6, 5, 0, 7, 1, 0, // Skip to: 516
/* 253 */     MCD_OPC_Decode, 247, 21, 12, // Opcode: V3MULU
/* 257 */     MCD_OPC_FilterValue, 40, 16, 0, 0, // Skip to: 278
/* 262 */     MCD_OPC_CheckPredicate, 3, 249, 0, 0, // Skip to: 516
/* 267 */     MCD_OPC_CheckField, 6, 5, 0, 242, 0, 0, // Skip to: 516
/* 274 */     MCD_OPC_Decode, 199, 6, 12, // Opcode: BADDu
/* 278 */     MCD_OPC_FilterValue, 42, 16, 0, 0, // Skip to: 299
/* 283 */     MCD_OPC_CheckPredicate, 3, 228, 0, 0, // Skip to: 516
/* 288 */     MCD_OPC_CheckField, 6, 5, 0, 221, 0, 0, // Skip to: 516
/* 295 */     MCD_OPC_Decode, 159, 19, 12, // Opcode: SEQ
/* 299 */     MCD_OPC_FilterValue, 43, 16, 0, 0, // Skip to: 320
/* 304 */     MCD_OPC_CheckPredicate, 3, 207, 0, 0, // Skip to: 516
/* 309 */     MCD_OPC_CheckField, 6, 5, 0, 200, 0, 0, // Skip to: 516
/* 316 */     MCD_OPC_Decode, 131, 20, 12, // Opcode: SNE
/* 320 */     MCD_OPC_FilterValue, 44, 23, 0, 0, // Skip to: 348
/* 325 */     MCD_OPC_CheckPredicate, 3, 186, 0, 0, // Skip to: 516
/* 330 */     MCD_OPC_CheckField, 16, 5, 0, 179, 0, 0, // Skip to: 516
/* 337 */     MCD_OPC_CheckField, 6, 5, 0, 172, 0, 0, // Skip to: 516
/* 344 */     MCD_OPC_Decode, 246, 17, 14, // Opcode: POP
/* 348 */     MCD_OPC_FilterValue, 45, 23, 0, 0, // Skip to: 376
/* 353 */     MCD_OPC_CheckPredicate, 3, 158, 0, 0, // Skip to: 516
/* 358 */     MCD_OPC_CheckField, 16, 5, 0, 151, 0, 0, // Skip to: 516
/* 365 */     MCD_OPC_CheckField, 6, 5, 0, 144, 0, 0, // Skip to: 516
/* 372 */     MCD_OPC_Decode, 165, 11, 15, // Opcode: DPOP
/* 376 */     MCD_OPC_FilterValue, 46, 9, 0, 0, // Skip to: 390
/* 381 */     MCD_OPC_CheckPredicate, 3, 130, 0, 0, // Skip to: 516
/* 386 */     MCD_OPC_Decode, 160, 19, 16, // Opcode: SEQi
/* 390 */     MCD_OPC_FilterValue, 47, 9, 0, 0, // Skip to: 404
/* 395 */     MCD_OPC_CheckPredicate, 3, 116, 0, 0, // Skip to: 516
/* 400 */     MCD_OPC_Decode, 132, 20, 16, // Opcode: SNEi
/* 404 */     MCD_OPC_FilterValue, 50, 9, 0, 0, // Skip to: 418
/* 409 */     MCD_OPC_CheckPredicate, 4, 102, 0, 0, // Skip to: 516
/* 414 */     MCD_OPC_Decode, 168, 8, 17, // Opcode: CINS
/* 418 */     MCD_OPC_FilterValue, 51, 9, 0, 0, // Skip to: 432
/* 423 */     MCD_OPC_CheckPredicate, 4, 88, 0, 0, // Skip to: 516
/* 428 */     MCD_OPC_Decode, 169, 8, 17, // Opcode: CINS32
/* 432 */     MCD_OPC_FilterValue, 58, 9, 0, 0, // Skip to: 446
/* 437 */     MCD_OPC_CheckPredicate, 4, 74, 0, 0, // Skip to: 516
/* 442 */     MCD_OPC_Decode, 252, 11, 17, // Opcode: EXTS
/* 446 */     MCD_OPC_FilterValue, 59, 65, 0, 0, // Skip to: 516
/* 451 */     MCD_OPC_CheckPredicate, 4, 60, 0, 0, // Skip to: 516
/* 456 */     MCD_OPC_Decode, 253, 11, 17, // Opcode: EXTS32
/* 460 */     MCD_OPC_FilterValue, 50, 9, 0, 0, // Skip to: 474
/* 465 */     MCD_OPC_CheckPredicate, 3, 46, 0, 0, // Skip to: 516
/* 470 */     MCD_OPC_Decode, 205, 6, 18, // Opcode: BBIT0
/* 474 */     MCD_OPC_FilterValue, 54, 9, 0, 0, // Skip to: 488
/* 479 */     MCD_OPC_CheckPredicate, 3, 32, 0, 0, // Skip to: 516
/* 484 */     MCD_OPC_Decode, 206, 6, 18, // Opcode: BBIT032
/* 488 */     MCD_OPC_FilterValue, 58, 9, 0, 0, // Skip to: 502
/* 493 */     MCD_OPC_CheckPredicate, 3, 18, 0, 0, // Skip to: 516
/* 498 */     MCD_OPC_Decode, 207, 6, 18, // Opcode: BBIT1
/* 502 */     MCD_OPC_FilterValue, 62, 9, 0, 0, // Skip to: 516
/* 507 */     MCD_OPC_CheckPredicate, 3, 4, 0, 0, // Skip to: 516
/* 512 */     MCD_OPC_Decode, 208, 6, 18, // Opcode: BBIT132
/* 516 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableCnMipsP32[] = {
/* 0 */       MCD_OPC_ExtractField, 0, 16,  // Inst{15-0} ...
/* 3 */       MCD_OPC_FilterValue, 24, 16, 0, 0, // Skip to: 24
/* 8 */       MCD_OPC_CheckPredicate, 5, 32, 0, 0, // Skip to: 45
/* 13 */      MCD_OPC_CheckField, 26, 6, 28, 25, 0, 0, // Skip to: 45
/* 20 */      MCD_OPC_Decode, 214, 18, 19, // Opcode: SAA
/* 24 */      MCD_OPC_FilterValue, 25, 16, 0, 0, // Skip to: 45
/* 29 */      MCD_OPC_CheckPredicate, 5, 11, 0, 0, // Skip to: 45
/* 34 */      MCD_OPC_CheckField, 26, 6, 28, 4, 0, 0, // Skip to: 45
/* 41 */      MCD_OPC_Decode, 215, 18, 19, // Opcode: SAAD
/* 45 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMips16[] = {
/* 0 */       MCD_OPC_ExtractField, 10, 6,  // Inst{15-10} ...
/* 3 */       MCD_OPC_FilterValue, 1, 31, 0, 0, // Skip to: 39
/* 8 */       MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 25
/* 16 */      MCD_OPC_CheckPredicate, 6, 114, 2, 0, // Skip to: 647
/* 21 */      MCD_OPC_Decode, 232, 5, 20, // Opcode: ADDU16_MM
/* 25 */      MCD_OPC_FilterValue, 1, 105, 2, 0, // Skip to: 647
/* 30 */      MCD_OPC_CheckPredicate, 6, 100, 2, 0, // Skip to: 647
/* 35 */      MCD_OPC_Decode, 221, 20, 20, // Opcode: SUBU16_MM
/* 39 */      MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 53
/* 44 */      MCD_OPC_CheckPredicate, 7, 86, 2, 0, // Skip to: 647
/* 49 */      MCD_OPC_Decode, 146, 14, 21, // Opcode: LBU16_MM
/* 53 */      MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 67
/* 58 */      MCD_OPC_CheckPredicate, 6, 72, 2, 0, // Skip to: 647
/* 63 */      MCD_OPC_Decode, 147, 16, 22, // Opcode: MOVE16_MM
/* 67 */      MCD_OPC_FilterValue, 9, 31, 0, 0, // Skip to: 103
/* 72 */      MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 75 */      MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 89
/* 80 */      MCD_OPC_CheckPredicate, 6, 50, 2, 0, // Skip to: 647
/* 85 */      MCD_OPC_Decode, 231, 19, 23, // Opcode: SLL16_MM
/* 89 */      MCD_OPC_FilterValue, 1, 41, 2, 0, // Skip to: 647
/* 94 */      MCD_OPC_CheckPredicate, 6, 36, 2, 0, // Skip to: 647
/* 99 */      MCD_OPC_Decode, 162, 20, 23, // Opcode: SRL16_MM
/* 103 */     MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 117
/* 108 */     MCD_OPC_CheckPredicate, 7, 22, 2, 0, // Skip to: 647
/* 113 */     MCD_OPC_Decode, 186, 14, 21, // Opcode: LHU16_MM
/* 117 */     MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 131
/* 122 */     MCD_OPC_CheckPredicate, 6, 8, 2, 0, // Skip to: 647
/* 127 */     MCD_OPC_Decode, 149, 6, 24, // Opcode: ANDI16_MM
/* 131 */     MCD_OPC_FilterValue, 17, 8, 1, 0, // Skip to: 400
/* 136 */     MCD_OPC_ExtractField, 6, 4,  // Inst{9-6} ...
/* 139 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 153
/* 144 */     MCD_OPC_CheckPredicate, 6, 242, 1, 0, // Skip to: 647
/* 149 */     MCD_OPC_Decode, 206, 17, 25, // Opcode: NOT16_MM
/* 153 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 167
/* 158 */     MCD_OPC_CheckPredicate, 6, 228, 1, 0, // Skip to: 647
/* 163 */     MCD_OPC_Decode, 136, 22, 26, // Opcode: XOR16_MM
/* 167 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 181
/* 172 */     MCD_OPC_CheckPredicate, 6, 214, 1, 0, // Skip to: 647
/* 177 */     MCD_OPC_Decode, 146, 6, 26, // Opcode: AND16_MM
/* 181 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 195
/* 186 */     MCD_OPC_CheckPredicate, 6, 200, 1, 0, // Skip to: 647
/* 191 */     MCD_OPC_Decode, 211, 17, 26, // Opcode: OR16_MM
/* 195 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 209
/* 200 */     MCD_OPC_CheckPredicate, 6, 186, 1, 0, // Skip to: 647
/* 205 */     MCD_OPC_Decode, 236, 14, 27, // Opcode: LWM16_MM
/* 209 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 223
/* 214 */     MCD_OPC_CheckPredicate, 6, 172, 1, 0, // Skip to: 647
/* 219 */     MCD_OPC_Decode, 142, 21, 27, // Opcode: SWM16_MM
/* 223 */     MCD_OPC_FilterValue, 6, 31, 0, 0, // Skip to: 259
/* 228 */     MCD_OPC_ExtractField, 5, 1,  // Inst{5} ...
/* 231 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 245
/* 236 */     MCD_OPC_CheckPredicate, 6, 150, 1, 0, // Skip to: 647
/* 241 */     MCD_OPC_Decode, 252, 13, 28, // Opcode: JR16_MM
/* 245 */     MCD_OPC_FilterValue, 1, 141, 1, 0, // Skip to: 647
/* 250 */     MCD_OPC_CheckPredicate, 6, 136, 1, 0, // Skip to: 647
/* 255 */     MCD_OPC_Decode, 255, 13, 28, // Opcode: JRC16_MM
/* 259 */     MCD_OPC_FilterValue, 7, 31, 0, 0, // Skip to: 295
/* 264 */     MCD_OPC_ExtractField, 5, 1,  // Inst{5} ...
/* 267 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 281
/* 272 */     MCD_OPC_CheckPredicate, 6, 114, 1, 0, // Skip to: 647
/* 277 */     MCD_OPC_Decode, 231, 13, 28, // Opcode: JALR16_MM
/* 281 */     MCD_OPC_FilterValue, 1, 105, 1, 0, // Skip to: 647
/* 286 */     MCD_OPC_CheckPredicate, 6, 100, 1, 0, // Skip to: 647
/* 291 */     MCD_OPC_Decode, 236, 13, 28, // Opcode: JALRS16_MM
/* 295 */     MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 316
/* 300 */     MCD_OPC_CheckPredicate, 6, 86, 1, 0, // Skip to: 647
/* 305 */     MCD_OPC_CheckField, 5, 1, 0, 79, 1, 0, // Skip to: 647
/* 312 */     MCD_OPC_Decode, 221, 15, 28, // Opcode: MFHI16_MM
/* 316 */     MCD_OPC_FilterValue, 9, 16, 0, 0, // Skip to: 337
/* 321 */     MCD_OPC_CheckPredicate, 6, 65, 1, 0, // Skip to: 647
/* 326 */     MCD_OPC_CheckField, 5, 1, 0, 58, 1, 0, // Skip to: 647
/* 333 */     MCD_OPC_Decode, 227, 15, 28, // Opcode: MFLO16_MM
/* 337 */     MCD_OPC_FilterValue, 10, 16, 0, 0, // Skip to: 358
/* 342 */     MCD_OPC_CheckPredicate, 6, 44, 1, 0, // Skip to: 647
/* 347 */     MCD_OPC_CheckField, 4, 2, 0, 37, 1, 0, // Skip to: 647
/* 354 */     MCD_OPC_Decode, 237, 7, 29, // Opcode: BREAK16_MM
/* 358 */     MCD_OPC_FilterValue, 11, 16, 0, 0, // Skip to: 379
/* 363 */     MCD_OPC_CheckPredicate, 6, 23, 1, 0, // Skip to: 647
/* 368 */     MCD_OPC_CheckField, 4, 2, 0, 16, 1, 0, // Skip to: 647
/* 375 */     MCD_OPC_Decode, 244, 18, 29, // Opcode: SDBBP16_MM
/* 379 */     MCD_OPC_FilterValue, 12, 7, 1, 0, // Skip to: 647
/* 384 */     MCD_OPC_CheckPredicate, 6, 2, 1, 0, // Skip to: 647
/* 389 */     MCD_OPC_CheckField, 5, 1, 0, 251, 0, 0, // Skip to: 647
/* 396 */     MCD_OPC_Decode, 254, 13, 30, // Opcode: JRADDIUSP
/* 400 */     MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 414
/* 405 */     MCD_OPC_CheckPredicate, 7, 237, 0, 0, // Skip to: 647
/* 410 */     MCD_OPC_Decode, 247, 14, 31, // Opcode: LWSP_MM
/* 414 */     MCD_OPC_FilterValue, 19, 31, 0, 0, // Skip to: 450
/* 419 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 422 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 436
/* 427 */     MCD_OPC_CheckPredicate, 7, 215, 0, 0, // Skip to: 647
/* 432 */     MCD_OPC_Decode, 200, 5, 32, // Opcode: ADDIUS5_MM
/* 436 */     MCD_OPC_FilterValue, 1, 206, 0, 0, // Skip to: 647
/* 441 */     MCD_OPC_CheckPredicate, 7, 201, 0, 0, // Skip to: 647
/* 446 */     MCD_OPC_Decode, 201, 5, 33, // Opcode: ADDIUSP_MM
/* 450 */     MCD_OPC_FilterValue, 25, 9, 0, 0, // Skip to: 464
/* 455 */     MCD_OPC_CheckPredicate, 7, 187, 0, 0, // Skip to: 647
/* 460 */     MCD_OPC_Decode, 230, 14, 34, // Opcode: LWGP_MM
/* 464 */     MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 478
/* 469 */     MCD_OPC_CheckPredicate, 7, 173, 0, 0, // Skip to: 647
/* 474 */     MCD_OPC_Decode, 218, 14, 21, // Opcode: LW16_MM
/* 478 */     MCD_OPC_FilterValue, 27, 31, 0, 0, // Skip to: 514
/* 483 */     MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 486 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 500
/* 491 */     MCD_OPC_CheckPredicate, 7, 151, 0, 0, // Skip to: 647
/* 496 */     MCD_OPC_Decode, 199, 5, 35, // Opcode: ADDIUR2_MM
/* 500 */     MCD_OPC_FilterValue, 1, 142, 0, 0, // Skip to: 647
/* 505 */     MCD_OPC_CheckPredicate, 7, 137, 0, 0, // Skip to: 647
/* 510 */     MCD_OPC_Decode, 198, 5, 36, // Opcode: ADDIUR1SP_MM
/* 514 */     MCD_OPC_FilterValue, 33, 16, 0, 0, // Skip to: 535
/* 519 */     MCD_OPC_CheckPredicate, 6, 123, 0, 0, // Skip to: 647
/* 524 */     MCD_OPC_CheckField, 0, 1, 0, 116, 0, 0, // Skip to: 647
/* 531 */     MCD_OPC_Decode, 149, 16, 37, // Opcode: MOVEP_MM
/* 535 */     MCD_OPC_FilterValue, 34, 9, 0, 0, // Skip to: 549
/* 540 */     MCD_OPC_CheckPredicate, 6, 102, 0, 0, // Skip to: 647
/* 545 */     MCD_OPC_Decode, 225, 18, 21, // Opcode: SB16_MM
/* 549 */     MCD_OPC_FilterValue, 35, 9, 0, 0, // Skip to: 563
/* 554 */     MCD_OPC_CheckPredicate, 6, 88, 0, 0, // Skip to: 647
/* 559 */     MCD_OPC_Decode, 240, 6, 38, // Opcode: BEQZ16_MM
/* 563 */     MCD_OPC_FilterValue, 42, 9, 0, 0, // Skip to: 577
/* 568 */     MCD_OPC_CheckPredicate, 6, 74, 0, 0, // Skip to: 647
/* 573 */     MCD_OPC_Decode, 162, 19, 21, // Opcode: SH16_MM
/* 577 */     MCD_OPC_FilterValue, 43, 9, 0, 0, // Skip to: 591
/* 582 */     MCD_OPC_CheckPredicate, 6, 60, 0, 0, // Skip to: 647
/* 587 */     MCD_OPC_Decode, 215, 7, 38, // Opcode: BNEZ16_MM
/* 591 */     MCD_OPC_FilterValue, 50, 9, 0, 0, // Skip to: 605
/* 596 */     MCD_OPC_CheckPredicate, 6, 46, 0, 0, // Skip to: 647
/* 601 */     MCD_OPC_Decode, 151, 21, 31, // Opcode: SWSP_MM
/* 605 */     MCD_OPC_FilterValue, 51, 9, 0, 0, // Skip to: 619
/* 610 */     MCD_OPC_CheckPredicate, 7, 32, 0, 0, // Skip to: 647
/* 615 */     MCD_OPC_Decode, 198, 6, 39, // Opcode: B16_MM
/* 619 */     MCD_OPC_FilterValue, 58, 9, 0, 0, // Skip to: 633
/* 624 */     MCD_OPC_CheckPredicate, 6, 18, 0, 0, // Skip to: 647
/* 629 */     MCD_OPC_Decode, 252, 20, 21, // Opcode: SW16_MM
/* 633 */     MCD_OPC_FilterValue, 59, 9, 0, 0, // Skip to: 647
/* 638 */     MCD_OPC_CheckPredicate, 6, 4, 0, 0, // Skip to: 647
/* 643 */     MCD_OPC_Decode, 195, 14, 40, // Opcode: LI16_MM
/* 647 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMips32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 238, 14, 0, // Skip to: 3830
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 104, 0, 0, // Skip to: 120
/* 16 */      MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 19 */      MCD_OPC_FilterValue, 0, 54, 0, 0, // Skip to: 78
/* 24 */      MCD_OPC_ExtractField, 11, 15,  // Inst{25-11} ...
/* 27 */      MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 41
/* 32 */      MCD_OPC_CheckPredicate, 7, 32, 0, 0, // Skip to: 69
/* 37 */      MCD_OPC_Decode, 184, 20, 0, // Opcode: SSNOP_MM
/* 41 */      MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 55
/* 46 */      MCD_OPC_CheckPredicate, 7, 18, 0, 0, // Skip to: 69
/* 51 */      MCD_OPC_Decode, 213, 11, 0, // Opcode: EHB_MM
/* 55 */      MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 69
/* 60 */      MCD_OPC_CheckPredicate, 7, 4, 0, 0, // Skip to: 69
/* 65 */      MCD_OPC_Decode, 226, 17, 0, // Opcode: PAUSE_MM
/* 69 */      MCD_OPC_CheckPredicate, 7, 42, 25, 0, // Skip to: 6516
/* 74 */      MCD_OPC_Decode, 244, 19, 41, // Opcode: SLL_MM
/* 78 */      MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 92
/* 83 */      MCD_OPC_CheckPredicate, 7, 28, 25, 0, // Skip to: 6516
/* 88 */      MCD_OPC_Decode, 181, 20, 41, // Opcode: SRL_MM
/* 92 */      MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 106
/* 97 */      MCD_OPC_CheckPredicate, 7, 14, 25, 0, // Skip to: 6516
/* 102 */     MCD_OPC_Decode, 159, 20, 41, // Opcode: SRA_MM
/* 106 */     MCD_OPC_FilterValue, 3, 5, 25, 0, // Skip to: 6516
/* 111 */     MCD_OPC_CheckPredicate, 7, 0, 25, 0, // Skip to: 6516
/* 116 */     MCD_OPC_Decode, 194, 18, 41, // Opcode: ROTR_MM
/* 120 */     MCD_OPC_FilterValue, 5, 227, 0, 0, // Skip to: 352
/* 125 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 128 */     MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 149
/* 133 */     MCD_OPC_CheckPredicate, 8, 234, 24, 0, // Skip to: 6516
/* 138 */     MCD_OPC_CheckField, 11, 5, 0, 227, 24, 0, // Skip to: 6516
/* 145 */     MCD_OPC_Decode, 239, 8, 42, // Opcode: CMP_EQ_PH_MM
/* 149 */     MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 170
/* 154 */     MCD_OPC_CheckPredicate, 8, 213, 24, 0, // Skip to: 6516
/* 159 */     MCD_OPC_CheckField, 11, 5, 0, 206, 24, 0, // Skip to: 6516
/* 166 */     MCD_OPC_Decode, 253, 8, 42, // Opcode: CMP_LT_PH_MM
/* 170 */     MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 191
/* 175 */     MCD_OPC_CheckPredicate, 8, 192, 24, 0, // Skip to: 6516
/* 180 */     MCD_OPC_CheckField, 11, 5, 0, 185, 24, 0, // Skip to: 6516
/* 187 */     MCD_OPC_Decode, 247, 8, 42, // Opcode: CMP_LE_PH_MM
/* 191 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 205
/* 196 */     MCD_OPC_CheckPredicate, 9, 171, 24, 0, // Skip to: 6516
/* 201 */     MCD_OPC_Decode, 217, 8, 43, // Opcode: CMPGDU_EQ_QB_MMR2
/* 205 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 219
/* 210 */     MCD_OPC_CheckPredicate, 9, 157, 24, 0, // Skip to: 6516
/* 215 */     MCD_OPC_Decode, 221, 8, 43, // Opcode: CMPGDU_LT_QB_MMR2
/* 219 */     MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 233
/* 224 */     MCD_OPC_CheckPredicate, 9, 143, 24, 0, // Skip to: 6516
/* 229 */     MCD_OPC_Decode, 219, 8, 43, // Opcode: CMPGDU_LE_QB_MMR2
/* 233 */     MCD_OPC_FilterValue, 9, 16, 0, 0, // Skip to: 254
/* 238 */     MCD_OPC_CheckPredicate, 8, 129, 24, 0, // Skip to: 6516
/* 243 */     MCD_OPC_CheckField, 11, 5, 0, 122, 24, 0, // Skip to: 6516
/* 250 */     MCD_OPC_Decode, 229, 8, 42, // Opcode: CMPU_EQ_QB_MM
/* 254 */     MCD_OPC_FilterValue, 10, 16, 0, 0, // Skip to: 275
/* 259 */     MCD_OPC_CheckPredicate, 8, 108, 24, 0, // Skip to: 6516
/* 264 */     MCD_OPC_CheckField, 11, 5, 0, 101, 24, 0, // Skip to: 6516
/* 271 */     MCD_OPC_Decode, 233, 8, 42, // Opcode: CMPU_LT_QB_MM
/* 275 */     MCD_OPC_FilterValue, 11, 16, 0, 0, // Skip to: 296
/* 280 */     MCD_OPC_CheckPredicate, 8, 87, 24, 0, // Skip to: 6516
/* 285 */     MCD_OPC_CheckField, 11, 5, 0, 80, 24, 0, // Skip to: 6516
/* 292 */     MCD_OPC_Decode, 231, 8, 42, // Opcode: CMPU_LE_QB_MM
/* 296 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 310
/* 301 */     MCD_OPC_CheckPredicate, 8, 66, 24, 0, // Skip to: 6516
/* 306 */     MCD_OPC_Decode, 216, 5, 44, // Opcode: ADDQ_S_W_MM
/* 310 */     MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 324
/* 315 */     MCD_OPC_CheckPredicate, 8, 52, 24, 0, // Skip to: 6516
/* 320 */     MCD_OPC_Decode, 204, 20, 44, // Opcode: SUBQ_S_W_MM
/* 324 */     MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 338
/* 329 */     MCD_OPC_CheckPredicate, 8, 38, 24, 0, // Skip to: 6516
/* 334 */     MCD_OPC_Decode, 219, 5, 44, // Opcode: ADDSC_MM
/* 338 */     MCD_OPC_FilterValue, 15, 29, 24, 0, // Skip to: 6516
/* 343 */     MCD_OPC_CheckPredicate, 8, 24, 24, 0, // Skip to: 6516
/* 348 */     MCD_OPC_Decode, 128, 6, 44, // Opcode: ADDWC_MM
/* 352 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 366
/* 357 */     MCD_OPC_CheckPredicate, 7, 10, 24, 0, // Skip to: 6516
/* 362 */     MCD_OPC_Decode, 239, 7, 45, // Opcode: BREAK_MM
/* 366 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 380
/* 371 */     MCD_OPC_CheckPredicate, 6, 252, 23, 0, // Skip to: 6516
/* 376 */     MCD_OPC_Decode, 226, 13, 46, // Opcode: INS_MM
/* 380 */     MCD_OPC_FilterValue, 13, 167, 1, 0, // Skip to: 808
/* 385 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 388 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 402
/* 393 */     MCD_OPC_CheckPredicate, 8, 230, 23, 0, // Skip to: 6516
/* 398 */     MCD_OPC_Decode, 212, 5, 47, // Opcode: ADDQ_PH_MM
/* 402 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 416
/* 407 */     MCD_OPC_CheckPredicate, 9, 216, 23, 0, // Skip to: 6516
/* 412 */     MCD_OPC_Decode, 204, 5, 47, // Opcode: ADDQH_PH_MMR2
/* 416 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 430
/* 421 */     MCD_OPC_CheckPredicate, 9, 202, 23, 0, // Skip to: 6516
/* 426 */     MCD_OPC_Decode, 210, 5, 44, // Opcode: ADDQH_W_MMR2
/* 430 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 444
/* 435 */     MCD_OPC_CheckPredicate, 8, 188, 23, 0, // Skip to: 6516
/* 440 */     MCD_OPC_Decode, 242, 5, 47, // Opcode: ADDU_QB_MM
/* 444 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 458
/* 449 */     MCD_OPC_CheckPredicate, 9, 174, 23, 0, // Skip to: 6516
/* 454 */     MCD_OPC_Decode, 240, 5, 47, // Opcode: ADDU_PH_MMR2
/* 458 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 472
/* 463 */     MCD_OPC_CheckPredicate, 9, 160, 23, 0, // Skip to: 6516
/* 468 */     MCD_OPC_Decode, 235, 5, 47, // Opcode: ADDUH_QB_MMR2
/* 472 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 486
/* 477 */     MCD_OPC_CheckPredicate, 8, 146, 23, 0, // Skip to: 6516
/* 482 */     MCD_OPC_Decode, 191, 19, 48, // Opcode: SHRAV_PH_MM
/* 486 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 500
/* 491 */     MCD_OPC_CheckPredicate, 9, 132, 23, 0, // Skip to: 6516
/* 496 */     MCD_OPC_Decode, 193, 19, 48, // Opcode: SHRAV_QB_MMR2
/* 500 */     MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 514
/* 505 */     MCD_OPC_CheckPredicate, 8, 118, 23, 0, // Skip to: 6516
/* 510 */     MCD_OPC_Decode, 200, 20, 47, // Opcode: SUBQ_PH_MM
/* 514 */     MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 528
/* 519 */     MCD_OPC_CheckPredicate, 9, 104, 23, 0, // Skip to: 6516
/* 524 */     MCD_OPC_Decode, 192, 20, 47, // Opcode: SUBQH_PH_MMR2
/* 528 */     MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 542
/* 533 */     MCD_OPC_CheckPredicate, 9, 90, 23, 0, // Skip to: 6516
/* 538 */     MCD_OPC_Decode, 198, 20, 44, // Opcode: SUBQH_W_MMR2
/* 542 */     MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 556
/* 547 */     MCD_OPC_CheckPredicate, 8, 76, 23, 0, // Skip to: 6516
/* 552 */     MCD_OPC_Decode, 231, 20, 47, // Opcode: SUBU_QB_MM
/* 556 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 570
/* 561 */     MCD_OPC_CheckPredicate, 9, 62, 23, 0, // Skip to: 6516
/* 566 */     MCD_OPC_Decode, 229, 20, 47, // Opcode: SUBU_PH_MMR2
/* 570 */     MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 584
/* 575 */     MCD_OPC_CheckPredicate, 9, 48, 23, 0, // Skip to: 6516
/* 580 */     MCD_OPC_Decode, 224, 20, 47, // Opcode: SUBUH_QB_MMR2
/* 584 */     MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 598
/* 589 */     MCD_OPC_CheckPredicate, 9, 34, 23, 0, // Skip to: 6516
/* 594 */     MCD_OPC_Decode, 150, 18, 49, // Opcode: PRECR_SRA_PH_W_MMR2
/* 598 */     MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 612
/* 603 */     MCD_OPC_CheckPredicate, 8, 20, 23, 0, // Skip to: 6516
/* 608 */     MCD_OPC_Decode, 214, 5, 47, // Opcode: ADDQ_S_PH_MM
/* 612 */     MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 626
/* 617 */     MCD_OPC_CheckPredicate, 9, 6, 23, 0, // Skip to: 6516
/* 622 */     MCD_OPC_Decode, 206, 5, 47, // Opcode: ADDQH_R_PH_MMR2
/* 626 */     MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 640
/* 631 */     MCD_OPC_CheckPredicate, 9, 248, 22, 0, // Skip to: 6516
/* 636 */     MCD_OPC_Decode, 208, 5, 44, // Opcode: ADDQH_R_W_MMR2
/* 640 */     MCD_OPC_FilterValue, 19, 9, 0, 0, // Skip to: 654
/* 645 */     MCD_OPC_CheckPredicate, 8, 234, 22, 0, // Skip to: 6516
/* 650 */     MCD_OPC_Decode, 246, 5, 47, // Opcode: ADDU_S_QB_MM
/* 654 */     MCD_OPC_FilterValue, 20, 9, 0, 0, // Skip to: 668
/* 659 */     MCD_OPC_CheckPredicate, 9, 220, 22, 0, // Skip to: 6516
/* 664 */     MCD_OPC_Decode, 244, 5, 47, // Opcode: ADDU_S_PH_MMR2
/* 668 */     MCD_OPC_FilterValue, 21, 9, 0, 0, // Skip to: 682
/* 673 */     MCD_OPC_CheckPredicate, 9, 206, 22, 0, // Skip to: 6516
/* 678 */     MCD_OPC_Decode, 237, 5, 47, // Opcode: ADDUH_R_QB_MMR2
/* 682 */     MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 696
/* 687 */     MCD_OPC_CheckPredicate, 8, 192, 22, 0, // Skip to: 6516
/* 692 */     MCD_OPC_Decode, 195, 19, 48, // Opcode: SHRAV_R_PH_MM
/* 696 */     MCD_OPC_FilterValue, 23, 9, 0, 0, // Skip to: 710
/* 701 */     MCD_OPC_CheckPredicate, 9, 178, 22, 0, // Skip to: 6516
/* 706 */     MCD_OPC_Decode, 197, 19, 48, // Opcode: SHRAV_R_QB_MMR2
/* 710 */     MCD_OPC_FilterValue, 24, 9, 0, 0, // Skip to: 724
/* 715 */     MCD_OPC_CheckPredicate, 8, 164, 22, 0, // Skip to: 6516
/* 720 */     MCD_OPC_Decode, 202, 20, 47, // Opcode: SUBQ_S_PH_MM
/* 724 */     MCD_OPC_FilterValue, 25, 9, 0, 0, // Skip to: 738
/* 729 */     MCD_OPC_CheckPredicate, 9, 150, 22, 0, // Skip to: 6516
/* 734 */     MCD_OPC_Decode, 194, 20, 47, // Opcode: SUBQH_R_PH_MMR2
/* 738 */     MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 752
/* 743 */     MCD_OPC_CheckPredicate, 9, 136, 22, 0, // Skip to: 6516
/* 748 */     MCD_OPC_Decode, 196, 20, 44, // Opcode: SUBQH_R_W_MMR2
/* 752 */     MCD_OPC_FilterValue, 27, 9, 0, 0, // Skip to: 766
/* 757 */     MCD_OPC_CheckPredicate, 8, 122, 22, 0, // Skip to: 6516
/* 762 */     MCD_OPC_Decode, 235, 20, 47, // Opcode: SUBU_S_QB_MM
/* 766 */     MCD_OPC_FilterValue, 28, 9, 0, 0, // Skip to: 780
/* 771 */     MCD_OPC_CheckPredicate, 9, 108, 22, 0, // Skip to: 6516
/* 776 */     MCD_OPC_Decode, 233, 20, 47, // Opcode: SUBU_S_PH_MMR2
/* 780 */     MCD_OPC_FilterValue, 29, 9, 0, 0, // Skip to: 794
/* 785 */     MCD_OPC_CheckPredicate, 9, 94, 22, 0, // Skip to: 6516
/* 790 */     MCD_OPC_Decode, 226, 20, 47, // Opcode: SUBUH_R_QB_MMR2
/* 794 */     MCD_OPC_FilterValue, 31, 85, 22, 0, // Skip to: 6516
/* 799 */     MCD_OPC_CheckPredicate, 9, 80, 22, 0, // Skip to: 6516
/* 804 */     MCD_OPC_Decode, 152, 18, 49, // Opcode: PRECR_SRA_R_PH_W_MMR2
/* 808 */     MCD_OPC_FilterValue, 14, 31, 0, 0, // Skip to: 844
/* 813 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 816 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 830
/* 821 */     MCD_OPC_CheckPredicate, 8, 58, 22, 0, // Skip to: 6516
/* 826 */     MCD_OPC_Decode, 175, 19, 48, // Opcode: SHLLV_PH_MM
/* 830 */     MCD_OPC_FilterValue, 16, 49, 22, 0, // Skip to: 6516
/* 835 */     MCD_OPC_CheckPredicate, 8, 44, 22, 0, // Skip to: 6516
/* 840 */     MCD_OPC_Decode, 179, 19, 48, // Opcode: SHLLV_S_PH_MM
/* 844 */     MCD_OPC_FilterValue, 16, 213, 0, 0, // Skip to: 1062
/* 849 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 852 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 866
/* 857 */     MCD_OPC_CheckPredicate, 7, 22, 22, 0, // Skip to: 6516
/* 862 */     MCD_OPC_Decode, 240, 19, 50, // Opcode: SLLV_MM
/* 866 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 880
/* 871 */     MCD_OPC_CheckPredicate, 7, 8, 22, 0, // Skip to: 6516
/* 876 */     MCD_OPC_Decode, 177, 20, 50, // Opcode: SRLV_MM
/* 880 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 894
/* 885 */     MCD_OPC_CheckPredicate, 7, 250, 21, 0, // Skip to: 6516
/* 890 */     MCD_OPC_Decode, 155, 20, 50, // Opcode: SRAV_MM
/* 894 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 908
/* 899 */     MCD_OPC_CheckPredicate, 7, 236, 21, 0, // Skip to: 6516
/* 904 */     MCD_OPC_Decode, 193, 18, 50, // Opcode: ROTRV_MM
/* 908 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 922
/* 913 */     MCD_OPC_CheckPredicate, 6, 222, 21, 0, // Skip to: 6516
/* 918 */     MCD_OPC_Decode, 133, 6, 44, // Opcode: ADD_MM
/* 922 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 936
/* 927 */     MCD_OPC_CheckPredicate, 6, 208, 21, 0, // Skip to: 6516
/* 932 */     MCD_OPC_Decode, 140, 6, 44, // Opcode: ADDu_MM
/* 936 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 950
/* 941 */     MCD_OPC_CheckPredicate, 6, 194, 21, 0, // Skip to: 6516
/* 946 */     MCD_OPC_Decode, 244, 20, 44, // Opcode: SUB_MM
/* 950 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 964
/* 955 */     MCD_OPC_CheckPredicate, 6, 180, 21, 0, // Skip to: 6516
/* 960 */     MCD_OPC_Decode, 247, 20, 44, // Opcode: SUBu_MM
/* 964 */     MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 978
/* 969 */     MCD_OPC_CheckPredicate, 6, 166, 21, 0, // Skip to: 6516
/* 974 */     MCD_OPC_Decode, 169, 17, 44, // Opcode: MUL_MM
/* 978 */     MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 992
/* 983 */     MCD_OPC_CheckPredicate, 6, 152, 21, 0, // Skip to: 6516
/* 988 */     MCD_OPC_Decode, 153, 6, 44, // Opcode: AND_MM
/* 992 */     MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 1006
/* 997 */     MCD_OPC_CheckPredicate, 6, 138, 21, 0, // Skip to: 6516
/* 1002 */    MCD_OPC_Decode, 216, 17, 44, // Opcode: OR_MM
/* 1006 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 1020
/* 1011 */    MCD_OPC_CheckPredicate, 6, 124, 21, 0, // Skip to: 6516
/* 1016 */    MCD_OPC_Decode, 203, 17, 44, // Opcode: NOR_MM
/* 1020 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 1034
/* 1025 */    MCD_OPC_CheckPredicate, 6, 110, 21, 0, // Skip to: 6516
/* 1030 */    MCD_OPC_Decode, 141, 22, 44, // Opcode: XOR_MM
/* 1034 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 1048
/* 1039 */    MCD_OPC_CheckPredicate, 7, 96, 21, 0, // Skip to: 6516
/* 1044 */    MCD_OPC_Decode, 249, 19, 44, // Opcode: SLT_MM
/* 1048 */    MCD_OPC_FilterValue, 14, 87, 21, 0, // Skip to: 6516
/* 1053 */    MCD_OPC_CheckPredicate, 7, 82, 21, 0, // Skip to: 6516
/* 1058 */    MCD_OPC_Decode, 130, 20, 44, // Opcode: SLTu_MM
/* 1062 */    MCD_OPC_FilterValue, 21, 199, 0, 0, // Skip to: 1266
/* 1067 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1070 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 1084
/* 1075 */    MCD_OPC_CheckPredicate, 8, 60, 21, 0, // Skip to: 6516
/* 1080 */    MCD_OPC_Decode, 137, 17, 47, // Opcode: MULEU_S_PH_QBL_MM
/* 1084 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 1098
/* 1089 */    MCD_OPC_CheckPredicate, 8, 46, 21, 0, // Skip to: 6516
/* 1094 */    MCD_OPC_Decode, 139, 17, 47, // Opcode: MULEU_S_PH_QBR_MM
/* 1098 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 1112
/* 1103 */    MCD_OPC_CheckPredicate, 8, 32, 21, 0, // Skip to: 6516
/* 1108 */    MCD_OPC_Decode, 141, 17, 47, // Opcode: MULQ_RS_PH_MM
/* 1112 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 1126
/* 1117 */    MCD_OPC_CheckPredicate, 9, 18, 21, 0, // Skip to: 6516
/* 1122 */    MCD_OPC_Decode, 145, 17, 47, // Opcode: MULQ_S_PH_MMR2
/* 1126 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 1140
/* 1131 */    MCD_OPC_CheckPredicate, 9, 4, 21, 0, // Skip to: 6516
/* 1136 */    MCD_OPC_Decode, 143, 17, 44, // Opcode: MULQ_RS_W_MMR2
/* 1140 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 1154
/* 1145 */    MCD_OPC_CheckPredicate, 9, 246, 20, 0, // Skip to: 6516
/* 1150 */    MCD_OPC_Decode, 147, 17, 44, // Opcode: MULQ_S_W_MMR2
/* 1154 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 1168
/* 1159 */    MCD_OPC_CheckPredicate, 9, 232, 20, 0, // Skip to: 6516
/* 1164 */    MCD_OPC_Decode, 160, 6, 51, // Opcode: APPEND_MMR2
/* 1168 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 1182
/* 1173 */    MCD_OPC_CheckPredicate, 9, 218, 20, 0, // Skip to: 6516
/* 1178 */    MCD_OPC_Decode, 161, 18, 51, // Opcode: PREPEND_MMR2
/* 1182 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 1196
/* 1187 */    MCD_OPC_CheckPredicate, 8, 204, 20, 0, // Skip to: 6516
/* 1192 */    MCD_OPC_Decode, 135, 16, 44, // Opcode: MODSUB_MM
/* 1196 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 1210
/* 1201 */    MCD_OPC_CheckPredicate, 8, 190, 20, 0, // Skip to: 6516
/* 1206 */    MCD_OPC_Decode, 199, 19, 50, // Opcode: SHRAV_R_W_MM
/* 1210 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 1224
/* 1215 */    MCD_OPC_CheckPredicate, 9, 176, 20, 0, // Skip to: 6516
/* 1220 */    MCD_OPC_Decode, 211, 19, 48, // Opcode: SHRLV_PH_MMR2
/* 1224 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 1238
/* 1229 */    MCD_OPC_CheckPredicate, 8, 162, 20, 0, // Skip to: 6516
/* 1234 */    MCD_OPC_Decode, 213, 19, 48, // Opcode: SHRLV_QB_MM
/* 1238 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 1252
/* 1243 */    MCD_OPC_CheckPredicate, 8, 148, 20, 0, // Skip to: 6516
/* 1248 */    MCD_OPC_Decode, 177, 19, 48, // Opcode: SHLLV_QB_MM
/* 1252 */    MCD_OPC_FilterValue, 15, 139, 20, 0, // Skip to: 6516
/* 1257 */    MCD_OPC_CheckPredicate, 8, 134, 20, 0, // Skip to: 6516
/* 1262 */    MCD_OPC_Decode, 181, 19, 50, // Opcode: SHLLV_S_W_MM
/* 1266 */    MCD_OPC_FilterValue, 24, 45, 0, 0, // Skip to: 1316
/* 1271 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1274 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1288
/* 1279 */    MCD_OPC_CheckPredicate, 6, 112, 20, 0, // Skip to: 6516
/* 1284 */    MCD_OPC_Decode, 169, 16, 52, // Opcode: MOVN_I_MM
/* 1288 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1302
/* 1293 */    MCD_OPC_CheckPredicate, 6, 98, 20, 0, // Skip to: 6516
/* 1298 */    MCD_OPC_Decode, 189, 16, 52, // Opcode: MOVZ_I_MM
/* 1302 */    MCD_OPC_FilterValue, 4, 89, 20, 0, // Skip to: 6516
/* 1307 */    MCD_OPC_CheckPredicate, 7, 84, 20, 0, // Skip to: 6516
/* 1312 */    MCD_OPC_Decode, 253, 14, 53, // Opcode: LWXS_MM
/* 1316 */    MCD_OPC_FilterValue, 29, 23, 0, 0, // Skip to: 1344
/* 1321 */    MCD_OPC_CheckPredicate, 8, 70, 20, 0, // Skip to: 6516
/* 1326 */    MCD_OPC_CheckField, 22, 4, 0, 63, 20, 0, // Skip to: 6516
/* 1333 */    MCD_OPC_CheckField, 6, 8, 0, 56, 20, 0, // Skip to: 6516
/* 1340 */    MCD_OPC_Decode, 173, 19, 54, // Opcode: SHILO_MM
/* 1344 */    MCD_OPC_FilterValue, 37, 73, 0, 0, // Skip to: 1422
/* 1349 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1352 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1366
/* 1357 */    MCD_OPC_CheckPredicate, 8, 34, 20, 0, // Skip to: 6516
/* 1362 */    MCD_OPC_Decode, 133, 17, 43, // Opcode: MULEQ_S_W_PHL_MM
/* 1366 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1380
/* 1371 */    MCD_OPC_CheckPredicate, 8, 20, 20, 0, // Skip to: 6516
/* 1376 */    MCD_OPC_Decode, 135, 17, 43, // Opcode: MULEQ_S_W_PHR_MM
/* 1380 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 1394
/* 1385 */    MCD_OPC_CheckPredicate, 8, 6, 20, 0, // Skip to: 6516
/* 1390 */    MCD_OPC_Decode, 188, 14, 53, // Opcode: LHX_MM
/* 1394 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 1408
/* 1399 */    MCD_OPC_CheckPredicate, 8, 248, 19, 0, // Skip to: 6516
/* 1404 */    MCD_OPC_Decode, 254, 14, 53, // Opcode: LWX_MM
/* 1408 */    MCD_OPC_FilterValue, 8, 239, 19, 0, // Skip to: 6516
/* 1413 */    MCD_OPC_CheckPredicate, 8, 234, 19, 0, // Skip to: 6516
/* 1418 */    MCD_OPC_Decode, 148, 14, 53, // Opcode: LBUX_MM
/* 1422 */    MCD_OPC_FilterValue, 44, 9, 0, 0, // Skip to: 1436
/* 1427 */    MCD_OPC_CheckPredicate, 6, 220, 19, 0, // Skip to: 6516
/* 1432 */    MCD_OPC_Decode, 254, 11, 55, // Opcode: EXT_MM
/* 1436 */    MCD_OPC_FilterValue, 45, 143, 0, 0, // Skip to: 1584
/* 1441 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1444 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1458
/* 1449 */    MCD_OPC_CheckPredicate, 9, 198, 19, 0, // Skip to: 6516
/* 1454 */    MCD_OPC_Decode, 172, 17, 47, // Opcode: MUL_PH_MMR2
/* 1458 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1472
/* 1463 */    MCD_OPC_CheckPredicate, 9, 184, 19, 0, // Skip to: 6516
/* 1468 */    MCD_OPC_Decode, 148, 18, 47, // Opcode: PRECR_QB_PH_MMR2
/* 1472 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 1486
/* 1477 */    MCD_OPC_CheckPredicate, 8, 170, 19, 0, // Skip to: 6516
/* 1482 */    MCD_OPC_Decode, 144, 18, 47, // Opcode: PRECRQ_QB_PH_MM
/* 1486 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 1500
/* 1491 */    MCD_OPC_CheckPredicate, 8, 156, 19, 0, // Skip to: 6516
/* 1496 */    MCD_OPC_Decode, 142, 18, 56, // Opcode: PRECRQ_PH_W_MM
/* 1500 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 1514
/* 1505 */    MCD_OPC_CheckPredicate, 8, 142, 19, 0, // Skip to: 6516
/* 1510 */    MCD_OPC_Decode, 146, 18, 56, // Opcode: PRECRQ_RS_PH_W_MM
/* 1514 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 1528
/* 1519 */    MCD_OPC_CheckPredicate, 8, 128, 19, 0, // Skip to: 6516
/* 1524 */    MCD_OPC_Decode, 140, 18, 47, // Opcode: PRECRQU_S_QB_PH_MM
/* 1528 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 1542
/* 1533 */    MCD_OPC_CheckPredicate, 8, 114, 19, 0, // Skip to: 6516
/* 1538 */    MCD_OPC_Decode, 224, 17, 47, // Opcode: PACKRL_PH_MM
/* 1542 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 1556
/* 1547 */    MCD_OPC_CheckPredicate, 8, 100, 19, 0, // Skip to: 6516
/* 1552 */    MCD_OPC_Decode, 243, 17, 47, // Opcode: PICK_QB_MM
/* 1556 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 1570
/* 1561 */    MCD_OPC_CheckPredicate, 8, 86, 19, 0, // Skip to: 6516
/* 1566 */    MCD_OPC_Decode, 241, 17, 47, // Opcode: PICK_PH_MM
/* 1570 */    MCD_OPC_FilterValue, 16, 77, 19, 0, // Skip to: 6516
/* 1575 */    MCD_OPC_CheckPredicate, 9, 72, 19, 0, // Skip to: 6516
/* 1580 */    MCD_OPC_Decode, 177, 17, 47, // Opcode: MUL_S_PH_MMR2
/* 1584 */    MCD_OPC_FilterValue, 52, 45, 0, 0, // Skip to: 1634
/* 1589 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1592 */    MCD_OPC_FilterValue, 19, 16, 0, 0, // Skip to: 1613
/* 1597 */    MCD_OPC_CheckPredicate, 10, 50, 19, 0, // Skip to: 6516
/* 1602 */    MCD_OPC_CheckField, 14, 2, 0, 43, 19, 0, // Skip to: 6516
/* 1609 */    MCD_OPC_Decode, 219, 15, 57, // Opcode: MFHGC0_MM
/* 1613 */    MCD_OPC_FilterValue, 27, 34, 19, 0, // Skip to: 6516
/* 1618 */    MCD_OPC_CheckPredicate, 10, 29, 19, 0, // Skip to: 6516
/* 1623 */    MCD_OPC_CheckField, 14, 2, 0, 22, 19, 0, // Skip to: 6516
/* 1630 */    MCD_OPC_Decode, 235, 16, 58, // Opcode: MTHGC0_MM
/* 1634 */    MCD_OPC_FilterValue, 53, 109, 0, 0, // Skip to: 1748
/* 1639 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1642 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 1656
/* 1647 */    MCD_OPC_CheckPredicate, 8, 0, 19, 0, // Skip to: 6516
/* 1652 */    MCD_OPC_Decode, 209, 19, 41, // Opcode: SHRA_R_W_MM
/* 1656 */    MCD_OPC_FilterValue, 12, 16, 0, 0, // Skip to: 1677
/* 1661 */    MCD_OPC_CheckPredicate, 8, 242, 18, 0, // Skip to: 6516
/* 1666 */    MCD_OPC_CheckField, 11, 1, 0, 235, 18, 0, // Skip to: 6516
/* 1673 */    MCD_OPC_Decode, 201, 19, 59, // Opcode: SHRA_PH_MM
/* 1677 */    MCD_OPC_FilterValue, 14, 31, 0, 0, // Skip to: 1713
/* 1682 */    MCD_OPC_ExtractField, 11, 1,  // Inst{11} ...
/* 1685 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1699
/* 1690 */    MCD_OPC_CheckPredicate, 8, 213, 18, 0, // Skip to: 6516
/* 1695 */    MCD_OPC_Decode, 183, 19, 59, // Opcode: SHLL_PH_MM
/* 1699 */    MCD_OPC_FilterValue, 1, 204, 18, 0, // Skip to: 6516
/* 1704 */    MCD_OPC_CheckPredicate, 8, 199, 18, 0, // Skip to: 6516
/* 1709 */    MCD_OPC_Decode, 187, 19, 59, // Opcode: SHLL_S_PH_MM
/* 1713 */    MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 1727
/* 1718 */    MCD_OPC_CheckPredicate, 8, 185, 18, 0, // Skip to: 6516
/* 1723 */    MCD_OPC_Decode, 189, 19, 41, // Opcode: SHLL_S_W_MM
/* 1727 */    MCD_OPC_FilterValue, 28, 176, 18, 0, // Skip to: 6516
/* 1732 */    MCD_OPC_CheckPredicate, 8, 171, 18, 0, // Skip to: 6516
/* 1737 */    MCD_OPC_CheckField, 11, 1, 0, 164, 18, 0, // Skip to: 6516
/* 1744 */    MCD_OPC_Decode, 205, 19, 59, // Opcode: SHRA_R_PH_MM
/* 1748 */    MCD_OPC_FilterValue, 60, 8, 8, 0, // Skip to: 3809
/* 1753 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1756 */    MCD_OPC_FilterValue, 0, 31, 0, 0, // Skip to: 1792
/* 1761 */    MCD_OPC_ExtractField, 11, 1,  // Inst{11} ...
/* 1764 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1778
/* 1769 */    MCD_OPC_CheckPredicate, 7, 134, 18, 0, // Skip to: 6516
/* 1774 */    MCD_OPC_Decode, 189, 21, 60, // Opcode: TEQ_MM
/* 1778 */    MCD_OPC_FilterValue, 1, 125, 18, 0, // Skip to: 6516
/* 1783 */    MCD_OPC_CheckPredicate, 7, 120, 18, 0, // Skip to: 6516
/* 1788 */    MCD_OPC_Decode, 228, 21, 60, // Opcode: TLT_MM
/* 1792 */    MCD_OPC_FilterValue, 1, 131, 0, 0, // Skip to: 1928
/* 1797 */    MCD_OPC_ExtractField, 11, 2,  // Inst{12-11} ...
/* 1800 */    MCD_OPC_FilterValue, 0, 45, 0, 0, // Skip to: 1850
/* 1805 */    MCD_OPC_ExtractField, 13, 1,  // Inst{13} ...
/* 1808 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 1829
/* 1813 */    MCD_OPC_CheckPredicate, 8, 90, 18, 0, // Skip to: 6516
/* 1818 */    MCD_OPC_CheckField, 21, 5, 0, 83, 18, 0, // Skip to: 6516
/* 1825 */    MCD_OPC_Decode, 224, 15, 61, // Opcode: MFHI_DSP_MM
/* 1829 */    MCD_OPC_FilterValue, 1, 74, 18, 0, // Skip to: 6516
/* 1834 */    MCD_OPC_CheckPredicate, 8, 69, 18, 0, // Skip to: 6516
/* 1839 */    MCD_OPC_CheckField, 21, 5, 0, 62, 18, 0, // Skip to: 6516
/* 1846 */    MCD_OPC_Decode, 239, 16, 62, // Opcode: MTHI_DSP_MM
/* 1850 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1864
/* 1855 */    MCD_OPC_CheckPredicate, 8, 48, 18, 0, // Skip to: 6516
/* 1860 */    MCD_OPC_Decode, 185, 19, 63, // Opcode: SHLL_QB_MM
/* 1864 */    MCD_OPC_FilterValue, 2, 45, 0, 0, // Skip to: 1914
/* 1869 */    MCD_OPC_ExtractField, 13, 1,  // Inst{13} ...
/* 1872 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 1893
/* 1877 */    MCD_OPC_CheckPredicate, 8, 26, 18, 0, // Skip to: 6516
/* 1882 */    MCD_OPC_CheckField, 21, 5, 0, 19, 18, 0, // Skip to: 6516
/* 1889 */    MCD_OPC_Decode, 230, 15, 61, // Opcode: MFLO_DSP_MM
/* 1893 */    MCD_OPC_FilterValue, 1, 10, 18, 0, // Skip to: 6516
/* 1898 */    MCD_OPC_CheckPredicate, 8, 5, 18, 0, // Skip to: 6516
/* 1903 */    MCD_OPC_CheckField, 21, 5, 0, 254, 17, 0, // Skip to: 6516
/* 1910 */    MCD_OPC_Decode, 246, 16, 64, // Opcode: MTLO_DSP_MM
/* 1914 */    MCD_OPC_FilterValue, 3, 245, 17, 0, // Skip to: 6516
/* 1919 */    MCD_OPC_CheckPredicate, 8, 240, 17, 0, // Skip to: 6516
/* 1924 */    MCD_OPC_Decode, 217, 19, 63, // Opcode: SHRL_QB_MM
/* 1928 */    MCD_OPC_FilterValue, 2, 101, 0, 0, // Skip to: 2034
/* 1933 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 1936 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1950
/* 1941 */    MCD_OPC_CheckPredicate, 9, 218, 17, 0, // Skip to: 6516
/* 1946 */    MCD_OPC_Decode, 164, 11, 65, // Opcode: DPA_W_PH_MMR2
/* 1950 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1964
/* 1955 */    MCD_OPC_CheckPredicate, 9, 204, 17, 0, // Skip to: 6516
/* 1960 */    MCD_OPC_Decode, 204, 6, 66, // Opcode: BALIGN_MMR2
/* 1964 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 1978
/* 1969 */    MCD_OPC_CheckPredicate, 9, 190, 17, 0, // Skip to: 6516
/* 1974 */    MCD_OPC_Decode, 162, 11, 65, // Opcode: DPAX_W_PH_MMR2
/* 1978 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 1992
/* 1983 */    MCD_OPC_CheckPredicate, 8, 176, 17, 0, // Skip to: 6516
/* 1988 */    MCD_OPC_Decode, 158, 11, 65, // Opcode: DPAU_H_QBL_MM
/* 1992 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 2006
/* 1997 */    MCD_OPC_CheckPredicate, 8, 162, 17, 0, // Skip to: 6516
/* 2002 */    MCD_OPC_Decode, 234, 11, 67, // Opcode: EXTPV_MM
/* 2006 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 2020
/* 2011 */    MCD_OPC_CheckPredicate, 8, 148, 17, 0, // Skip to: 6516
/* 2016 */    MCD_OPC_Decode, 160, 11, 65, // Opcode: DPAU_H_QBR_MM
/* 2020 */    MCD_OPC_FilterValue, 7, 139, 17, 0, // Skip to: 6516
/* 2025 */    MCD_OPC_CheckPredicate, 8, 134, 17, 0, // Skip to: 6516
/* 2030 */    MCD_OPC_Decode, 231, 11, 67, // Opcode: EXTPDPV_MM
/* 2034 */    MCD_OPC_FilterValue, 4, 171, 0, 0, // Skip to: 2210
/* 2039 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 2042 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2056
/* 2047 */    MCD_OPC_CheckPredicate, 9, 112, 17, 0, // Skip to: 6516
/* 2052 */    MCD_OPC_Decode, 191, 5, 68, // Opcode: ABSQ_S_QB_MMR2
/* 2056 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2070
/* 2061 */    MCD_OPC_CheckPredicate, 8, 98, 17, 0, // Skip to: 6516
/* 2066 */    MCD_OPC_Decode, 189, 5, 68, // Opcode: ABSQ_S_PH_MM
/* 2070 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 2084
/* 2075 */    MCD_OPC_CheckPredicate, 8, 84, 17, 0, // Skip to: 6516
/* 2080 */    MCD_OPC_Decode, 193, 5, 69, // Opcode: ABSQ_S_W_MM
/* 2084 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 2098
/* 2089 */    MCD_OPC_CheckPredicate, 8, 70, 17, 0, // Skip to: 6516
/* 2094 */    MCD_OPC_Decode, 166, 7, 69, // Opcode: BITREV_MM
/* 2098 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 2112
/* 2103 */    MCD_OPC_CheckPredicate, 8, 56, 17, 0, // Skip to: 6516
/* 2108 */    MCD_OPC_Decode, 225, 13, 70, // Opcode: INSV_MM
/* 2112 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 2126
/* 2117 */    MCD_OPC_CheckPredicate, 8, 42, 17, 0, // Skip to: 6516
/* 2122 */    MCD_OPC_Decode, 128, 18, 71, // Opcode: PRECEQ_W_PHL_MM
/* 2126 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 2140
/* 2131 */    MCD_OPC_CheckPredicate, 8, 28, 17, 0, // Skip to: 6516
/* 2136 */    MCD_OPC_Decode, 130, 18, 71, // Opcode: PRECEQ_W_PHR_MM
/* 2140 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 2154
/* 2145 */    MCD_OPC_CheckPredicate, 8, 14, 17, 0, // Skip to: 6516
/* 2150 */    MCD_OPC_Decode, 250, 17, 68, // Opcode: PRECEQU_PH_QBL_MM
/* 2154 */    MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 2168
/* 2159 */    MCD_OPC_CheckPredicate, 8, 0, 17, 0, // Skip to: 6516
/* 2164 */    MCD_OPC_Decode, 254, 17, 68, // Opcode: PRECEQU_PH_QBR_MM
/* 2168 */    MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 2182
/* 2173 */    MCD_OPC_CheckPredicate, 8, 242, 16, 0, // Skip to: 6516
/* 2178 */    MCD_OPC_Decode, 134, 18, 68, // Opcode: PRECEU_PH_QBL_MM
/* 2182 */    MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 2196
/* 2187 */    MCD_OPC_CheckPredicate, 8, 228, 16, 0, // Skip to: 6516
/* 2192 */    MCD_OPC_Decode, 138, 18, 68, // Opcode: PRECEU_PH_QBR_MM
/* 2196 */    MCD_OPC_FilterValue, 30, 219, 16, 0, // Skip to: 6516
/* 2201 */    MCD_OPC_CheckPredicate, 8, 214, 16, 0, // Skip to: 6516
/* 2206 */    MCD_OPC_Decode, 165, 18, 71, // Opcode: RADDU_W_QB_MM
/* 2210 */    MCD_OPC_FilterValue, 5, 87, 0, 0, // Skip to: 2302
/* 2215 */    MCD_OPC_ExtractField, 11, 15,  // Inst{25-11} ...
/* 2218 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2232
/* 2223 */    MCD_OPC_CheckPredicate, 10, 192, 16, 0, // Skip to: 6516
/* 2228 */    MCD_OPC_Decode, 203, 21, 0, // Opcode: TLBGP_MM
/* 2232 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2246
/* 2237 */    MCD_OPC_CheckPredicate, 10, 178, 16, 0, // Skip to: 6516
/* 2242 */    MCD_OPC_Decode, 205, 21, 0, // Opcode: TLBGR_MM
/* 2246 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 2260
/* 2251 */    MCD_OPC_CheckPredicate, 10, 164, 16, 0, // Skip to: 6516
/* 2256 */    MCD_OPC_Decode, 207, 21, 0, // Opcode: TLBGWI_MM
/* 2260 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 2274
/* 2265 */    MCD_OPC_CheckPredicate, 10, 150, 16, 0, // Skip to: 6516
/* 2270 */    MCD_OPC_Decode, 209, 21, 0, // Opcode: TLBGWR_MM
/* 2274 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 2288
/* 2279 */    MCD_OPC_CheckPredicate, 10, 136, 16, 0, // Skip to: 6516
/* 2284 */    MCD_OPC_Decode, 201, 21, 0, // Opcode: TLBGINV_MM
/* 2288 */    MCD_OPC_FilterValue, 10, 127, 16, 0, // Skip to: 6516
/* 2293 */    MCD_OPC_CheckPredicate, 10, 122, 16, 0, // Skip to: 6516
/* 2298 */    MCD_OPC_Decode, 200, 21, 0, // Opcode: TLBGINVF_MM
/* 2302 */    MCD_OPC_FilterValue, 7, 31, 0, 0, // Skip to: 2338
/* 2307 */    MCD_OPC_ExtractField, 11, 2,  // Inst{12-11} ...
/* 2310 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2324
/* 2315 */    MCD_OPC_CheckPredicate, 9, 100, 16, 0, // Skip to: 6516
/* 2320 */    MCD_OPC_Decode, 203, 19, 63, // Opcode: SHRA_QB_MMR2
/* 2324 */    MCD_OPC_FilterValue, 2, 91, 16, 0, // Skip to: 6516
/* 2329 */    MCD_OPC_CheckPredicate, 9, 86, 16, 0, // Skip to: 6516
/* 2334 */    MCD_OPC_Decode, 207, 19, 63, // Opcode: SHRA_R_QB_MMR2
/* 2338 */    MCD_OPC_FilterValue, 8, 31, 0, 0, // Skip to: 2374
/* 2343 */    MCD_OPC_ExtractField, 11, 1,  // Inst{11} ...
/* 2346 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2360
/* 2351 */    MCD_OPC_CheckPredicate, 7, 64, 16, 0, // Skip to: 6516
/* 2356 */    MCD_OPC_Decode, 197, 21, 60, // Opcode: TGE_MM
/* 2360 */    MCD_OPC_FilterValue, 1, 55, 16, 0, // Skip to: 6516
/* 2365 */    MCD_OPC_CheckPredicate, 7, 50, 16, 0, // Skip to: 6516
/* 2370 */    MCD_OPC_Decode, 227, 21, 60, // Opcode: TLTU_MM
/* 2374 */    MCD_OPC_FilterValue, 9, 101, 0, 0, // Skip to: 2480
/* 2379 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 2382 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 2403
/* 2387 */    MCD_OPC_CheckPredicate, 8, 28, 16, 0, // Skip to: 6516
/* 2392 */    MCD_OPC_CheckField, 21, 5, 0, 21, 16, 0, // Skip to: 6516
/* 2399 */    MCD_OPC_Decode, 242, 16, 72, // Opcode: MTHLIP_MM
/* 2403 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 2417
/* 2408 */    MCD_OPC_CheckPredicate, 8, 7, 16, 0, // Skip to: 6516
/* 2413 */    MCD_OPC_Decode, 173, 15, 65, // Opcode: MAQ_S_W_PHR_MM
/* 2417 */    MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 2438
/* 2422 */    MCD_OPC_CheckPredicate, 8, 249, 15, 0, // Skip to: 6516
/* 2427 */    MCD_OPC_CheckField, 21, 5, 0, 242, 15, 0, // Skip to: 6516
/* 2434 */    MCD_OPC_Decode, 172, 19, 72, // Opcode: SHILOV_MM
/* 2438 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 2452
/* 2443 */    MCD_OPC_CheckPredicate, 8, 228, 15, 0, // Skip to: 6516
/* 2448 */    MCD_OPC_Decode, 171, 15, 65, // Opcode: MAQ_S_W_PHL_MM
/* 2452 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 2466
/* 2457 */    MCD_OPC_CheckPredicate, 8, 214, 15, 0, // Skip to: 6516
/* 2462 */    MCD_OPC_Decode, 169, 15, 65, // Opcode: MAQ_SA_W_PHR_MM
/* 2466 */    MCD_OPC_FilterValue, 7, 205, 15, 0, // Skip to: 6516
/* 2471 */    MCD_OPC_CheckPredicate, 8, 200, 15, 0, // Skip to: 6516
/* 2476 */    MCD_OPC_Decode, 167, 15, 65, // Opcode: MAQ_SA_W_PHL_MM
/* 2480 */    MCD_OPC_FilterValue, 10, 115, 0, 0, // Skip to: 2600
/* 2485 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 2488 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2502
/* 2493 */    MCD_OPC_CheckPredicate, 8, 178, 15, 0, // Skip to: 6516
/* 2498 */    MCD_OPC_Decode, 156, 11, 65, // Opcode: DPAQ_S_W_PH_MM
/* 2502 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 2516
/* 2507 */    MCD_OPC_CheckPredicate, 8, 164, 15, 0, // Skip to: 6516
/* 2512 */    MCD_OPC_Decode, 160, 15, 65, // Opcode: MADD_DSP_MM
/* 2516 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2530
/* 2521 */    MCD_OPC_CheckPredicate, 8, 150, 15, 0, // Skip to: 6516
/* 2526 */    MCD_OPC_Decode, 154, 11, 65, // Opcode: DPAQ_SA_L_W_MM
/* 2530 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 2544
/* 2535 */    MCD_OPC_CheckPredicate, 8, 136, 15, 0, // Skip to: 6516
/* 2540 */    MCD_OPC_Decode, 150, 15, 65, // Opcode: MADDU_DSP_MM
/* 2544 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 2558
/* 2549 */    MCD_OPC_CheckPredicate, 9, 122, 15, 0, // Skip to: 6516
/* 2554 */    MCD_OPC_Decode, 152, 11, 65, // Opcode: DPAQX_S_W_PH_MMR2
/* 2558 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 2572
/* 2563 */    MCD_OPC_CheckPredicate, 8, 108, 15, 0, // Skip to: 6516
/* 2568 */    MCD_OPC_Decode, 211, 16, 65, // Opcode: MSUB_DSP_MM
/* 2572 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 2586
/* 2577 */    MCD_OPC_CheckPredicate, 9, 94, 15, 0, // Skip to: 6516
/* 2582 */    MCD_OPC_Decode, 150, 11, 65, // Opcode: DPAQX_SA_W_PH_MMR2
/* 2586 */    MCD_OPC_FilterValue, 7, 85, 15, 0, // Skip to: 6516
/* 2591 */    MCD_OPC_CheckPredicate, 8, 80, 15, 0, // Skip to: 6516
/* 2596 */    MCD_OPC_Decode, 201, 16, 65, // Opcode: MSUBU_DSP_MM
/* 2600 */    MCD_OPC_FilterValue, 12, 27, 1, 0, // Skip to: 2888
/* 2605 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 2608 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2622
/* 2613 */    MCD_OPC_CheckPredicate, 8, 58, 15, 0, // Skip to: 6516
/* 2618 */    MCD_OPC_Decode, 180, 18, 73, // Opcode: REPLV_PH_MM
/* 2622 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2636
/* 2627 */    MCD_OPC_CheckPredicate, 8, 44, 15, 0, // Skip to: 6516
/* 2632 */    MCD_OPC_Decode, 182, 18, 73, // Opcode: REPLV_QB_MM
/* 2636 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 2650
/* 2641 */    MCD_OPC_CheckPredicate, 7, 30, 15, 0, // Skip to: 6516
/* 2646 */    MCD_OPC_Decode, 137, 19, 69, // Opcode: SEB_MM
/* 2650 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 2664
/* 2655 */    MCD_OPC_CheckPredicate, 7, 16, 15, 0, // Skip to: 6516
/* 2660 */    MCD_OPC_Decode, 140, 19, 69, // Opcode: SEH_MM
/* 2664 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 2678
/* 2669 */    MCD_OPC_CheckPredicate, 7, 2, 15, 0, // Skip to: 6516
/* 2674 */    MCD_OPC_Decode, 193, 8, 69, // Opcode: CLO_MM
/* 2678 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 2692
/* 2683 */    MCD_OPC_CheckPredicate, 7, 244, 14, 0, // Skip to: 6516
/* 2688 */    MCD_OPC_Decode, 213, 8, 69, // Opcode: CLZ_MM
/* 2692 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 2706
/* 2697 */    MCD_OPC_CheckPredicate, 6, 230, 14, 0, // Skip to: 6516
/* 2702 */    MCD_OPC_Decode, 170, 18, 74, // Opcode: RDHWR_MM
/* 2706 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 2720
/* 2711 */    MCD_OPC_CheckPredicate, 8, 216, 14, 0, // Skip to: 6516
/* 2716 */    MCD_OPC_Decode, 249, 17, 68, // Opcode: PRECEQU_PH_QBLA_MM
/* 2720 */    MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 2734
/* 2725 */    MCD_OPC_CheckPredicate, 7, 202, 14, 0, // Skip to: 6516
/* 2730 */    MCD_OPC_Decode, 133, 22, 69, // Opcode: WSBH_MM
/* 2734 */    MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 2748
/* 2739 */    MCD_OPC_CheckPredicate, 6, 188, 14, 0, // Skip to: 6516
/* 2744 */    MCD_OPC_Decode, 160, 17, 75, // Opcode: MULT_MM
/* 2748 */    MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 2762
/* 2753 */    MCD_OPC_CheckPredicate, 8, 174, 14, 0, // Skip to: 6516
/* 2758 */    MCD_OPC_Decode, 253, 17, 68, // Opcode: PRECEQU_PH_QBRA_MM
/* 2762 */    MCD_OPC_FilterValue, 19, 9, 0, 0, // Skip to: 2776
/* 2767 */    MCD_OPC_CheckPredicate, 6, 160, 14, 0, // Skip to: 6516
/* 2772 */    MCD_OPC_Decode, 162, 17, 75, // Opcode: MULTu_MM
/* 2776 */    MCD_OPC_FilterValue, 21, 9, 0, 0, // Skip to: 2790
/* 2781 */    MCD_OPC_CheckPredicate, 6, 146, 14, 0, // Skip to: 6516
/* 2786 */    MCD_OPC_Decode, 130, 19, 75, // Opcode: SDIV_MM
/* 2790 */    MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 2804
/* 2795 */    MCD_OPC_CheckPredicate, 8, 132, 14, 0, // Skip to: 6516
/* 2800 */    MCD_OPC_Decode, 133, 18, 68, // Opcode: PRECEU_PH_QBLA_MM
/* 2804 */    MCD_OPC_FilterValue, 23, 9, 0, 0, // Skip to: 2818
/* 2809 */    MCD_OPC_CheckPredicate, 6, 118, 14, 0, // Skip to: 6516
/* 2814 */    MCD_OPC_Decode, 246, 21, 75, // Opcode: UDIV_MM
/* 2818 */    MCD_OPC_FilterValue, 25, 9, 0, 0, // Skip to: 2832
/* 2823 */    MCD_OPC_CheckPredicate, 6, 104, 14, 0, // Skip to: 6516
/* 2828 */    MCD_OPC_Decode, 161, 15, 75, // Opcode: MADD_MM
/* 2832 */    MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 2846
/* 2837 */    MCD_OPC_CheckPredicate, 8, 90, 14, 0, // Skip to: 6516
/* 2842 */    MCD_OPC_Decode, 137, 18, 68, // Opcode: PRECEU_PH_QBRA_MM
/* 2846 */    MCD_OPC_FilterValue, 27, 9, 0, 0, // Skip to: 2860
/* 2851 */    MCD_OPC_CheckPredicate, 6, 76, 14, 0, // Skip to: 6516
/* 2856 */    MCD_OPC_Decode, 151, 15, 75, // Opcode: MADDU_MM
/* 2860 */    MCD_OPC_FilterValue, 29, 9, 0, 0, // Skip to: 2874
/* 2865 */    MCD_OPC_CheckPredicate, 6, 62, 14, 0, // Skip to: 6516
/* 2870 */    MCD_OPC_Decode, 212, 16, 75, // Opcode: MSUB_MM
/* 2874 */    MCD_OPC_FilterValue, 31, 53, 14, 0, // Skip to: 6516
/* 2879 */    MCD_OPC_CheckPredicate, 6, 48, 14, 0, // Skip to: 6516
/* 2884 */    MCD_OPC_Decode, 202, 16, 75, // Opcode: MSUBU_MM
/* 2888 */    MCD_OPC_FilterValue, 13, 206, 0, 0, // Skip to: 3099
/* 2893 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 2896 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 2917
/* 2901 */    MCD_OPC_CheckPredicate, 7, 26, 14, 0, // Skip to: 6516
/* 2906 */    MCD_OPC_CheckField, 16, 10, 0, 19, 14, 0, // Skip to: 6516
/* 2913 */    MCD_OPC_Decode, 215, 21, 0, // Opcode: TLBP_MM
/* 2917 */    MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 2938
/* 2922 */    MCD_OPC_CheckPredicate, 7, 5, 14, 0, // Skip to: 6516
/* 2927 */    MCD_OPC_CheckField, 16, 10, 0, 254, 13, 0, // Skip to: 6516
/* 2934 */    MCD_OPC_Decode, 217, 21, 0, // Opcode: TLBR_MM
/* 2938 */    MCD_OPC_FilterValue, 4, 16, 0, 0, // Skip to: 2959
/* 2943 */    MCD_OPC_CheckPredicate, 7, 240, 13, 0, // Skip to: 6516
/* 2948 */    MCD_OPC_CheckField, 16, 10, 0, 233, 13, 0, // Skip to: 6516
/* 2955 */    MCD_OPC_Decode, 219, 21, 0, // Opcode: TLBWI_MM
/* 2959 */    MCD_OPC_FilterValue, 6, 16, 0, 0, // Skip to: 2980
/* 2964 */    MCD_OPC_CheckPredicate, 7, 219, 13, 0, // Skip to: 6516
/* 2969 */    MCD_OPC_CheckField, 16, 10, 0, 212, 13, 0, // Skip to: 6516
/* 2976 */    MCD_OPC_Decode, 221, 21, 0, // Opcode: TLBWR_MM
/* 2980 */    MCD_OPC_FilterValue, 13, 16, 0, 0, // Skip to: 3001
/* 2985 */    MCD_OPC_CheckPredicate, 7, 198, 13, 0, // Skip to: 6516
/* 2990 */    MCD_OPC_CheckField, 21, 5, 0, 191, 13, 0, // Skip to: 6516
/* 2997 */    MCD_OPC_Decode, 161, 21, 76, // Opcode: SYNC_MM
/* 3001 */    MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 3015
/* 3006 */    MCD_OPC_CheckPredicate, 7, 177, 13, 0, // Skip to: 6516
/* 3011 */    MCD_OPC_Decode, 164, 21, 77, // Opcode: SYSCALL_MM
/* 3015 */    MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 3029
/* 3020 */    MCD_OPC_CheckPredicate, 7, 163, 13, 0, // Skip to: 6516
/* 3025 */    MCD_OPC_Decode, 255, 21, 77, // Opcode: WAIT_MM
/* 3029 */    MCD_OPC_FilterValue, 24, 9, 0, 0, // Skip to: 3043
/* 3034 */    MCD_OPC_CheckPredicate, 10, 149, 13, 0, // Skip to: 6516
/* 3039 */    MCD_OPC_Decode, 198, 13, 77, // Opcode: HYPCALL_MM
/* 3043 */    MCD_OPC_FilterValue, 27, 9, 0, 0, // Skip to: 3057
/* 3048 */    MCD_OPC_CheckPredicate, 7, 135, 13, 0, // Skip to: 6516
/* 3053 */    MCD_OPC_Decode, 246, 18, 77, // Opcode: SDBBP_MM
/* 3057 */    MCD_OPC_FilterValue, 28, 16, 0, 0, // Skip to: 3078
/* 3062 */    MCD_OPC_CheckPredicate, 7, 121, 13, 0, // Skip to: 6516
/* 3067 */    MCD_OPC_CheckField, 16, 10, 0, 114, 13, 0, // Skip to: 6516
/* 3074 */    MCD_OPC_Decode, 219, 10, 0, // Opcode: DERET_MM
/* 3078 */    MCD_OPC_FilterValue, 30, 105, 13, 0, // Skip to: 6516
/* 3083 */    MCD_OPC_CheckPredicate, 7, 100, 13, 0, // Skip to: 6516
/* 3088 */    MCD_OPC_CheckField, 16, 10, 0, 93, 13, 0, // Skip to: 6516
/* 3095 */    MCD_OPC_Decode, 222, 11, 0, // Opcode: ERET_MM
/* 3099 */    MCD_OPC_FilterValue, 15, 16, 0, 0, // Skip to: 3120
/* 3104 */    MCD_OPC_CheckPredicate, 9, 79, 13, 0, // Skip to: 6516
/* 3109 */    MCD_OPC_CheckField, 11, 1, 0, 72, 13, 0, // Skip to: 6516
/* 3116 */    MCD_OPC_Decode, 215, 19, 59, // Opcode: SHRL_PH_MMR2
/* 3120 */    MCD_OPC_FilterValue, 16, 31, 0, 0, // Skip to: 3156
/* 3125 */    MCD_OPC_ExtractField, 11, 1,  // Inst{11} ...
/* 3128 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 3142
/* 3133 */    MCD_OPC_CheckPredicate, 7, 50, 13, 0, // Skip to: 6516
/* 3138 */    MCD_OPC_Decode, 196, 21, 60, // Opcode: TGEU_MM
/* 3142 */    MCD_OPC_FilterValue, 1, 41, 13, 0, // Skip to: 6516
/* 3147 */    MCD_OPC_CheckPredicate, 7, 36, 13, 0, // Skip to: 6516
/* 3152 */    MCD_OPC_Decode, 232, 21, 60, // Opcode: TNE_MM
/* 3156 */    MCD_OPC_FilterValue, 18, 115, 0, 0, // Skip to: 3276
/* 3161 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 3164 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 3178
/* 3169 */    MCD_OPC_CheckPredicate, 9, 14, 13, 0, // Skip to: 6516
/* 3174 */    MCD_OPC_Decode, 187, 11, 65, // Opcode: DPS_W_PH_MMR2
/* 3178 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 3192
/* 3183 */    MCD_OPC_CheckPredicate, 8, 0, 13, 0, // Skip to: 6516
/* 3188 */    MCD_OPC_Decode, 159, 17, 78, // Opcode: MULT_DSP_MM
/* 3192 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 3206
/* 3197 */    MCD_OPC_CheckPredicate, 9, 242, 12, 0, // Skip to: 6516
/* 3202 */    MCD_OPC_Decode, 185, 11, 65, // Opcode: DPSX_W_PH_MMR2
/* 3206 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 3220
/* 3211 */    MCD_OPC_CheckPredicate, 8, 228, 12, 0, // Skip to: 6516
/* 3216 */    MCD_OPC_Decode, 157, 17, 78, // Opcode: MULTU_DSP_MM
/* 3220 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 3234
/* 3225 */    MCD_OPC_CheckPredicate, 8, 214, 12, 0, // Skip to: 6516
/* 3230 */    MCD_OPC_Decode, 181, 11, 65, // Opcode: DPSU_H_QBL_MM
/* 3234 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 3248
/* 3239 */    MCD_OPC_CheckPredicate, 9, 200, 12, 0, // Skip to: 6516
/* 3244 */    MCD_OPC_Decode, 154, 17, 65, // Opcode: MULSA_W_PH_MMR2
/* 3248 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 3262
/* 3253 */    MCD_OPC_CheckPredicate, 8, 186, 12, 0, // Skip to: 6516
/* 3258 */    MCD_OPC_Decode, 183, 11, 65, // Opcode: DPSU_H_QBR_MM
/* 3262 */    MCD_OPC_FilterValue, 7, 177, 12, 0, // Skip to: 6516
/* 3267 */    MCD_OPC_CheckPredicate, 8, 172, 12, 0, // Skip to: 6516
/* 3272 */    MCD_OPC_Decode, 152, 17, 65, // Opcode: MULSAQ_S_W_PH_MM
/* 3276 */    MCD_OPC_FilterValue, 19, 16, 0, 0, // Skip to: 3297
/* 3281 */    MCD_OPC_CheckPredicate, 10, 158, 12, 0, // Skip to: 6516
/* 3286 */    MCD_OPC_CheckField, 14, 2, 0, 151, 12, 0, // Skip to: 6516
/* 3293 */    MCD_OPC_Decode, 211, 15, 57, // Opcode: MFGC0_MM
/* 3297 */    MCD_OPC_FilterValue, 20, 31, 0, 0, // Skip to: 3333
/* 3302 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3305 */    MCD_OPC_FilterValue, 25, 9, 0, 0, // Skip to: 3319
/* 3310 */    MCD_OPC_CheckPredicate, 7, 129, 12, 0, // Skip to: 6516
/* 3315 */    MCD_OPC_Decode, 166, 8, 79, // Opcode: CFC2_MM
/* 3319 */    MCD_OPC_FilterValue, 27, 120, 12, 0, // Skip to: 6516
/* 3324 */    MCD_OPC_CheckPredicate, 7, 115, 12, 0, // Skip to: 6516
/* 3329 */    MCD_OPC_Decode, 193, 9, 80, // Opcode: CTC2_MM
/* 3333 */    MCD_OPC_FilterValue, 21, 87, 0, 0, // Skip to: 3425
/* 3338 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3341 */    MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 3362
/* 3346 */    MCD_OPC_CheckPredicate, 6, 93, 12, 0, // Skip to: 6516
/* 3351 */    MCD_OPC_CheckField, 21, 5, 0, 86, 12, 0, // Skip to: 6516
/* 3358 */    MCD_OPC_Decode, 225, 15, 81, // Opcode: MFHI_MM
/* 3362 */    MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 3383
/* 3367 */    MCD_OPC_CheckPredicate, 6, 72, 12, 0, // Skip to: 6516
/* 3372 */    MCD_OPC_CheckField, 21, 5, 0, 65, 12, 0, // Skip to: 6516
/* 3379 */    MCD_OPC_Decode, 231, 15, 81, // Opcode: MFLO_MM
/* 3383 */    MCD_OPC_FilterValue, 5, 16, 0, 0, // Skip to: 3404
/* 3388 */    MCD_OPC_CheckPredicate, 6, 51, 12, 0, // Skip to: 6516
/* 3393 */    MCD_OPC_CheckField, 21, 5, 0, 44, 12, 0, // Skip to: 6516
/* 3400 */    MCD_OPC_Decode, 240, 16, 81, // Opcode: MTHI_MM
/* 3404 */    MCD_OPC_FilterValue, 7, 35, 12, 0, // Skip to: 6516
/* 3409 */    MCD_OPC_CheckPredicate, 6, 30, 12, 0, // Skip to: 6516
/* 3414 */    MCD_OPC_CheckField, 21, 5, 0, 23, 12, 0, // Skip to: 6516
/* 3421 */    MCD_OPC_Decode, 247, 16, 81, // Opcode: MTLO_MM
/* 3425 */    MCD_OPC_FilterValue, 23, 16, 0, 0, // Skip to: 3446
/* 3430 */    MCD_OPC_CheckPredicate, 8, 9, 12, 0, // Skip to: 6516
/* 3435 */    MCD_OPC_CheckField, 11, 2, 0, 2, 12, 0, // Skip to: 6516
/* 3442 */    MCD_OPC_Decode, 186, 18, 82, // Opcode: REPL_QB_MM
/* 3446 */    MCD_OPC_FilterValue, 25, 115, 0, 0, // Skip to: 3566
/* 3451 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 3454 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 3468
/* 3459 */    MCD_OPC_CheckPredicate, 8, 236, 11, 0, // Skip to: 6516
/* 3464 */    MCD_OPC_Decode, 167, 18, 83, // Opcode: RDDSP_MM
/* 3468 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 3482
/* 3473 */    MCD_OPC_CheckPredicate, 8, 222, 11, 0, // Skip to: 6516
/* 3478 */    MCD_OPC_Decode, 251, 11, 84, // Opcode: EXTR_W_MM
/* 3482 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 3496
/* 3487 */    MCD_OPC_CheckPredicate, 8, 208, 11, 0, // Skip to: 6516
/* 3492 */    MCD_OPC_Decode, 130, 22, 83, // Opcode: WRDSP_MM
/* 3496 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 3510
/* 3501 */    MCD_OPC_CheckPredicate, 8, 194, 11, 0, // Skip to: 6516
/* 3506 */    MCD_OPC_Decode, 247, 11, 84, // Opcode: EXTR_R_W_MM
/* 3510 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 3524
/* 3515 */    MCD_OPC_CheckPredicate, 8, 180, 11, 0, // Skip to: 6516
/* 3520 */    MCD_OPC_Decode, 235, 11, 84, // Opcode: EXTP_MM
/* 3524 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 3538
/* 3529 */    MCD_OPC_CheckPredicate, 8, 166, 11, 0, // Skip to: 6516
/* 3534 */    MCD_OPC_Decode, 245, 11, 84, // Opcode: EXTR_RS_W_MM
/* 3538 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 3552
/* 3543 */    MCD_OPC_CheckPredicate, 8, 152, 11, 0, // Skip to: 6516
/* 3548 */    MCD_OPC_Decode, 232, 11, 84, // Opcode: EXTPDP_MM
/* 3552 */    MCD_OPC_FilterValue, 7, 143, 11, 0, // Skip to: 6516
/* 3557 */    MCD_OPC_CheckPredicate, 8, 138, 11, 0, // Skip to: 6516
/* 3562 */    MCD_OPC_Decode, 249, 11, 84, // Opcode: EXTR_S_H_MM
/* 3566 */    MCD_OPC_FilterValue, 26, 115, 0, 0, // Skip to: 3686
/* 3571 */    MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 3574 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 3588
/* 3579 */    MCD_OPC_CheckPredicate, 8, 116, 11, 0, // Skip to: 6516
/* 3584 */    MCD_OPC_Decode, 173, 11, 65, // Opcode: DPSQ_S_W_PH_MM
/* 3588 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 3602
/* 3593 */    MCD_OPC_CheckPredicate, 8, 102, 11, 0, // Skip to: 6516
/* 3598 */    MCD_OPC_Decode, 243, 11, 67, // Opcode: EXTRV_W_MM
/* 3602 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 3616
/* 3607 */    MCD_OPC_CheckPredicate, 8, 88, 11, 0, // Skip to: 6516
/* 3612 */    MCD_OPC_Decode, 171, 11, 65, // Opcode: DPSQ_SA_L_W_MM
/* 3616 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 3630
/* 3621 */    MCD_OPC_CheckPredicate, 8, 74, 11, 0, // Skip to: 6516
/* 3626 */    MCD_OPC_Decode, 239, 11, 67, // Opcode: EXTRV_R_W_MM
/* 3630 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 3644
/* 3635 */    MCD_OPC_CheckPredicate, 9, 60, 11, 0, // Skip to: 6516
/* 3640 */    MCD_OPC_Decode, 169, 11, 65, // Opcode: DPSQX_S_W_PH_MMR2
/* 3644 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 3658
/* 3649 */    MCD_OPC_CheckPredicate, 8, 46, 11, 0, // Skip to: 6516
/* 3654 */    MCD_OPC_Decode, 237, 11, 67, // Opcode: EXTRV_RS_W_MM
/* 3658 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 3672
/* 3663 */    MCD_OPC_CheckPredicate, 9, 32, 11, 0, // Skip to: 6516
/* 3668 */    MCD_OPC_Decode, 167, 11, 65, // Opcode: DPSQX_SA_W_PH_MMR2
/* 3672 */    MCD_OPC_FilterValue, 7, 23, 11, 0, // Skip to: 6516
/* 3677 */    MCD_OPC_CheckPredicate, 8, 18, 11, 0, // Skip to: 6516
/* 3682 */    MCD_OPC_Decode, 241, 11, 67, // Opcode: EXTRV_S_H_MM
/* 3686 */    MCD_OPC_FilterValue, 27, 16, 0, 0, // Skip to: 3707
/* 3691 */    MCD_OPC_CheckPredicate, 10, 4, 11, 0, // Skip to: 6516
/* 3696 */    MCD_OPC_CheckField, 14, 2, 0, 253, 10, 0, // Skip to: 6516
/* 3703 */    MCD_OPC_Decode, 227, 16, 58, // Opcode: MTGC0_MM
/* 3707 */    MCD_OPC_FilterValue, 28, 47, 0, 0, // Skip to: 3759
/* 3712 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3715 */    MCD_OPC_FilterValue, 1, 25, 0, 0, // Skip to: 3745
/* 3720 */    MCD_OPC_CheckPredicate, 6, 11, 0, 0, // Skip to: 3736
/* 3725 */    MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 3736
/* 3732 */    MCD_OPC_Decode, 134, 14, 81, // Opcode: JR_MM
/* 3736 */    MCD_OPC_CheckPredicate, 6, 215, 10, 0, // Skip to: 6516
/* 3741 */    MCD_OPC_Decode, 240, 13, 69, // Opcode: JALR_MM
/* 3745 */    MCD_OPC_FilterValue, 9, 206, 10, 0, // Skip to: 6516
/* 3750 */    MCD_OPC_CheckPredicate, 6, 201, 10, 0, // Skip to: 6516
/* 3755 */    MCD_OPC_Decode, 237, 13, 69, // Opcode: JALRS_MM
/* 3759 */    MCD_OPC_FilterValue, 29, 192, 10, 0, // Skip to: 6516
/* 3764 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 3767 */    MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 3788
/* 3772 */    MCD_OPC_CheckPredicate, 7, 179, 10, 0, // Skip to: 6516
/* 3777 */    MCD_OPC_CheckField, 21, 5, 0, 172, 10, 0, // Skip to: 6516
/* 3784 */    MCD_OPC_Decode, 241, 10, 81, // Opcode: DI_MM
/* 3788 */    MCD_OPC_FilterValue, 10, 163, 10, 0, // Skip to: 6516
/* 3793 */    MCD_OPC_CheckPredicate, 7, 158, 10, 0, // Skip to: 6516
/* 3798 */    MCD_OPC_CheckField, 21, 5, 0, 151, 10, 0, // Skip to: 6516
/* 3805 */    MCD_OPC_Decode, 216, 11, 81, // Opcode: EI_MM
/* 3809 */    MCD_OPC_FilterValue, 61, 142, 10, 0, // Skip to: 6516
/* 3814 */    MCD_OPC_CheckPredicate, 8, 137, 10, 0, // Skip to: 6516
/* 3819 */    MCD_OPC_CheckField, 6, 5, 0, 130, 10, 0, // Skip to: 6516
/* 3826 */    MCD_OPC_Decode, 184, 18, 85, // Opcode: REPL_PH_MM
/* 3830 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 3844
/* 3835 */    MCD_OPC_CheckPredicate, 6, 116, 10, 0, // Skip to: 6516
/* 3840 */    MCD_OPC_Decode, 136, 6, 86, // Opcode: ADDi_MM
/* 3844 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 3858
/* 3849 */    MCD_OPC_CheckPredicate, 7, 102, 10, 0, // Skip to: 6516
/* 3854 */    MCD_OPC_Decode, 156, 14, 87, // Opcode: LBu_MM
/* 3858 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 3872
/* 3863 */    MCD_OPC_CheckPredicate, 7, 88, 10, 0, // Skip to: 6516
/* 3868 */    MCD_OPC_Decode, 230, 18, 87, // Opcode: SB_MM
/* 3872 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 3886
/* 3877 */    MCD_OPC_CheckPredicate, 7, 74, 10, 0, // Skip to: 6516
/* 3882 */    MCD_OPC_Decode, 150, 14, 87, // Opcode: LB_MM
/* 3886 */    MCD_OPC_FilterValue, 8, 73, 0, 0, // Skip to: 3964
/* 3891 */    MCD_OPC_ExtractField, 12, 4,  // Inst{15-12} ...
/* 3894 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 3908
/* 3899 */    MCD_OPC_CheckPredicate, 7, 52, 10, 0, // Skip to: 6516
/* 3904 */    MCD_OPC_Decode, 241, 14, 88, // Opcode: LWP_MM
/* 3908 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 3922
/* 3913 */    MCD_OPC_CheckPredicate, 7, 38, 10, 0, // Skip to: 6516
/* 3918 */    MCD_OPC_Decode, 238, 14, 88, // Opcode: LWM32_MM
/* 3922 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 3936
/* 3927 */    MCD_OPC_CheckPredicate, 6, 24, 10, 0, // Skip to: 6516
/* 3932 */    MCD_OPC_Decode, 142, 8, 89, // Opcode: CACHE_MM
/* 3936 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 3950
/* 3941 */    MCD_OPC_CheckPredicate, 7, 10, 10, 0, // Skip to: 6516
/* 3946 */    MCD_OPC_Decode, 145, 21, 88, // Opcode: SWP_MM
/* 3950 */    MCD_OPC_FilterValue, 13, 1, 10, 0, // Skip to: 6516
/* 3955 */    MCD_OPC_CheckPredicate, 7, 252, 9, 0, // Skip to: 6516
/* 3960 */    MCD_OPC_Decode, 144, 21, 88, // Opcode: SWM32_MM
/* 3964 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 3978
/* 3969 */    MCD_OPC_CheckPredicate, 6, 238, 9, 0, // Skip to: 6516
/* 3974 */    MCD_OPC_Decode, 138, 6, 86, // Opcode: ADDiu_MM
/* 3978 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 3992
/* 3983 */    MCD_OPC_CheckPredicate, 7, 224, 9, 0, // Skip to: 6516
/* 3988 */    MCD_OPC_Decode, 194, 14, 87, // Opcode: LHu_MM
/* 3992 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 4006
/* 3997 */    MCD_OPC_CheckPredicate, 7, 210, 9, 0, // Skip to: 6516
/* 4002 */    MCD_OPC_Decode, 218, 19, 87, // Opcode: SH_MM
/* 4006 */    MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 4020
/* 4011 */    MCD_OPC_CheckPredicate, 7, 196, 9, 0, // Skip to: 6516
/* 4016 */    MCD_OPC_Decode, 189, 14, 87, // Opcode: LH_MM
/* 4020 */    MCD_OPC_FilterValue, 16, 83, 1, 0, // Skip to: 4364
/* 4025 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 4028 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 4042
/* 4033 */    MCD_OPC_CheckPredicate, 6, 174, 9, 0, // Skip to: 6516
/* 4038 */    MCD_OPC_Decode, 196, 7, 90, // Opcode: BLTZ_MM
/* 4042 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 4056
/* 4047 */    MCD_OPC_CheckPredicate, 6, 160, 9, 0, // Skip to: 6516
/* 4052 */    MCD_OPC_Decode, 191, 7, 90, // Opcode: BLTZAL_MM
/* 4056 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 4070
/* 4061 */    MCD_OPC_CheckPredicate, 6, 146, 9, 0, // Skip to: 6516
/* 4066 */    MCD_OPC_Decode, 139, 7, 90, // Opcode: BGEZ_MM
/* 4070 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 4084
/* 4075 */    MCD_OPC_CheckPredicate, 6, 132, 9, 0, // Skip to: 6516
/* 4080 */    MCD_OPC_Decode, 134, 7, 90, // Opcode: BGEZAL_MM
/* 4084 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 4098
/* 4089 */    MCD_OPC_CheckPredicate, 6, 118, 9, 0, // Skip to: 6516
/* 4094 */    MCD_OPC_Decode, 177, 7, 90, // Opcode: BLEZ_MM
/* 4098 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 4112
/* 4103 */    MCD_OPC_CheckPredicate, 6, 104, 9, 0, // Skip to: 6516
/* 4108 */    MCD_OPC_Decode, 221, 7, 90, // Opcode: BNEZC_MM
/* 4112 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 4126
/* 4117 */    MCD_OPC_CheckPredicate, 6, 90, 9, 0, // Skip to: 6516
/* 4122 */    MCD_OPC_Decode, 148, 7, 90, // Opcode: BGTZ_MM
/* 4126 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 4140
/* 4131 */    MCD_OPC_CheckPredicate, 6, 76, 9, 0, // Skip to: 6516
/* 4136 */    MCD_OPC_Decode, 246, 6, 90, // Opcode: BEQZC_MM
/* 4140 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 4154
/* 4145 */    MCD_OPC_CheckPredicate, 6, 62, 9, 0, // Skip to: 6516
/* 4150 */    MCD_OPC_Decode, 225, 21, 91, // Opcode: TLTI_MM
/* 4154 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 4168
/* 4159 */    MCD_OPC_CheckPredicate, 6, 48, 9, 0, // Skip to: 6516
/* 4164 */    MCD_OPC_Decode, 194, 21, 91, // Opcode: TGEI_MM
/* 4168 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 4182
/* 4173 */    MCD_OPC_CheckPredicate, 6, 34, 9, 0, // Skip to: 6516
/* 4178 */    MCD_OPC_Decode, 224, 21, 91, // Opcode: TLTIU_MM
/* 4182 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 4196
/* 4187 */    MCD_OPC_CheckPredicate, 6, 20, 9, 0, // Skip to: 6516
/* 4192 */    MCD_OPC_Decode, 193, 21, 91, // Opcode: TGEIU_MM
/* 4196 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 4210
/* 4201 */    MCD_OPC_CheckPredicate, 6, 6, 9, 0, // Skip to: 6516
/* 4206 */    MCD_OPC_Decode, 231, 21, 91, // Opcode: TNEI_MM
/* 4210 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 4224
/* 4215 */    MCD_OPC_CheckPredicate, 6, 248, 8, 0, // Skip to: 6516
/* 4220 */    MCD_OPC_Decode, 216, 14, 92, // Opcode: LUi_MM
/* 4224 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 4238
/* 4229 */    MCD_OPC_CheckPredicate, 6, 234, 8, 0, // Skip to: 6516
/* 4234 */    MCD_OPC_Decode, 188, 21, 91, // Opcode: TEQI_MM
/* 4238 */    MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 4252
/* 4243 */    MCD_OPC_CheckPredicate, 6, 220, 8, 0, // Skip to: 6516
/* 4248 */    MCD_OPC_Decode, 159, 21, 93, // Opcode: SYNCI_MM
/* 4252 */    MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 4266
/* 4257 */    MCD_OPC_CheckPredicate, 6, 206, 8, 0, // Skip to: 6516
/* 4262 */    MCD_OPC_Decode, 190, 7, 90, // Opcode: BLTZALS_MM
/* 4266 */    MCD_OPC_FilterValue, 19, 9, 0, 0, // Skip to: 4280
/* 4271 */    MCD_OPC_CheckPredicate, 6, 192, 8, 0, // Skip to: 6516
/* 4276 */    MCD_OPC_Decode, 133, 7, 90, // Opcode: BGEZALS_MM
/* 4280 */    MCD_OPC_FilterValue, 25, 16, 0, 0, // Skip to: 4301
/* 4285 */    MCD_OPC_CheckPredicate, 11, 178, 8, 0, // Skip to: 6516
/* 4290 */    MCD_OPC_CheckField, 16, 5, 0, 171, 8, 0, // Skip to: 6516
/* 4297 */    MCD_OPC_Decode, 234, 7, 94, // Opcode: BPOSGE32C_MMR3
/* 4301 */    MCD_OPC_FilterValue, 27, 16, 0, 0, // Skip to: 4322
/* 4306 */    MCD_OPC_CheckPredicate, 12, 157, 8, 0, // Skip to: 6516
/* 4311 */    MCD_OPC_CheckField, 16, 5, 0, 150, 8, 0, // Skip to: 6516
/* 4318 */    MCD_OPC_Decode, 235, 7, 95, // Opcode: BPOSGE32_MM
/* 4322 */    MCD_OPC_FilterValue, 28, 16, 0, 0, // Skip to: 4343
/* 4327 */    MCD_OPC_CheckPredicate, 13, 136, 8, 0, // Skip to: 6516
/* 4332 */    MCD_OPC_CheckField, 16, 2, 0, 129, 8, 0, // Skip to: 6516
/* 4339 */    MCD_OPC_Decode, 215, 6, 96, // Opcode: BC1F_MM
/* 4343 */    MCD_OPC_FilterValue, 29, 120, 8, 0, // Skip to: 6516
/* 4348 */    MCD_OPC_CheckPredicate, 13, 115, 8, 0, // Skip to: 6516
/* 4353 */    MCD_OPC_CheckField, 16, 2, 0, 108, 8, 0, // Skip to: 6516
/* 4360 */    MCD_OPC_Decode, 220, 6, 96, // Opcode: BC1T_MM
/* 4364 */    MCD_OPC_FilterValue, 20, 9, 0, 0, // Skip to: 4378
/* 4369 */    MCD_OPC_CheckPredicate, 6, 94, 8, 0, // Skip to: 6516
/* 4374 */    MCD_OPC_Decode, 221, 17, 97, // Opcode: ORi_MM
/* 4378 */    MCD_OPC_FilterValue, 21, 197, 5, 0, // Skip to: 5860
/* 4383 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 4386 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 4400
/* 4391 */    MCD_OPC_CheckPredicate, 14, 72, 8, 0, // Skip to: 6516
/* 4396 */    MCD_OPC_Decode, 165, 15, 98, // Opcode: MADD_S_MM
/* 4400 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 4414
/* 4405 */    MCD_OPC_CheckPredicate, 14, 58, 8, 0, // Skip to: 6516
/* 4410 */    MCD_OPC_Decode, 194, 17, 98, // Opcode: NMADD_S_MM
/* 4414 */    MCD_OPC_FilterValue, 8, 59, 0, 0, // Skip to: 4478
/* 4419 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4422 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 4436
/* 4427 */    MCD_OPC_CheckPredicate, 13, 36, 8, 0, // Skip to: 6516
/* 4432 */    MCD_OPC_Decode, 252, 14, 99, // Opcode: LWXC1_MM
/* 4436 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 4450
/* 4441 */    MCD_OPC_CheckPredicate, 13, 22, 8, 0, // Skip to: 6516
/* 4446 */    MCD_OPC_Decode, 154, 21, 99, // Opcode: SWXC1_MM
/* 4450 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 4464
/* 4455 */    MCD_OPC_CheckPredicate, 15, 8, 8, 0, // Skip to: 6516
/* 4460 */    MCD_OPC_Decode, 213, 14, 100, // Opcode: LUXC1_MM
/* 4464 */    MCD_OPC_FilterValue, 6, 255, 7, 0, // Skip to: 6516
/* 4469 */    MCD_OPC_CheckPredicate, 15, 250, 7, 0, // Skip to: 6516
/* 4474 */    MCD_OPC_Decode, 250, 20, 100, // Opcode: SUXC1_MM
/* 4478 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 4492
/* 4483 */    MCD_OPC_CheckPredicate, 16, 236, 7, 0, // Skip to: 6516
/* 4488 */    MCD_OPC_Decode, 157, 15, 101, // Opcode: MADD_D32_MM
/* 4492 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 4506
/* 4497 */    MCD_OPC_CheckPredicate, 16, 222, 7, 0, // Skip to: 6516
/* 4502 */    MCD_OPC_Decode, 191, 17, 101, // Opcode: NMADD_D32_MM
/* 4506 */    MCD_OPC_FilterValue, 32, 101, 0, 0, // Skip to: 4612
/* 4511 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4514 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 4535
/* 4519 */    MCD_OPC_CheckPredicate, 13, 200, 7, 0, // Skip to: 6516
/* 4524 */    MCD_OPC_CheckField, 11, 2, 0, 193, 7, 0, // Skip to: 6516
/* 4531 */    MCD_OPC_Decode, 159, 16, 102, // Opcode: MOVF_S_MM
/* 4535 */    MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 4556
/* 4540 */    MCD_OPC_CheckPredicate, 13, 179, 7, 0, // Skip to: 6516
/* 4545 */    MCD_OPC_CheckField, 11, 2, 0, 172, 7, 0, // Skip to: 6516
/* 4552 */    MCD_OPC_Decode, 179, 16, 102, // Opcode: MOVT_S_MM
/* 4556 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 4570
/* 4561 */    MCD_OPC_CheckPredicate, 6, 158, 7, 0, // Skip to: 6516
/* 4566 */    MCD_OPC_Decode, 156, 18, 103, // Opcode: PREFX_MM
/* 4570 */    MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 4591
/* 4575 */    MCD_OPC_CheckPredicate, 17, 144, 7, 0, // Skip to: 6516
/* 4580 */    MCD_OPC_CheckField, 11, 2, 0, 137, 7, 0, // Skip to: 6516
/* 4587 */    MCD_OPC_Decode, 153, 16, 104, // Opcode: MOVF_D32_MM
/* 4591 */    MCD_OPC_FilterValue, 9, 128, 7, 0, // Skip to: 6516
/* 4596 */    MCD_OPC_CheckPredicate, 17, 123, 7, 0, // Skip to: 6516
/* 4601 */    MCD_OPC_CheckField, 11, 2, 0, 116, 7, 0, // Skip to: 6516
/* 4608 */    MCD_OPC_Decode, 173, 16, 104, // Opcode: MOVT_D32_MM
/* 4612 */    MCD_OPC_FilterValue, 33, 9, 0, 0, // Skip to: 4626
/* 4617 */    MCD_OPC_CheckPredicate, 14, 102, 7, 0, // Skip to: 6516
/* 4622 */    MCD_OPC_Decode, 216, 16, 98, // Opcode: MSUB_S_MM
/* 4626 */    MCD_OPC_FilterValue, 34, 9, 0, 0, // Skip to: 4640
/* 4631 */    MCD_OPC_CheckPredicate, 14, 88, 7, 0, // Skip to: 6516
/* 4636 */    MCD_OPC_Decode, 199, 17, 98, // Opcode: NMSUB_S_MM
/* 4640 */    MCD_OPC_FilterValue, 41, 9, 0, 0, // Skip to: 4654
/* 4645 */    MCD_OPC_CheckPredicate, 16, 74, 7, 0, // Skip to: 6516
/* 4650 */    MCD_OPC_Decode, 208, 16, 101, // Opcode: MSUB_D32_MM
/* 4654 */    MCD_OPC_FilterValue, 42, 9, 0, 0, // Skip to: 4668
/* 4659 */    MCD_OPC_CheckPredicate, 16, 60, 7, 0, // Skip to: 6516
/* 4664 */    MCD_OPC_Decode, 196, 17, 101, // Opcode: NMSUB_D32_MM
/* 4668 */    MCD_OPC_FilterValue, 48, 59, 0, 0, // Skip to: 4732
/* 4673 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4676 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 4690
/* 4681 */    MCD_OPC_CheckPredicate, 18, 38, 7, 0, // Skip to: 6516
/* 4686 */    MCD_OPC_Decode, 136, 12, 105, // Opcode: FADD_D32_MM
/* 4690 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 4704
/* 4695 */    MCD_OPC_CheckPredicate, 18, 24, 7, 0, // Skip to: 6516
/* 4700 */    MCD_OPC_Decode, 153, 13, 105, // Opcode: FSUB_D32_MM
/* 4704 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 4718
/* 4709 */    MCD_OPC_CheckPredicate, 18, 10, 7, 0, // Skip to: 6516
/* 4714 */    MCD_OPC_Decode, 237, 12, 105, // Opcode: FMUL_D32_MM
/* 4718 */    MCD_OPC_FilterValue, 7, 1, 7, 0, // Skip to: 6516
/* 4723 */    MCD_OPC_CheckPredicate, 18, 252, 6, 0, // Skip to: 6516
/* 4728 */    MCD_OPC_Decode, 175, 12, 105, // Opcode: FDIV_D32_MM
/* 4732 */    MCD_OPC_FilterValue, 56, 59, 0, 0, // Skip to: 4796
/* 4737 */    MCD_OPC_ExtractField, 6, 4,  // Inst{9-6} ...
/* 4740 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 4754
/* 4745 */    MCD_OPC_CheckPredicate, 13, 230, 6, 0, // Skip to: 6516
/* 4750 */    MCD_OPC_Decode, 171, 16, 106, // Opcode: MOVN_I_S_MM
/* 4754 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 4768
/* 4759 */    MCD_OPC_CheckPredicate, 13, 216, 6, 0, // Skip to: 6516
/* 4764 */    MCD_OPC_Decode, 191, 16, 106, // Opcode: MOVZ_I_S_MM
/* 4768 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 4782
/* 4773 */    MCD_OPC_CheckPredicate, 17, 202, 6, 0, // Skip to: 6516
/* 4778 */    MCD_OPC_Decode, 165, 16, 107, // Opcode: MOVN_I_D32_MM
/* 4782 */    MCD_OPC_FilterValue, 5, 193, 6, 0, // Skip to: 6516
/* 4787 */    MCD_OPC_CheckPredicate, 17, 188, 6, 0, // Skip to: 6516
/* 4792 */    MCD_OPC_Decode, 185, 16, 107, // Opcode: MOVZ_I_D32_MM
/* 4796 */    MCD_OPC_FilterValue, 59, 91, 2, 0, // Skip to: 5404
/* 4801 */    MCD_OPC_ExtractField, 6, 7,  // Inst{12-6} ...
/* 4804 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 4825
/* 4809 */    MCD_OPC_CheckPredicate, 19, 166, 6, 0, // Skip to: 6516
/* 4814 */    MCD_OPC_CheckField, 13, 3, 1, 159, 6, 0, // Skip to: 6516
/* 4821 */    MCD_OPC_Decode, 206, 15, 108, // Opcode: MFC1_MM
/* 4825 */    MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 4846
/* 4830 */    MCD_OPC_CheckPredicate, 18, 145, 6, 0, // Skip to: 6516
/* 4835 */    MCD_OPC_CheckField, 13, 3, 1, 138, 6, 0, // Skip to: 6516
/* 4842 */    MCD_OPC_Decode, 226, 12, 109, // Opcode: FMOV_D32_MM
/* 4846 */    MCD_OPC_FilterValue, 4, 31, 0, 0, // Skip to: 4882
/* 4851 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4854 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 4868
/* 4859 */    MCD_OPC_CheckPredicate, 20, 116, 6, 0, // Skip to: 6516
/* 4864 */    MCD_OPC_Decode, 209, 9, 110, // Opcode: CVT_L_S_MM
/* 4868 */    MCD_OPC_FilterValue, 2, 107, 6, 0, // Skip to: 6516
/* 4873 */    MCD_OPC_CheckPredicate, 20, 102, 6, 0, // Skip to: 6516
/* 4878 */    MCD_OPC_Decode, 206, 9, 111, // Opcode: CVT_L_D64_MM
/* 4882 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 4896
/* 4887 */    MCD_OPC_CheckPredicate, 13, 88, 6, 0, // Skip to: 6516
/* 4892 */    MCD_OPC_Decode, 157, 16, 112, // Opcode: MOVF_I_MM
/* 4896 */    MCD_OPC_FilterValue, 8, 31, 0, 0, // Skip to: 4932
/* 4901 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4904 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 4918
/* 4909 */    MCD_OPC_CheckPredicate, 19, 66, 6, 0, // Skip to: 6516
/* 4914 */    MCD_OPC_Decode, 211, 18, 113, // Opcode: RSQRT_S_MM
/* 4918 */    MCD_OPC_FilterValue, 2, 57, 6, 0, // Skip to: 6516
/* 4923 */    MCD_OPC_CheckPredicate, 18, 52, 6, 0, // Skip to: 6516
/* 4928 */    MCD_OPC_Decode, 207, 18, 109, // Opcode: RSQRT_D32_MM
/* 4932 */    MCD_OPC_FilterValue, 13, 31, 0, 0, // Skip to: 4968
/* 4937 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4940 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 4954
/* 4945 */    MCD_OPC_CheckPredicate, 19, 30, 6, 0, // Skip to: 6516
/* 4950 */    MCD_OPC_Decode, 133, 12, 113, // Opcode: FABS_S_MM
/* 4954 */    MCD_OPC_FilterValue, 1, 21, 6, 0, // Skip to: 6516
/* 4959 */    MCD_OPC_CheckPredicate, 18, 16, 6, 0, // Skip to: 6516
/* 4964 */    MCD_OPC_Decode, 129, 12, 109, // Opcode: FABS_D32_MM
/* 4968 */    MCD_OPC_FilterValue, 32, 16, 0, 0, // Skip to: 4989
/* 4973 */    MCD_OPC_CheckPredicate, 19, 2, 6, 0, // Skip to: 6516
/* 4978 */    MCD_OPC_CheckField, 13, 3, 1, 251, 5, 0, // Skip to: 6516
/* 4985 */    MCD_OPC_Decode, 222, 16, 114, // Opcode: MTC1_MM
/* 4989 */    MCD_OPC_FilterValue, 36, 31, 0, 0, // Skip to: 5025
/* 4994 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4997 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5011
/* 5002 */    MCD_OPC_CheckPredicate, 19, 229, 5, 0, // Skip to: 6516
/* 5007 */    MCD_OPC_Decode, 230, 9, 113, // Opcode: CVT_W_S_MM
/* 5011 */    MCD_OPC_FilterValue, 2, 220, 5, 0, // Skip to: 6516
/* 5016 */    MCD_OPC_CheckPredicate, 18, 215, 5, 0, // Skip to: 6516
/* 5021 */    MCD_OPC_Decode, 226, 9, 115, // Opcode: CVT_W_D32_MM
/* 5025 */    MCD_OPC_FilterValue, 37, 9, 0, 0, // Skip to: 5039
/* 5030 */    MCD_OPC_CheckPredicate, 13, 201, 5, 0, // Skip to: 6516
/* 5035 */    MCD_OPC_Decode, 177, 16, 112, // Opcode: MOVT_I_MM
/* 5039 */    MCD_OPC_FilterValue, 40, 31, 0, 0, // Skip to: 5075
/* 5044 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5047 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5061
/* 5052 */    MCD_OPC_CheckPredicate, 19, 179, 5, 0, // Skip to: 6516
/* 5057 */    MCD_OPC_Decode, 149, 13, 113, // Opcode: FSQRT_S_MM
/* 5061 */    MCD_OPC_FilterValue, 2, 170, 5, 0, // Skip to: 6516
/* 5066 */    MCD_OPC_CheckPredicate, 18, 165, 5, 0, // Skip to: 6516
/* 5071 */    MCD_OPC_Decode, 145, 13, 109, // Opcode: FSQRT_D32_MM
/* 5075 */    MCD_OPC_FilterValue, 44, 59, 0, 0, // Skip to: 5139
/* 5080 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5083 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5097
/* 5088 */    MCD_OPC_CheckPredicate, 19, 143, 5, 0, // Skip to: 6516
/* 5093 */    MCD_OPC_Decode, 213, 12, 113, // Opcode: FLOOR_W_S_MM
/* 5097 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 5111
/* 5102 */    MCD_OPC_CheckPredicate, 19, 129, 5, 0, // Skip to: 6516
/* 5107 */    MCD_OPC_Decode, 242, 21, 113, // Opcode: TRUNC_W_S_MM
/* 5111 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 5125
/* 5116 */    MCD_OPC_CheckPredicate, 18, 115, 5, 0, // Skip to: 6516
/* 5121 */    MCD_OPC_Decode, 211, 12, 115, // Opcode: FLOOR_W_MM
/* 5125 */    MCD_OPC_FilterValue, 3, 106, 5, 0, // Skip to: 6516
/* 5130 */    MCD_OPC_CheckPredicate, 18, 101, 5, 0, // Skip to: 6516
/* 5135 */    MCD_OPC_Decode, 240, 21, 115, // Opcode: TRUNC_W_MM
/* 5139 */    MCD_OPC_FilterValue, 45, 16, 0, 0, // Skip to: 5160
/* 5144 */    MCD_OPC_CheckPredicate, 18, 87, 5, 0, // Skip to: 6516
/* 5149 */    MCD_OPC_CheckField, 13, 3, 1, 80, 5, 0, // Skip to: 6516
/* 5156 */    MCD_OPC_Decode, 246, 12, 109, // Opcode: FNEG_D32_MM
/* 5160 */    MCD_OPC_FilterValue, 64, 31, 0, 0, // Skip to: 5196
/* 5165 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5168 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5182
/* 5173 */    MCD_OPC_CheckPredicate, 19, 58, 5, 0, // Skip to: 6516
/* 5178 */    MCD_OPC_Decode, 165, 8, 116, // Opcode: CFC1_MM
/* 5182 */    MCD_OPC_FilterValue, 1, 49, 5, 0, // Skip to: 6516
/* 5187 */    MCD_OPC_CheckPredicate, 18, 44, 5, 0, // Skip to: 6516
/* 5192 */    MCD_OPC_Decode, 214, 15, 117, // Opcode: MFHC1_D32_MM
/* 5196 */    MCD_OPC_FilterValue, 72, 31, 0, 0, // Skip to: 5232
/* 5201 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5204 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5218
/* 5209 */    MCD_OPC_CheckPredicate, 19, 22, 5, 0, // Skip to: 6516
/* 5214 */    MCD_OPC_Decode, 178, 18, 113, // Opcode: RECIP_S_MM
/* 5218 */    MCD_OPC_FilterValue, 2, 13, 5, 0, // Skip to: 6516
/* 5223 */    MCD_OPC_CheckPredicate, 18, 8, 5, 0, // Skip to: 6516
/* 5228 */    MCD_OPC_Decode, 174, 18, 109, // Opcode: RECIP_D32_MM
/* 5232 */    MCD_OPC_FilterValue, 77, 31, 0, 0, // Skip to: 5268
/* 5237 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5240 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5254
/* 5245 */    MCD_OPC_CheckPredicate, 18, 242, 4, 0, // Skip to: 6516
/* 5250 */    MCD_OPC_Decode, 196, 9, 118, // Opcode: CVT_D32_S_MM
/* 5254 */    MCD_OPC_FilterValue, 1, 233, 4, 0, // Skip to: 6516
/* 5259 */    MCD_OPC_CheckPredicate, 18, 228, 4, 0, // Skip to: 6516
/* 5264 */    MCD_OPC_Decode, 198, 9, 118, // Opcode: CVT_D32_W_MM
/* 5268 */    MCD_OPC_FilterValue, 96, 31, 0, 0, // Skip to: 5304
/* 5273 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5276 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5290
/* 5281 */    MCD_OPC_CheckPredicate, 19, 206, 4, 0, // Skip to: 6516
/* 5286 */    MCD_OPC_Decode, 192, 9, 119, // Opcode: CTC1_MM
/* 5290 */    MCD_OPC_FilterValue, 1, 197, 4, 0, // Skip to: 6516
/* 5295 */    MCD_OPC_CheckPredicate, 18, 192, 4, 0, // Skip to: 6516
/* 5300 */    MCD_OPC_Decode, 230, 16, 120, // Opcode: MTHC1_D32_MM
/* 5304 */    MCD_OPC_FilterValue, 108, 59, 0, 0, // Skip to: 5368
/* 5309 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5312 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5326
/* 5317 */    MCD_OPC_CheckPredicate, 19, 170, 4, 0, // Skip to: 6516
/* 5322 */    MCD_OPC_Decode, 154, 8, 113, // Opcode: CEIL_W_S_MM
/* 5326 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 5340
/* 5331 */    MCD_OPC_CheckPredicate, 19, 156, 4, 0, // Skip to: 6516
/* 5336 */    MCD_OPC_Decode, 204, 18, 113, // Opcode: ROUND_W_S_MM
/* 5340 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 5354
/* 5345 */    MCD_OPC_CheckPredicate, 18, 142, 4, 0, // Skip to: 6516
/* 5350 */    MCD_OPC_Decode, 152, 8, 115, // Opcode: CEIL_W_MM
/* 5354 */    MCD_OPC_FilterValue, 3, 133, 4, 0, // Skip to: 6516
/* 5359 */    MCD_OPC_CheckPredicate, 18, 128, 4, 0, // Skip to: 6516
/* 5364 */    MCD_OPC_Decode, 202, 18, 115, // Opcode: ROUND_W_MM
/* 5368 */    MCD_OPC_FilterValue, 109, 119, 4, 0, // Skip to: 6516
/* 5373 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 5376 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5390
/* 5381 */    MCD_OPC_CheckPredicate, 18, 106, 4, 0, // Skip to: 6516
/* 5386 */    MCD_OPC_Decode, 215, 9, 115, // Opcode: CVT_S_D32_MM
/* 5390 */    MCD_OPC_FilterValue, 1, 97, 4, 0, // Skip to: 6516
/* 5395 */    MCD_OPC_CheckPredicate, 19, 92, 4, 0, // Skip to: 6516
/* 5400 */    MCD_OPC_Decode, 223, 9, 113, // Opcode: CVT_S_W_MM
/* 5404 */    MCD_OPC_FilterValue, 60, 83, 4, 0, // Skip to: 6516
/* 5409 */    MCD_OPC_ExtractField, 6, 7,  // Inst{12-6} ...
/* 5412 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5426
/* 5417 */    MCD_OPC_CheckPredicate, 13, 70, 4, 0, // Skip to: 6516
/* 5422 */    MCD_OPC_Decode, 243, 9, 121, // Opcode: C_F_S_MM
/* 5426 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 5440
/* 5431 */    MCD_OPC_CheckPredicate, 13, 56, 4, 0, // Skip to: 6516
/* 5436 */    MCD_OPC_Decode, 199, 10, 121, // Opcode: C_UN_S_MM
/* 5440 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 5454
/* 5445 */    MCD_OPC_CheckPredicate, 13, 42, 4, 0, // Skip to: 6516
/* 5450 */    MCD_OPC_Decode, 237, 9, 121, // Opcode: C_EQ_S_MM
/* 5454 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 5468
/* 5459 */    MCD_OPC_CheckPredicate, 13, 28, 4, 0, // Skip to: 6516
/* 5464 */    MCD_OPC_Decode, 181, 10, 121, // Opcode: C_UEQ_S_MM
/* 5468 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 5482
/* 5473 */    MCD_OPC_CheckPredicate, 13, 14, 4, 0, // Skip to: 6516
/* 5478 */    MCD_OPC_Decode, 163, 10, 121, // Opcode: C_OLT_S_MM
/* 5482 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 5496
/* 5487 */    MCD_OPC_CheckPredicate, 13, 0, 4, 0, // Skip to: 6516
/* 5492 */    MCD_OPC_Decode, 193, 10, 121, // Opcode: C_ULT_S_MM
/* 5496 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 5510
/* 5501 */    MCD_OPC_CheckPredicate, 13, 242, 3, 0, // Skip to: 6516
/* 5506 */    MCD_OPC_Decode, 157, 10, 121, // Opcode: C_OLE_S_MM
/* 5510 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 5524
/* 5515 */    MCD_OPC_CheckPredicate, 13, 228, 3, 0, // Skip to: 6516
/* 5520 */    MCD_OPC_Decode, 187, 10, 121, // Opcode: C_ULE_S_MM
/* 5524 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 5538
/* 5529 */    MCD_OPC_CheckPredicate, 13, 214, 3, 0, // Skip to: 6516
/* 5534 */    MCD_OPC_Decode, 175, 10, 121, // Opcode: C_SF_S_MM
/* 5538 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 5552
/* 5543 */    MCD_OPC_CheckPredicate, 13, 200, 3, 0, // Skip to: 6516
/* 5548 */    MCD_OPC_Decode, 139, 10, 121, // Opcode: C_NGLE_S_MM
/* 5552 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 5566
/* 5557 */    MCD_OPC_CheckPredicate, 13, 186, 3, 0, // Skip to: 6516
/* 5562 */    MCD_OPC_Decode, 169, 10, 121, // Opcode: C_SEQ_S_MM
/* 5566 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 5580
/* 5571 */    MCD_OPC_CheckPredicate, 13, 172, 3, 0, // Skip to: 6516
/* 5576 */    MCD_OPC_Decode, 145, 10, 121, // Opcode: C_NGL_S_MM
/* 5580 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 5594
/* 5585 */    MCD_OPC_CheckPredicate, 13, 158, 3, 0, // Skip to: 6516
/* 5590 */    MCD_OPC_Decode, 255, 9, 121, // Opcode: C_LT_S_MM
/* 5594 */    MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 5608
/* 5599 */    MCD_OPC_CheckPredicate, 13, 144, 3, 0, // Skip to: 6516
/* 5604 */    MCD_OPC_Decode, 133, 10, 121, // Opcode: C_NGE_S_MM
/* 5608 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 5622
/* 5613 */    MCD_OPC_CheckPredicate, 13, 130, 3, 0, // Skip to: 6516
/* 5618 */    MCD_OPC_Decode, 249, 9, 121, // Opcode: C_LE_S_MM
/* 5622 */    MCD_OPC_FilterValue, 15, 9, 0, 0, // Skip to: 5636
/* 5627 */    MCD_OPC_CheckPredicate, 13, 116, 3, 0, // Skip to: 6516
/* 5632 */    MCD_OPC_Decode, 151, 10, 121, // Opcode: C_NGT_S_MM
/* 5636 */    MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 5650
/* 5641 */    MCD_OPC_CheckPredicate, 17, 102, 3, 0, // Skip to: 6516
/* 5646 */    MCD_OPC_Decode, 239, 9, 122, // Opcode: C_F_D32_MM
/* 5650 */    MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 5664
/* 5655 */    MCD_OPC_CheckPredicate, 17, 88, 3, 0, // Skip to: 6516
/* 5660 */    MCD_OPC_Decode, 195, 10, 122, // Opcode: C_UN_D32_MM
/* 5664 */    MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 5678
/* 5669 */    MCD_OPC_CheckPredicate, 17, 74, 3, 0, // Skip to: 6516
/* 5674 */    MCD_OPC_Decode, 233, 9, 122, // Opcode: C_EQ_D32_MM
/* 5678 */    MCD_OPC_FilterValue, 19, 9, 0, 0, // Skip to: 5692
/* 5683 */    MCD_OPC_CheckPredicate, 17, 60, 3, 0, // Skip to: 6516
/* 5688 */    MCD_OPC_Decode, 177, 10, 122, // Opcode: C_UEQ_D32_MM
/* 5692 */    MCD_OPC_FilterValue, 20, 9, 0, 0, // Skip to: 5706
/* 5697 */    MCD_OPC_CheckPredicate, 17, 46, 3, 0, // Skip to: 6516
/* 5702 */    MCD_OPC_Decode, 159, 10, 122, // Opcode: C_OLT_D32_MM
/* 5706 */    MCD_OPC_FilterValue, 21, 9, 0, 0, // Skip to: 5720
/* 5711 */    MCD_OPC_CheckPredicate, 17, 32, 3, 0, // Skip to: 6516
/* 5716 */    MCD_OPC_Decode, 189, 10, 122, // Opcode: C_ULT_D32_MM
/* 5720 */    MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 5734
/* 5725 */    MCD_OPC_CheckPredicate, 17, 18, 3, 0, // Skip to: 6516
/* 5730 */    MCD_OPC_Decode, 153, 10, 122, // Opcode: C_OLE_D32_MM
/* 5734 */    MCD_OPC_FilterValue, 23, 9, 0, 0, // Skip to: 5748
/* 5739 */    MCD_OPC_CheckPredicate, 17, 4, 3, 0, // Skip to: 6516
/* 5744 */    MCD_OPC_Decode, 183, 10, 122, // Opcode: C_ULE_D32_MM
/* 5748 */    MCD_OPC_FilterValue, 24, 9, 0, 0, // Skip to: 5762
/* 5753 */    MCD_OPC_CheckPredicate, 17, 246, 2, 0, // Skip to: 6516
/* 5758 */    MCD_OPC_Decode, 171, 10, 122, // Opcode: C_SF_D32_MM
/* 5762 */    MCD_OPC_FilterValue, 25, 9, 0, 0, // Skip to: 5776
/* 5767 */    MCD_OPC_CheckPredicate, 17, 232, 2, 0, // Skip to: 6516
/* 5772 */    MCD_OPC_Decode, 135, 10, 122, // Opcode: C_NGLE_D32_MM
/* 5776 */    MCD_OPC_FilterValue, 26, 9, 0, 0, // Skip to: 5790
/* 5781 */    MCD_OPC_CheckPredicate, 17, 218, 2, 0, // Skip to: 6516
/* 5786 */    MCD_OPC_Decode, 165, 10, 122, // Opcode: C_SEQ_D32_MM
/* 5790 */    MCD_OPC_FilterValue, 27, 9, 0, 0, // Skip to: 5804
/* 5795 */    MCD_OPC_CheckPredicate, 17, 204, 2, 0, // Skip to: 6516
/* 5800 */    MCD_OPC_Decode, 141, 10, 122, // Opcode: C_NGL_D32_MM
/* 5804 */    MCD_OPC_FilterValue, 28, 9, 0, 0, // Skip to: 5818
/* 5809 */    MCD_OPC_CheckPredicate, 17, 190, 2, 0, // Skip to: 6516
/* 5814 */    MCD_OPC_Decode, 251, 9, 122, // Opcode: C_LT_D32_MM
/* 5818 */    MCD_OPC_FilterValue, 29, 9, 0, 0, // Skip to: 5832
/* 5823 */    MCD_OPC_CheckPredicate, 17, 176, 2, 0, // Skip to: 6516
/* 5828 */    MCD_OPC_Decode, 129, 10, 122, // Opcode: C_NGE_D32_MM
/* 5832 */    MCD_OPC_FilterValue, 30, 9, 0, 0, // Skip to: 5846
/* 5837 */    MCD_OPC_CheckPredicate, 17, 162, 2, 0, // Skip to: 6516
/* 5842 */    MCD_OPC_Decode, 245, 9, 122, // Opcode: C_LE_D32_MM
/* 5846 */    MCD_OPC_FilterValue, 31, 153, 2, 0, // Skip to: 6516
/* 5851 */    MCD_OPC_CheckPredicate, 17, 148, 2, 0, // Skip to: 6516
/* 5856 */    MCD_OPC_Decode, 147, 10, 122, // Opcode: C_NGT_D32_MM
/* 5860 */    MCD_OPC_FilterValue, 22, 48, 0, 0, // Skip to: 5913
/* 5865 */    MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 5868 */    MCD_OPC_FilterValue, 197, 1, 9, 0, 0, // Skip to: 5883
/* 5874 */    MCD_OPC_CheckPredicate, 8, 125, 2, 0, // Skip to: 6516
/* 5879 */    MCD_OPC_Decode, 223, 8, 43, // Opcode: CMPGU_EQ_QB_MM
/* 5883 */    MCD_OPC_FilterValue, 133, 2, 9, 0, 0, // Skip to: 5898
/* 5889 */    MCD_OPC_CheckPredicate, 8, 110, 2, 0, // Skip to: 6516
/* 5894 */    MCD_OPC_Decode, 227, 8, 43, // Opcode: CMPGU_LT_QB_MM
/* 5898 */    MCD_OPC_FilterValue, 197, 2, 100, 2, 0, // Skip to: 6516
/* 5904 */    MCD_OPC_CheckPredicate, 8, 95, 2, 0, // Skip to: 6516
/* 5909 */    MCD_OPC_Decode, 225, 8, 43, // Opcode: CMPGU_LE_QB_MM
/* 5913 */    MCD_OPC_FilterValue, 24, 99, 1, 0, // Skip to: 6273
/* 5918 */    MCD_OPC_ExtractField, 12, 4,  // Inst{15-12} ...
/* 5921 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5935
/* 5926 */    MCD_OPC_CheckPredicate, 6, 73, 2, 0, // Skip to: 6516
/* 5931 */    MCD_OPC_Decode, 235, 14, 88, // Opcode: LWL_MM
/* 5935 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 5949
/* 5940 */    MCD_OPC_CheckPredicate, 6, 59, 2, 0, // Skip to: 6516
/* 5945 */    MCD_OPC_Decode, 246, 14, 88, // Opcode: LWR_MM
/* 5949 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 5963
/* 5954 */    MCD_OPC_CheckPredicate, 6, 45, 2, 0, // Skip to: 6516
/* 5959 */    MCD_OPC_Decode, 157, 18, 89, // Opcode: PREF_MM
/* 5963 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 5977
/* 5968 */    MCD_OPC_CheckPredicate, 6, 31, 2, 0, // Skip to: 6516
/* 5973 */    MCD_OPC_Decode, 204, 14, 88, // Opcode: LL_MM
/* 5977 */    MCD_OPC_FilterValue, 6, 115, 0, 0, // Skip to: 6097
/* 5982 */    MCD_OPC_ExtractField, 9, 3,  // Inst{11-9} ...
/* 5985 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 5999
/* 5990 */    MCD_OPC_CheckPredicate, 21, 9, 2, 0, // Skip to: 6516
/* 5995 */    MCD_OPC_Decode, 155, 14, 123, // Opcode: LBuE_MM
/* 5999 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 6013
/* 6004 */    MCD_OPC_CheckPredicate, 21, 251, 1, 0, // Skip to: 6516
/* 6009 */    MCD_OPC_Decode, 193, 14, 123, // Opcode: LHuE_MM
/* 6013 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 6027
/* 6018 */    MCD_OPC_CheckPredicate, 22, 237, 1, 0, // Skip to: 6516
/* 6023 */    MCD_OPC_Decode, 234, 14, 123, // Opcode: LWLE_MM
/* 6027 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 6041
/* 6032 */    MCD_OPC_CheckPredicate, 22, 223, 1, 0, // Skip to: 6516
/* 6037 */    MCD_OPC_Decode, 245, 14, 123, // Opcode: LWRE_MM
/* 6041 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 6055
/* 6046 */    MCD_OPC_CheckPredicate, 21, 209, 1, 0, // Skip to: 6516
/* 6051 */    MCD_OPC_Decode, 145, 14, 123, // Opcode: LBE_MM
/* 6055 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 6069
/* 6060 */    MCD_OPC_CheckPredicate, 21, 195, 1, 0, // Skip to: 6516
/* 6065 */    MCD_OPC_Decode, 185, 14, 123, // Opcode: LHE_MM
/* 6069 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 6083
/* 6074 */    MCD_OPC_CheckPredicate, 21, 181, 1, 0, // Skip to: 6516
/* 6079 */    MCD_OPC_Decode, 203, 14, 123, // Opcode: LLE_MM
/* 6083 */    MCD_OPC_FilterValue, 7, 172, 1, 0, // Skip to: 6516
/* 6088 */    MCD_OPC_CheckPredicate, 21, 167, 1, 0, // Skip to: 6516
/* 6093 */    MCD_OPC_Decode, 229, 14, 123, // Opcode: LWE_MM
/* 6097 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 6111
/* 6102 */    MCD_OPC_CheckPredicate, 6, 153, 1, 0, // Skip to: 6516
/* 6107 */    MCD_OPC_Decode, 141, 21, 88, // Opcode: SWL_MM
/* 6111 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 6125
/* 6116 */    MCD_OPC_CheckPredicate, 6, 139, 1, 0, // Skip to: 6516
/* 6121 */    MCD_OPC_Decode, 150, 21, 88, // Opcode: SWR_MM
/* 6125 */    MCD_OPC_FilterValue, 10, 115, 0, 0, // Skip to: 6245
/* 6130 */    MCD_OPC_ExtractField, 9, 3,  // Inst{11-9} ...
/* 6133 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 6147
/* 6138 */    MCD_OPC_CheckPredicate, 22, 117, 1, 0, // Skip to: 6516
/* 6143 */    MCD_OPC_Decode, 140, 21, 123, // Opcode: SWLE_MM
/* 6147 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 6161
/* 6152 */    MCD_OPC_CheckPredicate, 22, 103, 1, 0, // Skip to: 6516
/* 6157 */    MCD_OPC_Decode, 149, 21, 123, // Opcode: SWRE_MM
/* 6161 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 6175
/* 6166 */    MCD_OPC_CheckPredicate, 21, 89, 1, 0, // Skip to: 6516
/* 6171 */    MCD_OPC_Decode, 155, 18, 124, // Opcode: PREFE_MM
/* 6175 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 6189
/* 6180 */    MCD_OPC_CheckPredicate, 21, 75, 1, 0, // Skip to: 6516
/* 6185 */    MCD_OPC_Decode, 141, 8, 124, // Opcode: CACHEE_MM
/* 6189 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 6203
/* 6194 */    MCD_OPC_CheckPredicate, 21, 61, 1, 0, // Skip to: 6516
/* 6199 */    MCD_OPC_Decode, 229, 18, 123, // Opcode: SBE_MM
/* 6203 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 6217
/* 6208 */    MCD_OPC_CheckPredicate, 21, 47, 1, 0, // Skip to: 6516
/* 6213 */    MCD_OPC_Decode, 166, 19, 123, // Opcode: SHE_MM
/* 6217 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 6231
/* 6222 */    MCD_OPC_CheckPredicate, 21, 33, 1, 0, // Skip to: 6516
/* 6227 */    MCD_OPC_Decode, 238, 18, 123, // Opcode: SCE_MM
/* 6231 */    MCD_OPC_FilterValue, 7, 24, 1, 0, // Skip to: 6516
/* 6236 */    MCD_OPC_CheckPredicate, 21, 19, 1, 0, // Skip to: 6516
/* 6241 */    MCD_OPC_Decode, 136, 21, 123, // Opcode: SWE_MM
/* 6245 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 6259
/* 6250 */    MCD_OPC_CheckPredicate, 6, 5, 1, 0, // Skip to: 6516
/* 6255 */    MCD_OPC_Decode, 239, 18, 88, // Opcode: SC_MM
/* 6259 */    MCD_OPC_FilterValue, 14, 252, 0, 0, // Skip to: 6516
/* 6264 */    MCD_OPC_CheckPredicate, 6, 247, 0, 0, // Skip to: 6516
/* 6269 */    MCD_OPC_Decode, 249, 14, 88, // Opcode: LWU_MM
/* 6273 */    MCD_OPC_FilterValue, 28, 9, 0, 0, // Skip to: 6287
/* 6278 */    MCD_OPC_CheckPredicate, 6, 233, 0, 0, // Skip to: 6516
/* 6283 */    MCD_OPC_Decode, 146, 22, 97, // Opcode: XORi_MM
/* 6287 */    MCD_OPC_FilterValue, 29, 9, 0, 0, // Skip to: 6301
/* 6292 */    MCD_OPC_CheckPredicate, 6, 219, 0, 0, // Skip to: 6516
/* 6297 */    MCD_OPC_Decode, 241, 13, 125, // Opcode: JALS_MM
/* 6301 */    MCD_OPC_FilterValue, 30, 9, 0, 0, // Skip to: 6315
/* 6306 */    MCD_OPC_CheckPredicate, 6, 205, 0, 0, // Skip to: 6516
/* 6311 */    MCD_OPC_Decode, 196, 5, 126, // Opcode: ADDIUPC_MM
/* 6315 */    MCD_OPC_FilterValue, 36, 9, 0, 0, // Skip to: 6329
/* 6320 */    MCD_OPC_CheckPredicate, 7, 191, 0, 0, // Skip to: 6516
/* 6325 */    MCD_OPC_Decode, 252, 19, 86, // Opcode: SLTi_MM
/* 6329 */    MCD_OPC_FilterValue, 37, 9, 0, 0, // Skip to: 6343
/* 6334 */    MCD_OPC_CheckPredicate, 6, 177, 0, 0, // Skip to: 6516
/* 6339 */    MCD_OPC_Decode, 248, 6, 127, // Opcode: BEQ_MM
/* 6343 */    MCD_OPC_FilterValue, 38, 10, 0, 0, // Skip to: 6358
/* 6348 */    MCD_OPC_CheckPredicate, 19, 163, 0, 0, // Skip to: 6516
/* 6353 */    MCD_OPC_Decode, 128, 21, 128, 1, // Opcode: SWC1_MM
/* 6358 */    MCD_OPC_FilterValue, 39, 10, 0, 0, // Skip to: 6373
/* 6363 */    MCD_OPC_CheckPredicate, 19, 148, 0, 0, // Skip to: 6516
/* 6368 */    MCD_OPC_Decode, 221, 14, 128, 1, // Opcode: LWC1_MM
/* 6373 */    MCD_OPC_FilterValue, 44, 9, 0, 0, // Skip to: 6387
/* 6378 */    MCD_OPC_CheckPredicate, 7, 133, 0, 0, // Skip to: 6516
/* 6383 */    MCD_OPC_Decode, 255, 19, 86, // Opcode: SLTiu_MM
/* 6387 */    MCD_OPC_FilterValue, 45, 9, 0, 0, // Skip to: 6401
/* 6392 */    MCD_OPC_CheckPredicate, 6, 119, 0, 0, // Skip to: 6516
/* 6397 */    MCD_OPC_Decode, 223, 7, 127, // Opcode: BNE_MM
/* 6401 */    MCD_OPC_FilterValue, 46, 10, 0, 0, // Skip to: 6416
/* 6406 */    MCD_OPC_CheckPredicate, 18, 105, 0, 0, // Skip to: 6516
/* 6411 */    MCD_OPC_Decode, 252, 18, 128, 1, // Opcode: SDC1_MM
/* 6416 */    MCD_OPC_FilterValue, 47, 10, 0, 0, // Skip to: 6431
/* 6421 */    MCD_OPC_CheckPredicate, 18, 90, 0, 0, // Skip to: 6516
/* 6426 */    MCD_OPC_Decode, 161, 14, 128, 1, // Opcode: LDC1_MM
/* 6431 */    MCD_OPC_FilterValue, 52, 9, 0, 0, // Skip to: 6445
/* 6436 */    MCD_OPC_CheckPredicate, 6, 75, 0, 0, // Skip to: 6516
/* 6441 */    MCD_OPC_Decode, 158, 6, 97, // Opcode: ANDi_MM
/* 6445 */    MCD_OPC_FilterValue, 53, 9, 0, 0, // Skip to: 6459
/* 6450 */    MCD_OPC_CheckPredicate, 6, 61, 0, 0, // Skip to: 6516
/* 6455 */    MCD_OPC_Decode, 135, 14, 125, // Opcode: J_MM
/* 6459 */    MCD_OPC_FilterValue, 60, 10, 0, 0, // Skip to: 6474
/* 6464 */    MCD_OPC_CheckPredicate, 6, 47, 0, 0, // Skip to: 6516
/* 6469 */    MCD_OPC_Decode, 243, 13, 129, 1, // Opcode: JALX_MM
/* 6474 */    MCD_OPC_FilterValue, 61, 9, 0, 0, // Skip to: 6488
/* 6479 */    MCD_OPC_CheckPredicate, 6, 32, 0, 0, // Skip to: 6516
/* 6484 */    MCD_OPC_Decode, 244, 13, 125, // Opcode: JAL_MM
/* 6488 */    MCD_OPC_FilterValue, 62, 9, 0, 0, // Skip to: 6502
/* 6493 */    MCD_OPC_CheckPredicate, 7, 18, 0, 0, // Skip to: 6516
/* 6498 */    MCD_OPC_Decode, 155, 21, 87, // Opcode: SW_MM
/* 6502 */    MCD_OPC_FilterValue, 63, 9, 0, 0, // Skip to: 6516
/* 6507 */    MCD_OPC_CheckPredicate, 7, 4, 0, 0, // Skip to: 6516
/* 6512 */    MCD_OPC_Decode, 255, 14, 87, // Opcode: LW_MM
/* 6516 */    MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMipsDSP32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 62, 10, 0, 0, // Skip to: 18
/* 8 */       MCD_OPC_CheckPredicate, 8, 20, 0, 0, // Skip to: 33
/* 13 */      MCD_OPC_Decode, 134, 21, 130, 1, // Opcode: SWDSP_MM
/* 18 */      MCD_OPC_FilterValue, 63, 10, 0, 0, // Skip to: 33
/* 23 */      MCD_OPC_CheckPredicate, 8, 5, 0, 0, // Skip to: 33
/* 28 */      MCD_OPC_Decode, 227, 14, 130, 1, // Opcode: LWDSP_MM
/* 33 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMipsFP6432[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 21, 39, 1, 0, // Skip to: 303
/* 8 */       MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 11 */      MCD_OPC_FilterValue, 59, 48, 0, 0, // Skip to: 64
/* 16 */      MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 19 */      MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 34
/* 24 */      MCD_OPC_CheckPredicate, 20, 48, 1, 0, // Skip to: 333
/* 29 */      MCD_OPC_Decode, 221, 16, 131, 1, // Opcode: MTC1_D64_MM
/* 34 */      MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 49
/* 39 */      MCD_OPC_CheckPredicate, 20, 33, 1, 0, // Skip to: 333
/* 44 */      MCD_OPC_Decode, 216, 15, 132, 1, // Opcode: MFHC1_D64_MM
/* 49 */      MCD_OPC_FilterValue, 7, 23, 1, 0, // Skip to: 333
/* 54 */      MCD_OPC_CheckPredicate, 20, 18, 1, 0, // Skip to: 333
/* 59 */      MCD_OPC_Decode, 232, 16, 133, 1, // Opcode: MTHC1_D64_MM
/* 64 */      MCD_OPC_FilterValue, 123, 16, 0, 0, // Skip to: 85
/* 69 */      MCD_OPC_CheckPredicate, 20, 3, 1, 0, // Skip to: 333
/* 74 */      MCD_OPC_CheckField, 11, 5, 4, 252, 0, 0, // Skip to: 333
/* 81 */      MCD_OPC_Decode, 228, 12, 111, // Opcode: FMOV_D64_MM
/* 85 */      MCD_OPC_FilterValue, 176, 2, 10, 0, 0, // Skip to: 101
/* 91 */      MCD_OPC_CheckPredicate, 20, 237, 0, 0, // Skip to: 333
/* 96 */      MCD_OPC_Decode, 138, 12, 134, 1, // Opcode: FADD_D64_MM
/* 101 */     MCD_OPC_FilterValue, 187, 2, 17, 0, 0, // Skip to: 124
/* 107 */     MCD_OPC_CheckPredicate, 20, 221, 0, 0, // Skip to: 333
/* 112 */     MCD_OPC_CheckField, 11, 5, 9, 214, 0, 0, // Skip to: 333
/* 119 */     MCD_OPC_Decode, 228, 9, 135, 1, // Opcode: CVT_W_D64_MM
/* 124 */     MCD_OPC_FilterValue, 240, 2, 10, 0, 0, // Skip to: 140
/* 130 */     MCD_OPC_CheckPredicate, 20, 198, 0, 0, // Skip to: 333
/* 135 */     MCD_OPC_Decode, 155, 13, 134, 1, // Opcode: FSUB_D64_MM
/* 140 */     MCD_OPC_FilterValue, 176, 3, 10, 0, 0, // Skip to: 156
/* 146 */     MCD_OPC_CheckPredicate, 20, 182, 0, 0, // Skip to: 333
/* 151 */     MCD_OPC_Decode, 239, 12, 134, 1, // Opcode: FMUL_D64_MM
/* 156 */     MCD_OPC_FilterValue, 240, 3, 10, 0, 0, // Skip to: 172
/* 162 */     MCD_OPC_CheckPredicate, 20, 166, 0, 0, // Skip to: 333
/* 167 */     MCD_OPC_Decode, 177, 12, 134, 1, // Opcode: FDIV_D64_MM
/* 172 */     MCD_OPC_FilterValue, 187, 4, 45, 0, 0, // Skip to: 223
/* 178 */     MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 181 */     MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 195
/* 186 */     MCD_OPC_CheckPredicate, 20, 142, 0, 0, // Skip to: 333
/* 191 */     MCD_OPC_Decode, 209, 18, 111, // Opcode: RSQRT_D64_MM
/* 195 */     MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 209
/* 200 */     MCD_OPC_CheckPredicate, 20, 128, 0, 0, // Skip to: 333
/* 205 */     MCD_OPC_Decode, 147, 13, 111, // Opcode: FSQRT_D64_MM
/* 209 */     MCD_OPC_FilterValue, 10, 119, 0, 0, // Skip to: 333
/* 214 */     MCD_OPC_CheckPredicate, 20, 114, 0, 0, // Skip to: 333
/* 219 */     MCD_OPC_Decode, 176, 18, 111, // Opcode: RECIP_D64_MM
/* 223 */     MCD_OPC_FilterValue, 251, 6, 104, 0, 0, // Skip to: 333
/* 229 */     MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 232 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 246
/* 237 */     MCD_OPC_CheckPredicate, 20, 91, 0, 0, // Skip to: 333
/* 242 */     MCD_OPC_Decode, 201, 9, 110, // Opcode: CVT_D64_S_MM
/* 246 */     MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 261
/* 251 */     MCD_OPC_CheckPredicate, 20, 77, 0, 0, // Skip to: 333
/* 256 */     MCD_OPC_Decode, 217, 9, 135, 1, // Opcode: CVT_S_D64_MM
/* 261 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 275
/* 266 */     MCD_OPC_CheckPredicate, 20, 62, 0, 0, // Skip to: 333
/* 271 */     MCD_OPC_Decode, 131, 12, 111, // Opcode: FABS_D64_MM
/* 275 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 289
/* 280 */     MCD_OPC_CheckPredicate, 20, 48, 0, 0, // Skip to: 333
/* 285 */     MCD_OPC_Decode, 248, 12, 111, // Opcode: FNEG_D64_MM
/* 289 */     MCD_OPC_FilterValue, 6, 39, 0, 0, // Skip to: 333
/* 294 */     MCD_OPC_CheckPredicate, 20, 34, 0, 0, // Skip to: 333
/* 299 */     MCD_OPC_Decode, 203, 9, 110, // Opcode: CVT_D64_W_MM
/* 303 */     MCD_OPC_FilterValue, 46, 10, 0, 0, // Skip to: 318
/* 308 */     MCD_OPC_CheckPredicate, 23, 20, 0, 0, // Skip to: 333
/* 313 */     MCD_OPC_Decode, 251, 18, 128, 1, // Opcode: SDC1_D64_MMR6
/* 318 */     MCD_OPC_FilterValue, 47, 10, 0, 0, // Skip to: 333
/* 323 */     MCD_OPC_CheckPredicate, 23, 5, 0, 0, // Skip to: 333
/* 328 */     MCD_OPC_Decode, 160, 14, 128, 1, // Opcode: LDC1_D64_MMR6
/* 333 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMipsR616[] = {
/* 0 */       MCD_OPC_ExtractField, 10, 6,  // Inst{15-10} ...
/* 3 */       MCD_OPC_FilterValue, 1, 33, 0, 0, // Skip to: 41
/* 8 */       MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 26
/* 16 */      MCD_OPC_CheckPredicate, 24, 173, 1, 0, // Skip to: 450
/* 21 */      MCD_OPC_Decode, 233, 5, 136, 1, // Opcode: ADDU16_MMR6
/* 26 */      MCD_OPC_FilterValue, 1, 163, 1, 0, // Skip to: 450
/* 31 */      MCD_OPC_CheckPredicate, 24, 158, 1, 0, // Skip to: 450
/* 36 */      MCD_OPC_Decode, 222, 20, 136, 1, // Opcode: SUBU16_MMR6
/* 41 */      MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 55
/* 46 */      MCD_OPC_CheckPredicate, 24, 143, 1, 0, // Skip to: 450
/* 51 */      MCD_OPC_Decode, 148, 16, 22, // Opcode: MOVE16_MMR6
/* 55 */      MCD_OPC_FilterValue, 9, 31, 0, 0, // Skip to: 91
/* 60 */      MCD_OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 63 */      MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 77
/* 68 */      MCD_OPC_CheckPredicate, 24, 121, 1, 0, // Skip to: 450
/* 73 */      MCD_OPC_Decode, 232, 19, 23, // Opcode: SLL16_MMR6
/* 77 */      MCD_OPC_FilterValue, 1, 112, 1, 0, // Skip to: 450
/* 82 */      MCD_OPC_CheckPredicate, 24, 107, 1, 0, // Skip to: 450
/* 87 */      MCD_OPC_Decode, 163, 20, 23, // Opcode: SRL16_MMR6
/* 91 */      MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 105
/* 96 */      MCD_OPC_CheckPredicate, 24, 93, 1, 0, // Skip to: 450
/* 101 */     MCD_OPC_Decode, 150, 6, 24, // Opcode: ANDI16_MMR6
/* 105 */     MCD_OPC_FilterValue, 17, 228, 0, 0, // Skip to: 338
/* 110 */     MCD_OPC_ExtractField, 2, 1,  // Inst{2} ...
/* 113 */     MCD_OPC_FilterValue, 0, 206, 0, 0, // Skip to: 324
/* 118 */     MCD_OPC_ExtractField, 0, 2,  // Inst{1-0} ...
/* 121 */     MCD_OPC_FilterValue, 0, 33, 0, 0, // Skip to: 159
/* 126 */     MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 129 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 144
/* 134 */     MCD_OPC_CheckPredicate, 24, 55, 1, 0, // Skip to: 450
/* 139 */     MCD_OPC_Decode, 207, 17, 137, 1, // Opcode: NOT16_MMR6
/* 144 */     MCD_OPC_FilterValue, 1, 45, 1, 0, // Skip to: 450
/* 149 */     MCD_OPC_CheckPredicate, 24, 40, 1, 0, // Skip to: 450
/* 154 */     MCD_OPC_Decode, 137, 22, 138, 1, // Opcode: XOR16_MMR6
/* 159 */     MCD_OPC_FilterValue, 1, 33, 0, 0, // Skip to: 197
/* 164 */     MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 167 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 182
/* 172 */     MCD_OPC_CheckPredicate, 24, 17, 1, 0, // Skip to: 450
/* 177 */     MCD_OPC_Decode, 147, 6, 138, 1, // Opcode: AND16_MMR6
/* 182 */     MCD_OPC_FilterValue, 1, 7, 1, 0, // Skip to: 450
/* 187 */     MCD_OPC_CheckPredicate, 24, 2, 1, 0, // Skip to: 450
/* 192 */     MCD_OPC_Decode, 212, 17, 138, 1, // Opcode: OR16_MMR6
/* 197 */     MCD_OPC_FilterValue, 2, 31, 0, 0, // Skip to: 233
/* 202 */     MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 205 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 219
/* 210 */     MCD_OPC_CheckPredicate, 24, 235, 0, 0, // Skip to: 450
/* 215 */     MCD_OPC_Decode, 237, 14, 27, // Opcode: LWM16_MMR6
/* 219 */     MCD_OPC_FilterValue, 1, 226, 0, 0, // Skip to: 450
/* 224 */     MCD_OPC_CheckPredicate, 24, 221, 0, 0, // Skip to: 450
/* 229 */     MCD_OPC_Decode, 143, 21, 27, // Opcode: SWM16_MMR6
/* 233 */     MCD_OPC_FilterValue, 3, 212, 0, 0, // Skip to: 450
/* 238 */     MCD_OPC_ExtractField, 3, 2,  // Inst{4-3} ...
/* 241 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 256
/* 246 */     MCD_OPC_CheckPredicate, 24, 199, 0, 0, // Skip to: 450
/* 251 */     MCD_OPC_Decode, 128, 14, 139, 1, // Opcode: JRC16_MMR6
/* 256 */     MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 271
/* 261 */     MCD_OPC_CheckPredicate, 24, 184, 0, 0, // Skip to: 450
/* 266 */     MCD_OPC_Decode, 233, 13, 139, 1, // Opcode: JALRC16_MMR6
/* 271 */     MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 286
/* 276 */     MCD_OPC_CheckPredicate, 24, 169, 0, 0, // Skip to: 450
/* 281 */     MCD_OPC_Decode, 129, 14, 140, 1, // Opcode: JRCADDIUSP_MMR6
/* 286 */     MCD_OPC_FilterValue, 3, 159, 0, 0, // Skip to: 450
/* 291 */     MCD_OPC_ExtractField, 5, 1,  // Inst{5} ...
/* 294 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 309
/* 299 */     MCD_OPC_CheckPredicate, 24, 146, 0, 0, // Skip to: 450
/* 304 */     MCD_OPC_Decode, 238, 7, 141, 1, // Opcode: BREAK16_MMR6
/* 309 */     MCD_OPC_FilterValue, 1, 136, 0, 0, // Skip to: 450
/* 314 */     MCD_OPC_CheckPredicate, 24, 131, 0, 0, // Skip to: 450
/* 319 */     MCD_OPC_Decode, 245, 18, 141, 1, // Opcode: SDBBP16_MMR6
/* 324 */     MCD_OPC_FilterValue, 1, 121, 0, 0, // Skip to: 450
/* 329 */     MCD_OPC_CheckPredicate, 24, 116, 0, 0, // Skip to: 450
/* 334 */     MCD_OPC_Decode, 150, 16, 37, // Opcode: MOVEP_MMR6
/* 338 */     MCD_OPC_FilterValue, 34, 9, 0, 0, // Skip to: 352
/* 343 */     MCD_OPC_CheckPredicate, 24, 102, 0, 0, // Skip to: 450
/* 348 */     MCD_OPC_Decode, 226, 18, 21, // Opcode: SB16_MMR6
/* 352 */     MCD_OPC_FilterValue, 35, 9, 0, 0, // Skip to: 366
/* 357 */     MCD_OPC_CheckPredicate, 24, 88, 0, 0, // Skip to: 450
/* 362 */     MCD_OPC_Decode, 244, 6, 38, // Opcode: BEQZC16_MMR6
/* 366 */     MCD_OPC_FilterValue, 42, 9, 0, 0, // Skip to: 380
/* 371 */     MCD_OPC_CheckPredicate, 24, 74, 0, 0, // Skip to: 450
/* 376 */     MCD_OPC_Decode, 163, 19, 21, // Opcode: SH16_MMR6
/* 380 */     MCD_OPC_FilterValue, 43, 9, 0, 0, // Skip to: 394
/* 385 */     MCD_OPC_CheckPredicate, 24, 60, 0, 0, // Skip to: 450
/* 390 */     MCD_OPC_Decode, 219, 7, 38, // Opcode: BNEZC16_MMR6
/* 394 */     MCD_OPC_FilterValue, 50, 9, 0, 0, // Skip to: 408
/* 399 */     MCD_OPC_CheckPredicate, 24, 46, 0, 0, // Skip to: 450
/* 404 */     MCD_OPC_Decode, 152, 21, 31, // Opcode: SWSP_MMR6
/* 408 */     MCD_OPC_FilterValue, 51, 9, 0, 0, // Skip to: 422
/* 413 */     MCD_OPC_CheckPredicate, 24, 32, 0, 0, // Skip to: 450
/* 418 */     MCD_OPC_Decode, 210, 6, 39, // Opcode: BC16_MMR6
/* 422 */     MCD_OPC_FilterValue, 58, 9, 0, 0, // Skip to: 436
/* 427 */     MCD_OPC_CheckPredicate, 24, 18, 0, 0, // Skip to: 450
/* 432 */     MCD_OPC_Decode, 253, 20, 21, // Opcode: SW16_MMR6
/* 436 */     MCD_OPC_FilterValue, 59, 9, 0, 0, // Skip to: 450
/* 441 */     MCD_OPC_CheckPredicate, 24, 4, 0, 0, // Skip to: 450
/* 446 */     MCD_OPC_Decode, 196, 14, 40, // Opcode: LI16_MMR6
/* 450 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMipsR632[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 98, 4, 0, // Skip to: 1130
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 112, 0, 0, // Skip to: 128
/* 16 */      MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 19 */      MCD_OPC_FilterValue, 0, 54, 0, 0, // Skip to: 78
/* 24 */      MCD_OPC_ExtractField, 11, 15,  // Inst{25-11} ...
/* 27 */      MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 41
/* 32 */      MCD_OPC_CheckPredicate, 24, 32, 0, 0, // Skip to: 69
/* 37 */      MCD_OPC_Decode, 185, 20, 0, // Opcode: SSNOP_MMR6
/* 41 */      MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 55
/* 46 */      MCD_OPC_CheckPredicate, 24, 18, 0, 0, // Skip to: 69
/* 51 */      MCD_OPC_Decode, 214, 11, 0, // Opcode: EHB_MMR6
/* 55 */      MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 69
/* 60 */      MCD_OPC_CheckPredicate, 24, 4, 0, 0, // Skip to: 69
/* 65 */      MCD_OPC_Decode, 227, 17, 0, // Opcode: PAUSE_MMR6
/* 69 */      MCD_OPC_CheckPredicate, 24, 78, 12, 0, // Skip to: 3224
/* 74 */      MCD_OPC_Decode, 245, 19, 41, // Opcode: SLL_MMR6
/* 78 */      MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 92
/* 83 */      MCD_OPC_CheckPredicate, 24, 64, 12, 0, // Skip to: 3224
/* 88 */      MCD_OPC_Decode, 145, 19, 44, // Opcode: SELEQZ_MMR6
/* 92 */      MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 106
/* 97 */      MCD_OPC_CheckPredicate, 24, 50, 12, 0, // Skip to: 3224
/* 102 */     MCD_OPC_Decode, 152, 19, 44, // Opcode: SELNEZ_MMR6
/* 106 */     MCD_OPC_FilterValue, 7, 41, 12, 0, // Skip to: 3224
/* 111 */     MCD_OPC_CheckPredicate, 24, 36, 12, 0, // Skip to: 3224
/* 116 */     MCD_OPC_CheckField, 14, 2, 0, 29, 12, 0, // Skip to: 3224
/* 123 */     MCD_OPC_Decode, 171, 18, 142, 1, // Opcode: RDHWR_MMR6
/* 128 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 142
/* 133 */     MCD_OPC_CheckPredicate, 24, 14, 12, 0, // Skip to: 3224
/* 138 */     MCD_OPC_Decode, 240, 7, 45, // Opcode: BREAK_MMR6
/* 142 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 156
/* 147 */     MCD_OPC_CheckPredicate, 24, 0, 12, 0, // Skip to: 3224
/* 152 */     MCD_OPC_Decode, 227, 13, 46, // Opcode: INS_MMR6
/* 156 */     MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 178
/* 161 */     MCD_OPC_CheckPredicate, 24, 242, 11, 0, // Skip to: 3224
/* 166 */     MCD_OPC_CheckField, 6, 3, 0, 235, 11, 0, // Skip to: 3224
/* 173 */     MCD_OPC_Decode, 208, 14, 143, 1, // Opcode: LSA_MMR6
/* 178 */     MCD_OPC_FilterValue, 16, 136, 0, 0, // Skip to: 319
/* 183 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 186 */     MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 207
/* 191 */     MCD_OPC_CheckPredicate, 24, 212, 11, 0, // Skip to: 3224
/* 196 */     MCD_OPC_CheckField, 16, 5, 0, 205, 11, 0, // Skip to: 3224
/* 203 */     MCD_OPC_Decode, 214, 8, 14, // Opcode: CLZ_MMR6
/* 207 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 221
/* 212 */     MCD_OPC_CheckPredicate, 24, 191, 11, 0, // Skip to: 3224
/* 217 */     MCD_OPC_Decode, 134, 6, 44, // Opcode: ADD_MMR6
/* 221 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 235
/* 226 */     MCD_OPC_CheckPredicate, 24, 177, 11, 0, // Skip to: 3224
/* 231 */     MCD_OPC_Decode, 238, 5, 44, // Opcode: ADDU_MMR6
/* 235 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 249
/* 240 */     MCD_OPC_CheckPredicate, 24, 163, 11, 0, // Skip to: 3224
/* 245 */     MCD_OPC_Decode, 245, 20, 44, // Opcode: SUB_MMR6
/* 249 */     MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 263
/* 254 */     MCD_OPC_CheckPredicate, 24, 149, 11, 0, // Skip to: 3224
/* 259 */     MCD_OPC_Decode, 227, 20, 44, // Opcode: SUBU_MMR6
/* 263 */     MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 277
/* 268 */     MCD_OPC_CheckPredicate, 24, 135, 11, 0, // Skip to: 3224
/* 273 */     MCD_OPC_Decode, 154, 6, 44, // Opcode: AND_MMR6
/* 277 */     MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 291
/* 282 */     MCD_OPC_CheckPredicate, 24, 121, 11, 0, // Skip to: 3224
/* 287 */     MCD_OPC_Decode, 217, 17, 44, // Opcode: OR_MMR6
/* 291 */     MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 305
/* 296 */     MCD_OPC_CheckPredicate, 24, 107, 11, 0, // Skip to: 3224
/* 301 */     MCD_OPC_Decode, 204, 17, 44, // Opcode: NOR_MMR6
/* 305 */     MCD_OPC_FilterValue, 12, 98, 11, 0, // Skip to: 3224
/* 310 */     MCD_OPC_CheckPredicate, 24, 93, 11, 0, // Skip to: 3224
/* 315 */     MCD_OPC_Decode, 142, 22, 44, // Opcode: XOR_MMR6
/* 319 */     MCD_OPC_FilterValue, 24, 115, 0, 0, // Skip to: 439
/* 324 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 327 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 341
/* 332 */     MCD_OPC_CheckPredicate, 24, 71, 11, 0, // Skip to: 3224
/* 337 */     MCD_OPC_Decode, 170, 17, 44, // Opcode: MUL_MMR6
/* 341 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 355
/* 346 */     MCD_OPC_CheckPredicate, 24, 57, 11, 0, // Skip to: 3224
/* 351 */     MCD_OPC_Decode, 130, 17, 44, // Opcode: MUH_MMR6
/* 355 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 369
/* 360 */     MCD_OPC_CheckPredicate, 24, 43, 11, 0, // Skip to: 3224
/* 365 */     MCD_OPC_Decode, 164, 17, 44, // Opcode: MULU_MMR6
/* 369 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 383
/* 374 */     MCD_OPC_CheckPredicate, 24, 29, 11, 0, // Skip to: 3224
/* 379 */     MCD_OPC_Decode, 129, 17, 44, // Opcode: MUHU_MMR6
/* 383 */     MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 397
/* 388 */     MCD_OPC_CheckPredicate, 24, 15, 11, 0, // Skip to: 3224
/* 393 */     MCD_OPC_Decode, 232, 10, 44, // Opcode: DIV_MMR6
/* 397 */     MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 411
/* 402 */     MCD_OPC_CheckPredicate, 24, 1, 11, 0, // Skip to: 3224
/* 407 */     MCD_OPC_Decode, 138, 16, 44, // Opcode: MOD_MMR6
/* 411 */     MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 425
/* 416 */     MCD_OPC_CheckPredicate, 24, 243, 10, 0, // Skip to: 3224
/* 421 */     MCD_OPC_Decode, 231, 10, 44, // Opcode: DIVU_MMR6
/* 425 */     MCD_OPC_FilterValue, 7, 234, 10, 0, // Skip to: 3224
/* 430 */     MCD_OPC_CheckPredicate, 24, 229, 10, 0, // Skip to: 3224
/* 435 */     MCD_OPC_Decode, 137, 16, 44, // Opcode: MODU_MMR6
/* 439 */     MCD_OPC_FilterValue, 31, 17, 0, 0, // Skip to: 461
/* 444 */     MCD_OPC_CheckPredicate, 24, 215, 10, 0, // Skip to: 3224
/* 449 */     MCD_OPC_CheckField, 6, 3, 0, 208, 10, 0, // Skip to: 3224
/* 456 */     MCD_OPC_Decode, 142, 6, 144, 1, // Opcode: ALIGN_MMR6
/* 461 */     MCD_OPC_FilterValue, 44, 9, 0, 0, // Skip to: 475
/* 466 */     MCD_OPC_CheckPredicate, 24, 193, 10, 0, // Skip to: 3224
/* 471 */     MCD_OPC_Decode, 255, 11, 55, // Opcode: EXT_MMR6
/* 475 */     MCD_OPC_FilterValue, 52, 45, 0, 0, // Skip to: 525
/* 480 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 483 */     MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 504
/* 488 */     MCD_OPC_CheckPredicate, 24, 171, 10, 0, // Skip to: 3224
/* 493 */     MCD_OPC_CheckField, 14, 2, 0, 164, 10, 0, // Skip to: 3224
/* 500 */     MCD_OPC_Decode, 212, 15, 57, // Opcode: MFHC0_MMR6
/* 504 */     MCD_OPC_FilterValue, 11, 155, 10, 0, // Skip to: 3224
/* 509 */     MCD_OPC_CheckPredicate, 24, 150, 10, 0, // Skip to: 3224
/* 514 */     MCD_OPC_CheckField, 14, 2, 0, 143, 10, 0, // Skip to: 3224
/* 521 */     MCD_OPC_Decode, 228, 16, 58, // Opcode: MTHC0_MMR6
/* 525 */     MCD_OPC_FilterValue, 60, 66, 2, 0, // Skip to: 1108
/* 530 */     MCD_OPC_ExtractField, 14, 2,  // Inst{15-14} ...
/* 533 */     MCD_OPC_FilterValue, 0, 138, 0, 0, // Skip to: 676
/* 538 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 541 */     MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 555
/* 546 */     MCD_OPC_CheckPredicate, 24, 113, 10, 0, // Skip to: 3224
/* 551 */     MCD_OPC_Decode, 203, 15, 57, // Opcode: MFC0_MMR6
/* 555 */     MCD_OPC_FilterValue, 5, 45, 0, 0, // Skip to: 605
/* 560 */     MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 563 */     MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 584
/* 568 */     MCD_OPC_CheckPredicate, 24, 91, 10, 0, // Skip to: 3224
/* 573 */     MCD_OPC_CheckField, 21, 5, 0, 84, 10, 0, // Skip to: 3224
/* 580 */     MCD_OPC_Decode, 209, 11, 81, // Opcode: DVP_MMR6
/* 584 */     MCD_OPC_FilterValue, 7, 75, 10, 0, // Skip to: 3224
/* 589 */     MCD_OPC_CheckPredicate, 24, 70, 10, 0, // Skip to: 3224
/* 594 */     MCD_OPC_CheckField, 21, 5, 0, 63, 10, 0, // Skip to: 3224
/* 601 */     MCD_OPC_Decode, 226, 11, 81, // Opcode: EVP_MMR6
/* 605 */     MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 619
/* 610 */     MCD_OPC_CheckPredicate, 24, 49, 10, 0, // Skip to: 3224
/* 615 */     MCD_OPC_Decode, 218, 16, 58, // Opcode: MTC0_MMR6
/* 619 */     MCD_OPC_FilterValue, 12, 16, 0, 0, // Skip to: 640
/* 624 */     MCD_OPC_CheckPredicate, 24, 35, 10, 0, // Skip to: 3224
/* 629 */     MCD_OPC_CheckField, 11, 3, 1, 28, 10, 0, // Skip to: 3224
/* 636 */     MCD_OPC_Decode, 168, 7, 75, // Opcode: BITSWAP_MMR6
/* 640 */     MCD_OPC_FilterValue, 28, 19, 10, 0, // Skip to: 3224
/* 645 */     MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 648 */     MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 662
/* 653 */     MCD_OPC_CheckPredicate, 24, 6, 10, 0, // Skip to: 3224
/* 658 */     MCD_OPC_Decode, 235, 13, 69, // Opcode: JALRC_MMR6
/* 662 */     MCD_OPC_FilterValue, 3, 253, 9, 0, // Skip to: 3224
/* 667 */     MCD_OPC_CheckPredicate, 24, 248, 9, 0, // Skip to: 3224
/* 672 */     MCD_OPC_Decode, 234, 13, 69, // Opcode: JALRC_HB_MMR6
/* 676 */     MCD_OPC_FilterValue, 1, 10, 1, 0, // Skip to: 947
/* 681 */     MCD_OPC_ExtractField, 11, 3,  // Inst{13-11} ...
/* 684 */     MCD_OPC_FilterValue, 0, 45, 0, 0, // Skip to: 734
/* 689 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 692 */     MCD_OPC_FilterValue, 13, 16, 0, 0, // Skip to: 713
/* 697 */     MCD_OPC_CheckPredicate, 24, 218, 9, 0, // Skip to: 3224
/* 702 */     MCD_OPC_CheckField, 16, 10, 0, 211, 9, 0, // Skip to: 3224
/* 709 */     MCD_OPC_Decode, 213, 21, 0, // Opcode: TLBINV_MMR6
/* 713 */     MCD_OPC_FilterValue, 29, 202, 9, 0, // Skip to: 3224
/* 718 */     MCD_OPC_CheckPredicate, 24, 197, 9, 0, // Skip to: 3224
/* 723 */     MCD_OPC_CheckField, 21, 5, 0, 190, 9, 0, // Skip to: 3224
/* 730 */     MCD_OPC_Decode, 242, 10, 81, // Opcode: DI_MMR6
/* 734 */     MCD_OPC_FilterValue, 1, 31, 0, 0, // Skip to: 770
/* 739 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 742 */     MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 756
/* 747 */     MCD_OPC_CheckPredicate, 24, 168, 9, 0, // Skip to: 3224
/* 752 */     MCD_OPC_Decode, 194, 8, 69, // Opcode: CLO_MMR6
/* 756 */     MCD_OPC_FilterValue, 20, 159, 9, 0, // Skip to: 3224
/* 761 */     MCD_OPC_CheckPredicate, 24, 154, 9, 0, // Skip to: 3224
/* 766 */     MCD_OPC_Decode, 209, 15, 79, // Opcode: MFC2_MMR6
/* 770 */     MCD_OPC_FilterValue, 2, 45, 0, 0, // Skip to: 820
/* 775 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 778 */     MCD_OPC_FilterValue, 13, 16, 0, 0, // Skip to: 799
/* 783 */     MCD_OPC_CheckPredicate, 24, 132, 9, 0, // Skip to: 3224
/* 788 */     MCD_OPC_CheckField, 16, 10, 0, 125, 9, 0, // Skip to: 3224
/* 795 */     MCD_OPC_Decode, 212, 21, 0, // Opcode: TLBINVF_MMR6
/* 799 */     MCD_OPC_FilterValue, 29, 116, 9, 0, // Skip to: 3224
/* 804 */     MCD_OPC_CheckPredicate, 24, 111, 9, 0, // Skip to: 3224
/* 809 */     MCD_OPC_CheckField, 21, 5, 0, 104, 9, 0, // Skip to: 3224
/* 816 */     MCD_OPC_Decode, 217, 11, 81, // Opcode: EI_MMR6
/* 820 */     MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 841
/* 825 */     MCD_OPC_CheckPredicate, 24, 90, 9, 0, // Skip to: 3224
/* 830 */     MCD_OPC_CheckField, 6, 5, 20, 83, 9, 0, // Skip to: 3224
/* 837 */     MCD_OPC_Decode, 225, 16, 80, // Opcode: MTC2_MMR6
/* 841 */     MCD_OPC_FilterValue, 4, 23, 0, 0, // Skip to: 869
/* 846 */     MCD_OPC_CheckPredicate, 25, 69, 9, 0, // Skip to: 3224
/* 851 */     MCD_OPC_CheckField, 21, 5, 0, 62, 9, 0, // Skip to: 3224
/* 858 */     MCD_OPC_CheckField, 6, 3, 5, 55, 9, 0, // Skip to: 3224
/* 865 */     MCD_OPC_Decode, 182, 13, 81, // Opcode: GINVI_MMR6
/* 869 */     MCD_OPC_FilterValue, 5, 23, 0, 0, // Skip to: 897
/* 874 */     MCD_OPC_CheckPredicate, 24, 41, 9, 0, // Skip to: 3224
/* 879 */     MCD_OPC_CheckField, 21, 5, 0, 34, 9, 0, // Skip to: 3224
/* 886 */     MCD_OPC_CheckField, 6, 5, 13, 27, 9, 0, // Skip to: 3224
/* 893 */     MCD_OPC_Decode, 162, 21, 76, // Opcode: SYNC_MMR6
/* 897 */     MCD_OPC_FilterValue, 6, 24, 0, 0, // Skip to: 926
/* 902 */     MCD_OPC_CheckPredicate, 25, 13, 9, 0, // Skip to: 3224
/* 907 */     MCD_OPC_CheckField, 21, 5, 0, 6, 9, 0, // Skip to: 3224
/* 914 */     MCD_OPC_CheckField, 6, 3, 5, 255, 8, 0, // Skip to: 3224
/* 921 */     MCD_OPC_Decode, 184, 13, 145, 1, // Opcode: GINVT_MMR6
/* 926 */     MCD_OPC_FilterValue, 7, 245, 8, 0, // Skip to: 3224
/* 931 */     MCD_OPC_CheckPredicate, 24, 240, 8, 0, // Skip to: 3224
/* 936 */     MCD_OPC_CheckField, 6, 5, 12, 233, 8, 0, // Skip to: 3224
/* 943 */     MCD_OPC_Decode, 134, 22, 69, // Opcode: WSBH_MMR6
/* 947 */     MCD_OPC_FilterValue, 2, 45, 0, 0, // Skip to: 997
/* 952 */     MCD_OPC_ExtractField, 6, 8,  // Inst{13-6} ...
/* 955 */     MCD_OPC_FilterValue, 52, 9, 0, 0, // Skip to: 969
/* 960 */     MCD_OPC_CheckPredicate, 24, 211, 8, 0, // Skip to: 3224
/* 965 */     MCD_OPC_Decode, 217, 15, 79, // Opcode: MFHC2_MMR6
/* 969 */     MCD_OPC_FilterValue, 77, 9, 0, 0, // Skip to: 983
/* 974 */     MCD_OPC_CheckPredicate, 24, 197, 8, 0, // Skip to: 3224
/* 979 */     MCD_OPC_Decode, 128, 22, 77, // Opcode: WAIT_MMR6
/* 983 */     MCD_OPC_FilterValue, 116, 188, 8, 0, // Skip to: 3224
/* 988 */     MCD_OPC_CheckPredicate, 24, 183, 8, 0, // Skip to: 3224
/* 993 */     MCD_OPC_Decode, 233, 16, 80, // Opcode: MTHC2_MMR6
/* 997 */     MCD_OPC_FilterValue, 3, 174, 8, 0, // Skip to: 3224
/* 1002 */    MCD_OPC_ExtractField, 6, 8,  // Inst{13-6} ...
/* 1005 */    MCD_OPC_FilterValue, 109, 9, 0, 0, // Skip to: 1019
/* 1010 */    MCD_OPC_CheckPredicate, 24, 161, 8, 0, // Skip to: 3224
/* 1015 */    MCD_OPC_Decode, 247, 18, 77, // Opcode: SDBBP_MMR6
/* 1019 */    MCD_OPC_FilterValue, 133, 1, 9, 0, 0, // Skip to: 1034
/* 1025 */    MCD_OPC_CheckPredicate, 24, 146, 8, 0, // Skip to: 3224
/* 1030 */    MCD_OPC_Decode, 172, 18, 69, // Opcode: RDPGPR_MMR6
/* 1034 */    MCD_OPC_FilterValue, 141, 1, 16, 0, 0, // Skip to: 1056
/* 1040 */    MCD_OPC_CheckPredicate, 24, 131, 8, 0, // Skip to: 3224
/* 1045 */    MCD_OPC_CheckField, 16, 10, 0, 124, 8, 0, // Skip to: 3224
/* 1052 */    MCD_OPC_Decode, 220, 10, 0, // Opcode: DERET_MMR6
/* 1056 */    MCD_OPC_FilterValue, 197, 1, 9, 0, 0, // Skip to: 1071
/* 1062 */    MCD_OPC_CheckPredicate, 24, 109, 8, 0, // Skip to: 3224
/* 1067 */    MCD_OPC_Decode, 131, 22, 69, // Opcode: WRPGPR_MMR6
/* 1071 */    MCD_OPC_FilterValue, 205, 1, 99, 8, 0, // Skip to: 3224
/* 1077 */    MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 1080 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1094
/* 1085 */    MCD_OPC_CheckPredicate, 24, 86, 8, 0, // Skip to: 3224
/* 1090 */    MCD_OPC_Decode, 223, 11, 0, // Opcode: ERET_MMR6
/* 1094 */    MCD_OPC_FilterValue, 1, 77, 8, 0, // Skip to: 3224
/* 1099 */    MCD_OPC_CheckPredicate, 24, 72, 8, 0, // Skip to: 3224
/* 1104 */    MCD_OPC_Decode, 221, 11, 0, // Opcode: ERETNC_MMR6
/* 1108 */    MCD_OPC_FilterValue, 63, 63, 8, 0, // Skip to: 3224
/* 1113 */    MCD_OPC_CheckPredicate, 24, 58, 8, 0, // Skip to: 3224
/* 1118 */    MCD_OPC_CheckField, 22, 4, 0, 51, 8, 0, // Skip to: 3224
/* 1125 */    MCD_OPC_Decode, 221, 19, 146, 1, // Opcode: SIGRIE_MMR6
/* 1130 */    MCD_OPC_FilterValue, 4, 26, 0, 0, // Skip to: 1161
/* 1135 */    MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 1152
/* 1140 */    MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 1152
/* 1147 */    MCD_OPC_Decode, 210, 14, 147, 1, // Opcode: LUI_MMR6
/* 1152 */    MCD_OPC_CheckPredicate, 24, 19, 8, 0, // Skip to: 3224
/* 1157 */    MCD_OPC_Decode, 172, 6, 97, // Opcode: AUI_MMR6
/* 1161 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1176
/* 1166 */    MCD_OPC_CheckPredicate, 24, 5, 8, 0, // Skip to: 3224
/* 1171 */    MCD_OPC_Decode, 149, 14, 148, 1, // Opcode: LBU_MMR6
/* 1176 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 1190
/* 1181 */    MCD_OPC_CheckPredicate, 24, 246, 7, 0, // Skip to: 3224
/* 1186 */    MCD_OPC_Decode, 231, 18, 87, // Opcode: SB_MMR6
/* 1190 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 1205
/* 1195 */    MCD_OPC_CheckPredicate, 24, 232, 7, 0, // Skip to: 3224
/* 1200 */    MCD_OPC_Decode, 151, 14, 148, 1, // Opcode: LB_MMR6
/* 1205 */    MCD_OPC_FilterValue, 8, 105, 0, 0, // Skip to: 1315
/* 1210 */    MCD_OPC_ExtractField, 12, 4,  // Inst{15-12} ...
/* 1213 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 1235
/* 1218 */    MCD_OPC_CheckPredicate, 24, 209, 7, 0, // Skip to: 3224
/* 1223 */    MCD_OPC_CheckField, 11, 1, 0, 202, 7, 0, // Skip to: 3224
/* 1230 */    MCD_OPC_Decode, 223, 14, 149, 1, // Opcode: LWC2_MMR6
/* 1235 */    MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 1257
/* 1240 */    MCD_OPC_CheckPredicate, 24, 187, 7, 0, // Skip to: 3224
/* 1245 */    MCD_OPC_CheckField, 11, 1, 0, 180, 7, 0, // Skip to: 3224
/* 1252 */    MCD_OPC_Decode, 163, 14, 149, 1, // Opcode: LDC2_MMR6
/* 1257 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 1271
/* 1262 */    MCD_OPC_CheckPredicate, 24, 165, 7, 0, // Skip to: 3224
/* 1267 */    MCD_OPC_Decode, 143, 8, 89, // Opcode: CACHE_MMR6
/* 1271 */    MCD_OPC_FilterValue, 8, 17, 0, 0, // Skip to: 1293
/* 1276 */    MCD_OPC_CheckPredicate, 24, 151, 7, 0, // Skip to: 3224
/* 1281 */    MCD_OPC_CheckField, 11, 1, 0, 144, 7, 0, // Skip to: 3224
/* 1288 */    MCD_OPC_Decode, 130, 21, 149, 1, // Opcode: SWC2_MMR6
/* 1293 */    MCD_OPC_FilterValue, 10, 134, 7, 0, // Skip to: 3224
/* 1298 */    MCD_OPC_CheckPredicate, 24, 129, 7, 0, // Skip to: 3224
/* 1303 */    MCD_OPC_CheckField, 11, 1, 0, 122, 7, 0, // Skip to: 3224
/* 1310 */    MCD_OPC_Decode, 254, 18, 149, 1, // Opcode: SDC2_MMR6
/* 1315 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 1329
/* 1320 */    MCD_OPC_CheckPredicate, 24, 107, 7, 0, // Skip to: 3224
/* 1325 */    MCD_OPC_Decode, 202, 5, 86, // Opcode: ADDIU_MMR6
/* 1329 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 1343
/* 1334 */    MCD_OPC_CheckPredicate, 24, 93, 7, 0, // Skip to: 3224
/* 1339 */    MCD_OPC_Decode, 219, 19, 87, // Opcode: SH_MMR6
/* 1343 */    MCD_OPC_FilterValue, 16, 78, 0, 0, // Skip to: 1426
/* 1348 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 1351 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 1366
/* 1356 */    MCD_OPC_CheckPredicate, 26, 71, 7, 0, // Skip to: 3224
/* 1361 */    MCD_OPC_Decode, 212, 6, 150, 1, // Opcode: BC1EQZC_MMR6
/* 1366 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1381
/* 1371 */    MCD_OPC_CheckPredicate, 26, 56, 7, 0, // Skip to: 3224
/* 1376 */    MCD_OPC_Decode, 217, 6, 150, 1, // Opcode: BC1NEZC_MMR6
/* 1381 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1396
/* 1386 */    MCD_OPC_CheckPredicate, 24, 41, 7, 0, // Skip to: 3224
/* 1391 */    MCD_OPC_Decode, 222, 6, 151, 1, // Opcode: BC2EQZC_MMR6
/* 1396 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1411
/* 1401 */    MCD_OPC_CheckPredicate, 24, 26, 7, 0, // Skip to: 3224
/* 1406 */    MCD_OPC_Decode, 224, 6, 151, 1, // Opcode: BC2NEZC_MMR6
/* 1411 */    MCD_OPC_FilterValue, 12, 16, 7, 0, // Skip to: 3224
/* 1416 */    MCD_OPC_CheckPredicate, 24, 11, 7, 0, // Skip to: 3224
/* 1421 */    MCD_OPC_Decode, 160, 21, 152, 1, // Opcode: SYNCI_MMR6
/* 1426 */    MCD_OPC_FilterValue, 20, 9, 0, 0, // Skip to: 1440
/* 1431 */    MCD_OPC_CheckPredicate, 24, 252, 6, 0, // Skip to: 3224
/* 1436 */    MCD_OPC_Decode, 215, 17, 97, // Opcode: ORI_MMR6
/* 1440 */    MCD_OPC_FilterValue, 21, 87, 5, 0, // Skip to: 2812
/* 1445 */    MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 1448 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1463
/* 1453 */    MCD_OPC_CheckPredicate, 26, 230, 6, 0, // Skip to: 3224
/* 1458 */    MCD_OPC_Decode, 255, 15, 153, 1, // Opcode: MIN_S_MMR6
/* 1463 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1478
/* 1468 */    MCD_OPC_CheckPredicate, 26, 215, 6, 0, // Skip to: 3224
/* 1473 */    MCD_OPC_Decode, 235, 8, 154, 1, // Opcode: CMP_AF_S_MMR6
/* 1478 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1493
/* 1483 */    MCD_OPC_CheckPredicate, 26, 200, 6, 0, // Skip to: 3224
/* 1488 */    MCD_OPC_Decode, 196, 15, 153, 1, // Opcode: MAX_S_MMR6
/* 1493 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 1508
/* 1498 */    MCD_OPC_CheckPredicate, 26, 185, 6, 0, // Skip to: 3224
/* 1503 */    MCD_OPC_Decode, 234, 8, 155, 1, // Opcode: CMP_AF_D_MMR6
/* 1508 */    MCD_OPC_FilterValue, 32, 17, 0, 0, // Skip to: 1530
/* 1513 */    MCD_OPC_CheckPredicate, 24, 170, 6, 0, // Skip to: 3224
/* 1518 */    MCD_OPC_CheckField, 11, 5, 0, 163, 6, 0, // Skip to: 3224
/* 1525 */    MCD_OPC_Decode, 190, 18, 156, 1, // Opcode: RINT_S_MMR6
/* 1530 */    MCD_OPC_FilterValue, 35, 10, 0, 0, // Skip to: 1545
/* 1535 */    MCD_OPC_CheckPredicate, 26, 148, 6, 0, // Skip to: 3224
/* 1540 */    MCD_OPC_Decode, 236, 15, 153, 1, // Opcode: MINA_S_MMR6
/* 1545 */    MCD_OPC_FilterValue, 43, 10, 0, 0, // Skip to: 1560
/* 1550 */    MCD_OPC_CheckPredicate, 26, 133, 6, 0, // Skip to: 3224
/* 1555 */    MCD_OPC_Decode, 177, 15, 153, 1, // Opcode: MAXA_S_MMR6
/* 1560 */    MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 1575
/* 1565 */    MCD_OPC_CheckPredicate, 26, 118, 6, 0, // Skip to: 3224
/* 1570 */    MCD_OPC_Decode, 142, 12, 157, 1, // Opcode: FADD_S_MMR6
/* 1575 */    MCD_OPC_FilterValue, 56, 10, 0, 0, // Skip to: 1590
/* 1580 */    MCD_OPC_CheckPredicate, 24, 103, 6, 0, // Skip to: 3224
/* 1585 */    MCD_OPC_Decode, 147, 19, 153, 1, // Opcode: SELEQZ_S_MMR6
/* 1590 */    MCD_OPC_FilterValue, 59, 31, 0, 0, // Skip to: 1626
/* 1595 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 1598 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 1612
/* 1603 */    MCD_OPC_CheckPredicate, 26, 80, 6, 0, // Skip to: 3224
/* 1608 */    MCD_OPC_Decode, 207, 15, 108, // Opcode: MFC1_MMR6
/* 1612 */    MCD_OPC_FilterValue, 5, 71, 6, 0, // Skip to: 3224
/* 1617 */    MCD_OPC_CheckPredicate, 26, 66, 6, 0, // Skip to: 3224
/* 1622 */    MCD_OPC_Decode, 223, 16, 114, // Opcode: MTC1_MMR6
/* 1626 */    MCD_OPC_FilterValue, 69, 10, 0, 0, // Skip to: 1641
/* 1631 */    MCD_OPC_CheckPredicate, 26, 52, 6, 0, // Skip to: 3224
/* 1636 */    MCD_OPC_Decode, 175, 9, 154, 1, // Opcode: CMP_UN_S_MMR6
/* 1641 */    MCD_OPC_FilterValue, 85, 10, 0, 0, // Skip to: 1656
/* 1646 */    MCD_OPC_CheckPredicate, 26, 37, 6, 0, // Skip to: 3224
/* 1651 */    MCD_OPC_Decode, 173, 9, 155, 1, // Opcode: CMP_UN_D_MMR6
/* 1656 */    MCD_OPC_FilterValue, 96, 17, 0, 0, // Skip to: 1678
/* 1661 */    MCD_OPC_CheckPredicate, 24, 22, 6, 0, // Skip to: 3224
/* 1666 */    MCD_OPC_CheckField, 11, 5, 0, 15, 6, 0, // Skip to: 3224
/* 1673 */    MCD_OPC_Decode, 175, 8, 156, 1, // Opcode: CLASS_S_MMR6
/* 1678 */    MCD_OPC_FilterValue, 112, 10, 0, 0, // Skip to: 1693
/* 1683 */    MCD_OPC_CheckPredicate, 26, 0, 6, 0, // Skip to: 3224
/* 1688 */    MCD_OPC_Decode, 159, 13, 157, 1, // Opcode: FSUB_S_MMR6
/* 1693 */    MCD_OPC_FilterValue, 120, 10, 0, 0, // Skip to: 1708
/* 1698 */    MCD_OPC_CheckPredicate, 24, 241, 5, 0, // Skip to: 3224
/* 1703 */    MCD_OPC_Decode, 154, 19, 153, 1, // Opcode: SELNEZ_S_MMR6
/* 1708 */    MCD_OPC_FilterValue, 123, 31, 0, 0, // Skip to: 1744
/* 1713 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 1716 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1730
/* 1721 */    MCD_OPC_CheckPredicate, 26, 218, 5, 0, // Skip to: 3224
/* 1726 */    MCD_OPC_Decode, 232, 12, 113, // Opcode: FMOV_S_MMR6
/* 1730 */    MCD_OPC_FilterValue, 4, 209, 5, 0, // Skip to: 3224
/* 1735 */    MCD_OPC_CheckPredicate, 26, 204, 5, 0, // Skip to: 3224
/* 1740 */    MCD_OPC_Decode, 229, 12, 111, // Opcode: FMOV_D_MMR6
/* 1744 */    MCD_OPC_FilterValue, 133, 1, 10, 0, 0, // Skip to: 1760
/* 1750 */    MCD_OPC_CheckPredicate, 26, 189, 5, 0, // Skip to: 3224
/* 1755 */    MCD_OPC_Decode, 241, 8, 154, 1, // Opcode: CMP_EQ_S_MMR6
/* 1760 */    MCD_OPC_FilterValue, 149, 1, 10, 0, 0, // Skip to: 1776
/* 1766 */    MCD_OPC_CheckPredicate, 26, 173, 5, 0, // Skip to: 3224
/* 1771 */    MCD_OPC_Decode, 237, 8, 155, 1, // Opcode: CMP_EQ_D_MMR6
/* 1776 */    MCD_OPC_FilterValue, 176, 1, 10, 0, 0, // Skip to: 1792
/* 1782 */    MCD_OPC_CheckPredicate, 26, 157, 5, 0, // Skip to: 3224
/* 1787 */    MCD_OPC_Decode, 243, 12, 157, 1, // Opcode: FMUL_S_MMR6
/* 1792 */    MCD_OPC_FilterValue, 184, 1, 10, 0, 0, // Skip to: 1808
/* 1798 */    MCD_OPC_CheckPredicate, 24, 141, 5, 0, // Skip to: 3224
/* 1803 */    MCD_OPC_Decode, 158, 19, 158, 1, // Opcode: SEL_S_MMR6
/* 1808 */    MCD_OPC_FilterValue, 197, 1, 10, 0, 0, // Skip to: 1824
/* 1814 */    MCD_OPC_CheckPredicate, 26, 125, 5, 0, // Skip to: 3224
/* 1819 */    MCD_OPC_Decode, 163, 9, 154, 1, // Opcode: CMP_UEQ_S_MMR6
/* 1824 */    MCD_OPC_FilterValue, 213, 1, 10, 0, 0, // Skip to: 1840
/* 1830 */    MCD_OPC_CheckPredicate, 26, 109, 5, 0, // Skip to: 3224
/* 1835 */    MCD_OPC_Decode, 161, 9, 155, 1, // Opcode: CMP_UEQ_D_MMR6
/* 1840 */    MCD_OPC_FilterValue, 240, 1, 10, 0, 0, // Skip to: 1856
/* 1846 */    MCD_OPC_CheckPredicate, 26, 93, 5, 0, // Skip to: 3224
/* 1851 */    MCD_OPC_Decode, 180, 12, 157, 1, // Opcode: FDIV_S_MMR6
/* 1856 */    MCD_OPC_FilterValue, 133, 2, 10, 0, 0, // Skip to: 1872
/* 1862 */    MCD_OPC_CheckPredicate, 26, 77, 5, 0, // Skip to: 3224
/* 1867 */    MCD_OPC_Decode, 255, 8, 154, 1, // Opcode: CMP_LT_S_MMR6
/* 1872 */    MCD_OPC_FilterValue, 149, 2, 10, 0, 0, // Skip to: 1888
/* 1878 */    MCD_OPC_CheckPredicate, 26, 61, 5, 0, // Skip to: 3224
/* 1883 */    MCD_OPC_Decode, 251, 8, 155, 1, // Opcode: CMP_LT_D_MMR6
/* 1888 */    MCD_OPC_FilterValue, 187, 2, 45, 0, 0, // Skip to: 1939
/* 1894 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 1897 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 1911
/* 1902 */    MCD_OPC_CheckPredicate, 26, 37, 5, 0, // Skip to: 3224
/* 1907 */    MCD_OPC_Decode, 210, 9, 110, // Opcode: CVT_L_S_MMR6
/* 1911 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1925
/* 1916 */    MCD_OPC_CheckPredicate, 26, 23, 5, 0, // Skip to: 3224
/* 1921 */    MCD_OPC_Decode, 231, 9, 113, // Opcode: CVT_W_S_MMR6
/* 1925 */    MCD_OPC_FilterValue, 8, 14, 5, 0, // Skip to: 3224
/* 1930 */    MCD_OPC_CheckPredicate, 26, 9, 5, 0, // Skip to: 3224
/* 1935 */    MCD_OPC_Decode, 207, 9, 111, // Opcode: CVT_L_D_MMR6
/* 1939 */    MCD_OPC_FilterValue, 197, 2, 10, 0, 0, // Skip to: 1955
/* 1945 */    MCD_OPC_CheckPredicate, 26, 250, 4, 0, // Skip to: 3224
/* 1950 */    MCD_OPC_Decode, 171, 9, 154, 1, // Opcode: CMP_ULT_S_MMR6
/* 1955 */    MCD_OPC_FilterValue, 213, 2, 10, 0, 0, // Skip to: 1971
/* 1961 */    MCD_OPC_CheckPredicate, 26, 234, 4, 0, // Skip to: 3224
/* 1966 */    MCD_OPC_Decode, 169, 9, 155, 1, // Opcode: CMP_ULT_D_MMR6
/* 1971 */    MCD_OPC_FilterValue, 133, 3, 10, 0, 0, // Skip to: 1987
/* 1977 */    MCD_OPC_CheckPredicate, 26, 218, 4, 0, // Skip to: 3224
/* 1982 */    MCD_OPC_Decode, 249, 8, 154, 1, // Opcode: CMP_LE_S_MMR6
/* 1987 */    MCD_OPC_FilterValue, 149, 3, 10, 0, 0, // Skip to: 2003
/* 1993 */    MCD_OPC_CheckPredicate, 26, 202, 4, 0, // Skip to: 3224
/* 1998 */    MCD_OPC_Decode, 245, 8, 155, 1, // Opcode: CMP_LE_D_MMR6
/* 2003 */    MCD_OPC_FilterValue, 184, 3, 10, 0, 0, // Skip to: 2019
/* 2009 */    MCD_OPC_CheckPredicate, 26, 186, 4, 0, // Skip to: 3224
/* 2014 */    MCD_OPC_Decode, 145, 15, 159, 1, // Opcode: MADDF_S_MMR6
/* 2019 */    MCD_OPC_FilterValue, 197, 3, 10, 0, 0, // Skip to: 2035
/* 2025 */    MCD_OPC_CheckPredicate, 26, 170, 4, 0, // Skip to: 3224
/* 2030 */    MCD_OPC_Decode, 167, 9, 154, 1, // Opcode: CMP_ULE_S_MMR6
/* 2035 */    MCD_OPC_FilterValue, 213, 3, 10, 0, 0, // Skip to: 2051
/* 2041 */    MCD_OPC_CheckPredicate, 26, 154, 4, 0, // Skip to: 3224
/* 2046 */    MCD_OPC_Decode, 165, 9, 155, 1, // Opcode: CMP_ULE_D_MMR6
/* 2051 */    MCD_OPC_FilterValue, 248, 3, 10, 0, 0, // Skip to: 2067
/* 2057 */    MCD_OPC_CheckPredicate, 26, 138, 4, 0, // Skip to: 3224
/* 2062 */    MCD_OPC_Decode, 196, 16, 159, 1, // Opcode: MSUBF_S_MMR6
/* 2067 */    MCD_OPC_FilterValue, 131, 4, 10, 0, 0, // Skip to: 2083
/* 2073 */    MCD_OPC_CheckPredicate, 26, 122, 4, 0, // Skip to: 3224
/* 2078 */    MCD_OPC_Decode, 250, 15, 134, 1, // Opcode: MIN_D_MMR6
/* 2083 */    MCD_OPC_FilterValue, 133, 4, 10, 0, 0, // Skip to: 2099
/* 2089 */    MCD_OPC_CheckPredicate, 26, 106, 4, 0, // Skip to: 3224
/* 2094 */    MCD_OPC_Decode, 131, 9, 154, 1, // Opcode: CMP_SAF_S_MMR6
/* 2099 */    MCD_OPC_FilterValue, 139, 4, 10, 0, 0, // Skip to: 2115
/* 2105 */    MCD_OPC_CheckPredicate, 26, 90, 4, 0, // Skip to: 3224
/* 2110 */    MCD_OPC_Decode, 191, 15, 134, 1, // Opcode: MAX_D_MMR6
/* 2115 */    MCD_OPC_FilterValue, 149, 4, 10, 0, 0, // Skip to: 2131
/* 2121 */    MCD_OPC_CheckPredicate, 26, 74, 4, 0, // Skip to: 3224
/* 2126 */    MCD_OPC_Decode, 129, 9, 155, 1, // Opcode: CMP_SAF_D_MMR6
/* 2131 */    MCD_OPC_FilterValue, 160, 4, 17, 0, 0, // Skip to: 2154
/* 2137 */    MCD_OPC_CheckPredicate, 24, 58, 4, 0, // Skip to: 3224
/* 2142 */    MCD_OPC_CheckField, 11, 5, 0, 51, 4, 0, // Skip to: 3224
/* 2149 */    MCD_OPC_Decode, 188, 18, 160, 1, // Opcode: RINT_D_MMR6
/* 2154 */    MCD_OPC_FilterValue, 163, 4, 10, 0, 0, // Skip to: 2170
/* 2160 */    MCD_OPC_CheckPredicate, 26, 35, 4, 0, // Skip to: 3224
/* 2165 */    MCD_OPC_Decode, 234, 15, 134, 1, // Opcode: MINA_D_MMR6
/* 2170 */    MCD_OPC_FilterValue, 171, 4, 10, 0, 0, // Skip to: 2186
/* 2176 */    MCD_OPC_CheckPredicate, 26, 19, 4, 0, // Skip to: 3224
/* 2181 */    MCD_OPC_Decode, 175, 15, 134, 1, // Opcode: MAXA_D_MMR6
/* 2186 */    MCD_OPC_FilterValue, 184, 4, 10, 0, 0, // Skip to: 2202
/* 2192 */    MCD_OPC_CheckPredicate, 24, 3, 4, 0, // Skip to: 3224
/* 2197 */    MCD_OPC_Decode, 144, 19, 134, 1, // Opcode: SELEQZ_D_MMR6
/* 2202 */    MCD_OPC_FilterValue, 197, 4, 10, 0, 0, // Skip to: 2218
/* 2208 */    MCD_OPC_CheckPredicate, 26, 243, 3, 0, // Skip to: 3224
/* 2213 */    MCD_OPC_Decode, 159, 9, 154, 1, // Opcode: CMP_SUN_S_MMR6
/* 2218 */    MCD_OPC_FilterValue, 213, 4, 10, 0, 0, // Skip to: 2234
/* 2224 */    MCD_OPC_CheckPredicate, 26, 227, 3, 0, // Skip to: 3224
/* 2229 */    MCD_OPC_Decode, 157, 9, 155, 1, // Opcode: CMP_SUN_D_MMR6
/* 2234 */    MCD_OPC_FilterValue, 224, 4, 17, 0, 0, // Skip to: 2257
/* 2240 */    MCD_OPC_CheckPredicate, 24, 211, 3, 0, // Skip to: 3224
/* 2245 */    MCD_OPC_CheckField, 11, 5, 0, 204, 3, 0, // Skip to: 3224
/* 2252 */    MCD_OPC_Decode, 173, 8, 160, 1, // Opcode: CLASS_D_MMR6
/* 2257 */    MCD_OPC_FilterValue, 248, 4, 10, 0, 0, // Skip to: 2273
/* 2263 */    MCD_OPC_CheckPredicate, 24, 188, 3, 0, // Skip to: 3224
/* 2268 */    MCD_OPC_Decode, 151, 19, 134, 1, // Opcode: SELNEZ_D_MMR6
/* 2273 */    MCD_OPC_FilterValue, 133, 5, 10, 0, 0, // Skip to: 2289
/* 2279 */    MCD_OPC_CheckPredicate, 26, 172, 3, 0, // Skip to: 3224
/* 2284 */    MCD_OPC_Decode, 135, 9, 154, 1, // Opcode: CMP_SEQ_S_MMR6
/* 2289 */    MCD_OPC_FilterValue, 149, 5, 10, 0, 0, // Skip to: 2305
/* 2295 */    MCD_OPC_CheckPredicate, 26, 156, 3, 0, // Skip to: 3224
/* 2300 */    MCD_OPC_Decode, 133, 9, 155, 1, // Opcode: CMP_SEQ_D_MMR6
/* 2305 */    MCD_OPC_FilterValue, 184, 5, 10, 0, 0, // Skip to: 2321
/* 2311 */    MCD_OPC_CheckPredicate, 24, 140, 3, 0, // Skip to: 3224
/* 2316 */    MCD_OPC_Decode, 156, 19, 161, 1, // Opcode: SEL_D_MMR6
/* 2321 */    MCD_OPC_FilterValue, 197, 5, 10, 0, 0, // Skip to: 2337
/* 2327 */    MCD_OPC_CheckPredicate, 26, 124, 3, 0, // Skip to: 3224
/* 2332 */    MCD_OPC_Decode, 147, 9, 154, 1, // Opcode: CMP_SUEQ_S_MMR6
/* 2337 */    MCD_OPC_FilterValue, 213, 5, 10, 0, 0, // Skip to: 2353
/* 2343 */    MCD_OPC_CheckPredicate, 26, 108, 3, 0, // Skip to: 3224
/* 2348 */    MCD_OPC_Decode, 145, 9, 155, 1, // Opcode: CMP_SUEQ_D_MMR6
/* 2353 */    MCD_OPC_FilterValue, 133, 6, 10, 0, 0, // Skip to: 2369
/* 2359 */    MCD_OPC_CheckPredicate, 26, 92, 3, 0, // Skip to: 3224
/* 2364 */    MCD_OPC_Decode, 143, 9, 154, 1, // Opcode: CMP_SLT_S_MMR6
/* 2369 */    MCD_OPC_FilterValue, 149, 6, 10, 0, 0, // Skip to: 2385
/* 2375 */    MCD_OPC_CheckPredicate, 26, 76, 3, 0, // Skip to: 3224
/* 2380 */    MCD_OPC_Decode, 141, 9, 155, 1, // Opcode: CMP_SLT_D_MMR6
/* 2385 */    MCD_OPC_FilterValue, 187, 6, 228, 0, 0, // Skip to: 2619
/* 2391 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 2394 */    MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 2408
/* 2399 */    MCD_OPC_CheckPredicate, 26, 52, 3, 0, // Skip to: 3224
/* 2404 */    MCD_OPC_Decode, 207, 12, 110, // Opcode: FLOOR_L_S_MMR6
/* 2408 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 2422
/* 2413 */    MCD_OPC_CheckPredicate, 26, 38, 3, 0, // Skip to: 3224
/* 2418 */    MCD_OPC_Decode, 214, 12, 113, // Opcode: FLOOR_W_S_MMR6
/* 2422 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2436
/* 2427 */    MCD_OPC_CheckPredicate, 26, 24, 3, 0, // Skip to: 3224
/* 2432 */    MCD_OPC_Decode, 148, 8, 110, // Opcode: CEIL_L_S_MMR6
/* 2436 */    MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 2450
/* 2441 */    MCD_OPC_CheckPredicate, 26, 10, 3, 0, // Skip to: 3224
/* 2446 */    MCD_OPC_Decode, 155, 8, 113, // Opcode: CEIL_W_S_MMR6
/* 2450 */    MCD_OPC_FilterValue, 4, 9, 0, 0, // Skip to: 2464
/* 2455 */    MCD_OPC_CheckPredicate, 26, 252, 2, 0, // Skip to: 3224
/* 2460 */    MCD_OPC_Decode, 236, 21, 110, // Opcode: TRUNC_L_S_MMR6
/* 2464 */    MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 2478
/* 2469 */    MCD_OPC_CheckPredicate, 26, 238, 2, 0, // Skip to: 3224
/* 2474 */    MCD_OPC_Decode, 243, 21, 113, // Opcode: TRUNC_W_S_MMR6
/* 2478 */    MCD_OPC_FilterValue, 6, 9, 0, 0, // Skip to: 2492
/* 2483 */    MCD_OPC_CheckPredicate, 26, 224, 2, 0, // Skip to: 3224
/* 2488 */    MCD_OPC_Decode, 198, 18, 110, // Opcode: ROUND_L_S_MMR6
/* 2492 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 2506
/* 2497 */    MCD_OPC_CheckPredicate, 26, 210, 2, 0, // Skip to: 3224
/* 2502 */    MCD_OPC_Decode, 205, 18, 113, // Opcode: ROUND_W_S_MMR6
/* 2506 */    MCD_OPC_FilterValue, 8, 9, 0, 0, // Skip to: 2520
/* 2511 */    MCD_OPC_CheckPredicate, 26, 196, 2, 0, // Skip to: 3224
/* 2516 */    MCD_OPC_Decode, 205, 12, 111, // Opcode: FLOOR_L_D_MMR6
/* 2520 */    MCD_OPC_FilterValue, 9, 9, 0, 0, // Skip to: 2534
/* 2525 */    MCD_OPC_CheckPredicate, 26, 182, 2, 0, // Skip to: 3224
/* 2530 */    MCD_OPC_Decode, 210, 12, 115, // Opcode: FLOOR_W_D_MMR6
/* 2534 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 2548
/* 2539 */    MCD_OPC_CheckPredicate, 26, 168, 2, 0, // Skip to: 3224
/* 2544 */    MCD_OPC_Decode, 146, 8, 111, // Opcode: CEIL_L_D_MMR6
/* 2548 */    MCD_OPC_FilterValue, 11, 9, 0, 0, // Skip to: 2562
/* 2553 */    MCD_OPC_CheckPredicate, 26, 154, 2, 0, // Skip to: 3224
/* 2558 */    MCD_OPC_Decode, 151, 8, 115, // Opcode: CEIL_W_D_MMR6
/* 2562 */    MCD_OPC_FilterValue, 12, 9, 0, 0, // Skip to: 2576
/* 2567 */    MCD_OPC_CheckPredicate, 26, 140, 2, 0, // Skip to: 3224
/* 2572 */    MCD_OPC_Decode, 234, 21, 111, // Opcode: TRUNC_L_D_MMR6
/* 2576 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 2591
/* 2581 */    MCD_OPC_CheckPredicate, 26, 126, 2, 0, // Skip to: 3224
/* 2586 */    MCD_OPC_Decode, 239, 21, 135, 1, // Opcode: TRUNC_W_D_MMR6
/* 2591 */    MCD_OPC_FilterValue, 14, 9, 0, 0, // Skip to: 2605
/* 2596 */    MCD_OPC_CheckPredicate, 26, 111, 2, 0, // Skip to: 3224
/* 2601 */    MCD_OPC_Decode, 196, 18, 111, // Opcode: ROUND_L_D_MMR6
/* 2605 */    MCD_OPC_FilterValue, 15, 102, 2, 0, // Skip to: 3224
/* 2610 */    MCD_OPC_CheckPredicate, 26, 97, 2, 0, // Skip to: 3224
/* 2615 */    MCD_OPC_Decode, 201, 18, 111, // Opcode: ROUND_W_D_MMR6
/* 2619 */    MCD_OPC_FilterValue, 197, 6, 10, 0, 0, // Skip to: 2635
/* 2625 */    MCD_OPC_CheckPredicate, 26, 82, 2, 0, // Skip to: 3224
/* 2630 */    MCD_OPC_Decode, 155, 9, 154, 1, // Opcode: CMP_SULT_S_MMR6
/* 2635 */    MCD_OPC_FilterValue, 213, 6, 10, 0, 0, // Skip to: 2651
/* 2641 */    MCD_OPC_CheckPredicate, 26, 66, 2, 0, // Skip to: 3224
/* 2646 */    MCD_OPC_Decode, 153, 9, 155, 1, // Opcode: CMP_SULT_D_MMR6
/* 2651 */    MCD_OPC_FilterValue, 251, 6, 59, 0, 0, // Skip to: 2716
/* 2657 */    MCD_OPC_ExtractField, 11, 5,  // Inst{15-11} ...
/* 2660 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 2674
/* 2665 */    MCD_OPC_CheckPredicate, 26, 42, 2, 0, // Skip to: 3224
/* 2670 */    MCD_OPC_Decode, 251, 12, 113, // Opcode: FNEG_S_MMR6
/* 2674 */    MCD_OPC_FilterValue, 7, 9, 0, 0, // Skip to: 2688
/* 2679 */    MCD_OPC_CheckPredicate, 26, 28, 2, 0, // Skip to: 3224
/* 2684 */    MCD_OPC_Decode, 224, 9, 113, // Opcode: CVT_S_W_MMR6
/* 2688 */    MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 2702
/* 2693 */    MCD_OPC_CheckPredicate, 23, 14, 2, 0, // Skip to: 3224
/* 2698 */    MCD_OPC_Decode, 204, 9, 111, // Opcode: CVT_D_L_MMR6
/* 2702 */    MCD_OPC_FilterValue, 11, 5, 2, 0, // Skip to: 3224
/* 2707 */    MCD_OPC_CheckPredicate, 23, 0, 2, 0, // Skip to: 3224
/* 2712 */    MCD_OPC_Decode, 219, 9, 110, // Opcode: CVT_S_L_MMR6
/* 2716 */    MCD_OPC_FilterValue, 133, 7, 10, 0, 0, // Skip to: 2732
/* 2722 */    MCD_OPC_CheckPredicate, 26, 241, 1, 0, // Skip to: 3224
/* 2727 */    MCD_OPC_Decode, 139, 9, 154, 1, // Opcode: CMP_SLE_S_MMR6
/* 2732 */    MCD_OPC_FilterValue, 149, 7, 10, 0, 0, // Skip to: 2748
/* 2738 */    MCD_OPC_CheckPredicate, 26, 225, 1, 0, // Skip to: 3224
/* 2743 */    MCD_OPC_Decode, 137, 9, 155, 1, // Opcode: CMP_SLE_D_MMR6
/* 2748 */    MCD_OPC_FilterValue, 184, 7, 10, 0, 0, // Skip to: 2764
/* 2754 */    MCD_OPC_CheckPredicate, 26, 209, 1, 0, // Skip to: 3224
/* 2759 */    MCD_OPC_Decode, 143, 15, 161, 1, // Opcode: MADDF_D_MMR6
/* 2764 */    MCD_OPC_FilterValue, 197, 7, 10, 0, 0, // Skip to: 2780
/* 2770 */    MCD_OPC_CheckPredicate, 26, 193, 1, 0, // Skip to: 3224
/* 2775 */    MCD_OPC_Decode, 151, 9, 154, 1, // Opcode: CMP_SULE_S_MMR6
/* 2780 */    MCD_OPC_FilterValue, 213, 7, 10, 0, 0, // Skip to: 2796
/* 2786 */    MCD_OPC_CheckPredicate, 26, 177, 1, 0, // Skip to: 3224
/* 2791 */    MCD_OPC_Decode, 149, 9, 155, 1, // Opcode: CMP_SULE_D_MMR6
/* 2796 */    MCD_OPC_FilterValue, 248, 7, 166, 1, 0, // Skip to: 3224
/* 2802 */    MCD_OPC_CheckPredicate, 26, 161, 1, 0, // Skip to: 3224
/* 2807 */    MCD_OPC_Decode, 194, 16, 161, 1, // Opcode: MSUBF_D_MMR6
/* 2812 */    MCD_OPC_FilterValue, 24, 59, 0, 0, // Skip to: 2876
/* 2817 */    MCD_OPC_ExtractField, 12, 4,  // Inst{15-12} ...
/* 2820 */    MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 2834
/* 2825 */    MCD_OPC_CheckPredicate, 24, 138, 1, 0, // Skip to: 3224
/* 2830 */    MCD_OPC_Decode, 158, 18, 89, // Opcode: PREF_MMR6
/* 2834 */    MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 2855
/* 2839 */    MCD_OPC_CheckPredicate, 24, 124, 1, 0, // Skip to: 3224
/* 2844 */    MCD_OPC_CheckField, 9, 3, 0, 117, 1, 0, // Skip to: 3224
/* 2851 */    MCD_OPC_Decode, 205, 14, 123, // Opcode: LL_MMR6
/* 2855 */    MCD_OPC_FilterValue, 11, 108, 1, 0, // Skip to: 3224
/* 2860 */    MCD_OPC_CheckPredicate, 24, 103, 1, 0, // Skip to: 3224
/* 2865 */    MCD_OPC_CheckField, 9, 3, 0, 96, 1, 0, // Skip to: 3224
/* 2872 */    MCD_OPC_Decode, 240, 18, 123, // Opcode: SC_MMR6
/* 2876 */    MCD_OPC_FilterValue, 28, 9, 0, 0, // Skip to: 2890
/* 2881 */    MCD_OPC_CheckPredicate, 24, 82, 1, 0, // Skip to: 3224
/* 2886 */    MCD_OPC_Decode, 140, 22, 97, // Opcode: XORI_MMR6
/* 2890 */    MCD_OPC_FilterValue, 29, 27, 0, 0, // Skip to: 2922
/* 2895 */    MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 2912
/* 2900 */    MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 2912
/* 2907 */    MCD_OPC_Decode, 242, 6, 162, 1, // Opcode: BEQZALC_MMR6
/* 2912 */    MCD_OPC_CheckPredicate, 24, 51, 1, 0, // Skip to: 3224
/* 2917 */    MCD_OPC_Decode, 238, 6, 162, 1, // Opcode: BEQC_MMR6
/* 2922 */    MCD_OPC_FilterValue, 30, 71, 0, 0, // Skip to: 2998
/* 2927 */    MCD_OPC_ExtractField, 19, 2,  // Inst{20-19} ...
/* 2930 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2945
/* 2935 */    MCD_OPC_CheckPredicate, 24, 28, 1, 0, // Skip to: 3224
/* 2940 */    MCD_OPC_Decode, 197, 5, 163, 1, // Opcode: ADDIUPC_MMR6
/* 2945 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 2960
/* 2950 */    MCD_OPC_CheckPredicate, 24, 13, 1, 0, // Skip to: 3224
/* 2955 */    MCD_OPC_Decode, 240, 14, 163, 1, // Opcode: LWPC_MMR6
/* 2960 */    MCD_OPC_FilterValue, 3, 3, 1, 0, // Skip to: 3224
/* 2965 */    MCD_OPC_ExtractField, 16, 3,  // Inst{18-16} ...
/* 2968 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 2983
/* 2973 */    MCD_OPC_CheckPredicate, 24, 246, 0, 0, // Skip to: 3224
/* 2978 */    MCD_OPC_Decode, 171, 6, 164, 1, // Opcode: AUIPC_MMR6
/* 2983 */    MCD_OPC_FilterValue, 7, 236, 0, 0, // Skip to: 3224
/* 2988 */    MCD_OPC_CheckPredicate, 24, 231, 0, 0, // Skip to: 3224
/* 2993 */    MCD_OPC_Decode, 144, 6, 164, 1, // Opcode: ALUIPC_MMR6
/* 2998 */    MCD_OPC_FilterValue, 31, 27, 0, 0, // Skip to: 3030
/* 3003 */    MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 3020
/* 3008 */    MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 3020
/* 3015 */    MCD_OPC_Decode, 217, 7, 165, 1, // Opcode: BNEZALC_MMR6
/* 3020 */    MCD_OPC_CheckPredicate, 24, 199, 0, 0, // Skip to: 3224
/* 3025 */    MCD_OPC_Decode, 205, 7, 165, 1, // Opcode: BNEC_MMR6
/* 3030 */    MCD_OPC_FilterValue, 32, 26, 0, 0, // Skip to: 3061
/* 3035 */    MCD_OPC_CheckPredicate, 24, 11, 0, 0, // Skip to: 3051
/* 3040 */    MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 3051
/* 3047 */    MCD_OPC_Decode, 247, 13, 92, // Opcode: JIALC_MMR6
/* 3051 */    MCD_OPC_CheckPredicate, 24, 168, 0, 0, // Skip to: 3224
/* 3056 */    MCD_OPC_Decode, 247, 6, 166, 1, // Opcode: BEQZC_MMR6
/* 3061 */    MCD_OPC_FilterValue, 37, 10, 0, 0, // Skip to: 3076
/* 3066 */    MCD_OPC_CheckPredicate, 24, 153, 0, 0, // Skip to: 3224
/* 3071 */    MCD_OPC_Decode, 233, 6, 167, 1, // Opcode: BC_MMR6
/* 3076 */    MCD_OPC_FilterValue, 40, 26, 0, 0, // Skip to: 3107
/* 3081 */    MCD_OPC_CheckPredicate, 24, 11, 0, 0, // Skip to: 3097
/* 3086 */    MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 3097
/* 3093 */    MCD_OPC_Decode, 250, 13, 92, // Opcode: JIC_MMR6
/* 3097 */    MCD_OPC_CheckPredicate, 24, 122, 0, 0, // Skip to: 3224
/* 3102 */    MCD_OPC_Decode, 222, 7, 166, 1, // Opcode: BNEZC_MMR6
/* 3107 */    MCD_OPC_FilterValue, 45, 10, 0, 0, // Skip to: 3122
/* 3112 */    MCD_OPC_CheckPredicate, 24, 107, 0, 0, // Skip to: 3224
/* 3117 */    MCD_OPC_Decode, 202, 6, 167, 1, // Opcode: BALC_MMR6
/* 3122 */    MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 3137
/* 3127 */    MCD_OPC_CheckPredicate, 24, 92, 0, 0, // Skip to: 3224
/* 3132 */    MCD_OPC_Decode, 254, 6, 168, 1, // Opcode: BGEUC_MMR6
/* 3137 */    MCD_OPC_FilterValue, 52, 9, 0, 0, // Skip to: 3151
/* 3142 */    MCD_OPC_CheckPredicate, 24, 77, 0, 0, // Skip to: 3224
/* 3147 */    MCD_OPC_Decode, 152, 6, 97, // Opcode: ANDI_MMR6
/* 3151 */    MCD_OPC_FilterValue, 53, 10, 0, 0, // Skip to: 3166
/* 3156 */    MCD_OPC_CheckPredicate, 24, 63, 0, 0, // Skip to: 3224
/* 3161 */    MCD_OPC_Decode, 180, 7, 169, 1, // Opcode: BLTC_MMR6
/* 3166 */    MCD_OPC_FilterValue, 56, 10, 0, 0, // Skip to: 3181
/* 3171 */    MCD_OPC_CheckPredicate, 24, 48, 0, 0, // Skip to: 3224
/* 3176 */    MCD_OPC_Decode, 183, 7, 170, 1, // Opcode: BLTUC_MMR6
/* 3181 */    MCD_OPC_FilterValue, 61, 10, 0, 0, // Skip to: 3196
/* 3186 */    MCD_OPC_CheckPredicate, 24, 33, 0, 0, // Skip to: 3224
/* 3191 */    MCD_OPC_Decode, 251, 6, 171, 1, // Opcode: BGEC_MMR6
/* 3196 */    MCD_OPC_FilterValue, 62, 9, 0, 0, // Skip to: 3210
/* 3201 */    MCD_OPC_CheckPredicate, 24, 18, 0, 0, // Skip to: 3224
/* 3206 */    MCD_OPC_Decode, 156, 21, 87, // Opcode: SW_MMR6
/* 3210 */    MCD_OPC_FilterValue, 63, 9, 0, 0, // Skip to: 3224
/* 3215 */    MCD_OPC_CheckPredicate, 24, 4, 0, 0, // Skip to: 3224
/* 3220 */    MCD_OPC_Decode, 128, 15, 87, // Opcode: LW_MMR6
/* 3224 */    MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMicroMipsR6_Ambiguous32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 18
/* 8 */       MCD_OPC_CheckPredicate, 24, 84, 0, 0, // Skip to: 97
/* 13 */      MCD_OPC_Decode, 232, 7, 162, 1, // Opcode: BOVC_MMR6
/* 18 */      MCD_OPC_FilterValue, 31, 10, 0, 0, // Skip to: 33
/* 23 */      MCD_OPC_CheckPredicate, 24, 69, 0, 0, // Skip to: 97
/* 28 */      MCD_OPC_Decode, 225, 7, 165, 1, // Opcode: BNVC_MMR6
/* 33 */      MCD_OPC_FilterValue, 48, 27, 0, 0, // Skip to: 65
/* 38 */      MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 55
/* 43 */      MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 55
/* 50 */      MCD_OPC_Decode, 172, 7, 168, 1, // Opcode: BLEZALC_MMR6
/* 55 */      MCD_OPC_CheckPredicate, 24, 37, 0, 0, // Skip to: 97
/* 60 */      MCD_OPC_Decode, 131, 7, 168, 1, // Opcode: BGEZALC_MMR6
/* 65 */      MCD_OPC_FilterValue, 56, 27, 0, 0, // Skip to: 97
/* 70 */      MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 87
/* 75 */      MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 87
/* 82 */      MCD_OPC_Decode, 143, 7, 170, 1, // Opcode: BGTZALC_MMR6
/* 87 */      MCD_OPC_CheckPredicate, 24, 5, 0, 0, // Skip to: 97
/* 92 */      MCD_OPC_Decode, 188, 7, 170, 1, // Opcode: BLTZALC_MMR6
/* 97 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 101, 4, 0, // Skip to: 1133
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 63, 0, 0, // Skip to: 79
/* 16 */      MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 19 */      MCD_OPC_FilterValue, 0, 178, 66, 0, // Skip to: 17098
/* 24 */      MCD_OPC_ExtractField, 6, 15,  // Inst{20-6} ...
/* 27 */      MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 41
/* 32 */      MCD_OPC_CheckPredicate, 27, 32, 0, 0, // Skip to: 69
/* 37 */      MCD_OPC_Decode, 183, 20, 0, // Opcode: SSNOP
/* 41 */      MCD_OPC_FilterValue, 3, 9, 0, 0, // Skip to: 55
/* 46 */      MCD_OPC_CheckPredicate, 27, 18, 0, 0, // Skip to: 69
/* 51 */      MCD_OPC_Decode, 212, 11, 0, // Opcode: EHB
/* 55 */      MCD_OPC_FilterValue, 5, 9, 0, 0, // Skip to: 69
/* 60 */      MCD_OPC_CheckPredicate, 28, 4, 0, 0, // Skip to: 69
/* 65 */      MCD_OPC_Decode, 225, 17, 0, // Opcode: PAUSE
/* 69 */      MCD_OPC_CheckPredicate, 27, 128, 66, 0, // Skip to: 17098
/* 74 */      MCD_OPC_Decode, 230, 19, 172, 1, // Opcode: SLL
/* 79 */      MCD_OPC_FilterValue, 1, 47, 0, 0, // Skip to: 131
/* 84 */      MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 87 */      MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 109
/* 92 */      MCD_OPC_CheckPredicate, 29, 105, 66, 0, // Skip to: 17098
/* 97 */      MCD_OPC_CheckField, 6, 5, 0, 98, 66, 0, // Skip to: 17098
/* 104 */     MCD_OPC_Decode, 155, 16, 173, 1, // Opcode: MOVF_I
/* 109 */     MCD_OPC_FilterValue, 1, 88, 66, 0, // Skip to: 17098
/* 114 */     MCD_OPC_CheckPredicate, 29, 83, 66, 0, // Skip to: 17098
/* 119 */     MCD_OPC_CheckField, 6, 5, 0, 76, 66, 0, // Skip to: 17098
/* 126 */     MCD_OPC_Decode, 175, 16, 173, 1, // Opcode: MOVT_I
/* 131 */     MCD_OPC_FilterValue, 2, 33, 0, 0, // Skip to: 169
/* 136 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 139 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 154
/* 144 */     MCD_OPC_CheckPredicate, 27, 53, 66, 0, // Skip to: 17098
/* 149 */     MCD_OPC_Decode, 161, 20, 172, 1, // Opcode: SRL
/* 154 */     MCD_OPC_FilterValue, 1, 43, 66, 0, // Skip to: 17098
/* 159 */     MCD_OPC_CheckPredicate, 28, 38, 66, 0, // Skip to: 17098
/* 164 */     MCD_OPC_Decode, 191, 18, 172, 1, // Opcode: ROTR
/* 169 */     MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 191
/* 174 */     MCD_OPC_CheckPredicate, 27, 23, 66, 0, // Skip to: 17098
/* 179 */     MCD_OPC_CheckField, 21, 5, 0, 16, 66, 0, // Skip to: 17098
/* 186 */     MCD_OPC_Decode, 141, 20, 172, 1, // Opcode: SRA
/* 191 */     MCD_OPC_FilterValue, 4, 16, 0, 0, // Skip to: 212
/* 196 */     MCD_OPC_CheckPredicate, 27, 1, 66, 0, // Skip to: 17098
/* 201 */     MCD_OPC_CheckField, 6, 5, 0, 250, 65, 0, // Skip to: 17098
/* 208 */     MCD_OPC_Decode, 239, 19, 44, // Opcode: SLLV
/* 212 */     MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 234
/* 217 */     MCD_OPC_CheckPredicate, 30, 236, 65, 0, // Skip to: 17098
/* 222 */     MCD_OPC_CheckField, 8, 3, 0, 229, 65, 0, // Skip to: 17098
/* 229 */     MCD_OPC_Decode, 207, 14, 174, 1, // Opcode: LSA
/* 234 */     MCD_OPC_FilterValue, 6, 31, 0, 0, // Skip to: 270
/* 239 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 242 */     MCD_OPC_FilterValue, 0, 9, 0, 0, // Skip to: 256
/* 247 */     MCD_OPC_CheckPredicate, 27, 206, 65, 0, // Skip to: 17098
/* 252 */     MCD_OPC_Decode, 176, 20, 44, // Opcode: SRLV
/* 256 */     MCD_OPC_FilterValue, 1, 197, 65, 0, // Skip to: 17098
/* 261 */     MCD_OPC_CheckPredicate, 28, 192, 65, 0, // Skip to: 17098
/* 266 */     MCD_OPC_Decode, 192, 18, 44, // Opcode: ROTRV
/* 270 */     MCD_OPC_FilterValue, 7, 16, 0, 0, // Skip to: 291
/* 275 */     MCD_OPC_CheckPredicate, 27, 178, 65, 0, // Skip to: 17098
/* 280 */     MCD_OPC_CheckField, 6, 5, 0, 171, 65, 0, // Skip to: 17098
/* 287 */     MCD_OPC_Decode, 154, 20, 44, // Opcode: SRAV
/* 291 */     MCD_OPC_FilterValue, 8, 33, 0, 0, // Skip to: 329
/* 296 */     MCD_OPC_ExtractField, 6, 15,  // Inst{20-6} ...
/* 299 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 314
/* 304 */     MCD_OPC_CheckPredicate, 31, 149, 65, 0, // Skip to: 17098
/* 309 */     MCD_OPC_Decode, 251, 13, 175, 1, // Opcode: JR
/* 314 */     MCD_OPC_FilterValue, 16, 139, 65, 0, // Skip to: 17098
/* 319 */     MCD_OPC_CheckPredicate, 32, 134, 65, 0, // Skip to: 17098
/* 324 */     MCD_OPC_Decode, 130, 14, 175, 1, // Opcode: JR_HB
/* 329 */     MCD_OPC_FilterValue, 9, 45, 0, 0, // Skip to: 379
/* 334 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 337 */     MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 358
/* 342 */     MCD_OPC_CheckPredicate, 33, 111, 65, 0, // Skip to: 17098
/* 347 */     MCD_OPC_CheckField, 16, 5, 0, 104, 65, 0, // Skip to: 17098
/* 354 */     MCD_OPC_Decode, 230, 13, 14, // Opcode: JALR
/* 358 */     MCD_OPC_FilterValue, 16, 95, 65, 0, // Skip to: 17098
/* 363 */     MCD_OPC_CheckPredicate, 34, 90, 65, 0, // Skip to: 17098
/* 368 */     MCD_OPC_CheckField, 16, 5, 0, 83, 65, 0, // Skip to: 17098
/* 375 */     MCD_OPC_Decode, 238, 13, 14, // Opcode: JALR_HB
/* 379 */     MCD_OPC_FilterValue, 10, 17, 0, 0, // Skip to: 401
/* 384 */     MCD_OPC_CheckPredicate, 35, 69, 65, 0, // Skip to: 17098
/* 389 */     MCD_OPC_CheckField, 6, 5, 0, 62, 65, 0, // Skip to: 17098
/* 396 */     MCD_OPC_Decode, 187, 16, 176, 1, // Opcode: MOVZ_I_I
/* 401 */     MCD_OPC_FilterValue, 11, 17, 0, 0, // Skip to: 423
/* 406 */     MCD_OPC_CheckPredicate, 35, 47, 65, 0, // Skip to: 17098
/* 411 */     MCD_OPC_CheckField, 6, 5, 0, 40, 65, 0, // Skip to: 17098
/* 418 */     MCD_OPC_Decode, 167, 16, 176, 1, // Opcode: MOVN_I_I
/* 423 */     MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 438
/* 428 */     MCD_OPC_CheckPredicate, 27, 25, 65, 0, // Skip to: 17098
/* 433 */     MCD_OPC_Decode, 163, 21, 177, 1, // Opcode: SYSCALL
/* 438 */     MCD_OPC_FilterValue, 13, 9, 0, 0, // Skip to: 452
/* 443 */     MCD_OPC_CheckPredicate, 27, 10, 65, 0, // Skip to: 17098
/* 448 */     MCD_OPC_Decode, 236, 7, 45, // Opcode: BREAK
/* 452 */     MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 467
/* 457 */     MCD_OPC_CheckPredicate, 36, 252, 64, 0, // Skip to: 17098
/* 462 */     MCD_OPC_Decode, 157, 21, 178, 1, // Opcode: SYNC
/* 467 */     MCD_OPC_FilterValue, 16, 51, 0, 0, // Skip to: 523
/* 472 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 475 */     MCD_OPC_FilterValue, 0, 234, 64, 0, // Skip to: 17098
/* 480 */     MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 483 */     MCD_OPC_FilterValue, 0, 226, 64, 0, // Skip to: 17098
/* 488 */     MCD_OPC_ExtractField, 23, 3,  // Inst{25-23} ...
/* 491 */     MCD_OPC_FilterValue, 0, 218, 64, 0, // Skip to: 17098
/* 496 */     MCD_OPC_CheckPredicate, 31, 12, 0, 0, // Skip to: 513
/* 501 */     MCD_OPC_CheckField, 21, 2, 0, 5, 0, 0, // Skip to: 513
/* 508 */     MCD_OPC_Decode, 220, 15, 179, 1, // Opcode: MFHI
/* 513 */     MCD_OPC_CheckPredicate, 37, 196, 64, 0, // Skip to: 17098
/* 518 */     MCD_OPC_Decode, 223, 15, 180, 1, // Opcode: MFHI_DSP
/* 523 */     MCD_OPC_FilterValue, 17, 43, 0, 0, // Skip to: 571
/* 528 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 531 */     MCD_OPC_FilterValue, 0, 178, 64, 0, // Skip to: 17098
/* 536 */     MCD_OPC_ExtractField, 13, 8,  // Inst{20-13} ...
/* 539 */     MCD_OPC_FilterValue, 0, 170, 64, 0, // Skip to: 17098
/* 544 */     MCD_OPC_CheckPredicate, 31, 12, 0, 0, // Skip to: 561
/* 549 */     MCD_OPC_CheckField, 11, 2, 0, 5, 0, 0, // Skip to: 561
/* 556 */     MCD_OPC_Decode, 236, 16, 175, 1, // Opcode: MTHI
/* 561 */     MCD_OPC_CheckPredicate, 37, 148, 64, 0, // Skip to: 17098
/* 566 */     MCD_OPC_Decode, 238, 16, 181, 1, // Opcode: MTHI_DSP
/* 571 */     MCD_OPC_FilterValue, 18, 51, 0, 0, // Skip to: 627
/* 576 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 579 */     MCD_OPC_FilterValue, 0, 130, 64, 0, // Skip to: 17098
/* 584 */     MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 587 */     MCD_OPC_FilterValue, 0, 122, 64, 0, // Skip to: 17098
/* 592 */     MCD_OPC_ExtractField, 23, 3,  // Inst{25-23} ...
/* 595 */     MCD_OPC_FilterValue, 0, 114, 64, 0, // Skip to: 17098
/* 600 */     MCD_OPC_CheckPredicate, 31, 12, 0, 0, // Skip to: 617
/* 605 */     MCD_OPC_CheckField, 21, 2, 0, 5, 0, 0, // Skip to: 617
/* 612 */     MCD_OPC_Decode, 226, 15, 179, 1, // Opcode: MFLO
/* 617 */     MCD_OPC_CheckPredicate, 37, 92, 64, 0, // Skip to: 17098
/* 622 */     MCD_OPC_Decode, 229, 15, 180, 1, // Opcode: MFLO_DSP
/* 627 */     MCD_OPC_FilterValue, 19, 43, 0, 0, // Skip to: 675
/* 632 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 635 */     MCD_OPC_FilterValue, 0, 74, 64, 0, // Skip to: 17098
/* 640 */     MCD_OPC_ExtractField, 13, 8,  // Inst{20-13} ...
/* 643 */     MCD_OPC_FilterValue, 0, 66, 64, 0, // Skip to: 17098
/* 648 */     MCD_OPC_CheckPredicate, 31, 12, 0, 0, // Skip to: 665
/* 653 */     MCD_OPC_CheckField, 11, 2, 0, 5, 0, 0, // Skip to: 665
/* 660 */     MCD_OPC_Decode, 243, 16, 175, 1, // Opcode: MTLO
/* 665 */     MCD_OPC_CheckPredicate, 37, 44, 64, 0, // Skip to: 17098
/* 670 */     MCD_OPC_Decode, 245, 16, 182, 1, // Opcode: MTLO_DSP
/* 675 */     MCD_OPC_FilterValue, 21, 17, 0, 0, // Skip to: 697
/* 680 */     MCD_OPC_CheckPredicate, 38, 29, 64, 0, // Skip to: 17098
/* 685 */     MCD_OPC_CheckField, 8, 3, 0, 22, 64, 0, // Skip to: 17098
/* 692 */     MCD_OPC_Decode, 243, 10, 183, 1, // Opcode: DLSA
/* 697 */     MCD_OPC_FilterValue, 24, 42, 0, 0, // Skip to: 744
/* 702 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 705 */     MCD_OPC_FilterValue, 0, 4, 64, 0, // Skip to: 17098
/* 710 */     MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 713 */     MCD_OPC_FilterValue, 0, 252, 63, 0, // Skip to: 17098
/* 718 */     MCD_OPC_CheckPredicate, 31, 11, 0, 0, // Skip to: 734
/* 723 */     MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 734
/* 730 */     MCD_OPC_Decode, 155, 17, 69, // Opcode: MULT
/* 734 */     MCD_OPC_CheckPredicate, 37, 231, 63, 0, // Skip to: 17098
/* 739 */     MCD_OPC_Decode, 158, 17, 184, 1, // Opcode: MULT_DSP
/* 744 */     MCD_OPC_FilterValue, 25, 42, 0, 0, // Skip to: 791
/* 749 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 752 */     MCD_OPC_FilterValue, 0, 213, 63, 0, // Skip to: 17098
/* 757 */     MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 760 */     MCD_OPC_FilterValue, 0, 205, 63, 0, // Skip to: 17098
/* 765 */     MCD_OPC_CheckPredicate, 31, 11, 0, 0, // Skip to: 781
/* 770 */     MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 781
/* 777 */     MCD_OPC_Decode, 161, 17, 69, // Opcode: MULTu
/* 781 */     MCD_OPC_CheckPredicate, 37, 184, 63, 0, // Skip to: 17098
/* 786 */     MCD_OPC_Decode, 156, 17, 184, 1, // Opcode: MULTU_DSP
/* 791 */     MCD_OPC_FilterValue, 26, 16, 0, 0, // Skip to: 812
/* 796 */     MCD_OPC_CheckPredicate, 31, 169, 63, 0, // Skip to: 17098
/* 801 */     MCD_OPC_CheckField, 6, 10, 0, 162, 63, 0, // Skip to: 17098
/* 808 */     MCD_OPC_Decode, 129, 19, 69, // Opcode: SDIV
/* 812 */     MCD_OPC_FilterValue, 27, 16, 0, 0, // Skip to: 833
/* 817 */     MCD_OPC_CheckPredicate, 31, 148, 63, 0, // Skip to: 17098
/* 822 */     MCD_OPC_CheckField, 6, 10, 0, 141, 63, 0, // Skip to: 17098
/* 829 */     MCD_OPC_Decode, 245, 21, 69, // Opcode: UDIV
/* 833 */     MCD_OPC_FilterValue, 32, 16, 0, 0, // Skip to: 854
/* 838 */     MCD_OPC_CheckPredicate, 27, 127, 63, 0, // Skip to: 17098
/* 843 */     MCD_OPC_CheckField, 6, 5, 0, 120, 63, 0, // Skip to: 17098
/* 850 */     MCD_OPC_Decode, 194, 5, 50, // Opcode: ADD
/* 854 */     MCD_OPC_FilterValue, 33, 16, 0, 0, // Skip to: 875
/* 859 */     MCD_OPC_CheckPredicate, 27, 106, 63, 0, // Skip to: 17098
/* 864 */     MCD_OPC_CheckField, 6, 5, 0, 99, 63, 0, // Skip to: 17098
/* 871 */     MCD_OPC_Decode, 139, 6, 50, // Opcode: ADDu
/* 875 */     MCD_OPC_FilterValue, 34, 16, 0, 0, // Skip to: 896
/* 880 */     MCD_OPC_CheckPredicate, 27, 85, 63, 0, // Skip to: 17098
/* 885 */     MCD_OPC_CheckField, 6, 5, 0, 78, 63, 0, // Skip to: 17098
/* 892 */     MCD_OPC_Decode, 190, 20, 50, // Opcode: SUB
/* 896 */     MCD_OPC_FilterValue, 35, 16, 0, 0, // Skip to: 917
/* 901 */     MCD_OPC_CheckPredicate, 27, 64, 63, 0, // Skip to: 17098
/* 906 */     MCD_OPC_CheckField, 6, 5, 0, 57, 63, 0, // Skip to: 17098
/* 913 */     MCD_OPC_Decode, 246, 20, 50, // Opcode: SUBu
/* 917 */     MCD_OPC_FilterValue, 36, 16, 0, 0, // Skip to: 938
/* 922 */     MCD_OPC_CheckPredicate, 27, 43, 63, 0, // Skip to: 17098
/* 927 */     MCD_OPC_CheckField, 6, 5, 0, 36, 63, 0, // Skip to: 17098
/* 934 */     MCD_OPC_Decode, 145, 6, 50, // Opcode: AND
/* 938 */     MCD_OPC_FilterValue, 37, 16, 0, 0, // Skip to: 959
/* 943 */     MCD_OPC_CheckPredicate, 27, 22, 63, 0, // Skip to: 17098
/* 948 */     MCD_OPC_CheckField, 6, 5, 0, 15, 63, 0, // Skip to: 17098
/* 955 */     MCD_OPC_Decode, 210, 17, 50, // Opcode: OR
/* 959 */     MCD_OPC_FilterValue, 38, 16, 0, 0, // Skip to: 980
/* 964 */     MCD_OPC_CheckPredicate, 27, 1, 63, 0, // Skip to: 17098
/* 969 */     MCD_OPC_CheckField, 6, 5, 0, 250, 62, 0, // Skip to: 17098
/* 976 */     MCD_OPC_Decode, 135, 22, 50, // Opcode: XOR
/* 980 */     MCD_OPC_FilterValue, 39, 16, 0, 0, // Skip to: 1001
/* 985 */     MCD_OPC_CheckPredicate, 27, 236, 62, 0, // Skip to: 17098
/* 990 */     MCD_OPC_CheckField, 6, 5, 0, 229, 62, 0, // Skip to: 17098
/* 997 */     MCD_OPC_Decode, 200, 17, 50, // Opcode: NOR
/* 1001 */    MCD_OPC_FilterValue, 42, 16, 0, 0, // Skip to: 1022
/* 1006 */    MCD_OPC_CheckPredicate, 27, 215, 62, 0, // Skip to: 17098
/* 1011 */    MCD_OPC_CheckField, 6, 5, 0, 208, 62, 0, // Skip to: 17098
/* 1018 */    MCD_OPC_Decode, 247, 19, 50, // Opcode: SLT
/* 1022 */    MCD_OPC_FilterValue, 43, 16, 0, 0, // Skip to: 1043
/* 1027 */    MCD_OPC_CheckPredicate, 27, 194, 62, 0, // Skip to: 17098
/* 1032 */    MCD_OPC_CheckField, 6, 5, 0, 187, 62, 0, // Skip to: 17098
/* 1039 */    MCD_OPC_Decode, 128, 20, 50, // Opcode: SLTu
/* 1043 */    MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 1058
/* 1048 */    MCD_OPC_CheckPredicate, 36, 173, 62, 0, // Skip to: 17098
/* 1053 */    MCD_OPC_Decode, 190, 21, 185, 1, // Opcode: TGE
/* 1058 */    MCD_OPC_FilterValue, 49, 10, 0, 0, // Skip to: 1073
/* 1063 */    MCD_OPC_CheckPredicate, 36, 158, 62, 0, // Skip to: 17098
/* 1068 */    MCD_OPC_Decode, 195, 21, 185, 1, // Opcode: TGEU
/* 1073 */    MCD_OPC_FilterValue, 50, 10, 0, 0, // Skip to: 1088
/* 1078 */    MCD_OPC_CheckPredicate, 36, 143, 62, 0, // Skip to: 17098
/* 1083 */    MCD_OPC_Decode, 222, 21, 185, 1, // Opcode: TLT
/* 1088 */    MCD_OPC_FilterValue, 51, 10, 0, 0, // Skip to: 1103
/* 1093 */    MCD_OPC_CheckPredicate, 36, 128, 62, 0, // Skip to: 17098
/* 1098 */    MCD_OPC_Decode, 226, 21, 185, 1, // Opcode: TLTU
/* 1103 */    MCD_OPC_FilterValue, 52, 10, 0, 0, // Skip to: 1118
/* 1108 */    MCD_OPC_CheckPredicate, 36, 113, 62, 0, // Skip to: 17098
/* 1113 */    MCD_OPC_Decode, 186, 21, 185, 1, // Opcode: TEQ
/* 1118 */    MCD_OPC_FilterValue, 54, 103, 62, 0, // Skip to: 17098
/* 1123 */    MCD_OPC_CheckPredicate, 36, 98, 62, 0, // Skip to: 17098
/* 1128 */    MCD_OPC_Decode, 229, 21, 185, 1, // Opcode: TNE
/* 1133 */    MCD_OPC_FilterValue, 1, 250, 0, 0, // Skip to: 1388
/* 1138 */    MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 1141 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 1156
/* 1146 */    MCD_OPC_CheckPredicate, 27, 75, 62, 0, // Skip to: 17098
/* 1151 */    MCD_OPC_Decode, 184, 7, 186, 1, // Opcode: BLTZ
/* 1156 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 1171
/* 1161 */    MCD_OPC_CheckPredicate, 27, 60, 62, 0, // Skip to: 17098
/* 1166 */    MCD_OPC_Decode, 255, 6, 186, 1, // Opcode: BGEZ
/* 1171 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1186
/* 1176 */    MCD_OPC_CheckPredicate, 39, 45, 62, 0, // Skip to: 17098
/* 1181 */    MCD_OPC_Decode, 195, 7, 186, 1, // Opcode: BLTZL
/* 1186 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1201
/* 1191 */    MCD_OPC_CheckPredicate, 39, 30, 62, 0, // Skip to: 17098
/* 1196 */    MCD_OPC_Decode, 138, 7, 186, 1, // Opcode: BGEZL
/* 1201 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 1216
/* 1206 */    MCD_OPC_CheckPredicate, 39, 15, 62, 0, // Skip to: 17098
/* 1211 */    MCD_OPC_Decode, 191, 21, 164, 1, // Opcode: TGEI
/* 1216 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1231
/* 1221 */    MCD_OPC_CheckPredicate, 39, 0, 62, 0, // Skip to: 17098
/* 1226 */    MCD_OPC_Decode, 192, 21, 164, 1, // Opcode: TGEIU
/* 1231 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1246
/* 1236 */    MCD_OPC_CheckPredicate, 39, 241, 61, 0, // Skip to: 17098
/* 1241 */    MCD_OPC_Decode, 223, 21, 164, 1, // Opcode: TLTI
/* 1246 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1261
/* 1251 */    MCD_OPC_CheckPredicate, 39, 226, 61, 0, // Skip to: 17098
/* 1256 */    MCD_OPC_Decode, 244, 21, 164, 1, // Opcode: TTLTIU
/* 1261 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 1276
/* 1266 */    MCD_OPC_CheckPredicate, 39, 211, 61, 0, // Skip to: 17098
/* 1271 */    MCD_OPC_Decode, 187, 21, 164, 1, // Opcode: TEQI
/* 1276 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 1291
/* 1281 */    MCD_OPC_CheckPredicate, 39, 196, 61, 0, // Skip to: 17098
/* 1286 */    MCD_OPC_Decode, 230, 21, 164, 1, // Opcode: TNEI
/* 1291 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 1306
/* 1296 */    MCD_OPC_CheckPredicate, 31, 181, 61, 0, // Skip to: 17098
/* 1301 */    MCD_OPC_Decode, 186, 7, 186, 1, // Opcode: BLTZAL
/* 1306 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 1321
/* 1311 */    MCD_OPC_CheckPredicate, 31, 166, 61, 0, // Skip to: 17098
/* 1316 */    MCD_OPC_Decode, 129, 7, 186, 1, // Opcode: BGEZAL
/* 1321 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 1336
/* 1326 */    MCD_OPC_CheckPredicate, 39, 151, 61, 0, // Skip to: 17098
/* 1331 */    MCD_OPC_Decode, 189, 7, 186, 1, // Opcode: BLTZALL
/* 1336 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 1351
/* 1341 */    MCD_OPC_CheckPredicate, 39, 136, 61, 0, // Skip to: 17098
/* 1346 */    MCD_OPC_Decode, 132, 7, 186, 1, // Opcode: BGEZALL
/* 1351 */    MCD_OPC_FilterValue, 28, 17, 0, 0, // Skip to: 1373
/* 1356 */    MCD_OPC_CheckPredicate, 40, 121, 61, 0, // Skip to: 17098
/* 1361 */    MCD_OPC_CheckField, 21, 5, 0, 114, 61, 0, // Skip to: 17098
/* 1368 */    MCD_OPC_Decode, 233, 7, 187, 1, // Opcode: BPOSGE32
/* 1373 */    MCD_OPC_FilterValue, 31, 104, 61, 0, // Skip to: 17098
/* 1378 */    MCD_OPC_CheckPredicate, 28, 99, 61, 0, // Skip to: 17098
/* 1383 */    MCD_OPC_Decode, 158, 21, 188, 1, // Opcode: SYNCI
/* 1388 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1403
/* 1393 */    MCD_OPC_CheckPredicate, 27, 84, 61, 0, // Skip to: 17098
/* 1398 */    MCD_OPC_Decode, 228, 13, 189, 1, // Opcode: J
/* 1403 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1418
/* 1408 */    MCD_OPC_CheckPredicate, 27, 69, 61, 0, // Skip to: 17098
/* 1413 */    MCD_OPC_Decode, 229, 13, 189, 1, // Opcode: JAL
/* 1418 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 1433
/* 1423 */    MCD_OPC_CheckPredicate, 27, 54, 61, 0, // Skip to: 17098
/* 1428 */    MCD_OPC_Decode, 234, 6, 190, 1, // Opcode: BEQ
/* 1433 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1448
/* 1438 */    MCD_OPC_CheckPredicate, 27, 39, 61, 0, // Skip to: 17098
/* 1443 */    MCD_OPC_Decode, 201, 7, 190, 1, // Opcode: BNE
/* 1448 */    MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 1470
/* 1453 */    MCD_OPC_CheckPredicate, 27, 24, 61, 0, // Skip to: 17098
/* 1458 */    MCD_OPC_CheckField, 16, 5, 0, 17, 61, 0, // Skip to: 17098
/* 1465 */    MCD_OPC_Decode, 169, 7, 186, 1, // Opcode: BLEZ
/* 1470 */    MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 1492
/* 1475 */    MCD_OPC_CheckPredicate, 27, 2, 61, 0, // Skip to: 17098
/* 1480 */    MCD_OPC_CheckField, 16, 5, 0, 251, 60, 0, // Skip to: 17098
/* 1487 */    MCD_OPC_Decode, 140, 7, 186, 1, // Opcode: BGTZ
/* 1492 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 1507
/* 1497 */    MCD_OPC_CheckPredicate, 31, 236, 60, 0, // Skip to: 17098
/* 1502 */    MCD_OPC_Decode, 135, 6, 191, 1, // Opcode: ADDi
/* 1507 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1522
/* 1512 */    MCD_OPC_CheckPredicate, 27, 221, 60, 0, // Skip to: 17098
/* 1517 */    MCD_OPC_Decode, 137, 6, 191, 1, // Opcode: ADDiu
/* 1522 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1537
/* 1527 */    MCD_OPC_CheckPredicate, 27, 206, 60, 0, // Skip to: 17098
/* 1532 */    MCD_OPC_Decode, 250, 19, 191, 1, // Opcode: SLTi
/* 1537 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1552
/* 1542 */    MCD_OPC_CheckPredicate, 27, 191, 60, 0, // Skip to: 17098
/* 1547 */    MCD_OPC_Decode, 253, 19, 191, 1, // Opcode: SLTiu
/* 1552 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 1567
/* 1557 */    MCD_OPC_CheckPredicate, 27, 176, 60, 0, // Skip to: 17098
/* 1562 */    MCD_OPC_Decode, 156, 6, 192, 1, // Opcode: ANDi
/* 1567 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 1582
/* 1572 */    MCD_OPC_CheckPredicate, 27, 161, 60, 0, // Skip to: 17098
/* 1577 */    MCD_OPC_Decode, 219, 17, 192, 1, // Opcode: ORi
/* 1582 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 1597
/* 1587 */    MCD_OPC_CheckPredicate, 27, 146, 60, 0, // Skip to: 17098
/* 1592 */    MCD_OPC_Decode, 144, 22, 192, 1, // Opcode: XORi
/* 1597 */    MCD_OPC_FilterValue, 15, 16, 0, 0, // Skip to: 1618
/* 1602 */    MCD_OPC_CheckPredicate, 27, 131, 60, 0, // Skip to: 17098
/* 1607 */    MCD_OPC_CheckField, 21, 5, 0, 124, 60, 0, // Skip to: 17098
/* 1614 */    MCD_OPC_Decode, 214, 14, 92, // Opcode: LUi
/* 1618 */    MCD_OPC_FilterValue, 16, 187, 2, 0, // Skip to: 2322
/* 1623 */    MCD_OPC_ExtractField, 3, 1,  // Inst{3} ...
/* 1626 */    MCD_OPC_FilterValue, 0, 190, 1, 0, // Skip to: 2077
/* 1631 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 1634 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 1656
/* 1639 */    MCD_OPC_CheckPredicate, 27, 94, 60, 0, // Skip to: 17098
/* 1644 */    MCD_OPC_CheckField, 4, 7, 0, 87, 60, 0, // Skip to: 17098
/* 1651 */    MCD_OPC_Decode, 202, 15, 193, 1, // Opcode: MFC0
/* 1656 */    MCD_OPC_FilterValue, 3, 63, 0, 0, // Skip to: 1724
/* 1661 */    MCD_OPC_ExtractField, 4, 7,  // Inst{10-4} ...
/* 1664 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 1679
/* 1669 */    MCD_OPC_CheckPredicate, 41, 64, 60, 0, // Skip to: 17098
/* 1674 */    MCD_OPC_Decode, 210, 15, 193, 1, // Opcode: MFGC0
/* 1679 */    MCD_OPC_FilterValue, 32, 10, 0, 0, // Skip to: 1694
/* 1684 */    MCD_OPC_CheckPredicate, 41, 49, 60, 0, // Skip to: 17098
/* 1689 */    MCD_OPC_Decode, 226, 16, 194, 1, // Opcode: MTGC0
/* 1694 */    MCD_OPC_FilterValue, 64, 10, 0, 0, // Skip to: 1709
/* 1699 */    MCD_OPC_CheckPredicate, 41, 34, 60, 0, // Skip to: 17098
/* 1704 */    MCD_OPC_Decode, 218, 15, 193, 1, // Opcode: MFHGC0
/* 1709 */    MCD_OPC_FilterValue, 96, 24, 60, 0, // Skip to: 17098
/* 1714 */    MCD_OPC_CheckPredicate, 41, 19, 60, 0, // Skip to: 17098
/* 1719 */    MCD_OPC_Decode, 234, 16, 194, 1, // Opcode: MTHGC0
/* 1724 */    MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 1746
/* 1729 */    MCD_OPC_CheckPredicate, 27, 4, 60, 0, // Skip to: 17098
/* 1734 */    MCD_OPC_CheckField, 4, 7, 0, 253, 59, 0, // Skip to: 17098
/* 1741 */    MCD_OPC_Decode, 217, 16, 194, 1, // Opcode: MTC0
/* 1746 */    MCD_OPC_FilterValue, 8, 17, 0, 0, // Skip to: 1768
/* 1751 */    MCD_OPC_CheckPredicate, 42, 238, 59, 0, // Skip to: 17098
/* 1756 */    MCD_OPC_CheckField, 6, 5, 0, 231, 59, 0, // Skip to: 17098
/* 1763 */    MCD_OPC_Decode, 232, 15, 195, 1, // Opcode: MFTR
/* 1768 */    MCD_OPC_FilterValue, 11, 133, 0, 0, // Skip to: 1906
/* 1773 */    MCD_OPC_ExtractField, 4, 12,  // Inst{15-4} ...
/* 1776 */    MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 1797
/* 1781 */    MCD_OPC_CheckPredicate, 42, 208, 59, 0, // Skip to: 17098
/* 1786 */    MCD_OPC_CheckField, 0, 3, 1, 201, 59, 0, // Skip to: 17098
/* 1793 */    MCD_OPC_Decode, 208, 11, 81, // Opcode: DVPE
/* 1797 */    MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 1818
/* 1802 */    MCD_OPC_CheckPredicate, 42, 187, 59, 0, // Skip to: 17098
/* 1807 */    MCD_OPC_CheckField, 0, 3, 1, 180, 59, 0, // Skip to: 17098
/* 1814 */    MCD_OPC_Decode, 225, 11, 81, // Opcode: EVPE
/* 1818 */    MCD_OPC_FilterValue, 188, 1, 16, 0, 0, // Skip to: 1840
/* 1824 */    MCD_OPC_CheckPredicate, 42, 165, 59, 0, // Skip to: 17098
/* 1829 */    MCD_OPC_CheckField, 0, 3, 1, 158, 59, 0, // Skip to: 17098
/* 1836 */    MCD_OPC_Decode, 252, 10, 81, // Opcode: DMT
/* 1840 */    MCD_OPC_FilterValue, 190, 1, 16, 0, 0, // Skip to: 1862
/* 1846 */    MCD_OPC_CheckPredicate, 42, 143, 59, 0, // Skip to: 17098
/* 1851 */    MCD_OPC_CheckField, 0, 3, 1, 136, 59, 0, // Skip to: 17098
/* 1858 */    MCD_OPC_Decode, 218, 11, 81, // Opcode: EMT
/* 1862 */    MCD_OPC_FilterValue, 128, 12, 16, 0, 0, // Skip to: 1884
/* 1868 */    MCD_OPC_CheckPredicate, 28, 121, 59, 0, // Skip to: 17098
/* 1873 */    MCD_OPC_CheckField, 0, 3, 0, 114, 59, 0, // Skip to: 17098
/* 1880 */    MCD_OPC_Decode, 225, 10, 81, // Opcode: DI
/* 1884 */    MCD_OPC_FilterValue, 130, 12, 104, 59, 0, // Skip to: 17098
/* 1890 */    MCD_OPC_CheckPredicate, 28, 99, 59, 0, // Skip to: 17098
/* 1895 */    MCD_OPC_CheckField, 0, 3, 0, 92, 59, 0, // Skip to: 17098
/* 1902 */    MCD_OPC_Decode, 215, 11, 81, // Opcode: EI
/* 1906 */    MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 1928
/* 1911 */    MCD_OPC_CheckPredicate, 42, 78, 59, 0, // Skip to: 17098
/* 1916 */    MCD_OPC_CheckField, 6, 5, 0, 71, 59, 0, // Skip to: 17098
/* 1923 */    MCD_OPC_Decode, 254, 16, 195, 1, // Opcode: MTTR
/* 1928 */    MCD_OPC_FilterValue, 16, 61, 59, 0, // Skip to: 17098
/* 1933 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 1936 */    MCD_OPC_FilterValue, 0, 31, 0, 0, // Skip to: 1972
/* 1941 */    MCD_OPC_ExtractField, 4, 17,  // Inst{20-4} ...
/* 1944 */    MCD_OPC_FilterValue, 1, 9, 0, 0, // Skip to: 1958
/* 1949 */    MCD_OPC_CheckPredicate, 41, 40, 59, 0, // Skip to: 17098
/* 1954 */    MCD_OPC_Decode, 202, 21, 0, // Opcode: TLBGP
/* 1958 */    MCD_OPC_FilterValue, 2, 31, 59, 0, // Skip to: 17098
/* 1963 */    MCD_OPC_CheckPredicate, 43, 26, 59, 0, // Skip to: 17098
/* 1968 */    MCD_OPC_Decode, 254, 21, 0, // Opcode: WAIT
/* 1972 */    MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 1993
/* 1977 */    MCD_OPC_CheckPredicate, 27, 12, 59, 0, // Skip to: 17098
/* 1982 */    MCD_OPC_CheckField, 4, 17, 0, 5, 59, 0, // Skip to: 17098
/* 1989 */    MCD_OPC_Decode, 216, 21, 0, // Opcode: TLBR
/* 1993 */    MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 2014
/* 1998 */    MCD_OPC_CheckPredicate, 27, 247, 58, 0, // Skip to: 17098
/* 2003 */    MCD_OPC_CheckField, 4, 17, 0, 240, 58, 0, // Skip to: 17098
/* 2010 */    MCD_OPC_Decode, 218, 21, 0, // Opcode: TLBWI
/* 2014 */    MCD_OPC_FilterValue, 3, 16, 0, 0, // Skip to: 2035
/* 2019 */    MCD_OPC_CheckPredicate, 44, 226, 58, 0, // Skip to: 17098
/* 2024 */    MCD_OPC_CheckField, 4, 17, 0, 219, 58, 0, // Skip to: 17098
/* 2031 */    MCD_OPC_Decode, 210, 21, 0, // Opcode: TLBINV
/* 2035 */    MCD_OPC_FilterValue, 4, 16, 0, 0, // Skip to: 2056
/* 2040 */    MCD_OPC_CheckPredicate, 44, 205, 58, 0, // Skip to: 17098
/* 2045 */    MCD_OPC_CheckField, 4, 17, 0, 198, 58, 0, // Skip to: 17098
/* 2052 */    MCD_OPC_Decode, 211, 21, 0, // Opcode: TLBINVF
/* 2056 */    MCD_OPC_FilterValue, 6, 189, 58, 0, // Skip to: 17098
/* 2061 */    MCD_OPC_CheckPredicate, 27, 184, 58, 0, // Skip to: 17098
/* 2066 */    MCD_OPC_CheckField, 4, 17, 0, 177, 58, 0, // Skip to: 17098
/* 2073 */    MCD_OPC_Decode, 220, 21, 0, // Opcode: TLBWR
/* 2077 */    MCD_OPC_FilterValue, 1, 168, 58, 0, // Skip to: 17098
/* 2082 */    MCD_OPC_ExtractField, 0, 3,  // Inst{2-0} ...
/* 2085 */    MCD_OPC_FilterValue, 0, 88, 0, 0, // Skip to: 2178
/* 2090 */    MCD_OPC_ExtractField, 4, 2,  // Inst{5-4} ...
/* 2093 */    MCD_OPC_FilterValue, 0, 18, 0, 0, // Skip to: 2116
/* 2098 */    MCD_OPC_CheckPredicate, 27, 147, 58, 0, // Skip to: 17098
/* 2103 */    MCD_OPC_CheckField, 6, 20, 128, 128, 32, 138, 58, 0, // Skip to: 17098
/* 2112 */    MCD_OPC_Decode, 214, 21, 0, // Opcode: TLBP
/* 2116 */    MCD_OPC_FilterValue, 1, 35, 0, 0, // Skip to: 2156
/* 2121 */    MCD_OPC_ExtractField, 6, 20,  // Inst{25-6} ...
/* 2124 */    MCD_OPC_FilterValue, 128, 128, 32, 9, 0, 0, // Skip to: 2140
/* 2131 */    MCD_OPC_CheckPredicate, 43, 114, 58, 0, // Skip to: 17098
/* 2136 */    MCD_OPC_Decode, 219, 11, 0, // Opcode: ERET
/* 2140 */    MCD_OPC_FilterValue, 129, 128, 32, 103, 58, 0, // Skip to: 17098
/* 2147 */    MCD_OPC_CheckPredicate, 45, 98, 58, 0, // Skip to: 17098
/* 2152 */    MCD_OPC_Decode, 220, 11, 0, // Opcode: ERETNC
/* 2156 */    MCD_OPC_FilterValue, 2, 89, 58, 0, // Skip to: 17098
/* 2161 */    MCD_OPC_CheckPredicate, 41, 84, 58, 0, // Skip to: 17098
/* 2166 */    MCD_OPC_CheckField, 25, 1, 1, 77, 58, 0, // Skip to: 17098
/* 2173 */    MCD_OPC_Decode, 197, 13, 196, 1, // Opcode: HYPCALL
/* 2178 */    MCD_OPC_FilterValue, 1, 19, 0, 0, // Skip to: 2202
/* 2183 */    MCD_OPC_CheckPredicate, 41, 62, 58, 0, // Skip to: 17098
/* 2188 */    MCD_OPC_CheckField, 4, 22, 128, 128, 128, 1, 52, 58, 0, // Skip to: 17098
/* 2198 */    MCD_OPC_Decode, 204, 21, 0, // Opcode: TLBGR
/* 2202 */    MCD_OPC_FilterValue, 2, 19, 0, 0, // Skip to: 2226
/* 2207 */    MCD_OPC_CheckPredicate, 41, 38, 58, 0, // Skip to: 17098
/* 2212 */    MCD_OPC_CheckField, 4, 22, 128, 128, 128, 1, 28, 58, 0, // Skip to: 17098
/* 2222 */    MCD_OPC_Decode, 206, 21, 0, // Opcode: TLBGWI
/* 2226 */    MCD_OPC_FilterValue, 3, 19, 0, 0, // Skip to: 2250
/* 2231 */    MCD_OPC_CheckPredicate, 41, 14, 58, 0, // Skip to: 17098
/* 2236 */    MCD_OPC_CheckField, 4, 22, 128, 128, 128, 1, 4, 58, 0, // Skip to: 17098
/* 2246 */    MCD_OPC_Decode, 198, 21, 0, // Opcode: TLBGINV
/* 2250 */    MCD_OPC_FilterValue, 4, 19, 0, 0, // Skip to: 2274
/* 2255 */    MCD_OPC_CheckPredicate, 41, 246, 57, 0, // Skip to: 17098
/* 2260 */    MCD_OPC_CheckField, 4, 22, 128, 128, 128, 1, 236, 57, 0, // Skip to: 17098
/* 2270 */    MCD_OPC_Decode, 199, 21, 0, // Opcode: TLBGINVF
/* 2274 */    MCD_OPC_FilterValue, 6, 19, 0, 0, // Skip to: 2298
/* 2279 */    MCD_OPC_CheckPredicate, 41, 222, 57, 0, // Skip to: 17098
/* 2284 */    MCD_OPC_CheckField, 4, 22, 128, 128, 128, 1, 212, 57, 0, // Skip to: 17098
/* 2294 */    MCD_OPC_Decode, 208, 21, 0, // Opcode: TLBGWR
/* 2298 */    MCD_OPC_FilterValue, 7, 203, 57, 0, // Skip to: 17098
/* 2303 */    MCD_OPC_CheckPredicate, 46, 198, 57, 0, // Skip to: 17098
/* 2308 */    MCD_OPC_CheckField, 4, 22, 129, 128, 128, 1, 188, 57, 0, // Skip to: 17098
/* 2318 */    MCD_OPC_Decode, 218, 10, 0, // Opcode: DERET
/* 2322 */    MCD_OPC_FilterValue, 17, 205, 7, 0, // Skip to: 4324
/* 2327 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 2330 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 2352
/* 2335 */    MCD_OPC_CheckPredicate, 47, 166, 57, 0, // Skip to: 17098
/* 2340 */    MCD_OPC_CheckField, 0, 11, 0, 159, 57, 0, // Skip to: 17098
/* 2347 */    MCD_OPC_Decode, 204, 15, 197, 1, // Opcode: MFC1
/* 2352 */    MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 2374
/* 2357 */    MCD_OPC_CheckPredicate, 48, 144, 57, 0, // Skip to: 17098
/* 2362 */    MCD_OPC_CheckField, 0, 11, 0, 137, 57, 0, // Skip to: 17098
/* 2369 */    MCD_OPC_Decode, 246, 10, 198, 1, // Opcode: DMFC1
/* 2374 */    MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 2396
/* 2379 */    MCD_OPC_CheckPredicate, 47, 122, 57, 0, // Skip to: 17098
/* 2384 */    MCD_OPC_CheckField, 0, 11, 0, 115, 57, 0, // Skip to: 17098
/* 2391 */    MCD_OPC_Decode, 164, 8, 199, 1, // Opcode: CFC1
/* 2396 */    MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 2418
/* 2401 */    MCD_OPC_CheckPredicate, 49, 100, 57, 0, // Skip to: 17098
/* 2406 */    MCD_OPC_CheckField, 0, 11, 0, 93, 57, 0, // Skip to: 17098
/* 2413 */    MCD_OPC_Decode, 213, 15, 200, 1, // Opcode: MFHC1_D32
/* 2418 */    MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 2440
/* 2423 */    MCD_OPC_CheckPredicate, 47, 78, 57, 0, // Skip to: 17098
/* 2428 */    MCD_OPC_CheckField, 0, 11, 0, 71, 57, 0, // Skip to: 17098
/* 2435 */    MCD_OPC_Decode, 219, 16, 201, 1, // Opcode: MTC1
/* 2440 */    MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 2462
/* 2445 */    MCD_OPC_CheckPredicate, 48, 56, 57, 0, // Skip to: 17098
/* 2450 */    MCD_OPC_CheckField, 0, 11, 0, 49, 57, 0, // Skip to: 17098
/* 2457 */    MCD_OPC_Decode, 254, 10, 202, 1, // Opcode: DMTC1
/* 2462 */    MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 2484
/* 2467 */    MCD_OPC_CheckPredicate, 47, 34, 57, 0, // Skip to: 17098
/* 2472 */    MCD_OPC_CheckField, 0, 11, 0, 27, 57, 0, // Skip to: 17098
/* 2479 */    MCD_OPC_Decode, 191, 9, 203, 1, // Opcode: CTC1
/* 2484 */    MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 2506
/* 2489 */    MCD_OPC_CheckPredicate, 49, 12, 57, 0, // Skip to: 17098
/* 2494 */    MCD_OPC_CheckField, 0, 11, 0, 5, 57, 0, // Skip to: 17098
/* 2501 */    MCD_OPC_Decode, 229, 16, 204, 1, // Opcode: MTHC1_D32
/* 2506 */    MCD_OPC_FilterValue, 8, 63, 0, 0, // Skip to: 2574
/* 2511 */    MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 2514 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2529
/* 2519 */    MCD_OPC_CheckPredicate, 50, 238, 56, 0, // Skip to: 17098
/* 2524 */    MCD_OPC_Decode, 213, 6, 205, 1, // Opcode: BC1F
/* 2529 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 2544
/* 2534 */    MCD_OPC_CheckPredicate, 50, 223, 56, 0, // Skip to: 17098
/* 2539 */    MCD_OPC_Decode, 218, 6, 205, 1, // Opcode: BC1T
/* 2544 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 2559
/* 2549 */    MCD_OPC_CheckPredicate, 51, 208, 56, 0, // Skip to: 17098
/* 2554 */    MCD_OPC_Decode, 214, 6, 205, 1, // Opcode: BC1FL
/* 2559 */    MCD_OPC_FilterValue, 3, 198, 56, 0, // Skip to: 17098
/* 2564 */    MCD_OPC_CheckPredicate, 51, 193, 56, 0, // Skip to: 17098
/* 2569 */    MCD_OPC_Decode, 219, 6, 205, 1, // Opcode: BC1TL
/* 2574 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 2589
/* 2579 */    MCD_OPC_CheckPredicate, 30, 178, 56, 0, // Skip to: 17098
/* 2584 */    MCD_OPC_Decode, 254, 7, 206, 1, // Opcode: BZ_V
/* 2589 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 2604
/* 2594 */    MCD_OPC_CheckPredicate, 30, 163, 56, 0, // Skip to: 17098
/* 2599 */    MCD_OPC_Decode, 229, 7, 206, 1, // Opcode: BNZ_V
/* 2604 */    MCD_OPC_FilterValue, 16, 1, 3, 0, // Skip to: 3378
/* 2609 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 2612 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2627
/* 2617 */    MCD_OPC_CheckPredicate, 47, 140, 56, 0, // Skip to: 17098
/* 2622 */    MCD_OPC_Decode, 140, 12, 207, 1, // Opcode: FADD_S
/* 2627 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 2642
/* 2632 */    MCD_OPC_CheckPredicate, 47, 125, 56, 0, // Skip to: 17098
/* 2637 */    MCD_OPC_Decode, 157, 13, 207, 1, // Opcode: FSUB_S
/* 2642 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 2657
/* 2647 */    MCD_OPC_CheckPredicate, 47, 110, 56, 0, // Skip to: 17098
/* 2652 */    MCD_OPC_Decode, 241, 12, 207, 1, // Opcode: FMUL_S
/* 2657 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 2672
/* 2662 */    MCD_OPC_CheckPredicate, 47, 95, 56, 0, // Skip to: 17098
/* 2667 */    MCD_OPC_Decode, 178, 12, 207, 1, // Opcode: FDIV_S
/* 2672 */    MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 2694
/* 2677 */    MCD_OPC_CheckPredicate, 52, 80, 56, 0, // Skip to: 17098
/* 2682 */    MCD_OPC_CheckField, 16, 5, 0, 73, 56, 0, // Skip to: 17098
/* 2689 */    MCD_OPC_Decode, 148, 13, 208, 1, // Opcode: FSQRT_S
/* 2694 */    MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 2716
/* 2699 */    MCD_OPC_CheckPredicate, 47, 58, 56, 0, // Skip to: 17098
/* 2704 */    MCD_OPC_CheckField, 16, 5, 0, 51, 56, 0, // Skip to: 17098
/* 2711 */    MCD_OPC_Decode, 132, 12, 208, 1, // Opcode: FABS_S
/* 2716 */    MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 2738
/* 2721 */    MCD_OPC_CheckPredicate, 47, 36, 56, 0, // Skip to: 17098
/* 2726 */    MCD_OPC_CheckField, 16, 5, 0, 29, 56, 0, // Skip to: 17098
/* 2733 */    MCD_OPC_Decode, 230, 12, 208, 1, // Opcode: FMOV_S
/* 2738 */    MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 2760
/* 2743 */    MCD_OPC_CheckPredicate, 53, 14, 56, 0, // Skip to: 17098
/* 2748 */    MCD_OPC_CheckField, 16, 5, 0, 7, 56, 0, // Skip to: 17098
/* 2755 */    MCD_OPC_Decode, 249, 12, 208, 1, // Opcode: FNEG_S
/* 2760 */    MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 2782
/* 2765 */    MCD_OPC_CheckPredicate, 52, 248, 55, 0, // Skip to: 17098
/* 2770 */    MCD_OPC_CheckField, 16, 5, 0, 241, 55, 0, // Skip to: 17098
/* 2777 */    MCD_OPC_Decode, 203, 18, 208, 1, // Opcode: ROUND_W_S
/* 2782 */    MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 2804
/* 2787 */    MCD_OPC_CheckPredicate, 52, 226, 55, 0, // Skip to: 17098
/* 2792 */    MCD_OPC_CheckField, 16, 5, 0, 219, 55, 0, // Skip to: 17098
/* 2799 */    MCD_OPC_Decode, 241, 21, 208, 1, // Opcode: TRUNC_W_S
/* 2804 */    MCD_OPC_FilterValue, 14, 17, 0, 0, // Skip to: 2826
/* 2809 */    MCD_OPC_CheckPredicate, 52, 204, 55, 0, // Skip to: 17098
/* 2814 */    MCD_OPC_CheckField, 16, 5, 0, 197, 55, 0, // Skip to: 17098
/* 2821 */    MCD_OPC_Decode, 153, 8, 208, 1, // Opcode: CEIL_W_S
/* 2826 */    MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 2848
/* 2831 */    MCD_OPC_CheckPredicate, 52, 182, 55, 0, // Skip to: 17098
/* 2836 */    MCD_OPC_CheckField, 16, 5, 0, 175, 55, 0, // Skip to: 17098
/* 2843 */    MCD_OPC_Decode, 212, 12, 208, 1, // Opcode: FLOOR_W_S
/* 2848 */    MCD_OPC_FilterValue, 17, 33, 0, 0, // Skip to: 2886
/* 2853 */    MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 2856 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2871
/* 2861 */    MCD_OPC_CheckPredicate, 29, 152, 55, 0, // Skip to: 17098
/* 2866 */    MCD_OPC_Decode, 158, 16, 209, 1, // Opcode: MOVF_S
/* 2871 */    MCD_OPC_FilterValue, 1, 142, 55, 0, // Skip to: 17098
/* 2876 */    MCD_OPC_CheckPredicate, 29, 137, 55, 0, // Skip to: 17098
/* 2881 */    MCD_OPC_Decode, 178, 16, 209, 1, // Opcode: MOVT_S
/* 2886 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 2901
/* 2891 */    MCD_OPC_CheckPredicate, 29, 122, 55, 0, // Skip to: 17098
/* 2896 */    MCD_OPC_Decode, 190, 16, 210, 1, // Opcode: MOVZ_I_S
/* 2901 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 2916
/* 2906 */    MCD_OPC_CheckPredicate, 29, 107, 55, 0, // Skip to: 17098
/* 2911 */    MCD_OPC_Decode, 170, 16, 210, 1, // Opcode: MOVN_I_S
/* 2916 */    MCD_OPC_FilterValue, 21, 17, 0, 0, // Skip to: 2938
/* 2921 */    MCD_OPC_CheckPredicate, 54, 92, 55, 0, // Skip to: 17098
/* 2926 */    MCD_OPC_CheckField, 16, 5, 0, 85, 55, 0, // Skip to: 17098
/* 2933 */    MCD_OPC_Decode, 177, 18, 208, 1, // Opcode: RECIP_S
/* 2938 */    MCD_OPC_FilterValue, 22, 17, 0, 0, // Skip to: 2960
/* 2943 */    MCD_OPC_CheckPredicate, 54, 70, 55, 0, // Skip to: 17098
/* 2948 */    MCD_OPC_CheckField, 16, 5, 0, 63, 55, 0, // Skip to: 17098
/* 2955 */    MCD_OPC_Decode, 210, 18, 208, 1, // Opcode: RSQRT_S
/* 2960 */    MCD_OPC_FilterValue, 33, 17, 0, 0, // Skip to: 2982
/* 2965 */    MCD_OPC_CheckPredicate, 55, 48, 55, 0, // Skip to: 17098
/* 2970 */    MCD_OPC_CheckField, 16, 5, 0, 41, 55, 0, // Skip to: 17098
/* 2977 */    MCD_OPC_Decode, 195, 9, 211, 1, // Opcode: CVT_D32_S
/* 2982 */    MCD_OPC_FilterValue, 36, 17, 0, 0, // Skip to: 3004
/* 2987 */    MCD_OPC_CheckPredicate, 47, 26, 55, 0, // Skip to: 17098
/* 2992 */    MCD_OPC_CheckField, 16, 5, 0, 19, 55, 0, // Skip to: 17098
/* 2999 */    MCD_OPC_Decode, 229, 9, 208, 1, // Opcode: CVT_W_S
/* 3004 */    MCD_OPC_FilterValue, 37, 17, 0, 0, // Skip to: 3026
/* 3009 */    MCD_OPC_CheckPredicate, 56, 4, 55, 0, // Skip to: 17098
/* 3014 */    MCD_OPC_CheckField, 16, 5, 0, 253, 54, 0, // Skip to: 17098
/* 3021 */    MCD_OPC_Decode, 208, 9, 212, 1, // Opcode: CVT_L_S
/* 3026 */    MCD_OPC_FilterValue, 48, 17, 0, 0, // Skip to: 3048
/* 3031 */    MCD_OPC_CheckPredicate, 50, 238, 54, 0, // Skip to: 17098
/* 3036 */    MCD_OPC_CheckField, 6, 2, 0, 231, 54, 0, // Skip to: 17098
/* 3043 */    MCD_OPC_Decode, 242, 9, 213, 1, // Opcode: C_F_S
/* 3048 */    MCD_OPC_FilterValue, 49, 17, 0, 0, // Skip to: 3070
/* 3053 */    MCD_OPC_CheckPredicate, 50, 216, 54, 0, // Skip to: 17098
/* 3058 */    MCD_OPC_CheckField, 6, 2, 0, 209, 54, 0, // Skip to: 17098
/* 3065 */    MCD_OPC_Decode, 198, 10, 213, 1, // Opcode: C_UN_S
/* 3070 */    MCD_OPC_FilterValue, 50, 17, 0, 0, // Skip to: 3092
/* 3075 */    MCD_OPC_CheckPredicate, 50, 194, 54, 0, // Skip to: 17098
/* 3080 */    MCD_OPC_CheckField, 6, 2, 0, 187, 54, 0, // Skip to: 17098
/* 3087 */    MCD_OPC_Decode, 236, 9, 213, 1, // Opcode: C_EQ_S
/* 3092 */    MCD_OPC_FilterValue, 51, 17, 0, 0, // Skip to: 3114
/* 3097 */    MCD_OPC_CheckPredicate, 50, 172, 54, 0, // Skip to: 17098
/* 3102 */    MCD_OPC_CheckField, 6, 2, 0, 165, 54, 0, // Skip to: 17098
/* 3109 */    MCD_OPC_Decode, 180, 10, 213, 1, // Opcode: C_UEQ_S
/* 3114 */    MCD_OPC_FilterValue, 52, 17, 0, 0, // Skip to: 3136
/* 3119 */    MCD_OPC_CheckPredicate, 50, 150, 54, 0, // Skip to: 17098
/* 3124 */    MCD_OPC_CheckField, 6, 2, 0, 143, 54, 0, // Skip to: 17098
/* 3131 */    MCD_OPC_Decode, 162, 10, 213, 1, // Opcode: C_OLT_S
/* 3136 */    MCD_OPC_FilterValue, 53, 17, 0, 0, // Skip to: 3158
/* 3141 */    MCD_OPC_CheckPredicate, 50, 128, 54, 0, // Skip to: 17098
/* 3146 */    MCD_OPC_CheckField, 6, 2, 0, 121, 54, 0, // Skip to: 17098
/* 3153 */    MCD_OPC_Decode, 192, 10, 213, 1, // Opcode: C_ULT_S
/* 3158 */    MCD_OPC_FilterValue, 54, 17, 0, 0, // Skip to: 3180
/* 3163 */    MCD_OPC_CheckPredicate, 50, 106, 54, 0, // Skip to: 17098
/* 3168 */    MCD_OPC_CheckField, 6, 2, 0, 99, 54, 0, // Skip to: 17098
/* 3175 */    MCD_OPC_Decode, 156, 10, 213, 1, // Opcode: C_OLE_S
/* 3180 */    MCD_OPC_FilterValue, 55, 17, 0, 0, // Skip to: 3202
/* 3185 */    MCD_OPC_CheckPredicate, 50, 84, 54, 0, // Skip to: 17098
/* 3190 */    MCD_OPC_CheckField, 6, 2, 0, 77, 54, 0, // Skip to: 17098
/* 3197 */    MCD_OPC_Decode, 186, 10, 213, 1, // Opcode: C_ULE_S
/* 3202 */    MCD_OPC_FilterValue, 56, 17, 0, 0, // Skip to: 3224
/* 3207 */    MCD_OPC_CheckPredicate, 50, 62, 54, 0, // Skip to: 17098
/* 3212 */    MCD_OPC_CheckField, 6, 2, 0, 55, 54, 0, // Skip to: 17098
/* 3219 */    MCD_OPC_Decode, 174, 10, 213, 1, // Opcode: C_SF_S
/* 3224 */    MCD_OPC_FilterValue, 57, 17, 0, 0, // Skip to: 3246
/* 3229 */    MCD_OPC_CheckPredicate, 50, 40, 54, 0, // Skip to: 17098
/* 3234 */    MCD_OPC_CheckField, 6, 2, 0, 33, 54, 0, // Skip to: 17098
/* 3241 */    MCD_OPC_Decode, 138, 10, 213, 1, // Opcode: C_NGLE_S
/* 3246 */    MCD_OPC_FilterValue, 58, 17, 0, 0, // Skip to: 3268
/* 3251 */    MCD_OPC_CheckPredicate, 50, 18, 54, 0, // Skip to: 17098
/* 3256 */    MCD_OPC_CheckField, 6, 2, 0, 11, 54, 0, // Skip to: 17098
/* 3263 */    MCD_OPC_Decode, 168, 10, 213, 1, // Opcode: C_SEQ_S
/* 3268 */    MCD_OPC_FilterValue, 59, 17, 0, 0, // Skip to: 3290
/* 3273 */    MCD_OPC_CheckPredicate, 50, 252, 53, 0, // Skip to: 17098
/* 3278 */    MCD_OPC_CheckField, 6, 2, 0, 245, 53, 0, // Skip to: 17098
/* 3285 */    MCD_OPC_Decode, 144, 10, 213, 1, // Opcode: C_NGL_S
/* 3290 */    MCD_OPC_FilterValue, 60, 17, 0, 0, // Skip to: 3312
/* 3295 */    MCD_OPC_CheckPredicate, 50, 230, 53, 0, // Skip to: 17098
/* 3300 */    MCD_OPC_CheckField, 6, 2, 0, 223, 53, 0, // Skip to: 17098
/* 3307 */    MCD_OPC_Decode, 254, 9, 213, 1, // Opcode: C_LT_S
/* 3312 */    MCD_OPC_FilterValue, 61, 17, 0, 0, // Skip to: 3334
/* 3317 */    MCD_OPC_CheckPredicate, 50, 208, 53, 0, // Skip to: 17098
/* 3322 */    MCD_OPC_CheckField, 6, 2, 0, 201, 53, 0, // Skip to: 17098
/* 3329 */    MCD_OPC_Decode, 132, 10, 213, 1, // Opcode: C_NGE_S
/* 3334 */    MCD_OPC_FilterValue, 62, 17, 0, 0, // Skip to: 3356
/* 3339 */    MCD_OPC_CheckPredicate, 50, 186, 53, 0, // Skip to: 17098
/* 3344 */    MCD_OPC_CheckField, 6, 2, 0, 179, 53, 0, // Skip to: 17098
/* 3351 */    MCD_OPC_Decode, 248, 9, 213, 1, // Opcode: C_LE_S
/* 3356 */    MCD_OPC_FilterValue, 63, 169, 53, 0, // Skip to: 17098
/* 3361 */    MCD_OPC_CheckPredicate, 50, 164, 53, 0, // Skip to: 17098
/* 3366 */    MCD_OPC_CheckField, 6, 2, 0, 157, 53, 0, // Skip to: 17098
/* 3373 */    MCD_OPC_Decode, 150, 10, 213, 1, // Opcode: C_NGT_S
/* 3378 */    MCD_OPC_FilterValue, 17, 1, 3, 0, // Skip to: 4152
/* 3383 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 3386 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 3401
/* 3391 */    MCD_OPC_CheckPredicate, 55, 134, 53, 0, // Skip to: 17098
/* 3396 */    MCD_OPC_Decode, 135, 12, 214, 1, // Opcode: FADD_D32
/* 3401 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 3416
/* 3406 */    MCD_OPC_CheckPredicate, 55, 119, 53, 0, // Skip to: 17098
/* 3411 */    MCD_OPC_Decode, 152, 13, 214, 1, // Opcode: FSUB_D32
/* 3416 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 3431
/* 3421 */    MCD_OPC_CheckPredicate, 55, 104, 53, 0, // Skip to: 17098
/* 3426 */    MCD_OPC_Decode, 236, 12, 214, 1, // Opcode: FMUL_D32
/* 3431 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 3446
/* 3436 */    MCD_OPC_CheckPredicate, 55, 89, 53, 0, // Skip to: 17098
/* 3441 */    MCD_OPC_Decode, 174, 12, 214, 1, // Opcode: FDIV_D32
/* 3446 */    MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 3468
/* 3451 */    MCD_OPC_CheckPredicate, 57, 74, 53, 0, // Skip to: 17098
/* 3456 */    MCD_OPC_CheckField, 16, 5, 0, 67, 53, 0, // Skip to: 17098
/* 3463 */    MCD_OPC_Decode, 144, 13, 215, 1, // Opcode: FSQRT_D32
/* 3468 */    MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 3490
/* 3473 */    MCD_OPC_CheckPredicate, 55, 52, 53, 0, // Skip to: 17098
/* 3478 */    MCD_OPC_CheckField, 16, 5, 0, 45, 53, 0, // Skip to: 17098
/* 3485 */    MCD_OPC_Decode, 128, 12, 215, 1, // Opcode: FABS_D32
/* 3490 */    MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 3512
/* 3495 */    MCD_OPC_CheckPredicate, 55, 30, 53, 0, // Skip to: 17098
/* 3500 */    MCD_OPC_CheckField, 16, 5, 0, 23, 53, 0, // Skip to: 17098
/* 3507 */    MCD_OPC_Decode, 225, 12, 215, 1, // Opcode: FMOV_D32
/* 3512 */    MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 3534
/* 3517 */    MCD_OPC_CheckPredicate, 55, 8, 53, 0, // Skip to: 17098
/* 3522 */    MCD_OPC_CheckField, 16, 5, 0, 1, 53, 0, // Skip to: 17098
/* 3529 */    MCD_OPC_Decode, 245, 12, 215, 1, // Opcode: FNEG_D32
/* 3534 */    MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 3556
/* 3539 */    MCD_OPC_CheckPredicate, 57, 242, 52, 0, // Skip to: 17098
/* 3544 */    MCD_OPC_CheckField, 16, 5, 0, 235, 52, 0, // Skip to: 17098
/* 3551 */    MCD_OPC_Decode, 199, 18, 216, 1, // Opcode: ROUND_W_D32
/* 3556 */    MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 3578
/* 3561 */    MCD_OPC_CheckPredicate, 57, 220, 52, 0, // Skip to: 17098
/* 3566 */    MCD_OPC_CheckField, 16, 5, 0, 213, 52, 0, // Skip to: 17098
/* 3573 */    MCD_OPC_Decode, 237, 21, 216, 1, // Opcode: TRUNC_W_D32
/* 3578 */    MCD_OPC_FilterValue, 14, 17, 0, 0, // Skip to: 3600
/* 3583 */    MCD_OPC_CheckPredicate, 57, 198, 52, 0, // Skip to: 17098
/* 3588 */    MCD_OPC_CheckField, 16, 5, 0, 191, 52, 0, // Skip to: 17098
/* 3595 */    MCD_OPC_Decode, 149, 8, 216, 1, // Opcode: CEIL_W_D32
/* 3600 */    MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 3622
/* 3605 */    MCD_OPC_CheckPredicate, 57, 176, 52, 0, // Skip to: 17098
/* 3610 */    MCD_OPC_CheckField, 16, 5, 0, 169, 52, 0, // Skip to: 17098
/* 3617 */    MCD_OPC_Decode, 208, 12, 216, 1, // Opcode: FLOOR_W_D32
/* 3622 */    MCD_OPC_FilterValue, 17, 33, 0, 0, // Skip to: 3660
/* 3627 */    MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 3630 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 3645
/* 3635 */    MCD_OPC_CheckPredicate, 58, 146, 52, 0, // Skip to: 17098
/* 3640 */    MCD_OPC_Decode, 152, 16, 217, 1, // Opcode: MOVF_D32
/* 3645 */    MCD_OPC_FilterValue, 1, 136, 52, 0, // Skip to: 17098
/* 3650 */    MCD_OPC_CheckPredicate, 58, 131, 52, 0, // Skip to: 17098
/* 3655 */    MCD_OPC_Decode, 172, 16, 217, 1, // Opcode: MOVT_D32
/* 3660 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 3675
/* 3665 */    MCD_OPC_CheckPredicate, 58, 116, 52, 0, // Skip to: 17098
/* 3670 */    MCD_OPC_Decode, 184, 16, 218, 1, // Opcode: MOVZ_I_D32
/* 3675 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 3690
/* 3680 */    MCD_OPC_CheckPredicate, 58, 101, 52, 0, // Skip to: 17098
/* 3685 */    MCD_OPC_Decode, 164, 16, 218, 1, // Opcode: MOVN_I_D32
/* 3690 */    MCD_OPC_FilterValue, 21, 17, 0, 0, // Skip to: 3712
/* 3695 */    MCD_OPC_CheckPredicate, 59, 86, 52, 0, // Skip to: 17098
/* 3700 */    MCD_OPC_CheckField, 16, 5, 0, 79, 52, 0, // Skip to: 17098
/* 3707 */    MCD_OPC_Decode, 173, 18, 215, 1, // Opcode: RECIP_D32
/* 3712 */    MCD_OPC_FilterValue, 22, 17, 0, 0, // Skip to: 3734
/* 3717 */    MCD_OPC_CheckPredicate, 59, 64, 52, 0, // Skip to: 17098
/* 3722 */    MCD_OPC_CheckField, 16, 5, 0, 57, 52, 0, // Skip to: 17098
/* 3729 */    MCD_OPC_Decode, 206, 18, 215, 1, // Opcode: RSQRT_D32
/* 3734 */    MCD_OPC_FilterValue, 32, 17, 0, 0, // Skip to: 3756
/* 3739 */    MCD_OPC_CheckPredicate, 55, 42, 52, 0, // Skip to: 17098
/* 3744 */    MCD_OPC_CheckField, 16, 5, 0, 35, 52, 0, // Skip to: 17098
/* 3751 */    MCD_OPC_Decode, 214, 9, 216, 1, // Opcode: CVT_S_D32
/* 3756 */    MCD_OPC_FilterValue, 36, 17, 0, 0, // Skip to: 3778
/* 3761 */    MCD_OPC_CheckPredicate, 55, 20, 52, 0, // Skip to: 17098
/* 3766 */    MCD_OPC_CheckField, 16, 5, 0, 13, 52, 0, // Skip to: 17098
/* 3773 */    MCD_OPC_Decode, 225, 9, 216, 1, // Opcode: CVT_W_D32
/* 3778 */    MCD_OPC_FilterValue, 37, 17, 0, 0, // Skip to: 3800
/* 3783 */    MCD_OPC_CheckPredicate, 56, 254, 51, 0, // Skip to: 17098
/* 3788 */    MCD_OPC_CheckField, 16, 5, 0, 247, 51, 0, // Skip to: 17098
/* 3795 */    MCD_OPC_Decode, 205, 9, 219, 1, // Opcode: CVT_L_D64
/* 3800 */    MCD_OPC_FilterValue, 48, 17, 0, 0, // Skip to: 3822
/* 3805 */    MCD_OPC_CheckPredicate, 60, 232, 51, 0, // Skip to: 17098
/* 3810 */    MCD_OPC_CheckField, 6, 2, 0, 225, 51, 0, // Skip to: 17098
/* 3817 */    MCD_OPC_Decode, 238, 9, 220, 1, // Opcode: C_F_D32
/* 3822 */    MCD_OPC_FilterValue, 49, 17, 0, 0, // Skip to: 3844
/* 3827 */    MCD_OPC_CheckPredicate, 60, 210, 51, 0, // Skip to: 17098
/* 3832 */    MCD_OPC_CheckField, 6, 2, 0, 203, 51, 0, // Skip to: 17098
/* 3839 */    MCD_OPC_Decode, 194, 10, 220, 1, // Opcode: C_UN_D32
/* 3844 */    MCD_OPC_FilterValue, 50, 17, 0, 0, // Skip to: 3866
/* 3849 */    MCD_OPC_CheckPredicate, 60, 188, 51, 0, // Skip to: 17098
/* 3854 */    MCD_OPC_CheckField, 6, 2, 0, 181, 51, 0, // Skip to: 17098
/* 3861 */    MCD_OPC_Decode, 232, 9, 220, 1, // Opcode: C_EQ_D32
/* 3866 */    MCD_OPC_FilterValue, 51, 17, 0, 0, // Skip to: 3888
/* 3871 */    MCD_OPC_CheckPredicate, 60, 166, 51, 0, // Skip to: 17098
/* 3876 */    MCD_OPC_CheckField, 6, 2, 0, 159, 51, 0, // Skip to: 17098
/* 3883 */    MCD_OPC_Decode, 176, 10, 220, 1, // Opcode: C_UEQ_D32
/* 3888 */    MCD_OPC_FilterValue, 52, 17, 0, 0, // Skip to: 3910
/* 3893 */    MCD_OPC_CheckPredicate, 60, 144, 51, 0, // Skip to: 17098
/* 3898 */    MCD_OPC_CheckField, 6, 2, 0, 137, 51, 0, // Skip to: 17098
/* 3905 */    MCD_OPC_Decode, 158, 10, 220, 1, // Opcode: C_OLT_D32
/* 3910 */    MCD_OPC_FilterValue, 53, 17, 0, 0, // Skip to: 3932
/* 3915 */    MCD_OPC_CheckPredicate, 60, 122, 51, 0, // Skip to: 17098
/* 3920 */    MCD_OPC_CheckField, 6, 2, 0, 115, 51, 0, // Skip to: 17098
/* 3927 */    MCD_OPC_Decode, 188, 10, 220, 1, // Opcode: C_ULT_D32
/* 3932 */    MCD_OPC_FilterValue, 54, 17, 0, 0, // Skip to: 3954
/* 3937 */    MCD_OPC_CheckPredicate, 60, 100, 51, 0, // Skip to: 17098
/* 3942 */    MCD_OPC_CheckField, 6, 2, 0, 93, 51, 0, // Skip to: 17098
/* 3949 */    MCD_OPC_Decode, 152, 10, 220, 1, // Opcode: C_OLE_D32
/* 3954 */    MCD_OPC_FilterValue, 55, 17, 0, 0, // Skip to: 3976
/* 3959 */    MCD_OPC_CheckPredicate, 60, 78, 51, 0, // Skip to: 17098
/* 3964 */    MCD_OPC_CheckField, 6, 2, 0, 71, 51, 0, // Skip to: 17098
/* 3971 */    MCD_OPC_Decode, 182, 10, 220, 1, // Opcode: C_ULE_D32
/* 3976 */    MCD_OPC_FilterValue, 56, 17, 0, 0, // Skip to: 3998
/* 3981 */    MCD_OPC_CheckPredicate, 60, 56, 51, 0, // Skip to: 17098
/* 3986 */    MCD_OPC_CheckField, 6, 2, 0, 49, 51, 0, // Skip to: 17098
/* 3993 */    MCD_OPC_Decode, 170, 10, 220, 1, // Opcode: C_SF_D32
/* 3998 */    MCD_OPC_FilterValue, 57, 17, 0, 0, // Skip to: 4020
/* 4003 */    MCD_OPC_CheckPredicate, 60, 34, 51, 0, // Skip to: 17098
/* 4008 */    MCD_OPC_CheckField, 6, 2, 0, 27, 51, 0, // Skip to: 17098
/* 4015 */    MCD_OPC_Decode, 134, 10, 220, 1, // Opcode: C_NGLE_D32
/* 4020 */    MCD_OPC_FilterValue, 58, 17, 0, 0, // Skip to: 4042
/* 4025 */    MCD_OPC_CheckPredicate, 60, 12, 51, 0, // Skip to: 17098
/* 4030 */    MCD_OPC_CheckField, 6, 2, 0, 5, 51, 0, // Skip to: 17098
/* 4037 */    MCD_OPC_Decode, 164, 10, 220, 1, // Opcode: C_SEQ_D32
/* 4042 */    MCD_OPC_FilterValue, 59, 17, 0, 0, // Skip to: 4064
/* 4047 */    MCD_OPC_CheckPredicate, 60, 246, 50, 0, // Skip to: 17098
/* 4052 */    MCD_OPC_CheckField, 6, 2, 0, 239, 50, 0, // Skip to: 17098
/* 4059 */    MCD_OPC_Decode, 140, 10, 220, 1, // Opcode: C_NGL_D32
/* 4064 */    MCD_OPC_FilterValue, 60, 17, 0, 0, // Skip to: 4086
/* 4069 */    MCD_OPC_CheckPredicate, 60, 224, 50, 0, // Skip to: 17098
/* 4074 */    MCD_OPC_CheckField, 6, 2, 0, 217, 50, 0, // Skip to: 17098
/* 4081 */    MCD_OPC_Decode, 250, 9, 220, 1, // Opcode: C_LT_D32
/* 4086 */    MCD_OPC_FilterValue, 61, 17, 0, 0, // Skip to: 4108
/* 4091 */    MCD_OPC_CheckPredicate, 60, 202, 50, 0, // Skip to: 17098
/* 4096 */    MCD_OPC_CheckField, 6, 2, 0, 195, 50, 0, // Skip to: 17098
/* 4103 */    MCD_OPC_Decode, 128, 10, 220, 1, // Opcode: C_NGE_D32
/* 4108 */    MCD_OPC_FilterValue, 62, 17, 0, 0, // Skip to: 4130
/* 4113 */    MCD_OPC_CheckPredicate, 60, 180, 50, 0, // Skip to: 17098
/* 4118 */    MCD_OPC_CheckField, 6, 2, 0, 173, 50, 0, // Skip to: 17098
/* 4125 */    MCD_OPC_Decode, 244, 9, 220, 1, // Opcode: C_LE_D32
/* 4130 */    MCD_OPC_FilterValue, 63, 163, 50, 0, // Skip to: 17098
/* 4135 */    MCD_OPC_CheckPredicate, 60, 158, 50, 0, // Skip to: 17098
/* 4140 */    MCD_OPC_CheckField, 6, 2, 0, 151, 50, 0, // Skip to: 17098
/* 4147 */    MCD_OPC_Decode, 146, 10, 220, 1, // Opcode: C_NGT_D32
/* 4152 */    MCD_OPC_FilterValue, 20, 47, 0, 0, // Skip to: 4204
/* 4157 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 4160 */    MCD_OPC_FilterValue, 32, 17, 0, 0, // Skip to: 4182
/* 4165 */    MCD_OPC_CheckPredicate, 47, 128, 50, 0, // Skip to: 17098
/* 4170 */    MCD_OPC_CheckField, 16, 5, 0, 121, 50, 0, // Skip to: 17098
/* 4177 */    MCD_OPC_Decode, 222, 9, 208, 1, // Opcode: CVT_S_W
/* 4182 */    MCD_OPC_FilterValue, 33, 111, 50, 0, // Skip to: 17098
/* 4187 */    MCD_OPC_CheckPredicate, 55, 106, 50, 0, // Skip to: 17098
/* 4192 */    MCD_OPC_CheckField, 16, 5, 0, 99, 50, 0, // Skip to: 17098
/* 4199 */    MCD_OPC_Decode, 197, 9, 211, 1, // Opcode: CVT_D32_W
/* 4204 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 4219
/* 4209 */    MCD_OPC_CheckPredicate, 30, 84, 50, 0, // Skip to: 17098
/* 4214 */    MCD_OPC_Decode, 251, 7, 206, 1, // Opcode: BZ_B
/* 4219 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 4234
/* 4224 */    MCD_OPC_CheckPredicate, 30, 69, 50, 0, // Skip to: 17098
/* 4229 */    MCD_OPC_Decode, 253, 7, 221, 1, // Opcode: BZ_H
/* 4234 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 4249
/* 4239 */    MCD_OPC_CheckPredicate, 30, 54, 50, 0, // Skip to: 17098
/* 4244 */    MCD_OPC_Decode, 255, 7, 222, 1, // Opcode: BZ_W
/* 4249 */    MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 4264
/* 4254 */    MCD_OPC_CheckPredicate, 30, 39, 50, 0, // Skip to: 17098
/* 4259 */    MCD_OPC_Decode, 252, 7, 223, 1, // Opcode: BZ_D
/* 4264 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 4279
/* 4269 */    MCD_OPC_CheckPredicate, 30, 24, 50, 0, // Skip to: 17098
/* 4274 */    MCD_OPC_Decode, 226, 7, 206, 1, // Opcode: BNZ_B
/* 4279 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 4294
/* 4284 */    MCD_OPC_CheckPredicate, 30, 9, 50, 0, // Skip to: 17098
/* 4289 */    MCD_OPC_Decode, 228, 7, 221, 1, // Opcode: BNZ_H
/* 4294 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 4309
/* 4299 */    MCD_OPC_CheckPredicate, 30, 250, 49, 0, // Skip to: 17098
/* 4304 */    MCD_OPC_Decode, 230, 7, 222, 1, // Opcode: BNZ_W
/* 4309 */    MCD_OPC_FilterValue, 31, 240, 49, 0, // Skip to: 17098
/* 4314 */    MCD_OPC_CheckPredicate, 30, 235, 49, 0, // Skip to: 17098
/* 4319 */    MCD_OPC_Decode, 227, 7, 223, 1, // Opcode: BNZ_D
/* 4324 */    MCD_OPC_FilterValue, 18, 47, 0, 0, // Skip to: 4376
/* 4329 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 4332 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 4354
/* 4337 */    MCD_OPC_CheckPredicate, 27, 212, 49, 0, // Skip to: 17098
/* 4342 */    MCD_OPC_CheckField, 3, 8, 0, 205, 49, 0, // Skip to: 17098
/* 4349 */    MCD_OPC_Decode, 208, 15, 224, 1, // Opcode: MFC2
/* 4354 */    MCD_OPC_FilterValue, 4, 195, 49, 0, // Skip to: 17098
/* 4359 */    MCD_OPC_CheckPredicate, 27, 190, 49, 0, // Skip to: 17098
/* 4364 */    MCD_OPC_CheckField, 3, 8, 0, 183, 49, 0, // Skip to: 17098
/* 4371 */    MCD_OPC_Decode, 224, 16, 225, 1, // Opcode: MTC2
/* 4376 */    MCD_OPC_FilterValue, 19, 255, 0, 0, // Skip to: 4636
/* 4381 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 4384 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 4406
/* 4389 */    MCD_OPC_CheckPredicate, 61, 160, 49, 0, // Skip to: 17098
/* 4394 */    MCD_OPC_CheckField, 11, 5, 0, 153, 49, 0, // Skip to: 17098
/* 4401 */    MCD_OPC_Decode, 251, 14, 226, 1, // Opcode: LWXC1
/* 4406 */    MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 4428
/* 4411 */    MCD_OPC_CheckPredicate, 62, 138, 49, 0, // Skip to: 17098
/* 4416 */    MCD_OPC_CheckField, 11, 5, 0, 131, 49, 0, // Skip to: 17098
/* 4423 */    MCD_OPC_Decode, 173, 14, 227, 1, // Opcode: LDXC1
/* 4428 */    MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 4450
/* 4433 */    MCD_OPC_CheckPredicate, 63, 116, 49, 0, // Skip to: 17098
/* 4438 */    MCD_OPC_CheckField, 11, 5, 0, 109, 49, 0, // Skip to: 17098
/* 4445 */    MCD_OPC_Decode, 211, 14, 227, 1, // Opcode: LUXC1
/* 4450 */    MCD_OPC_FilterValue, 8, 17, 0, 0, // Skip to: 4472
/* 4455 */    MCD_OPC_CheckPredicate, 61, 94, 49, 0, // Skip to: 17098
/* 4460 */    MCD_OPC_CheckField, 6, 5, 0, 87, 49, 0, // Skip to: 17098
/* 4467 */    MCD_OPC_Decode, 153, 21, 228, 1, // Opcode: SWXC1
/* 4472 */    MCD_OPC_FilterValue, 9, 17, 0, 0, // Skip to: 4494
/* 4477 */    MCD_OPC_CheckPredicate, 62, 72, 49, 0, // Skip to: 17098
/* 4482 */    MCD_OPC_CheckField, 6, 5, 0, 65, 49, 0, // Skip to: 17098
/* 4489 */    MCD_OPC_Decode, 133, 19, 229, 1, // Opcode: SDXC1
/* 4494 */    MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 4516
/* 4499 */    MCD_OPC_CheckPredicate, 63, 50, 49, 0, // Skip to: 17098
/* 4504 */    MCD_OPC_CheckField, 6, 5, 0, 43, 49, 0, // Skip to: 17098
/* 4511 */    MCD_OPC_Decode, 248, 20, 229, 1, // Opcode: SUXC1
/* 4516 */    MCD_OPC_FilterValue, 32, 10, 0, 0, // Skip to: 4531
/* 4521 */    MCD_OPC_CheckPredicate, 64, 28, 49, 0, // Skip to: 17098
/* 4526 */    MCD_OPC_Decode, 164, 15, 230, 1, // Opcode: MADD_S
/* 4531 */    MCD_OPC_FilterValue, 33, 10, 0, 0, // Skip to: 4546
/* 4536 */    MCD_OPC_CheckPredicate, 65, 13, 49, 0, // Skip to: 17098
/* 4541 */    MCD_OPC_Decode, 156, 15, 231, 1, // Opcode: MADD_D32
/* 4546 */    MCD_OPC_FilterValue, 40, 10, 0, 0, // Skip to: 4561
/* 4551 */    MCD_OPC_CheckPredicate, 64, 254, 48, 0, // Skip to: 17098
/* 4556 */    MCD_OPC_Decode, 215, 16, 230, 1, // Opcode: MSUB_S
/* 4561 */    MCD_OPC_FilterValue, 41, 10, 0, 0, // Skip to: 4576
/* 4566 */    MCD_OPC_CheckPredicate, 65, 239, 48, 0, // Skip to: 17098
/* 4571 */    MCD_OPC_Decode, 207, 16, 231, 1, // Opcode: MSUB_D32
/* 4576 */    MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 4591
/* 4581 */    MCD_OPC_CheckPredicate, 66, 224, 48, 0, // Skip to: 17098
/* 4586 */    MCD_OPC_Decode, 193, 17, 230, 1, // Opcode: NMADD_S
/* 4591 */    MCD_OPC_FilterValue, 49, 10, 0, 0, // Skip to: 4606
/* 4596 */    MCD_OPC_CheckPredicate, 67, 209, 48, 0, // Skip to: 17098
/* 4601 */    MCD_OPC_Decode, 190, 17, 231, 1, // Opcode: NMADD_D32
/* 4606 */    MCD_OPC_FilterValue, 56, 10, 0, 0, // Skip to: 4621
/* 4611 */    MCD_OPC_CheckPredicate, 66, 194, 48, 0, // Skip to: 17098
/* 4616 */    MCD_OPC_Decode, 198, 17, 230, 1, // Opcode: NMSUB_S
/* 4621 */    MCD_OPC_FilterValue, 57, 184, 48, 0, // Skip to: 17098
/* 4626 */    MCD_OPC_CheckPredicate, 67, 179, 48, 0, // Skip to: 17098
/* 4631 */    MCD_OPC_Decode, 195, 17, 231, 1, // Opcode: NMSUB_D32
/* 4636 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 4651
/* 4641 */    MCD_OPC_CheckPredicate, 39, 164, 48, 0, // Skip to: 17098
/* 4646 */    MCD_OPC_Decode, 239, 6, 190, 1, // Opcode: BEQL
/* 4651 */    MCD_OPC_FilterValue, 21, 107, 0, 0, // Skip to: 4763
/* 4656 */    MCD_OPC_ExtractField, 0, 16,  // Inst{15-0} ...
/* 4659 */    MCD_OPC_FilterValue, 123, 9, 0, 0, // Skip to: 4673
/* 4664 */    MCD_OPC_CheckPredicate, 19, 19, 0, 0, // Skip to: 4688
/* 4669 */    MCD_OPC_Decode, 231, 12, 113, // Opcode: FMOV_S_MM
/* 4673 */    MCD_OPC_FilterValue, 251, 22, 9, 0, 0, // Skip to: 4688
/* 4679 */    MCD_OPC_CheckPredicate, 19, 4, 0, 0, // Skip to: 4688
/* 4684 */    MCD_OPC_Decode, 250, 12, 113, // Opcode: FNEG_S_MM
/* 4688 */    MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 4691 */    MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 4706
/* 4696 */    MCD_OPC_CheckPredicate, 19, 52, 0, 0, // Skip to: 4753
/* 4701 */    MCD_OPC_Decode, 141, 12, 153, 1, // Opcode: FADD_S_MM
/* 4706 */    MCD_OPC_FilterValue, 112, 10, 0, 0, // Skip to: 4721
/* 4711 */    MCD_OPC_CheckPredicate, 19, 37, 0, 0, // Skip to: 4753
/* 4716 */    MCD_OPC_Decode, 158, 13, 153, 1, // Opcode: FSUB_S_MM
/* 4721 */    MCD_OPC_FilterValue, 176, 1, 10, 0, 0, // Skip to: 4737
/* 4727 */    MCD_OPC_CheckPredicate, 19, 21, 0, 0, // Skip to: 4753
/* 4732 */    MCD_OPC_Decode, 242, 12, 153, 1, // Opcode: FMUL_S_MM
/* 4737 */    MCD_OPC_FilterValue, 240, 1, 10, 0, 0, // Skip to: 4753
/* 4743 */    MCD_OPC_CheckPredicate, 19, 5, 0, 0, // Skip to: 4753
/* 4748 */    MCD_OPC_Decode, 179, 12, 153, 1, // Opcode: FDIV_S_MM
/* 4753 */    MCD_OPC_CheckPredicate, 39, 52, 48, 0, // Skip to: 17098
/* 4758 */    MCD_OPC_Decode, 214, 7, 190, 1, // Opcode: BNEL
/* 4763 */    MCD_OPC_FilterValue, 22, 17, 0, 0, // Skip to: 4785
/* 4768 */    MCD_OPC_CheckPredicate, 39, 37, 48, 0, // Skip to: 17098
/* 4773 */    MCD_OPC_CheckField, 16, 5, 0, 30, 48, 0, // Skip to: 17098
/* 4780 */    MCD_OPC_Decode, 176, 7, 186, 1, // Opcode: BLEZL
/* 4785 */    MCD_OPC_FilterValue, 23, 17, 0, 0, // Skip to: 4807
/* 4790 */    MCD_OPC_CheckPredicate, 39, 15, 48, 0, // Skip to: 17098
/* 4795 */    MCD_OPC_CheckField, 16, 5, 0, 8, 48, 0, // Skip to: 17098
/* 4802 */    MCD_OPC_Decode, 147, 7, 186, 1, // Opcode: BGTZL
/* 4807 */    MCD_OPC_FilterValue, 28, 15, 1, 0, // Skip to: 5083
/* 4812 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 4815 */    MCD_OPC_FilterValue, 0, 42, 0, 0, // Skip to: 4862
/* 4820 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4823 */    MCD_OPC_FilterValue, 0, 238, 47, 0, // Skip to: 17098
/* 4828 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4831 */    MCD_OPC_FilterValue, 0, 230, 47, 0, // Skip to: 17098
/* 4836 */    MCD_OPC_CheckPredicate, 68, 11, 0, 0, // Skip to: 4852
/* 4841 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 4852
/* 4848 */    MCD_OPC_Decode, 141, 15, 69, // Opcode: MADD
/* 4852 */    MCD_OPC_CheckPredicate, 37, 209, 47, 0, // Skip to: 17098
/* 4857 */    MCD_OPC_Decode, 159, 15, 232, 1, // Opcode: MADD_DSP
/* 4862 */    MCD_OPC_FilterValue, 1, 42, 0, 0, // Skip to: 4909
/* 4867 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4870 */    MCD_OPC_FilterValue, 0, 191, 47, 0, // Skip to: 17098
/* 4875 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4878 */    MCD_OPC_FilterValue, 0, 183, 47, 0, // Skip to: 17098
/* 4883 */    MCD_OPC_CheckPredicate, 68, 11, 0, 0, // Skip to: 4899
/* 4888 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 4899
/* 4895 */    MCD_OPC_Decode, 148, 15, 69, // Opcode: MADDU
/* 4899 */    MCD_OPC_CheckPredicate, 37, 162, 47, 0, // Skip to: 17098
/* 4904 */    MCD_OPC_Decode, 149, 15, 232, 1, // Opcode: MADDU_DSP
/* 4909 */    MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 4930
/* 4914 */    MCD_OPC_CheckPredicate, 68, 147, 47, 0, // Skip to: 17098
/* 4919 */    MCD_OPC_CheckField, 6, 5, 0, 140, 47, 0, // Skip to: 17098
/* 4926 */    MCD_OPC_Decode, 131, 17, 50, // Opcode: MUL
/* 4930 */    MCD_OPC_FilterValue, 4, 42, 0, 0, // Skip to: 4977
/* 4935 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4938 */    MCD_OPC_FilterValue, 0, 123, 47, 0, // Skip to: 17098
/* 4943 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4946 */    MCD_OPC_FilterValue, 0, 115, 47, 0, // Skip to: 17098
/* 4951 */    MCD_OPC_CheckPredicate, 68, 11, 0, 0, // Skip to: 4967
/* 4956 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 4967
/* 4963 */    MCD_OPC_Decode, 192, 16, 69, // Opcode: MSUB
/* 4967 */    MCD_OPC_CheckPredicate, 37, 94, 47, 0, // Skip to: 17098
/* 4972 */    MCD_OPC_Decode, 210, 16, 232, 1, // Opcode: MSUB_DSP
/* 4977 */    MCD_OPC_FilterValue, 5, 42, 0, 0, // Skip to: 5024
/* 4982 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 4985 */    MCD_OPC_FilterValue, 0, 76, 47, 0, // Skip to: 17098
/* 4990 */    MCD_OPC_ExtractField, 13, 3,  // Inst{15-13} ...
/* 4993 */    MCD_OPC_FilterValue, 0, 68, 47, 0, // Skip to: 17098
/* 4998 */    MCD_OPC_CheckPredicate, 68, 11, 0, 0, // Skip to: 5014
/* 5003 */    MCD_OPC_CheckField, 11, 2, 0, 4, 0, 0, // Skip to: 5014
/* 5010 */    MCD_OPC_Decode, 199, 16, 69, // Opcode: MSUBU
/* 5014 */    MCD_OPC_CheckPredicate, 37, 47, 47, 0, // Skip to: 17098
/* 5019 */    MCD_OPC_Decode, 200, 16, 232, 1, // Opcode: MSUBU_DSP
/* 5024 */    MCD_OPC_FilterValue, 32, 17, 0, 0, // Skip to: 5046
/* 5029 */    MCD_OPC_CheckPredicate, 68, 32, 47, 0, // Skip to: 17098
/* 5034 */    MCD_OPC_CheckField, 6, 5, 0, 25, 47, 0, // Skip to: 17098
/* 5041 */    MCD_OPC_Decode, 212, 8, 233, 1, // Opcode: CLZ
/* 5046 */    MCD_OPC_FilterValue, 33, 17, 0, 0, // Skip to: 5068
/* 5051 */    MCD_OPC_CheckPredicate, 68, 10, 47, 0, // Skip to: 17098
/* 5056 */    MCD_OPC_CheckField, 6, 5, 0, 3, 47, 0, // Skip to: 17098
/* 5063 */    MCD_OPC_Decode, 192, 8, 233, 1, // Opcode: CLO
/* 5068 */    MCD_OPC_FilterValue, 63, 249, 46, 0, // Skip to: 17098
/* 5073 */    MCD_OPC_CheckPredicate, 68, 244, 46, 0, // Skip to: 17098
/* 5078 */    MCD_OPC_Decode, 243, 18, 177, 1, // Opcode: SDBBP
/* 5083 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 5098
/* 5088 */    MCD_OPC_CheckPredicate, 68, 229, 46, 0, // Skip to: 17098
/* 5093 */    MCD_OPC_Decode, 242, 13, 189, 1, // Opcode: JALX
/* 5098 */    MCD_OPC_FilterValue, 30, 201, 32, 0, // Skip to: 13496
/* 5103 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 5106 */    MCD_OPC_FilterValue, 0, 63, 0, 0, // Skip to: 5174
/* 5111 */    MCD_OPC_ExtractField, 24, 2,  // Inst{25-24} ...
/* 5114 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 5129
/* 5119 */    MCD_OPC_CheckPredicate, 30, 198, 46, 0, // Skip to: 17098
/* 5124 */    MCD_OPC_Decode, 151, 6, 234, 1, // Opcode: ANDI_B
/* 5129 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 5144
/* 5134 */    MCD_OPC_CheckPredicate, 30, 183, 46, 0, // Skip to: 17098
/* 5139 */    MCD_OPC_Decode, 214, 17, 234, 1, // Opcode: ORI_B
/* 5144 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 5159
/* 5149 */    MCD_OPC_CheckPredicate, 30, 168, 46, 0, // Skip to: 17098
/* 5154 */    MCD_OPC_Decode, 202, 17, 234, 1, // Opcode: NORI_B
/* 5159 */    MCD_OPC_FilterValue, 3, 158, 46, 0, // Skip to: 17098
/* 5164 */    MCD_OPC_CheckPredicate, 30, 153, 46, 0, // Skip to: 17098
/* 5169 */    MCD_OPC_Decode, 139, 22, 234, 1, // Opcode: XORI_B
/* 5174 */    MCD_OPC_FilterValue, 1, 48, 0, 0, // Skip to: 5227
/* 5179 */    MCD_OPC_ExtractField, 24, 2,  // Inst{25-24} ...
/* 5182 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 5197
/* 5187 */    MCD_OPC_CheckPredicate, 30, 130, 46, 0, // Skip to: 17098
/* 5192 */    MCD_OPC_Decode, 197, 7, 235, 1, // Opcode: BMNZI_B
/* 5197 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 5212
/* 5202 */    MCD_OPC_CheckPredicate, 30, 115, 46, 0, // Skip to: 17098
/* 5207 */    MCD_OPC_Decode, 199, 7, 235, 1, // Opcode: BMZI_B
/* 5212 */    MCD_OPC_FilterValue, 2, 105, 46, 0, // Skip to: 17098
/* 5217 */    MCD_OPC_CheckPredicate, 30, 100, 46, 0, // Skip to: 17098
/* 5222 */    MCD_OPC_Decode, 241, 7, 235, 1, // Opcode: BSELI_B
/* 5227 */    MCD_OPC_FilterValue, 2, 48, 0, 0, // Skip to: 5280
/* 5232 */    MCD_OPC_ExtractField, 24, 2,  // Inst{25-24} ...
/* 5235 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 5250
/* 5240 */    MCD_OPC_CheckPredicate, 30, 77, 46, 0, // Skip to: 17098
/* 5245 */    MCD_OPC_Decode, 167, 19, 234, 1, // Opcode: SHF_B
/* 5250 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 5265
/* 5255 */    MCD_OPC_CheckPredicate, 30, 62, 46, 0, // Skip to: 17098
/* 5260 */    MCD_OPC_Decode, 168, 19, 236, 1, // Opcode: SHF_H
/* 5265 */    MCD_OPC_FilterValue, 2, 52, 46, 0, // Skip to: 17098
/* 5270 */    MCD_OPC_CheckPredicate, 30, 47, 46, 0, // Skip to: 17098
/* 5275 */    MCD_OPC_Decode, 169, 19, 237, 1, // Opcode: SHF_W
/* 5280 */    MCD_OPC_FilterValue, 6, 107, 1, 0, // Skip to: 5648
/* 5285 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 5288 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 5303
/* 5293 */    MCD_OPC_CheckPredicate, 30, 24, 46, 0, // Skip to: 17098
/* 5298 */    MCD_OPC_Decode, 247, 5, 238, 1, // Opcode: ADDVI_B
/* 5303 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 5318
/* 5308 */    MCD_OPC_CheckPredicate, 30, 9, 46, 0, // Skip to: 17098
/* 5313 */    MCD_OPC_Decode, 249, 5, 239, 1, // Opcode: ADDVI_H
/* 5318 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 5333
/* 5323 */    MCD_OPC_CheckPredicate, 30, 250, 45, 0, // Skip to: 17098
/* 5328 */    MCD_OPC_Decode, 250, 5, 240, 1, // Opcode: ADDVI_W
/* 5333 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 5348
/* 5338 */    MCD_OPC_CheckPredicate, 30, 235, 45, 0, // Skip to: 17098
/* 5343 */    MCD_OPC_Decode, 248, 5, 241, 1, // Opcode: ADDVI_D
/* 5348 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 5363
/* 5353 */    MCD_OPC_CheckPredicate, 30, 220, 45, 0, // Skip to: 17098
/* 5358 */    MCD_OPC_Decode, 236, 20, 238, 1, // Opcode: SUBVI_B
/* 5363 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 5378
/* 5368 */    MCD_OPC_CheckPredicate, 30, 205, 45, 0, // Skip to: 17098
/* 5373 */    MCD_OPC_Decode, 238, 20, 239, 1, // Opcode: SUBVI_H
/* 5378 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 5393
/* 5383 */    MCD_OPC_CheckPredicate, 30, 190, 45, 0, // Skip to: 17098
/* 5388 */    MCD_OPC_Decode, 239, 20, 240, 1, // Opcode: SUBVI_W
/* 5393 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 5408
/* 5398 */    MCD_OPC_CheckPredicate, 30, 175, 45, 0, // Skip to: 17098
/* 5403 */    MCD_OPC_Decode, 237, 20, 241, 1, // Opcode: SUBVI_D
/* 5408 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 5423
/* 5413 */    MCD_OPC_CheckPredicate, 30, 160, 45, 0, // Skip to: 17098
/* 5418 */    MCD_OPC_Decode, 178, 15, 238, 1, // Opcode: MAXI_S_B
/* 5423 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 5438
/* 5428 */    MCD_OPC_CheckPredicate, 30, 145, 45, 0, // Skip to: 17098
/* 5433 */    MCD_OPC_Decode, 180, 15, 239, 1, // Opcode: MAXI_S_H
/* 5438 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 5453
/* 5443 */    MCD_OPC_CheckPredicate, 30, 130, 45, 0, // Skip to: 17098
/* 5448 */    MCD_OPC_Decode, 181, 15, 240, 1, // Opcode: MAXI_S_W
/* 5453 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 5468
/* 5458 */    MCD_OPC_CheckPredicate, 30, 115, 45, 0, // Skip to: 17098
/* 5463 */    MCD_OPC_Decode, 179, 15, 241, 1, // Opcode: MAXI_S_D
/* 5468 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 5483
/* 5473 */    MCD_OPC_CheckPredicate, 30, 100, 45, 0, // Skip to: 17098
/* 5478 */    MCD_OPC_Decode, 182, 15, 238, 1, // Opcode: MAXI_U_B
/* 5483 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 5498
/* 5488 */    MCD_OPC_CheckPredicate, 30, 85, 45, 0, // Skip to: 17098
/* 5493 */    MCD_OPC_Decode, 184, 15, 239, 1, // Opcode: MAXI_U_H
/* 5498 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 5513
/* 5503 */    MCD_OPC_CheckPredicate, 30, 70, 45, 0, // Skip to: 17098
/* 5508 */    MCD_OPC_Decode, 185, 15, 240, 1, // Opcode: MAXI_U_W
/* 5513 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 5528
/* 5518 */    MCD_OPC_CheckPredicate, 30, 55, 45, 0, // Skip to: 17098
/* 5523 */    MCD_OPC_Decode, 183, 15, 241, 1, // Opcode: MAXI_U_D
/* 5528 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 5543
/* 5533 */    MCD_OPC_CheckPredicate, 30, 40, 45, 0, // Skip to: 17098
/* 5538 */    MCD_OPC_Decode, 237, 15, 238, 1, // Opcode: MINI_S_B
/* 5543 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 5558
/* 5548 */    MCD_OPC_CheckPredicate, 30, 25, 45, 0, // Skip to: 17098
/* 5553 */    MCD_OPC_Decode, 239, 15, 239, 1, // Opcode: MINI_S_H
/* 5558 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 5573
/* 5563 */    MCD_OPC_CheckPredicate, 30, 10, 45, 0, // Skip to: 17098
/* 5568 */    MCD_OPC_Decode, 240, 15, 240, 1, // Opcode: MINI_S_W
/* 5573 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 5588
/* 5578 */    MCD_OPC_CheckPredicate, 30, 251, 44, 0, // Skip to: 17098
/* 5583 */    MCD_OPC_Decode, 238, 15, 241, 1, // Opcode: MINI_S_D
/* 5588 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 5603
/* 5593 */    MCD_OPC_CheckPredicate, 30, 236, 44, 0, // Skip to: 17098
/* 5598 */    MCD_OPC_Decode, 241, 15, 238, 1, // Opcode: MINI_U_B
/* 5603 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 5618
/* 5608 */    MCD_OPC_CheckPredicate, 30, 221, 44, 0, // Skip to: 17098
/* 5613 */    MCD_OPC_Decode, 243, 15, 239, 1, // Opcode: MINI_U_H
/* 5618 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 5633
/* 5623 */    MCD_OPC_CheckPredicate, 30, 206, 44, 0, // Skip to: 17098
/* 5628 */    MCD_OPC_Decode, 244, 15, 240, 1, // Opcode: MINI_U_W
/* 5633 */    MCD_OPC_FilterValue, 23, 196, 44, 0, // Skip to: 17098
/* 5638 */    MCD_OPC_CheckPredicate, 30, 191, 44, 0, // Skip to: 17098
/* 5643 */    MCD_OPC_Decode, 242, 15, 241, 1, // Opcode: MINI_U_D
/* 5648 */    MCD_OPC_FilterValue, 7, 107, 1, 0, // Skip to: 6016
/* 5653 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 5656 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 5671
/* 5661 */    MCD_OPC_CheckPredicate, 30, 168, 44, 0, // Skip to: 17098
/* 5666 */    MCD_OPC_Decode, 156, 8, 238, 1, // Opcode: CEQI_B
/* 5671 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 5686
/* 5676 */    MCD_OPC_CheckPredicate, 30, 153, 44, 0, // Skip to: 17098
/* 5681 */    MCD_OPC_Decode, 158, 8, 239, 1, // Opcode: CEQI_H
/* 5686 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 5701
/* 5691 */    MCD_OPC_CheckPredicate, 30, 138, 44, 0, // Skip to: 17098
/* 5696 */    MCD_OPC_Decode, 159, 8, 240, 1, // Opcode: CEQI_W
/* 5701 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 5716
/* 5706 */    MCD_OPC_CheckPredicate, 30, 123, 44, 0, // Skip to: 17098
/* 5711 */    MCD_OPC_Decode, 157, 8, 241, 1, // Opcode: CEQI_D
/* 5716 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 5731
/* 5721 */    MCD_OPC_CheckPredicate, 30, 108, 44, 0, // Skip to: 17098
/* 5726 */    MCD_OPC_Decode, 196, 8, 238, 1, // Opcode: CLTI_S_B
/* 5731 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 5746
/* 5736 */    MCD_OPC_CheckPredicate, 30, 93, 44, 0, // Skip to: 17098
/* 5741 */    MCD_OPC_Decode, 198, 8, 239, 1, // Opcode: CLTI_S_H
/* 5746 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 5761
/* 5751 */    MCD_OPC_CheckPredicate, 30, 78, 44, 0, // Skip to: 17098
/* 5756 */    MCD_OPC_Decode, 199, 8, 240, 1, // Opcode: CLTI_S_W
/* 5761 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 5776
/* 5766 */    MCD_OPC_CheckPredicate, 30, 63, 44, 0, // Skip to: 17098
/* 5771 */    MCD_OPC_Decode, 197, 8, 241, 1, // Opcode: CLTI_S_D
/* 5776 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 5791
/* 5781 */    MCD_OPC_CheckPredicate, 30, 48, 44, 0, // Skip to: 17098
/* 5786 */    MCD_OPC_Decode, 200, 8, 238, 1, // Opcode: CLTI_U_B
/* 5791 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 5806
/* 5796 */    MCD_OPC_CheckPredicate, 30, 33, 44, 0, // Skip to: 17098
/* 5801 */    MCD_OPC_Decode, 202, 8, 239, 1, // Opcode: CLTI_U_H
/* 5806 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 5821
/* 5811 */    MCD_OPC_CheckPredicate, 30, 18, 44, 0, // Skip to: 17098
/* 5816 */    MCD_OPC_Decode, 203, 8, 240, 1, // Opcode: CLTI_U_W
/* 5821 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 5836
/* 5826 */    MCD_OPC_CheckPredicate, 30, 3, 44, 0, // Skip to: 17098
/* 5831 */    MCD_OPC_Decode, 201, 8, 241, 1, // Opcode: CLTI_U_D
/* 5836 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 5851
/* 5841 */    MCD_OPC_CheckPredicate, 30, 244, 43, 0, // Skip to: 17098
/* 5846 */    MCD_OPC_Decode, 176, 8, 238, 1, // Opcode: CLEI_S_B
/* 5851 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 5866
/* 5856 */    MCD_OPC_CheckPredicate, 30, 229, 43, 0, // Skip to: 17098
/* 5861 */    MCD_OPC_Decode, 178, 8, 239, 1, // Opcode: CLEI_S_H
/* 5866 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 5881
/* 5871 */    MCD_OPC_CheckPredicate, 30, 214, 43, 0, // Skip to: 17098
/* 5876 */    MCD_OPC_Decode, 179, 8, 240, 1, // Opcode: CLEI_S_W
/* 5881 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 5896
/* 5886 */    MCD_OPC_CheckPredicate, 30, 199, 43, 0, // Skip to: 17098
/* 5891 */    MCD_OPC_Decode, 177, 8, 241, 1, // Opcode: CLEI_S_D
/* 5896 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 5911
/* 5901 */    MCD_OPC_CheckPredicate, 30, 184, 43, 0, // Skip to: 17098
/* 5906 */    MCD_OPC_Decode, 180, 8, 238, 1, // Opcode: CLEI_U_B
/* 5911 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 5926
/* 5916 */    MCD_OPC_CheckPredicate, 30, 169, 43, 0, // Skip to: 17098
/* 5921 */    MCD_OPC_Decode, 182, 8, 239, 1, // Opcode: CLEI_U_H
/* 5926 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 5941
/* 5931 */    MCD_OPC_CheckPredicate, 30, 154, 43, 0, // Skip to: 17098
/* 5936 */    MCD_OPC_Decode, 183, 8, 240, 1, // Opcode: CLEI_U_W
/* 5941 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 5956
/* 5946 */    MCD_OPC_CheckPredicate, 30, 139, 43, 0, // Skip to: 17098
/* 5951 */    MCD_OPC_Decode, 181, 8, 241, 1, // Opcode: CLEI_U_D
/* 5956 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 5971
/* 5961 */    MCD_OPC_CheckPredicate, 30, 124, 43, 0, // Skip to: 17098
/* 5966 */    MCD_OPC_Decode, 166, 14, 242, 1, // Opcode: LDI_B
/* 5971 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 5986
/* 5976 */    MCD_OPC_CheckPredicate, 30, 109, 43, 0, // Skip to: 17098
/* 5981 */    MCD_OPC_Decode, 168, 14, 243, 1, // Opcode: LDI_H
/* 5986 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 6001
/* 5991 */    MCD_OPC_CheckPredicate, 30, 94, 43, 0, // Skip to: 17098
/* 5996 */    MCD_OPC_Decode, 169, 14, 244, 1, // Opcode: LDI_W
/* 6001 */    MCD_OPC_FilterValue, 27, 84, 43, 0, // Skip to: 17098
/* 6006 */    MCD_OPC_CheckPredicate, 30, 79, 43, 0, // Skip to: 17098
/* 6011 */    MCD_OPC_Decode, 167, 14, 245, 1, // Opcode: LDI_D
/* 6016 */    MCD_OPC_FilterValue, 9, 155, 2, 0, // Skip to: 6688
/* 6021 */    MCD_OPC_ExtractField, 22, 4,  // Inst{25-22} ...
/* 6024 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6039
/* 6029 */    MCD_OPC_CheckPredicate, 30, 56, 43, 0, // Skip to: 17098
/* 6034 */    MCD_OPC_Decode, 236, 19, 246, 1, // Opcode: SLLI_D
/* 6039 */    MCD_OPC_FilterValue, 1, 63, 0, 0, // Skip to: 6107
/* 6044 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6047 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6062
/* 6052 */    MCD_OPC_CheckPredicate, 30, 33, 43, 0, // Skip to: 17098
/* 6057 */    MCD_OPC_Decode, 238, 19, 240, 1, // Opcode: SLLI_W
/* 6062 */    MCD_OPC_FilterValue, 1, 23, 43, 0, // Skip to: 17098
/* 6067 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6070 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6085
/* 6075 */    MCD_OPC_CheckPredicate, 30, 10, 43, 0, // Skip to: 17098
/* 6080 */    MCD_OPC_Decode, 237, 19, 247, 1, // Opcode: SLLI_H
/* 6085 */    MCD_OPC_FilterValue, 1, 0, 43, 0, // Skip to: 17098
/* 6090 */    MCD_OPC_CheckPredicate, 30, 251, 42, 0, // Skip to: 17098
/* 6095 */    MCD_OPC_CheckField, 19, 1, 0, 244, 42, 0, // Skip to: 17098
/* 6102 */    MCD_OPC_Decode, 235, 19, 248, 1, // Opcode: SLLI_B
/* 6107 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 6122
/* 6112 */    MCD_OPC_CheckPredicate, 30, 229, 42, 0, // Skip to: 17098
/* 6117 */    MCD_OPC_Decode, 143, 20, 246, 1, // Opcode: SRAI_D
/* 6122 */    MCD_OPC_FilterValue, 3, 63, 0, 0, // Skip to: 6190
/* 6127 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6130 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6145
/* 6135 */    MCD_OPC_CheckPredicate, 30, 206, 42, 0, // Skip to: 17098
/* 6140 */    MCD_OPC_Decode, 145, 20, 240, 1, // Opcode: SRAI_W
/* 6145 */    MCD_OPC_FilterValue, 1, 196, 42, 0, // Skip to: 17098
/* 6150 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6153 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6168
/* 6158 */    MCD_OPC_CheckPredicate, 30, 183, 42, 0, // Skip to: 17098
/* 6163 */    MCD_OPC_Decode, 144, 20, 247, 1, // Opcode: SRAI_H
/* 6168 */    MCD_OPC_FilterValue, 1, 173, 42, 0, // Skip to: 17098
/* 6173 */    MCD_OPC_CheckPredicate, 30, 168, 42, 0, // Skip to: 17098
/* 6178 */    MCD_OPC_CheckField, 19, 1, 0, 161, 42, 0, // Skip to: 17098
/* 6185 */    MCD_OPC_Decode, 142, 20, 248, 1, // Opcode: SRAI_B
/* 6190 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 6205
/* 6195 */    MCD_OPC_CheckPredicate, 30, 146, 42, 0, // Skip to: 17098
/* 6200 */    MCD_OPC_Decode, 165, 20, 246, 1, // Opcode: SRLI_D
/* 6205 */    MCD_OPC_FilterValue, 5, 63, 0, 0, // Skip to: 6273
/* 6210 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6213 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6228
/* 6218 */    MCD_OPC_CheckPredicate, 30, 123, 42, 0, // Skip to: 17098
/* 6223 */    MCD_OPC_Decode, 167, 20, 240, 1, // Opcode: SRLI_W
/* 6228 */    MCD_OPC_FilterValue, 1, 113, 42, 0, // Skip to: 17098
/* 6233 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6236 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6251
/* 6241 */    MCD_OPC_CheckPredicate, 30, 100, 42, 0, // Skip to: 17098
/* 6246 */    MCD_OPC_Decode, 166, 20, 247, 1, // Opcode: SRLI_H
/* 6251 */    MCD_OPC_FilterValue, 1, 90, 42, 0, // Skip to: 17098
/* 6256 */    MCD_OPC_CheckPredicate, 30, 85, 42, 0, // Skip to: 17098
/* 6261 */    MCD_OPC_CheckField, 19, 1, 0, 78, 42, 0, // Skip to: 17098
/* 6268 */    MCD_OPC_Decode, 164, 20, 248, 1, // Opcode: SRLI_B
/* 6273 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 6288
/* 6278 */    MCD_OPC_CheckPredicate, 30, 63, 42, 0, // Skip to: 17098
/* 6283 */    MCD_OPC_Decode, 226, 6, 246, 1, // Opcode: BCLRI_D
/* 6288 */    MCD_OPC_FilterValue, 7, 63, 0, 0, // Skip to: 6356
/* 6293 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6296 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6311
/* 6301 */    MCD_OPC_CheckPredicate, 30, 40, 42, 0, // Skip to: 17098
/* 6306 */    MCD_OPC_Decode, 228, 6, 240, 1, // Opcode: BCLRI_W
/* 6311 */    MCD_OPC_FilterValue, 1, 30, 42, 0, // Skip to: 17098
/* 6316 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6319 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6334
/* 6324 */    MCD_OPC_CheckPredicate, 30, 17, 42, 0, // Skip to: 17098
/* 6329 */    MCD_OPC_Decode, 227, 6, 247, 1, // Opcode: BCLRI_H
/* 6334 */    MCD_OPC_FilterValue, 1, 7, 42, 0, // Skip to: 17098
/* 6339 */    MCD_OPC_CheckPredicate, 30, 2, 42, 0, // Skip to: 17098
/* 6344 */    MCD_OPC_CheckField, 19, 1, 0, 251, 41, 0, // Skip to: 17098
/* 6351 */    MCD_OPC_Decode, 225, 6, 248, 1, // Opcode: BCLRI_B
/* 6356 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 6371
/* 6361 */    MCD_OPC_CheckPredicate, 30, 236, 41, 0, // Skip to: 17098
/* 6366 */    MCD_OPC_Decode, 244, 7, 246, 1, // Opcode: BSETI_D
/* 6371 */    MCD_OPC_FilterValue, 9, 63, 0, 0, // Skip to: 6439
/* 6376 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6379 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6394
/* 6384 */    MCD_OPC_CheckPredicate, 30, 213, 41, 0, // Skip to: 17098
/* 6389 */    MCD_OPC_Decode, 246, 7, 240, 1, // Opcode: BSETI_W
/* 6394 */    MCD_OPC_FilterValue, 1, 203, 41, 0, // Skip to: 17098
/* 6399 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6402 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6417
/* 6407 */    MCD_OPC_CheckPredicate, 30, 190, 41, 0, // Skip to: 17098
/* 6412 */    MCD_OPC_Decode, 245, 7, 247, 1, // Opcode: BSETI_H
/* 6417 */    MCD_OPC_FilterValue, 1, 180, 41, 0, // Skip to: 17098
/* 6422 */    MCD_OPC_CheckPredicate, 30, 175, 41, 0, // Skip to: 17098
/* 6427 */    MCD_OPC_CheckField, 19, 1, 0, 168, 41, 0, // Skip to: 17098
/* 6434 */    MCD_OPC_Decode, 243, 7, 248, 1, // Opcode: BSETI_B
/* 6439 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 6454
/* 6444 */    MCD_OPC_CheckPredicate, 30, 153, 41, 0, // Skip to: 17098
/* 6449 */    MCD_OPC_Decode, 207, 7, 246, 1, // Opcode: BNEGI_D
/* 6454 */    MCD_OPC_FilterValue, 11, 63, 0, 0, // Skip to: 6522
/* 6459 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6462 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6477
/* 6467 */    MCD_OPC_CheckPredicate, 30, 130, 41, 0, // Skip to: 17098
/* 6472 */    MCD_OPC_Decode, 209, 7, 240, 1, // Opcode: BNEGI_W
/* 6477 */    MCD_OPC_FilterValue, 1, 120, 41, 0, // Skip to: 17098
/* 6482 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6485 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6500
/* 6490 */    MCD_OPC_CheckPredicate, 30, 107, 41, 0, // Skip to: 17098
/* 6495 */    MCD_OPC_Decode, 208, 7, 247, 1, // Opcode: BNEGI_H
/* 6500 */    MCD_OPC_FilterValue, 1, 97, 41, 0, // Skip to: 17098
/* 6505 */    MCD_OPC_CheckPredicate, 30, 92, 41, 0, // Skip to: 17098
/* 6510 */    MCD_OPC_CheckField, 19, 1, 0, 85, 41, 0, // Skip to: 17098
/* 6517 */    MCD_OPC_Decode, 206, 7, 248, 1, // Opcode: BNEGI_B
/* 6522 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 6537
/* 6527 */    MCD_OPC_CheckPredicate, 30, 70, 41, 0, // Skip to: 17098
/* 6532 */    MCD_OPC_Decode, 150, 7, 249, 1, // Opcode: BINSLI_D
/* 6537 */    MCD_OPC_FilterValue, 13, 63, 0, 0, // Skip to: 6605
/* 6542 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6545 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6560
/* 6550 */    MCD_OPC_CheckPredicate, 30, 47, 41, 0, // Skip to: 17098
/* 6555 */    MCD_OPC_Decode, 152, 7, 250, 1, // Opcode: BINSLI_W
/* 6560 */    MCD_OPC_FilterValue, 1, 37, 41, 0, // Skip to: 17098
/* 6565 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6568 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6583
/* 6573 */    MCD_OPC_CheckPredicate, 30, 24, 41, 0, // Skip to: 17098
/* 6578 */    MCD_OPC_Decode, 151, 7, 251, 1, // Opcode: BINSLI_H
/* 6583 */    MCD_OPC_FilterValue, 1, 14, 41, 0, // Skip to: 17098
/* 6588 */    MCD_OPC_CheckPredicate, 30, 9, 41, 0, // Skip to: 17098
/* 6593 */    MCD_OPC_CheckField, 19, 1, 0, 2, 41, 0, // Skip to: 17098
/* 6600 */    MCD_OPC_Decode, 149, 7, 252, 1, // Opcode: BINSLI_B
/* 6605 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 6620
/* 6610 */    MCD_OPC_CheckPredicate, 30, 243, 40, 0, // Skip to: 17098
/* 6615 */    MCD_OPC_Decode, 158, 7, 249, 1, // Opcode: BINSRI_D
/* 6620 */    MCD_OPC_FilterValue, 15, 233, 40, 0, // Skip to: 17098
/* 6625 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6628 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6643
/* 6633 */    MCD_OPC_CheckPredicate, 30, 220, 40, 0, // Skip to: 17098
/* 6638 */    MCD_OPC_Decode, 160, 7, 250, 1, // Opcode: BINSRI_W
/* 6643 */    MCD_OPC_FilterValue, 1, 210, 40, 0, // Skip to: 17098
/* 6648 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6651 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6666
/* 6656 */    MCD_OPC_CheckPredicate, 30, 197, 40, 0, // Skip to: 17098
/* 6661 */    MCD_OPC_Decode, 159, 7, 251, 1, // Opcode: BINSRI_H
/* 6666 */    MCD_OPC_FilterValue, 1, 187, 40, 0, // Skip to: 17098
/* 6671 */    MCD_OPC_CheckPredicate, 30, 182, 40, 0, // Skip to: 17098
/* 6676 */    MCD_OPC_CheckField, 19, 1, 0, 175, 40, 0, // Skip to: 17098
/* 6683 */    MCD_OPC_Decode, 157, 7, 252, 1, // Opcode: BINSRI_B
/* 6688 */    MCD_OPC_FilterValue, 10, 79, 1, 0, // Skip to: 7028
/* 6693 */    MCD_OPC_ExtractField, 22, 4,  // Inst{25-22} ...
/* 6696 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6711
/* 6701 */    MCD_OPC_CheckPredicate, 30, 152, 40, 0, // Skip to: 17098
/* 6706 */    MCD_OPC_Decode, 217, 18, 246, 1, // Opcode: SAT_S_D
/* 6711 */    MCD_OPC_FilterValue, 1, 63, 0, 0, // Skip to: 6779
/* 6716 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6719 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6734
/* 6724 */    MCD_OPC_CheckPredicate, 30, 129, 40, 0, // Skip to: 17098
/* 6729 */    MCD_OPC_Decode, 219, 18, 240, 1, // Opcode: SAT_S_W
/* 6734 */    MCD_OPC_FilterValue, 1, 119, 40, 0, // Skip to: 17098
/* 6739 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6742 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6757
/* 6747 */    MCD_OPC_CheckPredicate, 30, 106, 40, 0, // Skip to: 17098
/* 6752 */    MCD_OPC_Decode, 218, 18, 247, 1, // Opcode: SAT_S_H
/* 6757 */    MCD_OPC_FilterValue, 1, 96, 40, 0, // Skip to: 17098
/* 6762 */    MCD_OPC_CheckPredicate, 30, 91, 40, 0, // Skip to: 17098
/* 6767 */    MCD_OPC_CheckField, 19, 1, 0, 84, 40, 0, // Skip to: 17098
/* 6774 */    MCD_OPC_Decode, 216, 18, 248, 1, // Opcode: SAT_S_B
/* 6779 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 6794
/* 6784 */    MCD_OPC_CheckPredicate, 30, 69, 40, 0, // Skip to: 17098
/* 6789 */    MCD_OPC_Decode, 221, 18, 246, 1, // Opcode: SAT_U_D
/* 6794 */    MCD_OPC_FilterValue, 3, 63, 0, 0, // Skip to: 6862
/* 6799 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6802 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6817
/* 6807 */    MCD_OPC_CheckPredicate, 30, 46, 40, 0, // Skip to: 17098
/* 6812 */    MCD_OPC_Decode, 223, 18, 240, 1, // Opcode: SAT_U_W
/* 6817 */    MCD_OPC_FilterValue, 1, 36, 40, 0, // Skip to: 17098
/* 6822 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6825 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6840
/* 6830 */    MCD_OPC_CheckPredicate, 30, 23, 40, 0, // Skip to: 17098
/* 6835 */    MCD_OPC_Decode, 222, 18, 247, 1, // Opcode: SAT_U_H
/* 6840 */    MCD_OPC_FilterValue, 1, 13, 40, 0, // Skip to: 17098
/* 6845 */    MCD_OPC_CheckPredicate, 30, 8, 40, 0, // Skip to: 17098
/* 6850 */    MCD_OPC_CheckField, 19, 1, 0, 1, 40, 0, // Skip to: 17098
/* 6857 */    MCD_OPC_Decode, 220, 18, 248, 1, // Opcode: SAT_U_B
/* 6862 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 6877
/* 6867 */    MCD_OPC_CheckPredicate, 30, 242, 39, 0, // Skip to: 17098
/* 6872 */    MCD_OPC_Decode, 147, 20, 246, 1, // Opcode: SRARI_D
/* 6877 */    MCD_OPC_FilterValue, 5, 63, 0, 0, // Skip to: 6945
/* 6882 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6885 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6900
/* 6890 */    MCD_OPC_CheckPredicate, 30, 219, 39, 0, // Skip to: 17098
/* 6895 */    MCD_OPC_Decode, 149, 20, 240, 1, // Opcode: SRARI_W
/* 6900 */    MCD_OPC_FilterValue, 1, 209, 39, 0, // Skip to: 17098
/* 6905 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6908 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6923
/* 6913 */    MCD_OPC_CheckPredicate, 30, 196, 39, 0, // Skip to: 17098
/* 6918 */    MCD_OPC_Decode, 148, 20, 247, 1, // Opcode: SRARI_H
/* 6923 */    MCD_OPC_FilterValue, 1, 186, 39, 0, // Skip to: 17098
/* 6928 */    MCD_OPC_CheckPredicate, 30, 181, 39, 0, // Skip to: 17098
/* 6933 */    MCD_OPC_CheckField, 19, 1, 0, 174, 39, 0, // Skip to: 17098
/* 6940 */    MCD_OPC_Decode, 146, 20, 248, 1, // Opcode: SRARI_B
/* 6945 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 6960
/* 6950 */    MCD_OPC_CheckPredicate, 30, 159, 39, 0, // Skip to: 17098
/* 6955 */    MCD_OPC_Decode, 169, 20, 246, 1, // Opcode: SRLRI_D
/* 6960 */    MCD_OPC_FilterValue, 7, 149, 39, 0, // Skip to: 17098
/* 6965 */    MCD_OPC_ExtractField, 21, 1,  // Inst{21} ...
/* 6968 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 6983
/* 6973 */    MCD_OPC_CheckPredicate, 30, 136, 39, 0, // Skip to: 17098
/* 6978 */    MCD_OPC_Decode, 171, 20, 240, 1, // Opcode: SRLRI_W
/* 6983 */    MCD_OPC_FilterValue, 1, 126, 39, 0, // Skip to: 17098
/* 6988 */    MCD_OPC_ExtractField, 20, 1,  // Inst{20} ...
/* 6991 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 7006
/* 6996 */    MCD_OPC_CheckPredicate, 30, 113, 39, 0, // Skip to: 17098
/* 7001 */    MCD_OPC_Decode, 170, 20, 247, 1, // Opcode: SRLRI_H
/* 7006 */    MCD_OPC_FilterValue, 1, 103, 39, 0, // Skip to: 17098
/* 7011 */    MCD_OPC_CheckPredicate, 30, 98, 39, 0, // Skip to: 17098
/* 7016 */    MCD_OPC_CheckField, 19, 1, 0, 91, 39, 0, // Skip to: 17098
/* 7023 */    MCD_OPC_Decode, 168, 20, 248, 1, // Opcode: SRLRI_B
/* 7028 */    MCD_OPC_FilterValue, 13, 227, 1, 0, // Skip to: 7516
/* 7033 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 7036 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 7051
/* 7041 */    MCD_OPC_CheckPredicate, 30, 68, 39, 0, // Skip to: 17098
/* 7046 */    MCD_OPC_Decode, 241, 19, 253, 1, // Opcode: SLL_B
/* 7051 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 7066
/* 7056 */    MCD_OPC_CheckPredicate, 30, 53, 39, 0, // Skip to: 17098
/* 7061 */    MCD_OPC_Decode, 243, 19, 254, 1, // Opcode: SLL_H
/* 7066 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 7081
/* 7071 */    MCD_OPC_CheckPredicate, 30, 38, 39, 0, // Skip to: 17098
/* 7076 */    MCD_OPC_Decode, 246, 19, 255, 1, // Opcode: SLL_W
/* 7081 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 7096
/* 7086 */    MCD_OPC_CheckPredicate, 30, 23, 39, 0, // Skip to: 17098
/* 7091 */    MCD_OPC_Decode, 242, 19, 128, 2, // Opcode: SLL_D
/* 7096 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 7111
/* 7101 */    MCD_OPC_CheckPredicate, 30, 8, 39, 0, // Skip to: 17098
/* 7106 */    MCD_OPC_Decode, 156, 20, 253, 1, // Opcode: SRA_B
/* 7111 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 7126
/* 7116 */    MCD_OPC_CheckPredicate, 30, 249, 38, 0, // Skip to: 17098
/* 7121 */    MCD_OPC_Decode, 158, 20, 254, 1, // Opcode: SRA_H
/* 7126 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 7141
/* 7131 */    MCD_OPC_CheckPredicate, 30, 234, 38, 0, // Skip to: 17098
/* 7136 */    MCD_OPC_Decode, 160, 20, 255, 1, // Opcode: SRA_W
/* 7141 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 7156
/* 7146 */    MCD_OPC_CheckPredicate, 30, 219, 38, 0, // Skip to: 17098
/* 7151 */    MCD_OPC_Decode, 157, 20, 128, 2, // Opcode: SRA_D
/* 7156 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 7171
/* 7161 */    MCD_OPC_CheckPredicate, 30, 204, 38, 0, // Skip to: 17098
/* 7166 */    MCD_OPC_Decode, 178, 20, 253, 1, // Opcode: SRL_B
/* 7171 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 7186
/* 7176 */    MCD_OPC_CheckPredicate, 30, 189, 38, 0, // Skip to: 17098
/* 7181 */    MCD_OPC_Decode, 180, 20, 254, 1, // Opcode: SRL_H
/* 7186 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 7201
/* 7191 */    MCD_OPC_CheckPredicate, 30, 174, 38, 0, // Skip to: 17098
/* 7196 */    MCD_OPC_Decode, 182, 20, 255, 1, // Opcode: SRL_W
/* 7201 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 7216
/* 7206 */    MCD_OPC_CheckPredicate, 30, 159, 38, 0, // Skip to: 17098
/* 7211 */    MCD_OPC_Decode, 179, 20, 128, 2, // Opcode: SRL_D
/* 7216 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 7231
/* 7221 */    MCD_OPC_CheckPredicate, 30, 144, 38, 0, // Skip to: 17098
/* 7226 */    MCD_OPC_Decode, 229, 6, 253, 1, // Opcode: BCLR_B
/* 7231 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 7246
/* 7236 */    MCD_OPC_CheckPredicate, 30, 129, 38, 0, // Skip to: 17098
/* 7241 */    MCD_OPC_Decode, 231, 6, 254, 1, // Opcode: BCLR_H
/* 7246 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 7261
/* 7251 */    MCD_OPC_CheckPredicate, 30, 114, 38, 0, // Skip to: 17098
/* 7256 */    MCD_OPC_Decode, 232, 6, 255, 1, // Opcode: BCLR_W
/* 7261 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 7276
/* 7266 */    MCD_OPC_CheckPredicate, 30, 99, 38, 0, // Skip to: 17098
/* 7271 */    MCD_OPC_Decode, 230, 6, 128, 2, // Opcode: BCLR_D
/* 7276 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 7291
/* 7281 */    MCD_OPC_CheckPredicate, 30, 84, 38, 0, // Skip to: 17098
/* 7286 */    MCD_OPC_Decode, 247, 7, 253, 1, // Opcode: BSET_B
/* 7291 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 7306
/* 7296 */    MCD_OPC_CheckPredicate, 30, 69, 38, 0, // Skip to: 17098
/* 7301 */    MCD_OPC_Decode, 249, 7, 254, 1, // Opcode: BSET_H
/* 7306 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 7321
/* 7311 */    MCD_OPC_CheckPredicate, 30, 54, 38, 0, // Skip to: 17098
/* 7316 */    MCD_OPC_Decode, 250, 7, 255, 1, // Opcode: BSET_W
/* 7321 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 7336
/* 7326 */    MCD_OPC_CheckPredicate, 30, 39, 38, 0, // Skip to: 17098
/* 7331 */    MCD_OPC_Decode, 248, 7, 128, 2, // Opcode: BSET_D
/* 7336 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 7351
/* 7341 */    MCD_OPC_CheckPredicate, 30, 24, 38, 0, // Skip to: 17098
/* 7346 */    MCD_OPC_Decode, 210, 7, 253, 1, // Opcode: BNEG_B
/* 7351 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 7366
/* 7356 */    MCD_OPC_CheckPredicate, 30, 9, 38, 0, // Skip to: 17098
/* 7361 */    MCD_OPC_Decode, 212, 7, 254, 1, // Opcode: BNEG_H
/* 7366 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 7381
/* 7371 */    MCD_OPC_CheckPredicate, 30, 250, 37, 0, // Skip to: 17098
/* 7376 */    MCD_OPC_Decode, 213, 7, 255, 1, // Opcode: BNEG_W
/* 7381 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 7396
/* 7386 */    MCD_OPC_CheckPredicate, 30, 235, 37, 0, // Skip to: 17098
/* 7391 */    MCD_OPC_Decode, 211, 7, 128, 2, // Opcode: BNEG_D
/* 7396 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 7411
/* 7401 */    MCD_OPC_CheckPredicate, 30, 220, 37, 0, // Skip to: 17098
/* 7406 */    MCD_OPC_Decode, 153, 7, 129, 2, // Opcode: BINSL_B
/* 7411 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 7426
/* 7416 */    MCD_OPC_CheckPredicate, 30, 205, 37, 0, // Skip to: 17098
/* 7421 */    MCD_OPC_Decode, 155, 7, 130, 2, // Opcode: BINSL_H
/* 7426 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 7441
/* 7431 */    MCD_OPC_CheckPredicate, 30, 190, 37, 0, // Skip to: 17098
/* 7436 */    MCD_OPC_Decode, 156, 7, 131, 2, // Opcode: BINSL_W
/* 7441 */    MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 7456
/* 7446 */    MCD_OPC_CheckPredicate, 30, 175, 37, 0, // Skip to: 17098
/* 7451 */    MCD_OPC_Decode, 154, 7, 132, 2, // Opcode: BINSL_D
/* 7456 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 7471
/* 7461 */    MCD_OPC_CheckPredicate, 30, 160, 37, 0, // Skip to: 17098
/* 7466 */    MCD_OPC_Decode, 161, 7, 129, 2, // Opcode: BINSR_B
/* 7471 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 7486
/* 7476 */    MCD_OPC_CheckPredicate, 30, 145, 37, 0, // Skip to: 17098
/* 7481 */    MCD_OPC_Decode, 163, 7, 130, 2, // Opcode: BINSR_H
/* 7486 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 7501
/* 7491 */    MCD_OPC_CheckPredicate, 30, 130, 37, 0, // Skip to: 17098
/* 7496 */    MCD_OPC_Decode, 164, 7, 131, 2, // Opcode: BINSR_W
/* 7501 */    MCD_OPC_FilterValue, 31, 120, 37, 0, // Skip to: 17098
/* 7506 */    MCD_OPC_CheckPredicate, 30, 115, 37, 0, // Skip to: 17098
/* 7511 */    MCD_OPC_Decode, 162, 7, 132, 2, // Opcode: BINSR_D
/* 7516 */    MCD_OPC_FilterValue, 14, 227, 1, 0, // Skip to: 8004
/* 7521 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 7524 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 7539
/* 7529 */    MCD_OPC_CheckPredicate, 30, 92, 37, 0, // Skip to: 17098
/* 7534 */    MCD_OPC_Decode, 251, 5, 253, 1, // Opcode: ADDV_B
/* 7539 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 7554
/* 7544 */    MCD_OPC_CheckPredicate, 30, 77, 37, 0, // Skip to: 17098
/* 7549 */    MCD_OPC_Decode, 253, 5, 254, 1, // Opcode: ADDV_H
/* 7554 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 7569
/* 7559 */    MCD_OPC_CheckPredicate, 30, 62, 37, 0, // Skip to: 17098
/* 7564 */    MCD_OPC_Decode, 254, 5, 255, 1, // Opcode: ADDV_W
/* 7569 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 7584
/* 7574 */    MCD_OPC_CheckPredicate, 30, 47, 37, 0, // Skip to: 17098
/* 7579 */    MCD_OPC_Decode, 252, 5, 128, 2, // Opcode: ADDV_D
/* 7584 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 7599
/* 7589 */    MCD_OPC_CheckPredicate, 30, 32, 37, 0, // Skip to: 17098
/* 7594 */    MCD_OPC_Decode, 240, 20, 253, 1, // Opcode: SUBV_B
/* 7599 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 7614
/* 7604 */    MCD_OPC_CheckPredicate, 30, 17, 37, 0, // Skip to: 17098
/* 7609 */    MCD_OPC_Decode, 242, 20, 254, 1, // Opcode: SUBV_H
/* 7614 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 7629
/* 7619 */    MCD_OPC_CheckPredicate, 30, 2, 37, 0, // Skip to: 17098
/* 7624 */    MCD_OPC_Decode, 243, 20, 255, 1, // Opcode: SUBV_W
/* 7629 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 7644
/* 7634 */    MCD_OPC_CheckPredicate, 30, 243, 36, 0, // Skip to: 17098
/* 7639 */    MCD_OPC_Decode, 241, 20, 128, 2, // Opcode: SUBV_D
/* 7644 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 7659
/* 7649 */    MCD_OPC_CheckPredicate, 30, 228, 36, 0, // Skip to: 17098
/* 7654 */    MCD_OPC_Decode, 193, 15, 253, 1, // Opcode: MAX_S_B
/* 7659 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 7674
/* 7664 */    MCD_OPC_CheckPredicate, 30, 213, 36, 0, // Skip to: 17098
/* 7669 */    MCD_OPC_Decode, 195, 15, 254, 1, // Opcode: MAX_S_H
/* 7674 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 7689
/* 7679 */    MCD_OPC_CheckPredicate, 30, 198, 36, 0, // Skip to: 17098
/* 7684 */    MCD_OPC_Decode, 197, 15, 255, 1, // Opcode: MAX_S_W
/* 7689 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 7704
/* 7694 */    MCD_OPC_CheckPredicate, 30, 183, 36, 0, // Skip to: 17098
/* 7699 */    MCD_OPC_Decode, 194, 15, 128, 2, // Opcode: MAX_S_D
/* 7704 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 7719
/* 7709 */    MCD_OPC_CheckPredicate, 30, 168, 36, 0, // Skip to: 17098
/* 7714 */    MCD_OPC_Decode, 198, 15, 253, 1, // Opcode: MAX_U_B
/* 7719 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 7734
/* 7724 */    MCD_OPC_CheckPredicate, 30, 153, 36, 0, // Skip to: 17098
/* 7729 */    MCD_OPC_Decode, 200, 15, 254, 1, // Opcode: MAX_U_H
/* 7734 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 7749
/* 7739 */    MCD_OPC_CheckPredicate, 30, 138, 36, 0, // Skip to: 17098
/* 7744 */    MCD_OPC_Decode, 201, 15, 255, 1, // Opcode: MAX_U_W
/* 7749 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 7764
/* 7754 */    MCD_OPC_CheckPredicate, 30, 123, 36, 0, // Skip to: 17098
/* 7759 */    MCD_OPC_Decode, 199, 15, 128, 2, // Opcode: MAX_U_D
/* 7764 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 7779
/* 7769 */    MCD_OPC_CheckPredicate, 30, 108, 36, 0, // Skip to: 17098
/* 7774 */    MCD_OPC_Decode, 252, 15, 253, 1, // Opcode: MIN_S_B
/* 7779 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 7794
/* 7784 */    MCD_OPC_CheckPredicate, 30, 93, 36, 0, // Skip to: 17098
/* 7789 */    MCD_OPC_Decode, 254, 15, 254, 1, // Opcode: MIN_S_H
/* 7794 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 7809
/* 7799 */    MCD_OPC_CheckPredicate, 30, 78, 36, 0, // Skip to: 17098
/* 7804 */    MCD_OPC_Decode, 128, 16, 255, 1, // Opcode: MIN_S_W
/* 7809 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 7824
/* 7814 */    MCD_OPC_CheckPredicate, 30, 63, 36, 0, // Skip to: 17098
/* 7819 */    MCD_OPC_Decode, 253, 15, 128, 2, // Opcode: MIN_S_D
/* 7824 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 7839
/* 7829 */    MCD_OPC_CheckPredicate, 30, 48, 36, 0, // Skip to: 17098
/* 7834 */    MCD_OPC_Decode, 129, 16, 253, 1, // Opcode: MIN_U_B
/* 7839 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 7854
/* 7844 */    MCD_OPC_CheckPredicate, 30, 33, 36, 0, // Skip to: 17098
/* 7849 */    MCD_OPC_Decode, 131, 16, 254, 1, // Opcode: MIN_U_H
/* 7854 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 7869
/* 7859 */    MCD_OPC_CheckPredicate, 30, 18, 36, 0, // Skip to: 17098
/* 7864 */    MCD_OPC_Decode, 132, 16, 255, 1, // Opcode: MIN_U_W
/* 7869 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 7884
/* 7874 */    MCD_OPC_CheckPredicate, 30, 3, 36, 0, // Skip to: 17098
/* 7879 */    MCD_OPC_Decode, 130, 16, 128, 2, // Opcode: MIN_U_D
/* 7884 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 7899
/* 7889 */    MCD_OPC_CheckPredicate, 30, 244, 35, 0, // Skip to: 17098
/* 7894 */    MCD_OPC_Decode, 186, 15, 253, 1, // Opcode: MAX_A_B
/* 7899 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 7914
/* 7904 */    MCD_OPC_CheckPredicate, 30, 229, 35, 0, // Skip to: 17098
/* 7909 */    MCD_OPC_Decode, 188, 15, 254, 1, // Opcode: MAX_A_H
/* 7914 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 7929
/* 7919 */    MCD_OPC_CheckPredicate, 30, 214, 35, 0, // Skip to: 17098
/* 7924 */    MCD_OPC_Decode, 189, 15, 255, 1, // Opcode: MAX_A_W
/* 7929 */    MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 7944
/* 7934 */    MCD_OPC_CheckPredicate, 30, 199, 35, 0, // Skip to: 17098
/* 7939 */    MCD_OPC_Decode, 187, 15, 128, 2, // Opcode: MAX_A_D
/* 7944 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 7959
/* 7949 */    MCD_OPC_CheckPredicate, 30, 184, 35, 0, // Skip to: 17098
/* 7954 */    MCD_OPC_Decode, 245, 15, 253, 1, // Opcode: MIN_A_B
/* 7959 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 7974
/* 7964 */    MCD_OPC_CheckPredicate, 30, 169, 35, 0, // Skip to: 17098
/* 7969 */    MCD_OPC_Decode, 247, 15, 254, 1, // Opcode: MIN_A_H
/* 7974 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 7989
/* 7979 */    MCD_OPC_CheckPredicate, 30, 154, 35, 0, // Skip to: 17098
/* 7984 */    MCD_OPC_Decode, 248, 15, 255, 1, // Opcode: MIN_A_W
/* 7989 */    MCD_OPC_FilterValue, 31, 144, 35, 0, // Skip to: 17098
/* 7994 */    MCD_OPC_CheckPredicate, 30, 139, 35, 0, // Skip to: 17098
/* 7999 */    MCD_OPC_Decode, 246, 15, 128, 2, // Opcode: MIN_A_D
/* 8004 */    MCD_OPC_FilterValue, 15, 47, 1, 0, // Skip to: 8312
/* 8009 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 8012 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 8027
/* 8017 */    MCD_OPC_CheckPredicate, 30, 116, 35, 0, // Skip to: 17098
/* 8022 */    MCD_OPC_Decode, 160, 8, 253, 1, // Opcode: CEQ_B
/* 8027 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 8042
/* 8032 */    MCD_OPC_CheckPredicate, 30, 101, 35, 0, // Skip to: 17098
/* 8037 */    MCD_OPC_Decode, 162, 8, 254, 1, // Opcode: CEQ_H
/* 8042 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 8057
/* 8047 */    MCD_OPC_CheckPredicate, 30, 86, 35, 0, // Skip to: 17098
/* 8052 */    MCD_OPC_Decode, 163, 8, 255, 1, // Opcode: CEQ_W
/* 8057 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 8072
/* 8062 */    MCD_OPC_CheckPredicate, 30, 71, 35, 0, // Skip to: 17098
/* 8067 */    MCD_OPC_Decode, 161, 8, 128, 2, // Opcode: CEQ_D
/* 8072 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 8087
/* 8077 */    MCD_OPC_CheckPredicate, 30, 56, 35, 0, // Skip to: 17098
/* 8082 */    MCD_OPC_Decode, 204, 8, 253, 1, // Opcode: CLT_S_B
/* 8087 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 8102
/* 8092 */    MCD_OPC_CheckPredicate, 30, 41, 35, 0, // Skip to: 17098
/* 8097 */    MCD_OPC_Decode, 206, 8, 254, 1, // Opcode: CLT_S_H
/* 8102 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 8117
/* 8107 */    MCD_OPC_CheckPredicate, 30, 26, 35, 0, // Skip to: 17098
/* 8112 */    MCD_OPC_Decode, 207, 8, 255, 1, // Opcode: CLT_S_W
/* 8117 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 8132
/* 8122 */    MCD_OPC_CheckPredicate, 30, 11, 35, 0, // Skip to: 17098
/* 8127 */    MCD_OPC_Decode, 205, 8, 128, 2, // Opcode: CLT_S_D
/* 8132 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 8147
/* 8137 */    MCD_OPC_CheckPredicate, 30, 252, 34, 0, // Skip to: 17098
/* 8142 */    MCD_OPC_Decode, 208, 8, 253, 1, // Opcode: CLT_U_B
/* 8147 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 8162
/* 8152 */    MCD_OPC_CheckPredicate, 30, 237, 34, 0, // Skip to: 17098
/* 8157 */    MCD_OPC_Decode, 210, 8, 254, 1, // Opcode: CLT_U_H
/* 8162 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 8177
/* 8167 */    MCD_OPC_CheckPredicate, 30, 222, 34, 0, // Skip to: 17098
/* 8172 */    MCD_OPC_Decode, 211, 8, 255, 1, // Opcode: CLT_U_W
/* 8177 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 8192
/* 8182 */    MCD_OPC_CheckPredicate, 30, 207, 34, 0, // Skip to: 17098
/* 8187 */    MCD_OPC_Decode, 209, 8, 128, 2, // Opcode: CLT_U_D
/* 8192 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 8207
/* 8197 */    MCD_OPC_CheckPredicate, 30, 192, 34, 0, // Skip to: 17098
/* 8202 */    MCD_OPC_Decode, 184, 8, 253, 1, // Opcode: CLE_S_B
/* 8207 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 8222
/* 8212 */    MCD_OPC_CheckPredicate, 30, 177, 34, 0, // Skip to: 17098
/* 8217 */    MCD_OPC_Decode, 186, 8, 254, 1, // Opcode: CLE_S_H
/* 8222 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 8237
/* 8227 */    MCD_OPC_CheckPredicate, 30, 162, 34, 0, // Skip to: 17098
/* 8232 */    MCD_OPC_Decode, 187, 8, 255, 1, // Opcode: CLE_S_W
/* 8237 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 8252
/* 8242 */    MCD_OPC_CheckPredicate, 30, 147, 34, 0, // Skip to: 17098
/* 8247 */    MCD_OPC_Decode, 185, 8, 128, 2, // Opcode: CLE_S_D
/* 8252 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 8267
/* 8257 */    MCD_OPC_CheckPredicate, 30, 132, 34, 0, // Skip to: 17098
/* 8262 */    MCD_OPC_Decode, 188, 8, 253, 1, // Opcode: CLE_U_B
/* 8267 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 8282
/* 8272 */    MCD_OPC_CheckPredicate, 30, 117, 34, 0, // Skip to: 17098
/* 8277 */    MCD_OPC_Decode, 190, 8, 254, 1, // Opcode: CLE_U_H
/* 8282 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 8297
/* 8287 */    MCD_OPC_CheckPredicate, 30, 102, 34, 0, // Skip to: 17098
/* 8292 */    MCD_OPC_Decode, 191, 8, 255, 1, // Opcode: CLE_U_W
/* 8297 */    MCD_OPC_FilterValue, 23, 92, 34, 0, // Skip to: 17098
/* 8302 */    MCD_OPC_CheckPredicate, 30, 87, 34, 0, // Skip to: 17098
/* 8307 */    MCD_OPC_Decode, 189, 8, 128, 2, // Opcode: CLE_U_D
/* 8312 */    MCD_OPC_FilterValue, 16, 227, 1, 0, // Skip to: 8800
/* 8317 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 8320 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 8335
/* 8325 */    MCD_OPC_CheckPredicate, 30, 64, 34, 0, // Skip to: 17098
/* 8330 */    MCD_OPC_Decode, 129, 6, 253, 1, // Opcode: ADD_A_B
/* 8335 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 8350
/* 8340 */    MCD_OPC_CheckPredicate, 30, 49, 34, 0, // Skip to: 17098
/* 8345 */    MCD_OPC_Decode, 131, 6, 254, 1, // Opcode: ADD_A_H
/* 8350 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 8365
/* 8355 */    MCD_OPC_CheckPredicate, 30, 34, 34, 0, // Skip to: 17098
/* 8360 */    MCD_OPC_Decode, 132, 6, 255, 1, // Opcode: ADD_A_W
/* 8365 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 8380
/* 8370 */    MCD_OPC_CheckPredicate, 30, 19, 34, 0, // Skip to: 17098
/* 8375 */    MCD_OPC_Decode, 130, 6, 128, 2, // Opcode: ADD_A_D
/* 8380 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 8395
/* 8385 */    MCD_OPC_CheckPredicate, 30, 4, 34, 0, // Skip to: 17098
/* 8390 */    MCD_OPC_Decode, 220, 5, 253, 1, // Opcode: ADDS_A_B
/* 8395 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 8410
/* 8400 */    MCD_OPC_CheckPredicate, 30, 245, 33, 0, // Skip to: 17098
/* 8405 */    MCD_OPC_Decode, 222, 5, 254, 1, // Opcode: ADDS_A_H
/* 8410 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 8425
/* 8415 */    MCD_OPC_CheckPredicate, 30, 230, 33, 0, // Skip to: 17098
/* 8420 */    MCD_OPC_Decode, 223, 5, 255, 1, // Opcode: ADDS_A_W
/* 8425 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 8440
/* 8430 */    MCD_OPC_CheckPredicate, 30, 215, 33, 0, // Skip to: 17098
/* 8435 */    MCD_OPC_Decode, 221, 5, 128, 2, // Opcode: ADDS_A_D
/* 8440 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 8455
/* 8445 */    MCD_OPC_CheckPredicate, 30, 200, 33, 0, // Skip to: 17098
/* 8450 */    MCD_OPC_Decode, 224, 5, 253, 1, // Opcode: ADDS_S_B
/* 8455 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 8470
/* 8460 */    MCD_OPC_CheckPredicate, 30, 185, 33, 0, // Skip to: 17098
/* 8465 */    MCD_OPC_Decode, 226, 5, 254, 1, // Opcode: ADDS_S_H
/* 8470 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 8485
/* 8475 */    MCD_OPC_CheckPredicate, 30, 170, 33, 0, // Skip to: 17098
/* 8480 */    MCD_OPC_Decode, 227, 5, 255, 1, // Opcode: ADDS_S_W
/* 8485 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 8500
/* 8490 */    MCD_OPC_CheckPredicate, 30, 155, 33, 0, // Skip to: 17098
/* 8495 */    MCD_OPC_Decode, 225, 5, 128, 2, // Opcode: ADDS_S_D
/* 8500 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 8515
/* 8505 */    MCD_OPC_CheckPredicate, 30, 140, 33, 0, // Skip to: 17098
/* 8510 */    MCD_OPC_Decode, 228, 5, 253, 1, // Opcode: ADDS_U_B
/* 8515 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 8530
/* 8520 */    MCD_OPC_CheckPredicate, 30, 125, 33, 0, // Skip to: 17098
/* 8525 */    MCD_OPC_Decode, 230, 5, 254, 1, // Opcode: ADDS_U_H
/* 8530 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 8545
/* 8535 */    MCD_OPC_CheckPredicate, 30, 110, 33, 0, // Skip to: 17098
/* 8540 */    MCD_OPC_Decode, 231, 5, 255, 1, // Opcode: ADDS_U_W
/* 8545 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 8560
/* 8550 */    MCD_OPC_CheckPredicate, 30, 95, 33, 0, // Skip to: 17098
/* 8555 */    MCD_OPC_Decode, 229, 5, 128, 2, // Opcode: ADDS_U_D
/* 8560 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 8575
/* 8565 */    MCD_OPC_CheckPredicate, 30, 80, 33, 0, // Skip to: 17098
/* 8570 */    MCD_OPC_Decode, 181, 6, 253, 1, // Opcode: AVE_S_B
/* 8575 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 8590
/* 8580 */    MCD_OPC_CheckPredicate, 30, 65, 33, 0, // Skip to: 17098
/* 8585 */    MCD_OPC_Decode, 183, 6, 254, 1, // Opcode: AVE_S_H
/* 8590 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 8605
/* 8595 */    MCD_OPC_CheckPredicate, 30, 50, 33, 0, // Skip to: 17098
/* 8600 */    MCD_OPC_Decode, 184, 6, 255, 1, // Opcode: AVE_S_W
/* 8605 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 8620
/* 8610 */    MCD_OPC_CheckPredicate, 30, 35, 33, 0, // Skip to: 17098
/* 8615 */    MCD_OPC_Decode, 182, 6, 128, 2, // Opcode: AVE_S_D
/* 8620 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 8635
/* 8625 */    MCD_OPC_CheckPredicate, 30, 20, 33, 0, // Skip to: 17098
/* 8630 */    MCD_OPC_Decode, 185, 6, 253, 1, // Opcode: AVE_U_B
/* 8635 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 8650
/* 8640 */    MCD_OPC_CheckPredicate, 30, 5, 33, 0, // Skip to: 17098
/* 8645 */    MCD_OPC_Decode, 187, 6, 254, 1, // Opcode: AVE_U_H
/* 8650 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 8665
/* 8655 */    MCD_OPC_CheckPredicate, 30, 246, 32, 0, // Skip to: 17098
/* 8660 */    MCD_OPC_Decode, 188, 6, 255, 1, // Opcode: AVE_U_W
/* 8665 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 8680
/* 8670 */    MCD_OPC_CheckPredicate, 30, 231, 32, 0, // Skip to: 17098
/* 8675 */    MCD_OPC_Decode, 186, 6, 128, 2, // Opcode: AVE_U_D
/* 8680 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 8695
/* 8685 */    MCD_OPC_CheckPredicate, 30, 216, 32, 0, // Skip to: 17098
/* 8690 */    MCD_OPC_Decode, 173, 6, 253, 1, // Opcode: AVER_S_B
/* 8695 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 8710
/* 8700 */    MCD_OPC_CheckPredicate, 30, 201, 32, 0, // Skip to: 17098
/* 8705 */    MCD_OPC_Decode, 175, 6, 254, 1, // Opcode: AVER_S_H
/* 8710 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 8725
/* 8715 */    MCD_OPC_CheckPredicate, 30, 186, 32, 0, // Skip to: 17098
/* 8720 */    MCD_OPC_Decode, 176, 6, 255, 1, // Opcode: AVER_S_W
/* 8725 */    MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 8740
/* 8730 */    MCD_OPC_CheckPredicate, 30, 171, 32, 0, // Skip to: 17098
/* 8735 */    MCD_OPC_Decode, 174, 6, 128, 2, // Opcode: AVER_S_D
/* 8740 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 8755
/* 8745 */    MCD_OPC_CheckPredicate, 30, 156, 32, 0, // Skip to: 17098
/* 8750 */    MCD_OPC_Decode, 177, 6, 253, 1, // Opcode: AVER_U_B
/* 8755 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 8770
/* 8760 */    MCD_OPC_CheckPredicate, 30, 141, 32, 0, // Skip to: 17098
/* 8765 */    MCD_OPC_Decode, 179, 6, 254, 1, // Opcode: AVER_U_H
/* 8770 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 8785
/* 8775 */    MCD_OPC_CheckPredicate, 30, 126, 32, 0, // Skip to: 17098
/* 8780 */    MCD_OPC_Decode, 180, 6, 255, 1, // Opcode: AVER_U_W
/* 8785 */    MCD_OPC_FilterValue, 31, 116, 32, 0, // Skip to: 17098
/* 8790 */    MCD_OPC_CheckPredicate, 30, 111, 32, 0, // Skip to: 17098
/* 8795 */    MCD_OPC_Decode, 178, 6, 128, 2, // Opcode: AVER_U_D
/* 8800 */    MCD_OPC_FilterValue, 17, 107, 1, 0, // Skip to: 9168
/* 8805 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 8808 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 8823
/* 8813 */    MCD_OPC_CheckPredicate, 30, 88, 32, 0, // Skip to: 17098
/* 8818 */    MCD_OPC_Decode, 213, 20, 253, 1, // Opcode: SUBS_S_B
/* 8823 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 8838
/* 8828 */    MCD_OPC_CheckPredicate, 30, 73, 32, 0, // Skip to: 17098
/* 8833 */    MCD_OPC_Decode, 215, 20, 254, 1, // Opcode: SUBS_S_H
/* 8838 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 8853
/* 8843 */    MCD_OPC_CheckPredicate, 30, 58, 32, 0, // Skip to: 17098
/* 8848 */    MCD_OPC_Decode, 216, 20, 255, 1, // Opcode: SUBS_S_W
/* 8853 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 8868
/* 8858 */    MCD_OPC_CheckPredicate, 30, 43, 32, 0, // Skip to: 17098
/* 8863 */    MCD_OPC_Decode, 214, 20, 128, 2, // Opcode: SUBS_S_D
/* 8868 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 8883
/* 8873 */    MCD_OPC_CheckPredicate, 30, 28, 32, 0, // Skip to: 17098
/* 8878 */    MCD_OPC_Decode, 217, 20, 253, 1, // Opcode: SUBS_U_B
/* 8883 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 8898
/* 8888 */    MCD_OPC_CheckPredicate, 30, 13, 32, 0, // Skip to: 17098
/* 8893 */    MCD_OPC_Decode, 219, 20, 254, 1, // Opcode: SUBS_U_H
/* 8898 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 8913
/* 8903 */    MCD_OPC_CheckPredicate, 30, 254, 31, 0, // Skip to: 17098
/* 8908 */    MCD_OPC_Decode, 220, 20, 255, 1, // Opcode: SUBS_U_W
/* 8913 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 8928
/* 8918 */    MCD_OPC_CheckPredicate, 30, 239, 31, 0, // Skip to: 17098
/* 8923 */    MCD_OPC_Decode, 218, 20, 128, 2, // Opcode: SUBS_U_D
/* 8928 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 8943
/* 8933 */    MCD_OPC_CheckPredicate, 30, 224, 31, 0, // Skip to: 17098
/* 8938 */    MCD_OPC_Decode, 205, 20, 253, 1, // Opcode: SUBSUS_U_B
/* 8943 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 8958
/* 8948 */    MCD_OPC_CheckPredicate, 30, 209, 31, 0, // Skip to: 17098
/* 8953 */    MCD_OPC_Decode, 207, 20, 254, 1, // Opcode: SUBSUS_U_H
/* 8958 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 8973
/* 8963 */    MCD_OPC_CheckPredicate, 30, 194, 31, 0, // Skip to: 17098
/* 8968 */    MCD_OPC_Decode, 208, 20, 255, 1, // Opcode: SUBSUS_U_W
/* 8973 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 8988
/* 8978 */    MCD_OPC_CheckPredicate, 30, 179, 31, 0, // Skip to: 17098
/* 8983 */    MCD_OPC_Decode, 206, 20, 128, 2, // Opcode: SUBSUS_U_D
/* 8988 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 9003
/* 8993 */    MCD_OPC_CheckPredicate, 30, 164, 31, 0, // Skip to: 17098
/* 8998 */    MCD_OPC_Decode, 209, 20, 253, 1, // Opcode: SUBSUU_S_B
/* 9003 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 9018
/* 9008 */    MCD_OPC_CheckPredicate, 30, 149, 31, 0, // Skip to: 17098
/* 9013 */    MCD_OPC_Decode, 211, 20, 254, 1, // Opcode: SUBSUU_S_H
/* 9018 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 9033
/* 9023 */    MCD_OPC_CheckPredicate, 30, 134, 31, 0, // Skip to: 17098
/* 9028 */    MCD_OPC_Decode, 212, 20, 255, 1, // Opcode: SUBSUU_S_W
/* 9033 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 9048
/* 9038 */    MCD_OPC_CheckPredicate, 30, 119, 31, 0, // Skip to: 17098
/* 9043 */    MCD_OPC_Decode, 210, 20, 128, 2, // Opcode: SUBSUU_S_D
/* 9048 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 9063
/* 9053 */    MCD_OPC_CheckPredicate, 30, 104, 31, 0, // Skip to: 17098
/* 9058 */    MCD_OPC_Decode, 161, 6, 253, 1, // Opcode: ASUB_S_B
/* 9063 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 9078
/* 9068 */    MCD_OPC_CheckPredicate, 30, 89, 31, 0, // Skip to: 17098
/* 9073 */    MCD_OPC_Decode, 163, 6, 254, 1, // Opcode: ASUB_S_H
/* 9078 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 9093
/* 9083 */    MCD_OPC_CheckPredicate, 30, 74, 31, 0, // Skip to: 17098
/* 9088 */    MCD_OPC_Decode, 164, 6, 255, 1, // Opcode: ASUB_S_W
/* 9093 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 9108
/* 9098 */    MCD_OPC_CheckPredicate, 30, 59, 31, 0, // Skip to: 17098
/* 9103 */    MCD_OPC_Decode, 162, 6, 128, 2, // Opcode: ASUB_S_D
/* 9108 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 9123
/* 9113 */    MCD_OPC_CheckPredicate, 30, 44, 31, 0, // Skip to: 17098
/* 9118 */    MCD_OPC_Decode, 165, 6, 253, 1, // Opcode: ASUB_U_B
/* 9123 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 9138
/* 9128 */    MCD_OPC_CheckPredicate, 30, 29, 31, 0, // Skip to: 17098
/* 9133 */    MCD_OPC_Decode, 167, 6, 254, 1, // Opcode: ASUB_U_H
/* 9138 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 9153
/* 9143 */    MCD_OPC_CheckPredicate, 30, 14, 31, 0, // Skip to: 17098
/* 9148 */    MCD_OPC_Decode, 168, 6, 255, 1, // Opcode: ASUB_U_W
/* 9153 */    MCD_OPC_FilterValue, 23, 4, 31, 0, // Skip to: 17098
/* 9158 */    MCD_OPC_CheckPredicate, 30, 255, 30, 0, // Skip to: 17098
/* 9163 */    MCD_OPC_Decode, 166, 6, 128, 2, // Opcode: ASUB_U_D
/* 9168 */    MCD_OPC_FilterValue, 18, 167, 1, 0, // Skip to: 9596
/* 9173 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 9176 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 9191
/* 9181 */    MCD_OPC_CheckPredicate, 30, 232, 30, 0, // Skip to: 17098
/* 9186 */    MCD_OPC_Decode, 165, 17, 253, 1, // Opcode: MULV_B
/* 9191 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 9206
/* 9196 */    MCD_OPC_CheckPredicate, 30, 217, 30, 0, // Skip to: 17098
/* 9201 */    MCD_OPC_Decode, 167, 17, 254, 1, // Opcode: MULV_H
/* 9206 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 9221
/* 9211 */    MCD_OPC_CheckPredicate, 30, 202, 30, 0, // Skip to: 17098
/* 9216 */    MCD_OPC_Decode, 168, 17, 255, 1, // Opcode: MULV_W
/* 9221 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 9236
/* 9226 */    MCD_OPC_CheckPredicate, 30, 187, 30, 0, // Skip to: 17098
/* 9231 */    MCD_OPC_Decode, 166, 17, 128, 2, // Opcode: MULV_D
/* 9236 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 9251
/* 9241 */    MCD_OPC_CheckPredicate, 30, 172, 30, 0, // Skip to: 17098
/* 9246 */    MCD_OPC_Decode, 152, 15, 129, 2, // Opcode: MADDV_B
/* 9251 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 9266
/* 9256 */    MCD_OPC_CheckPredicate, 30, 157, 30, 0, // Skip to: 17098
/* 9261 */    MCD_OPC_Decode, 154, 15, 130, 2, // Opcode: MADDV_H
/* 9266 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 9281
/* 9271 */    MCD_OPC_CheckPredicate, 30, 142, 30, 0, // Skip to: 17098
/* 9276 */    MCD_OPC_Decode, 155, 15, 131, 2, // Opcode: MADDV_W
/* 9281 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 9296
/* 9286 */    MCD_OPC_CheckPredicate, 30, 127, 30, 0, // Skip to: 17098
/* 9291 */    MCD_OPC_Decode, 153, 15, 132, 2, // Opcode: MADDV_D
/* 9296 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 9311
/* 9301 */    MCD_OPC_CheckPredicate, 30, 112, 30, 0, // Skip to: 17098
/* 9306 */    MCD_OPC_Decode, 203, 16, 129, 2, // Opcode: MSUBV_B
/* 9311 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 9326
/* 9316 */    MCD_OPC_CheckPredicate, 30, 97, 30, 0, // Skip to: 17098
/* 9321 */    MCD_OPC_Decode, 205, 16, 130, 2, // Opcode: MSUBV_H
/* 9326 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 9341
/* 9331 */    MCD_OPC_CheckPredicate, 30, 82, 30, 0, // Skip to: 17098
/* 9336 */    MCD_OPC_Decode, 206, 16, 131, 2, // Opcode: MSUBV_W
/* 9341 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 9356
/* 9346 */    MCD_OPC_CheckPredicate, 30, 67, 30, 0, // Skip to: 17098
/* 9351 */    MCD_OPC_Decode, 204, 16, 132, 2, // Opcode: MSUBV_D
/* 9356 */    MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 9371
/* 9361 */    MCD_OPC_CheckPredicate, 30, 52, 30, 0, // Skip to: 17098
/* 9366 */    MCD_OPC_Decode, 233, 10, 253, 1, // Opcode: DIV_S_B
/* 9371 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 9386
/* 9376 */    MCD_OPC_CheckPredicate, 30, 37, 30, 0, // Skip to: 17098
/* 9381 */    MCD_OPC_Decode, 235, 10, 254, 1, // Opcode: DIV_S_H
/* 9386 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 9401
/* 9391 */    MCD_OPC_CheckPredicate, 30, 22, 30, 0, // Skip to: 17098
/* 9396 */    MCD_OPC_Decode, 236, 10, 255, 1, // Opcode: DIV_S_W
/* 9401 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 9416
/* 9406 */    MCD_OPC_CheckPredicate, 30, 7, 30, 0, // Skip to: 17098
/* 9411 */    MCD_OPC_Decode, 234, 10, 128, 2, // Opcode: DIV_S_D
/* 9416 */    MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 9431
/* 9421 */    MCD_OPC_CheckPredicate, 30, 248, 29, 0, // Skip to: 17098
/* 9426 */    MCD_OPC_Decode, 237, 10, 253, 1, // Opcode: DIV_U_B
/* 9431 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 9446
/* 9436 */    MCD_OPC_CheckPredicate, 30, 233, 29, 0, // Skip to: 17098
/* 9441 */    MCD_OPC_Decode, 239, 10, 254, 1, // Opcode: DIV_U_H
/* 9446 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 9461
/* 9451 */    MCD_OPC_CheckPredicate, 30, 218, 29, 0, // Skip to: 17098
/* 9456 */    MCD_OPC_Decode, 240, 10, 255, 1, // Opcode: DIV_U_W
/* 9461 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 9476
/* 9466 */    MCD_OPC_CheckPredicate, 30, 203, 29, 0, // Skip to: 17098
/* 9471 */    MCD_OPC_Decode, 238, 10, 128, 2, // Opcode: DIV_U_D
/* 9476 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 9491
/* 9481 */    MCD_OPC_CheckPredicate, 30, 188, 29, 0, // Skip to: 17098
/* 9486 */    MCD_OPC_Decode, 139, 16, 253, 1, // Opcode: MOD_S_B
/* 9491 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 9506
/* 9496 */    MCD_OPC_CheckPredicate, 30, 173, 29, 0, // Skip to: 17098
/* 9501 */    MCD_OPC_Decode, 141, 16, 254, 1, // Opcode: MOD_S_H
/* 9506 */    MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 9521
/* 9511 */    MCD_OPC_CheckPredicate, 30, 158, 29, 0, // Skip to: 17098
/* 9516 */    MCD_OPC_Decode, 142, 16, 255, 1, // Opcode: MOD_S_W
/* 9521 */    MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 9536
/* 9526 */    MCD_OPC_CheckPredicate, 30, 143, 29, 0, // Skip to: 17098
/* 9531 */    MCD_OPC_Decode, 140, 16, 128, 2, // Opcode: MOD_S_D
/* 9536 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 9551
/* 9541 */    MCD_OPC_CheckPredicate, 30, 128, 29, 0, // Skip to: 17098
/* 9546 */    MCD_OPC_Decode, 143, 16, 253, 1, // Opcode: MOD_U_B
/* 9551 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 9566
/* 9556 */    MCD_OPC_CheckPredicate, 30, 113, 29, 0, // Skip to: 17098
/* 9561 */    MCD_OPC_Decode, 145, 16, 254, 1, // Opcode: MOD_U_H
/* 9566 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 9581
/* 9571 */    MCD_OPC_CheckPredicate, 30, 98, 29, 0, // Skip to: 17098
/* 9576 */    MCD_OPC_Decode, 146, 16, 255, 1, // Opcode: MOD_U_W
/* 9581 */    MCD_OPC_FilterValue, 31, 88, 29, 0, // Skip to: 17098
/* 9586 */    MCD_OPC_CheckPredicate, 30, 83, 29, 0, // Skip to: 17098
/* 9591 */    MCD_OPC_Decode, 144, 16, 128, 2, // Opcode: MOD_U_D
/* 9596 */    MCD_OPC_FilterValue, 19, 17, 1, 0, // Skip to: 9874
/* 9601 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 9604 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 9619
/* 9609 */    MCD_OPC_CheckPredicate, 30, 60, 29, 0, // Skip to: 17098
/* 9614 */    MCD_OPC_Decode, 138, 11, 133, 2, // Opcode: DOTP_S_H
/* 9619 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 9634
/* 9624 */    MCD_OPC_CheckPredicate, 30, 45, 29, 0, // Skip to: 17098
/* 9629 */    MCD_OPC_Decode, 139, 11, 134, 2, // Opcode: DOTP_S_W
/* 9634 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 9649
/* 9639 */    MCD_OPC_CheckPredicate, 30, 30, 29, 0, // Skip to: 17098
/* 9644 */    MCD_OPC_Decode, 137, 11, 135, 2, // Opcode: DOTP_S_D
/* 9649 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 9664
/* 9654 */    MCD_OPC_CheckPredicate, 30, 15, 29, 0, // Skip to: 17098
/* 9659 */    MCD_OPC_Decode, 141, 11, 133, 2, // Opcode: DOTP_U_H
/* 9664 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 9679
/* 9669 */    MCD_OPC_CheckPredicate, 30, 0, 29, 0, // Skip to: 17098
/* 9674 */    MCD_OPC_Decode, 142, 11, 134, 2, // Opcode: DOTP_U_W
/* 9679 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 9694
/* 9684 */    MCD_OPC_CheckPredicate, 30, 241, 28, 0, // Skip to: 17098
/* 9689 */    MCD_OPC_Decode, 140, 11, 135, 2, // Opcode: DOTP_U_D
/* 9694 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 9709
/* 9699 */    MCD_OPC_CheckPredicate, 30, 226, 28, 0, // Skip to: 17098
/* 9704 */    MCD_OPC_Decode, 144, 11, 136, 2, // Opcode: DPADD_S_H
/* 9709 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 9724
/* 9714 */    MCD_OPC_CheckPredicate, 30, 211, 28, 0, // Skip to: 17098
/* 9719 */    MCD_OPC_Decode, 145, 11, 137, 2, // Opcode: DPADD_S_W
/* 9724 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 9739
/* 9729 */    MCD_OPC_CheckPredicate, 30, 196, 28, 0, // Skip to: 17098
/* 9734 */    MCD_OPC_Decode, 143, 11, 138, 2, // Opcode: DPADD_S_D
/* 9739 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 9754
/* 9744 */    MCD_OPC_CheckPredicate, 30, 181, 28, 0, // Skip to: 17098
/* 9749 */    MCD_OPC_Decode, 147, 11, 136, 2, // Opcode: DPADD_U_H
/* 9754 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 9769
/* 9759 */    MCD_OPC_CheckPredicate, 30, 166, 28, 0, // Skip to: 17098
/* 9764 */    MCD_OPC_Decode, 148, 11, 137, 2, // Opcode: DPADD_U_W
/* 9769 */    MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 9784
/* 9774 */    MCD_OPC_CheckPredicate, 30, 151, 28, 0, // Skip to: 17098
/* 9779 */    MCD_OPC_Decode, 146, 11, 138, 2, // Opcode: DPADD_U_D
/* 9784 */    MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 9799
/* 9789 */    MCD_OPC_CheckPredicate, 30, 136, 28, 0, // Skip to: 17098
/* 9794 */    MCD_OPC_Decode, 175, 11, 136, 2, // Opcode: DPSUB_S_H
/* 9799 */    MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 9814
/* 9804 */    MCD_OPC_CheckPredicate, 30, 121, 28, 0, // Skip to: 17098
/* 9809 */    MCD_OPC_Decode, 176, 11, 137, 2, // Opcode: DPSUB_S_W
/* 9814 */    MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 9829
/* 9819 */    MCD_OPC_CheckPredicate, 30, 106, 28, 0, // Skip to: 17098
/* 9824 */    MCD_OPC_Decode, 174, 11, 138, 2, // Opcode: DPSUB_S_D
/* 9829 */    MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 9844
/* 9834 */    MCD_OPC_CheckPredicate, 30, 91, 28, 0, // Skip to: 17098
/* 9839 */    MCD_OPC_Decode, 178, 11, 136, 2, // Opcode: DPSUB_U_H
/* 9844 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 9859
/* 9849 */    MCD_OPC_CheckPredicate, 30, 76, 28, 0, // Skip to: 17098
/* 9854 */    MCD_OPC_Decode, 179, 11, 137, 2, // Opcode: DPSUB_U_W
/* 9859 */    MCD_OPC_FilterValue, 23, 66, 28, 0, // Skip to: 17098
/* 9864 */    MCD_OPC_CheckPredicate, 30, 61, 28, 0, // Skip to: 17098
/* 9869 */    MCD_OPC_Decode, 177, 11, 138, 2, // Opcode: DPSUB_U_D
/* 9874 */    MCD_OPC_FilterValue, 20, 227, 1, 0, // Skip to: 10362
/* 9879 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 9882 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 9897
/* 9887 */    MCD_OPC_CheckPredicate, 30, 38, 28, 0, // Skip to: 17098
/* 9892 */    MCD_OPC_Decode, 226, 19, 139, 2, // Opcode: SLD_B
/* 9897 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 9912
/* 9902 */    MCD_OPC_CheckPredicate, 30, 23, 28, 0, // Skip to: 17098
/* 9907 */    MCD_OPC_Decode, 228, 19, 140, 2, // Opcode: SLD_H
/* 9912 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 9927
/* 9917 */    MCD_OPC_CheckPredicate, 30, 8, 28, 0, // Skip to: 17098
/* 9922 */    MCD_OPC_Decode, 229, 19, 141, 2, // Opcode: SLD_W
/* 9927 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 9942
/* 9932 */    MCD_OPC_CheckPredicate, 30, 249, 27, 0, // Skip to: 17098
/* 9937 */    MCD_OPC_Decode, 227, 19, 142, 2, // Opcode: SLD_D
/* 9942 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 9957
/* 9947 */    MCD_OPC_CheckPredicate, 30, 234, 27, 0, // Skip to: 17098
/* 9952 */    MCD_OPC_Decode, 137, 20, 143, 2, // Opcode: SPLAT_B
/* 9957 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 9972
/* 9962 */    MCD_OPC_CheckPredicate, 30, 219, 27, 0, // Skip to: 17098
/* 9967 */    MCD_OPC_Decode, 139, 20, 144, 2, // Opcode: SPLAT_H
/* 9972 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 9987
/* 9977 */    MCD_OPC_CheckPredicate, 30, 204, 27, 0, // Skip to: 17098
/* 9982 */    MCD_OPC_Decode, 140, 20, 145, 2, // Opcode: SPLAT_W
/* 9987 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 10002
/* 9992 */    MCD_OPC_CheckPredicate, 30, 189, 27, 0, // Skip to: 17098
/* 9997 */    MCD_OPC_Decode, 138, 20, 146, 2, // Opcode: SPLAT_D
/* 10002 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 10017
/* 10007 */   MCD_OPC_CheckPredicate, 30, 174, 27, 0, // Skip to: 17098
/* 10012 */   MCD_OPC_Decode, 228, 17, 253, 1, // Opcode: PCKEV_B
/* 10017 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 10032
/* 10022 */   MCD_OPC_CheckPredicate, 30, 159, 27, 0, // Skip to: 17098
/* 10027 */   MCD_OPC_Decode, 230, 17, 254, 1, // Opcode: PCKEV_H
/* 10032 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 10047
/* 10037 */   MCD_OPC_CheckPredicate, 30, 144, 27, 0, // Skip to: 17098
/* 10042 */   MCD_OPC_Decode, 231, 17, 255, 1, // Opcode: PCKEV_W
/* 10047 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 10062
/* 10052 */   MCD_OPC_CheckPredicate, 30, 129, 27, 0, // Skip to: 17098
/* 10057 */   MCD_OPC_Decode, 229, 17, 128, 2, // Opcode: PCKEV_D
/* 10062 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 10077
/* 10067 */   MCD_OPC_CheckPredicate, 30, 114, 27, 0, // Skip to: 17098
/* 10072 */   MCD_OPC_Decode, 232, 17, 253, 1, // Opcode: PCKOD_B
/* 10077 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 10092
/* 10082 */   MCD_OPC_CheckPredicate, 30, 99, 27, 0, // Skip to: 17098
/* 10087 */   MCD_OPC_Decode, 234, 17, 254, 1, // Opcode: PCKOD_H
/* 10092 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 10107
/* 10097 */   MCD_OPC_CheckPredicate, 30, 84, 27, 0, // Skip to: 17098
/* 10102 */   MCD_OPC_Decode, 235, 17, 255, 1, // Opcode: PCKOD_W
/* 10107 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 10122
/* 10112 */   MCD_OPC_CheckPredicate, 30, 69, 27, 0, // Skip to: 17098
/* 10117 */   MCD_OPC_Decode, 233, 17, 128, 2, // Opcode: PCKOD_D
/* 10122 */   MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 10137
/* 10127 */   MCD_OPC_CheckPredicate, 30, 54, 27, 0, // Skip to: 17098
/* 10132 */   MCD_OPC_Decode, 203, 13, 253, 1, // Opcode: ILVL_B
/* 10137 */   MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 10152
/* 10142 */   MCD_OPC_CheckPredicate, 30, 39, 27, 0, // Skip to: 17098
/* 10147 */   MCD_OPC_Decode, 205, 13, 254, 1, // Opcode: ILVL_H
/* 10152 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 10167
/* 10157 */   MCD_OPC_CheckPredicate, 30, 24, 27, 0, // Skip to: 17098
/* 10162 */   MCD_OPC_Decode, 206, 13, 255, 1, // Opcode: ILVL_W
/* 10167 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 10182
/* 10172 */   MCD_OPC_CheckPredicate, 30, 9, 27, 0, // Skip to: 17098
/* 10177 */   MCD_OPC_Decode, 204, 13, 128, 2, // Opcode: ILVL_D
/* 10182 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 10197
/* 10187 */   MCD_OPC_CheckPredicate, 30, 250, 26, 0, // Skip to: 17098
/* 10192 */   MCD_OPC_Decode, 211, 13, 253, 1, // Opcode: ILVR_B
/* 10197 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 10212
/* 10202 */   MCD_OPC_CheckPredicate, 30, 235, 26, 0, // Skip to: 17098
/* 10207 */   MCD_OPC_Decode, 213, 13, 254, 1, // Opcode: ILVR_H
/* 10212 */   MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 10227
/* 10217 */   MCD_OPC_CheckPredicate, 30, 220, 26, 0, // Skip to: 17098
/* 10222 */   MCD_OPC_Decode, 214, 13, 255, 1, // Opcode: ILVR_W
/* 10227 */   MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 10242
/* 10232 */   MCD_OPC_CheckPredicate, 30, 205, 26, 0, // Skip to: 17098
/* 10237 */   MCD_OPC_Decode, 212, 13, 128, 2, // Opcode: ILVR_D
/* 10242 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 10257
/* 10247 */   MCD_OPC_CheckPredicate, 30, 190, 26, 0, // Skip to: 17098
/* 10252 */   MCD_OPC_Decode, 199, 13, 253, 1, // Opcode: ILVEV_B
/* 10257 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 10272
/* 10262 */   MCD_OPC_CheckPredicate, 30, 175, 26, 0, // Skip to: 17098
/* 10267 */   MCD_OPC_Decode, 201, 13, 254, 1, // Opcode: ILVEV_H
/* 10272 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 10287
/* 10277 */   MCD_OPC_CheckPredicate, 30, 160, 26, 0, // Skip to: 17098
/* 10282 */   MCD_OPC_Decode, 202, 13, 255, 1, // Opcode: ILVEV_W
/* 10287 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 10302
/* 10292 */   MCD_OPC_CheckPredicate, 30, 145, 26, 0, // Skip to: 17098
/* 10297 */   MCD_OPC_Decode, 200, 13, 128, 2, // Opcode: ILVEV_D
/* 10302 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 10317
/* 10307 */   MCD_OPC_CheckPredicate, 30, 130, 26, 0, // Skip to: 17098
/* 10312 */   MCD_OPC_Decode, 207, 13, 253, 1, // Opcode: ILVOD_B
/* 10317 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 10332
/* 10322 */   MCD_OPC_CheckPredicate, 30, 115, 26, 0, // Skip to: 17098
/* 10327 */   MCD_OPC_Decode, 209, 13, 254, 1, // Opcode: ILVOD_H
/* 10332 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 10347
/* 10337 */   MCD_OPC_CheckPredicate, 30, 100, 26, 0, // Skip to: 17098
/* 10342 */   MCD_OPC_Decode, 210, 13, 255, 1, // Opcode: ILVOD_W
/* 10347 */   MCD_OPC_FilterValue, 31, 90, 26, 0, // Skip to: 17098
/* 10352 */   MCD_OPC_CheckPredicate, 30, 85, 26, 0, // Skip to: 17098
/* 10357 */   MCD_OPC_Decode, 208, 13, 128, 2, // Opcode: ILVOD_D
/* 10362 */   MCD_OPC_FilterValue, 21, 107, 1, 0, // Skip to: 10730
/* 10367 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 10370 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 10385
/* 10375 */   MCD_OPC_CheckPredicate, 30, 62, 26, 0, // Skip to: 17098
/* 10380 */   MCD_OPC_Decode, 250, 21, 129, 2, // Opcode: VSHF_B
/* 10385 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 10400
/* 10390 */   MCD_OPC_CheckPredicate, 30, 47, 26, 0, // Skip to: 17098
/* 10395 */   MCD_OPC_Decode, 252, 21, 130, 2, // Opcode: VSHF_H
/* 10400 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 10415
/* 10405 */   MCD_OPC_CheckPredicate, 30, 32, 26, 0, // Skip to: 17098
/* 10410 */   MCD_OPC_Decode, 253, 21, 131, 2, // Opcode: VSHF_W
/* 10415 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 10430
/* 10420 */   MCD_OPC_CheckPredicate, 30, 17, 26, 0, // Skip to: 17098
/* 10425 */   MCD_OPC_Decode, 251, 21, 132, 2, // Opcode: VSHF_D
/* 10430 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 10445
/* 10435 */   MCD_OPC_CheckPredicate, 30, 2, 26, 0, // Skip to: 17098
/* 10440 */   MCD_OPC_Decode, 150, 20, 253, 1, // Opcode: SRAR_B
/* 10445 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 10460
/* 10450 */   MCD_OPC_CheckPredicate, 30, 243, 25, 0, // Skip to: 17098
/* 10455 */   MCD_OPC_Decode, 152, 20, 254, 1, // Opcode: SRAR_H
/* 10460 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 10475
/* 10465 */   MCD_OPC_CheckPredicate, 30, 228, 25, 0, // Skip to: 17098
/* 10470 */   MCD_OPC_Decode, 153, 20, 255, 1, // Opcode: SRAR_W
/* 10475 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 10490
/* 10480 */   MCD_OPC_CheckPredicate, 30, 213, 25, 0, // Skip to: 17098
/* 10485 */   MCD_OPC_Decode, 151, 20, 128, 2, // Opcode: SRAR_D
/* 10490 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 10505
/* 10495 */   MCD_OPC_CheckPredicate, 30, 198, 25, 0, // Skip to: 17098
/* 10500 */   MCD_OPC_Decode, 172, 20, 253, 1, // Opcode: SRLR_B
/* 10505 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 10520
/* 10510 */   MCD_OPC_CheckPredicate, 30, 183, 25, 0, // Skip to: 17098
/* 10515 */   MCD_OPC_Decode, 174, 20, 254, 1, // Opcode: SRLR_H
/* 10520 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 10535
/* 10525 */   MCD_OPC_CheckPredicate, 30, 168, 25, 0, // Skip to: 17098
/* 10530 */   MCD_OPC_Decode, 175, 20, 255, 1, // Opcode: SRLR_W
/* 10535 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 10550
/* 10540 */   MCD_OPC_CheckPredicate, 30, 153, 25, 0, // Skip to: 17098
/* 10545 */   MCD_OPC_Decode, 173, 20, 128, 2, // Opcode: SRLR_D
/* 10550 */   MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 10565
/* 10555 */   MCD_OPC_CheckPredicate, 30, 138, 25, 0, // Skip to: 17098
/* 10560 */   MCD_OPC_Decode, 186, 13, 133, 2, // Opcode: HADD_S_H
/* 10565 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 10580
/* 10570 */   MCD_OPC_CheckPredicate, 30, 123, 25, 0, // Skip to: 17098
/* 10575 */   MCD_OPC_Decode, 187, 13, 134, 2, // Opcode: HADD_S_W
/* 10580 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 10595
/* 10585 */   MCD_OPC_CheckPredicate, 30, 108, 25, 0, // Skip to: 17098
/* 10590 */   MCD_OPC_Decode, 185, 13, 135, 2, // Opcode: HADD_S_D
/* 10595 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 10610
/* 10600 */   MCD_OPC_CheckPredicate, 30, 93, 25, 0, // Skip to: 17098
/* 10605 */   MCD_OPC_Decode, 189, 13, 133, 2, // Opcode: HADD_U_H
/* 10610 */   MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 10625
/* 10615 */   MCD_OPC_CheckPredicate, 30, 78, 25, 0, // Skip to: 17098
/* 10620 */   MCD_OPC_Decode, 190, 13, 134, 2, // Opcode: HADD_U_W
/* 10625 */   MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 10640
/* 10630 */   MCD_OPC_CheckPredicate, 30, 63, 25, 0, // Skip to: 17098
/* 10635 */   MCD_OPC_Decode, 188, 13, 135, 2, // Opcode: HADD_U_D
/* 10640 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 10655
/* 10645 */   MCD_OPC_CheckPredicate, 30, 48, 25, 0, // Skip to: 17098
/* 10650 */   MCD_OPC_Decode, 192, 13, 133, 2, // Opcode: HSUB_S_H
/* 10655 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 10670
/* 10660 */   MCD_OPC_CheckPredicate, 30, 33, 25, 0, // Skip to: 17098
/* 10665 */   MCD_OPC_Decode, 193, 13, 134, 2, // Opcode: HSUB_S_W
/* 10670 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 10685
/* 10675 */   MCD_OPC_CheckPredicate, 30, 18, 25, 0, // Skip to: 17098
/* 10680 */   MCD_OPC_Decode, 191, 13, 135, 2, // Opcode: HSUB_S_D
/* 10685 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 10700
/* 10690 */   MCD_OPC_CheckPredicate, 30, 3, 25, 0, // Skip to: 17098
/* 10695 */   MCD_OPC_Decode, 195, 13, 133, 2, // Opcode: HSUB_U_H
/* 10700 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 10715
/* 10705 */   MCD_OPC_CheckPredicate, 30, 244, 24, 0, // Skip to: 17098
/* 10710 */   MCD_OPC_Decode, 196, 13, 134, 2, // Opcode: HSUB_U_W
/* 10715 */   MCD_OPC_FilterValue, 31, 234, 24, 0, // Skip to: 17098
/* 10720 */   MCD_OPC_CheckPredicate, 30, 229, 24, 0, // Skip to: 17098
/* 10725 */   MCD_OPC_Decode, 194, 13, 135, 2, // Opcode: HSUB_U_D
/* 10730 */   MCD_OPC_FilterValue, 25, 26, 2, 0, // Skip to: 11273
/* 10735 */   MCD_OPC_ExtractField, 20, 6,  // Inst{25-20} ...
/* 10738 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 10753
/* 10743 */   MCD_OPC_CheckPredicate, 30, 206, 24, 0, // Skip to: 17098
/* 10748 */   MCD_OPC_Decode, 222, 19, 147, 2, // Opcode: SLDI_B
/* 10753 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 10775
/* 10758 */   MCD_OPC_CheckPredicate, 30, 191, 24, 0, // Skip to: 17098
/* 10763 */   MCD_OPC_CheckField, 19, 1, 0, 184, 24, 0, // Skip to: 17098
/* 10770 */   MCD_OPC_Decode, 224, 19, 148, 2, // Opcode: SLDI_H
/* 10775 */   MCD_OPC_FilterValue, 3, 62, 0, 0, // Skip to: 10842
/* 10780 */   MCD_OPC_ExtractField, 18, 2,  // Inst{19-18} ...
/* 10783 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 10798
/* 10788 */   MCD_OPC_CheckPredicate, 30, 161, 24, 0, // Skip to: 17098
/* 10793 */   MCD_OPC_Decode, 225, 19, 149, 2, // Opcode: SLDI_W
/* 10798 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 10820
/* 10803 */   MCD_OPC_CheckPredicate, 30, 146, 24, 0, // Skip to: 17098
/* 10808 */   MCD_OPC_CheckField, 17, 1, 0, 139, 24, 0, // Skip to: 17098
/* 10815 */   MCD_OPC_Decode, 223, 19, 150, 2, // Opcode: SLDI_D
/* 10820 */   MCD_OPC_FilterValue, 3, 129, 24, 0, // Skip to: 17098
/* 10825 */   MCD_OPC_CheckPredicate, 30, 124, 24, 0, // Skip to: 17098
/* 10830 */   MCD_OPC_CheckField, 16, 2, 2, 117, 24, 0, // Skip to: 17098
/* 10837 */   MCD_OPC_Decode, 194, 9, 151, 2, // Opcode: CTCMSA
/* 10842 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 10857
/* 10847 */   MCD_OPC_CheckPredicate, 30, 102, 24, 0, // Skip to: 17098
/* 10852 */   MCD_OPC_Decode, 133, 20, 152, 2, // Opcode: SPLATI_B
/* 10857 */   MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 10879
/* 10862 */   MCD_OPC_CheckPredicate, 30, 87, 24, 0, // Skip to: 17098
/* 10867 */   MCD_OPC_CheckField, 19, 1, 0, 80, 24, 0, // Skip to: 17098
/* 10874 */   MCD_OPC_Decode, 135, 20, 153, 2, // Opcode: SPLATI_H
/* 10879 */   MCD_OPC_FilterValue, 7, 62, 0, 0, // Skip to: 10946
/* 10884 */   MCD_OPC_ExtractField, 18, 2,  // Inst{19-18} ...
/* 10887 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 10902
/* 10892 */   MCD_OPC_CheckPredicate, 30, 57, 24, 0, // Skip to: 17098
/* 10897 */   MCD_OPC_Decode, 136, 20, 154, 2, // Opcode: SPLATI_W
/* 10902 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 10924
/* 10907 */   MCD_OPC_CheckPredicate, 30, 42, 24, 0, // Skip to: 17098
/* 10912 */   MCD_OPC_CheckField, 17, 1, 0, 35, 24, 0, // Skip to: 17098
/* 10919 */   MCD_OPC_Decode, 134, 20, 155, 2, // Opcode: SPLATI_D
/* 10924 */   MCD_OPC_FilterValue, 3, 25, 24, 0, // Skip to: 17098
/* 10929 */   MCD_OPC_CheckPredicate, 30, 20, 24, 0, // Skip to: 17098
/* 10934 */   MCD_OPC_CheckField, 16, 2, 2, 13, 24, 0, // Skip to: 17098
/* 10941 */   MCD_OPC_Decode, 167, 8, 156, 2, // Opcode: CFCMSA
/* 10946 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 10961
/* 10951 */   MCD_OPC_CheckPredicate, 30, 254, 23, 0, // Skip to: 17098
/* 10956 */   MCD_OPC_Decode, 176, 9, 157, 2, // Opcode: COPY_S_B
/* 10961 */   MCD_OPC_FilterValue, 10, 17, 0, 0, // Skip to: 10983
/* 10966 */   MCD_OPC_CheckPredicate, 30, 239, 23, 0, // Skip to: 17098
/* 10971 */   MCD_OPC_CheckField, 19, 1, 0, 232, 23, 0, // Skip to: 17098
/* 10978 */   MCD_OPC_Decode, 178, 9, 158, 2, // Opcode: COPY_S_H
/* 10983 */   MCD_OPC_FilterValue, 11, 62, 0, 0, // Skip to: 11050
/* 10988 */   MCD_OPC_ExtractField, 18, 2,  // Inst{19-18} ...
/* 10991 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 11006
/* 10996 */   MCD_OPC_CheckPredicate, 30, 209, 23, 0, // Skip to: 17098
/* 11001 */   MCD_OPC_Decode, 179, 9, 159, 2, // Opcode: COPY_S_W
/* 11006 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 11028
/* 11011 */   MCD_OPC_CheckPredicate, 38, 194, 23, 0, // Skip to: 17098
/* 11016 */   MCD_OPC_CheckField, 17, 1, 0, 187, 23, 0, // Skip to: 17098
/* 11023 */   MCD_OPC_Decode, 177, 9, 160, 2, // Opcode: COPY_S_D
/* 11028 */   MCD_OPC_FilterValue, 3, 177, 23, 0, // Skip to: 17098
/* 11033 */   MCD_OPC_CheckPredicate, 30, 172, 23, 0, // Skip to: 17098
/* 11038 */   MCD_OPC_CheckField, 16, 2, 2, 165, 23, 0, // Skip to: 17098
/* 11045 */   MCD_OPC_Decode, 151, 16, 161, 2, // Opcode: MOVE_V
/* 11050 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 11065
/* 11055 */   MCD_OPC_CheckPredicate, 30, 150, 23, 0, // Skip to: 17098
/* 11060 */   MCD_OPC_Decode, 180, 9, 157, 2, // Opcode: COPY_U_B
/* 11065 */   MCD_OPC_FilterValue, 14, 17, 0, 0, // Skip to: 11087
/* 11070 */   MCD_OPC_CheckPredicate, 30, 135, 23, 0, // Skip to: 17098
/* 11075 */   MCD_OPC_CheckField, 19, 1, 0, 128, 23, 0, // Skip to: 17098
/* 11082 */   MCD_OPC_Decode, 181, 9, 158, 2, // Opcode: COPY_U_H
/* 11087 */   MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 11109
/* 11092 */   MCD_OPC_CheckPredicate, 38, 113, 23, 0, // Skip to: 17098
/* 11097 */   MCD_OPC_CheckField, 18, 2, 0, 106, 23, 0, // Skip to: 17098
/* 11104 */   MCD_OPC_Decode, 182, 9, 159, 2, // Opcode: COPY_U_W
/* 11109 */   MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 11124
/* 11114 */   MCD_OPC_CheckPredicate, 30, 91, 23, 0, // Skip to: 17098
/* 11119 */   MCD_OPC_Decode, 216, 13, 162, 2, // Opcode: INSERT_B
/* 11124 */   MCD_OPC_FilterValue, 18, 17, 0, 0, // Skip to: 11146
/* 11129 */   MCD_OPC_CheckPredicate, 30, 76, 23, 0, // Skip to: 17098
/* 11134 */   MCD_OPC_CheckField, 19, 1, 0, 69, 23, 0, // Skip to: 17098
/* 11141 */   MCD_OPC_Decode, 218, 13, 163, 2, // Opcode: INSERT_H
/* 11146 */   MCD_OPC_FilterValue, 19, 40, 0, 0, // Skip to: 11191
/* 11151 */   MCD_OPC_ExtractField, 18, 2,  // Inst{19-18} ...
/* 11154 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 11169
/* 11159 */   MCD_OPC_CheckPredicate, 30, 46, 23, 0, // Skip to: 17098
/* 11164 */   MCD_OPC_Decode, 219, 13, 164, 2, // Opcode: INSERT_W
/* 11169 */   MCD_OPC_FilterValue, 2, 36, 23, 0, // Skip to: 17098
/* 11174 */   MCD_OPC_CheckPredicate, 38, 31, 23, 0, // Skip to: 17098
/* 11179 */   MCD_OPC_CheckField, 17, 1, 0, 24, 23, 0, // Skip to: 17098
/* 11186 */   MCD_OPC_Decode, 217, 13, 165, 2, // Opcode: INSERT_D
/* 11191 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 11206
/* 11196 */   MCD_OPC_CheckPredicate, 30, 9, 23, 0, // Skip to: 17098
/* 11201 */   MCD_OPC_Decode, 221, 13, 166, 2, // Opcode: INSVE_B
/* 11206 */   MCD_OPC_FilterValue, 22, 17, 0, 0, // Skip to: 11228
/* 11211 */   MCD_OPC_CheckPredicate, 30, 250, 22, 0, // Skip to: 17098
/* 11216 */   MCD_OPC_CheckField, 19, 1, 0, 243, 22, 0, // Skip to: 17098
/* 11223 */   MCD_OPC_Decode, 223, 13, 166, 2, // Opcode: INSVE_H
/* 11228 */   MCD_OPC_FilterValue, 23, 233, 22, 0, // Skip to: 17098
/* 11233 */   MCD_OPC_ExtractField, 18, 2,  // Inst{19-18} ...
/* 11236 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 11251
/* 11241 */   MCD_OPC_CheckPredicate, 30, 220, 22, 0, // Skip to: 17098
/* 11246 */   MCD_OPC_Decode, 224, 13, 166, 2, // Opcode: INSVE_W
/* 11251 */   MCD_OPC_FilterValue, 2, 210, 22, 0, // Skip to: 17098
/* 11256 */   MCD_OPC_CheckPredicate, 30, 205, 22, 0, // Skip to: 17098
/* 11261 */   MCD_OPC_CheckField, 17, 1, 0, 198, 22, 0, // Skip to: 17098
/* 11268 */   MCD_OPC_Decode, 222, 13, 166, 2, // Opcode: INSVE_D
/* 11273 */   MCD_OPC_FilterValue, 26, 227, 1, 0, // Skip to: 11761
/* 11278 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 11281 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 11296
/* 11286 */   MCD_OPC_CheckPredicate, 30, 175, 22, 0, // Skip to: 17098
/* 11291 */   MCD_OPC_Decode, 145, 12, 255, 1, // Opcode: FCAF_W
/* 11296 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 11311
/* 11301 */   MCD_OPC_CheckPredicate, 30, 160, 22, 0, // Skip to: 17098
/* 11306 */   MCD_OPC_Decode, 144, 12, 128, 2, // Opcode: FCAF_D
/* 11311 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 11326
/* 11316 */   MCD_OPC_CheckPredicate, 30, 145, 22, 0, // Skip to: 17098
/* 11321 */   MCD_OPC_Decode, 172, 12, 255, 1, // Opcode: FCUN_W
/* 11326 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 11341
/* 11331 */   MCD_OPC_CheckPredicate, 30, 130, 22, 0, // Skip to: 17098
/* 11336 */   MCD_OPC_Decode, 171, 12, 128, 2, // Opcode: FCUN_D
/* 11341 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 11356
/* 11346 */   MCD_OPC_CheckPredicate, 30, 115, 22, 0, // Skip to: 17098
/* 11351 */   MCD_OPC_Decode, 147, 12, 255, 1, // Opcode: FCEQ_W
/* 11356 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 11371
/* 11361 */   MCD_OPC_CheckPredicate, 30, 100, 22, 0, // Skip to: 17098
/* 11366 */   MCD_OPC_Decode, 146, 12, 128, 2, // Opcode: FCEQ_D
/* 11371 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 11386
/* 11376 */   MCD_OPC_CheckPredicate, 30, 85, 22, 0, // Skip to: 17098
/* 11381 */   MCD_OPC_Decode, 164, 12, 255, 1, // Opcode: FCUEQ_W
/* 11386 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 11401
/* 11391 */   MCD_OPC_CheckPredicate, 30, 70, 22, 0, // Skip to: 17098
/* 11396 */   MCD_OPC_Decode, 163, 12, 128, 2, // Opcode: FCUEQ_D
/* 11401 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 11416
/* 11406 */   MCD_OPC_CheckPredicate, 30, 55, 22, 0, // Skip to: 17098
/* 11411 */   MCD_OPC_Decode, 153, 12, 255, 1, // Opcode: FCLT_W
/* 11416 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 11431
/* 11421 */   MCD_OPC_CheckPredicate, 30, 40, 22, 0, // Skip to: 17098
/* 11426 */   MCD_OPC_Decode, 152, 12, 128, 2, // Opcode: FCLT_D
/* 11431 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 11446
/* 11436 */   MCD_OPC_CheckPredicate, 30, 25, 22, 0, // Skip to: 17098
/* 11441 */   MCD_OPC_Decode, 168, 12, 255, 1, // Opcode: FCULT_W
/* 11446 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 11461
/* 11451 */   MCD_OPC_CheckPredicate, 30, 10, 22, 0, // Skip to: 17098
/* 11456 */   MCD_OPC_Decode, 167, 12, 128, 2, // Opcode: FCULT_D
/* 11461 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 11476
/* 11466 */   MCD_OPC_CheckPredicate, 30, 251, 21, 0, // Skip to: 17098
/* 11471 */   MCD_OPC_Decode, 151, 12, 255, 1, // Opcode: FCLE_W
/* 11476 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 11491
/* 11481 */   MCD_OPC_CheckPredicate, 30, 236, 21, 0, // Skip to: 17098
/* 11486 */   MCD_OPC_Decode, 150, 12, 128, 2, // Opcode: FCLE_D
/* 11491 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 11506
/* 11496 */   MCD_OPC_CheckPredicate, 30, 221, 21, 0, // Skip to: 17098
/* 11501 */   MCD_OPC_Decode, 166, 12, 255, 1, // Opcode: FCULE_W
/* 11506 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 11521
/* 11511 */   MCD_OPC_CheckPredicate, 30, 206, 21, 0, // Skip to: 17098
/* 11516 */   MCD_OPC_Decode, 165, 12, 128, 2, // Opcode: FCULE_D
/* 11521 */   MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 11536
/* 11526 */   MCD_OPC_CheckPredicate, 30, 191, 21, 0, // Skip to: 17098
/* 11531 */   MCD_OPC_Decode, 132, 13, 255, 1, // Opcode: FSAF_W
/* 11536 */   MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 11551
/* 11541 */   MCD_OPC_CheckPredicate, 30, 176, 21, 0, // Skip to: 17098
/* 11546 */   MCD_OPC_Decode, 131, 13, 128, 2, // Opcode: FSAF_D
/* 11551 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 11566
/* 11556 */   MCD_OPC_CheckPredicate, 30, 161, 21, 0, // Skip to: 17098
/* 11561 */   MCD_OPC_Decode, 170, 13, 255, 1, // Opcode: FSUN_W
/* 11566 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 11581
/* 11571 */   MCD_OPC_CheckPredicate, 30, 146, 21, 0, // Skip to: 17098
/* 11576 */   MCD_OPC_Decode, 169, 13, 128, 2, // Opcode: FSUN_D
/* 11581 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 11596
/* 11586 */   MCD_OPC_CheckPredicate, 30, 131, 21, 0, // Skip to: 17098
/* 11591 */   MCD_OPC_Decode, 134, 13, 255, 1, // Opcode: FSEQ_W
/* 11596 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 11611
/* 11601 */   MCD_OPC_CheckPredicate, 30, 116, 21, 0, // Skip to: 17098
/* 11606 */   MCD_OPC_Decode, 133, 13, 128, 2, // Opcode: FSEQ_D
/* 11611 */   MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 11626
/* 11616 */   MCD_OPC_CheckPredicate, 30, 101, 21, 0, // Skip to: 17098
/* 11621 */   MCD_OPC_Decode, 162, 13, 255, 1, // Opcode: FSUEQ_W
/* 11626 */   MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 11641
/* 11631 */   MCD_OPC_CheckPredicate, 30, 86, 21, 0, // Skip to: 17098
/* 11636 */   MCD_OPC_Decode, 161, 13, 128, 2, // Opcode: FSUEQ_D
/* 11641 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 11656
/* 11646 */   MCD_OPC_CheckPredicate, 30, 71, 21, 0, // Skip to: 17098
/* 11651 */   MCD_OPC_Decode, 138, 13, 255, 1, // Opcode: FSLT_W
/* 11656 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 11671
/* 11661 */   MCD_OPC_CheckPredicate, 30, 56, 21, 0, // Skip to: 17098
/* 11666 */   MCD_OPC_Decode, 137, 13, 128, 2, // Opcode: FSLT_D
/* 11671 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 11686
/* 11676 */   MCD_OPC_CheckPredicate, 30, 41, 21, 0, // Skip to: 17098
/* 11681 */   MCD_OPC_Decode, 166, 13, 255, 1, // Opcode: FSULT_W
/* 11686 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 11701
/* 11691 */   MCD_OPC_CheckPredicate, 30, 26, 21, 0, // Skip to: 17098
/* 11696 */   MCD_OPC_Decode, 165, 13, 128, 2, // Opcode: FSULT_D
/* 11701 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 11716
/* 11706 */   MCD_OPC_CheckPredicate, 30, 11, 21, 0, // Skip to: 17098
/* 11711 */   MCD_OPC_Decode, 136, 13, 255, 1, // Opcode: FSLE_W
/* 11716 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 11731
/* 11721 */   MCD_OPC_CheckPredicate, 30, 252, 20, 0, // Skip to: 17098
/* 11726 */   MCD_OPC_Decode, 135, 13, 128, 2, // Opcode: FSLE_D
/* 11731 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 11746
/* 11736 */   MCD_OPC_CheckPredicate, 30, 237, 20, 0, // Skip to: 17098
/* 11741 */   MCD_OPC_Decode, 164, 13, 255, 1, // Opcode: FSULE_W
/* 11746 */   MCD_OPC_FilterValue, 31, 227, 20, 0, // Skip to: 17098
/* 11751 */   MCD_OPC_CheckPredicate, 30, 222, 20, 0, // Skip to: 17098
/* 11756 */   MCD_OPC_Decode, 163, 13, 128, 2, // Opcode: FSULE_D
/* 11761 */   MCD_OPC_FilterValue, 27, 137, 1, 0, // Skip to: 12159
/* 11766 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 11769 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 11784
/* 11774 */   MCD_OPC_CheckPredicate, 30, 199, 20, 0, // Skip to: 17098
/* 11779 */   MCD_OPC_Decode, 143, 12, 255, 1, // Opcode: FADD_W
/* 11784 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 11799
/* 11789 */   MCD_OPC_CheckPredicate, 30, 184, 20, 0, // Skip to: 17098
/* 11794 */   MCD_OPC_Decode, 134, 12, 128, 2, // Opcode: FADD_D
/* 11799 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 11814
/* 11804 */   MCD_OPC_CheckPredicate, 30, 169, 20, 0, // Skip to: 17098
/* 11809 */   MCD_OPC_Decode, 160, 13, 255, 1, // Opcode: FSUB_W
/* 11814 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 11829
/* 11819 */   MCD_OPC_CheckPredicate, 30, 154, 20, 0, // Skip to: 17098
/* 11824 */   MCD_OPC_Decode, 151, 13, 128, 2, // Opcode: FSUB_D
/* 11829 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 11844
/* 11834 */   MCD_OPC_CheckPredicate, 30, 139, 20, 0, // Skip to: 17098
/* 11839 */   MCD_OPC_Decode, 244, 12, 255, 1, // Opcode: FMUL_W
/* 11844 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 11859
/* 11849 */   MCD_OPC_CheckPredicate, 30, 124, 20, 0, // Skip to: 17098
/* 11854 */   MCD_OPC_Decode, 235, 12, 128, 2, // Opcode: FMUL_D
/* 11859 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 11874
/* 11864 */   MCD_OPC_CheckPredicate, 30, 109, 20, 0, // Skip to: 17098
/* 11869 */   MCD_OPC_Decode, 181, 12, 255, 1, // Opcode: FDIV_W
/* 11874 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 11889
/* 11879 */   MCD_OPC_CheckPredicate, 30, 94, 20, 0, // Skip to: 17098
/* 11884 */   MCD_OPC_Decode, 173, 12, 128, 2, // Opcode: FDIV_D
/* 11889 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 11904
/* 11894 */   MCD_OPC_CheckPredicate, 30, 79, 20, 0, // Skip to: 17098
/* 11899 */   MCD_OPC_Decode, 216, 12, 131, 2, // Opcode: FMADD_W
/* 11904 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 11919
/* 11909 */   MCD_OPC_CheckPredicate, 30, 64, 20, 0, // Skip to: 17098
/* 11914 */   MCD_OPC_Decode, 215, 12, 132, 2, // Opcode: FMADD_D
/* 11919 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 11934
/* 11924 */   MCD_OPC_CheckPredicate, 30, 49, 20, 0, // Skip to: 17098
/* 11929 */   MCD_OPC_Decode, 234, 12, 131, 2, // Opcode: FMSUB_W
/* 11934 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 11949
/* 11939 */   MCD_OPC_CheckPredicate, 30, 34, 20, 0, // Skip to: 17098
/* 11944 */   MCD_OPC_Decode, 233, 12, 132, 2, // Opcode: FMSUB_D
/* 11949 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 11964
/* 11954 */   MCD_OPC_CheckPredicate, 30, 19, 20, 0, // Skip to: 17098
/* 11959 */   MCD_OPC_Decode, 185, 12, 255, 1, // Opcode: FEXP2_W
/* 11964 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 11979
/* 11969 */   MCD_OPC_CheckPredicate, 30, 4, 20, 0, // Skip to: 17098
/* 11974 */   MCD_OPC_Decode, 184, 12, 128, 2, // Opcode: FEXP2_D
/* 11979 */   MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 11994
/* 11984 */   MCD_OPC_CheckPredicate, 30, 245, 19, 0, // Skip to: 17098
/* 11989 */   MCD_OPC_Decode, 182, 12, 167, 2, // Opcode: FEXDO_H
/* 11994 */   MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 12009
/* 11999 */   MCD_OPC_CheckPredicate, 30, 230, 19, 0, // Skip to: 17098
/* 12004 */   MCD_OPC_Decode, 183, 12, 168, 2, // Opcode: FEXDO_W
/* 12009 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 12024
/* 12014 */   MCD_OPC_CheckPredicate, 30, 215, 19, 0, // Skip to: 17098
/* 12019 */   MCD_OPC_Decode, 175, 13, 167, 2, // Opcode: FTQ_H
/* 12024 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 12039
/* 12029 */   MCD_OPC_CheckPredicate, 30, 200, 19, 0, // Skip to: 17098
/* 12034 */   MCD_OPC_Decode, 176, 13, 168, 2, // Opcode: FTQ_W
/* 12039 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 12054
/* 12044 */   MCD_OPC_CheckPredicate, 30, 185, 19, 0, // Skip to: 17098
/* 12049 */   MCD_OPC_Decode, 224, 12, 255, 1, // Opcode: FMIN_W
/* 12054 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 12069
/* 12059 */   MCD_OPC_CheckPredicate, 30, 170, 19, 0, // Skip to: 17098
/* 12064 */   MCD_OPC_Decode, 223, 12, 128, 2, // Opcode: FMIN_D
/* 12069 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 12084
/* 12074 */   MCD_OPC_CheckPredicate, 30, 155, 19, 0, // Skip to: 17098
/* 12079 */   MCD_OPC_Decode, 222, 12, 255, 1, // Opcode: FMIN_A_W
/* 12084 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 12099
/* 12089 */   MCD_OPC_CheckPredicate, 30, 140, 19, 0, // Skip to: 17098
/* 12094 */   MCD_OPC_Decode, 221, 12, 128, 2, // Opcode: FMIN_A_D
/* 12099 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 12114
/* 12104 */   MCD_OPC_CheckPredicate, 30, 125, 19, 0, // Skip to: 17098
/* 12109 */   MCD_OPC_Decode, 220, 12, 255, 1, // Opcode: FMAX_W
/* 12114 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 12129
/* 12119 */   MCD_OPC_CheckPredicate, 30, 110, 19, 0, // Skip to: 17098
/* 12124 */   MCD_OPC_Decode, 219, 12, 128, 2, // Opcode: FMAX_D
/* 12129 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 12144
/* 12134 */   MCD_OPC_CheckPredicate, 30, 95, 19, 0, // Skip to: 17098
/* 12139 */   MCD_OPC_Decode, 218, 12, 255, 1, // Opcode: FMAX_A_W
/* 12144 */   MCD_OPC_FilterValue, 31, 85, 19, 0, // Skip to: 17098
/* 12149 */   MCD_OPC_CheckPredicate, 30, 80, 19, 0, // Skip to: 17098
/* 12154 */   MCD_OPC_Decode, 217, 12, 128, 2, // Opcode: FMAX_A_D
/* 12159 */   MCD_OPC_FilterValue, 28, 107, 1, 0, // Skip to: 12527
/* 12164 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 12167 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 12182
/* 12172 */   MCD_OPC_CheckPredicate, 30, 57, 19, 0, // Skip to: 17098
/* 12177 */   MCD_OPC_Decode, 162, 12, 255, 1, // Opcode: FCOR_W
/* 12182 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 12197
/* 12187 */   MCD_OPC_CheckPredicate, 30, 42, 19, 0, // Skip to: 17098
/* 12192 */   MCD_OPC_Decode, 161, 12, 128, 2, // Opcode: FCOR_D
/* 12197 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 12212
/* 12202 */   MCD_OPC_CheckPredicate, 30, 27, 19, 0, // Skip to: 17098
/* 12207 */   MCD_OPC_Decode, 170, 12, 255, 1, // Opcode: FCUNE_W
/* 12212 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 12227
/* 12217 */   MCD_OPC_CheckPredicate, 30, 12, 19, 0, // Skip to: 17098
/* 12222 */   MCD_OPC_Decode, 169, 12, 128, 2, // Opcode: FCUNE_D
/* 12227 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 12242
/* 12232 */   MCD_OPC_CheckPredicate, 30, 253, 18, 0, // Skip to: 17098
/* 12237 */   MCD_OPC_Decode, 160, 12, 255, 1, // Opcode: FCNE_W
/* 12242 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 12257
/* 12247 */   MCD_OPC_CheckPredicate, 30, 238, 18, 0, // Skip to: 17098
/* 12252 */   MCD_OPC_Decode, 159, 12, 128, 2, // Opcode: FCNE_D
/* 12257 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 12272
/* 12262 */   MCD_OPC_CheckPredicate, 30, 223, 18, 0, // Skip to: 17098
/* 12267 */   MCD_OPC_Decode, 173, 17, 254, 1, // Opcode: MUL_Q_H
/* 12272 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 12287
/* 12277 */   MCD_OPC_CheckPredicate, 30, 208, 18, 0, // Skip to: 17098
/* 12282 */   MCD_OPC_Decode, 174, 17, 255, 1, // Opcode: MUL_Q_W
/* 12287 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 12302
/* 12292 */   MCD_OPC_CheckPredicate, 30, 193, 18, 0, // Skip to: 17098
/* 12297 */   MCD_OPC_Decode, 162, 15, 130, 2, // Opcode: MADD_Q_H
/* 12302 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 12317
/* 12307 */   MCD_OPC_CheckPredicate, 30, 178, 18, 0, // Skip to: 17098
/* 12312 */   MCD_OPC_Decode, 163, 15, 131, 2, // Opcode: MADD_Q_W
/* 12317 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 12332
/* 12322 */   MCD_OPC_CheckPredicate, 30, 163, 18, 0, // Skip to: 17098
/* 12327 */   MCD_OPC_Decode, 213, 16, 130, 2, // Opcode: MSUB_Q_H
/* 12332 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 12347
/* 12337 */   MCD_OPC_CheckPredicate, 30, 148, 18, 0, // Skip to: 17098
/* 12342 */   MCD_OPC_Decode, 214, 16, 131, 2, // Opcode: MSUB_Q_W
/* 12347 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 12362
/* 12352 */   MCD_OPC_CheckPredicate, 30, 133, 18, 0, // Skip to: 17098
/* 12357 */   MCD_OPC_Decode, 142, 13, 255, 1, // Opcode: FSOR_W
/* 12362 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 12377
/* 12367 */   MCD_OPC_CheckPredicate, 30, 118, 18, 0, // Skip to: 17098
/* 12372 */   MCD_OPC_Decode, 141, 13, 128, 2, // Opcode: FSOR_D
/* 12377 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 12392
/* 12382 */   MCD_OPC_CheckPredicate, 30, 103, 18, 0, // Skip to: 17098
/* 12387 */   MCD_OPC_Decode, 168, 13, 255, 1, // Opcode: FSUNE_W
/* 12392 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 12407
/* 12397 */   MCD_OPC_CheckPredicate, 30, 88, 18, 0, // Skip to: 17098
/* 12402 */   MCD_OPC_Decode, 167, 13, 128, 2, // Opcode: FSUNE_D
/* 12407 */   MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 12422
/* 12412 */   MCD_OPC_CheckPredicate, 30, 73, 18, 0, // Skip to: 17098
/* 12417 */   MCD_OPC_Decode, 140, 13, 255, 1, // Opcode: FSNE_W
/* 12422 */   MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 12437
/* 12427 */   MCD_OPC_CheckPredicate, 30, 58, 18, 0, // Skip to: 17098
/* 12432 */   MCD_OPC_Decode, 139, 13, 128, 2, // Opcode: FSNE_D
/* 12437 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 12452
/* 12442 */   MCD_OPC_CheckPredicate, 30, 43, 18, 0, // Skip to: 17098
/* 12447 */   MCD_OPC_Decode, 149, 17, 254, 1, // Opcode: MULR_Q_H
/* 12452 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 12467
/* 12457 */   MCD_OPC_CheckPredicate, 30, 28, 18, 0, // Skip to: 17098
/* 12462 */   MCD_OPC_Decode, 150, 17, 255, 1, // Opcode: MULR_Q_W
/* 12467 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 12482
/* 12472 */   MCD_OPC_CheckPredicate, 30, 13, 18, 0, // Skip to: 17098
/* 12477 */   MCD_OPC_Decode, 146, 15, 130, 2, // Opcode: MADDR_Q_H
/* 12482 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 12497
/* 12487 */   MCD_OPC_CheckPredicate, 30, 254, 17, 0, // Skip to: 17098
/* 12492 */   MCD_OPC_Decode, 147, 15, 131, 2, // Opcode: MADDR_Q_W
/* 12497 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 12512
/* 12502 */   MCD_OPC_CheckPredicate, 30, 239, 17, 0, // Skip to: 17098
/* 12507 */   MCD_OPC_Decode, 197, 16, 130, 2, // Opcode: MSUBR_Q_H
/* 12512 */   MCD_OPC_FilterValue, 29, 229, 17, 0, // Skip to: 17098
/* 12517 */   MCD_OPC_CheckPredicate, 30, 224, 17, 0, // Skip to: 17098
/* 12522 */   MCD_OPC_Decode, 198, 16, 131, 2, // Opcode: MSUBR_Q_W
/* 12527 */   MCD_OPC_FilterValue, 30, 76, 3, 0, // Skip to: 13376
/* 12532 */   MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 12535 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 12550
/* 12540 */   MCD_OPC_CheckPredicate, 30, 201, 17, 0, // Skip to: 17098
/* 12545 */   MCD_OPC_Decode, 155, 6, 253, 1, // Opcode: AND_V
/* 12550 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 12565
/* 12555 */   MCD_OPC_CheckPredicate, 30, 186, 17, 0, // Skip to: 17098
/* 12560 */   MCD_OPC_Decode, 218, 17, 253, 1, // Opcode: OR_V
/* 12565 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 12580
/* 12570 */   MCD_OPC_CheckPredicate, 30, 171, 17, 0, // Skip to: 17098
/* 12575 */   MCD_OPC_Decode, 205, 17, 253, 1, // Opcode: NOR_V
/* 12580 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 12595
/* 12585 */   MCD_OPC_CheckPredicate, 30, 156, 17, 0, // Skip to: 17098
/* 12590 */   MCD_OPC_Decode, 143, 22, 253, 1, // Opcode: XOR_V
/* 12595 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 12610
/* 12600 */   MCD_OPC_CheckPredicate, 30, 141, 17, 0, // Skip to: 17098
/* 12605 */   MCD_OPC_Decode, 198, 7, 129, 2, // Opcode: BMNZ_V
/* 12610 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 12625
/* 12615 */   MCD_OPC_CheckPredicate, 30, 126, 17, 0, // Skip to: 17098
/* 12620 */   MCD_OPC_Decode, 200, 7, 129, 2, // Opcode: BMZ_V
/* 12625 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 12640
/* 12630 */   MCD_OPC_CheckPredicate, 30, 111, 17, 0, // Skip to: 17098
/* 12635 */   MCD_OPC_Decode, 242, 7, 129, 2, // Opcode: BSEL_V
/* 12640 */   MCD_OPC_FilterValue, 24, 243, 0, 0, // Skip to: 12888
/* 12645 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 12648 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 12663
/* 12653 */   MCD_OPC_CheckPredicate, 30, 88, 17, 0, // Skip to: 17098
/* 12658 */   MCD_OPC_Decode, 198, 12, 169, 2, // Opcode: FILL_B
/* 12663 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 12678
/* 12668 */   MCD_OPC_CheckPredicate, 30, 73, 17, 0, // Skip to: 17098
/* 12673 */   MCD_OPC_Decode, 200, 12, 170, 2, // Opcode: FILL_H
/* 12678 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 12693
/* 12683 */   MCD_OPC_CheckPredicate, 30, 58, 17, 0, // Skip to: 17098
/* 12688 */   MCD_OPC_Decode, 201, 12, 171, 2, // Opcode: FILL_W
/* 12693 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 12708
/* 12698 */   MCD_OPC_CheckPredicate, 38, 43, 17, 0, // Skip to: 17098
/* 12703 */   MCD_OPC_Decode, 199, 12, 172, 2, // Opcode: FILL_D
/* 12708 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 12723
/* 12713 */   MCD_OPC_CheckPredicate, 30, 28, 17, 0, // Skip to: 17098
/* 12718 */   MCD_OPC_Decode, 236, 17, 161, 2, // Opcode: PCNT_B
/* 12723 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 12738
/* 12728 */   MCD_OPC_CheckPredicate, 30, 13, 17, 0, // Skip to: 17098
/* 12733 */   MCD_OPC_Decode, 238, 17, 173, 2, // Opcode: PCNT_H
/* 12738 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 12753
/* 12743 */   MCD_OPC_CheckPredicate, 30, 254, 16, 0, // Skip to: 17098
/* 12748 */   MCD_OPC_Decode, 239, 17, 174, 2, // Opcode: PCNT_W
/* 12753 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 12768
/* 12758 */   MCD_OPC_CheckPredicate, 30, 239, 16, 0, // Skip to: 17098
/* 12763 */   MCD_OPC_Decode, 237, 17, 175, 2, // Opcode: PCNT_D
/* 12768 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 12783
/* 12773 */   MCD_OPC_CheckPredicate, 30, 224, 16, 0, // Skip to: 17098
/* 12778 */   MCD_OPC_Decode, 182, 17, 161, 2, // Opcode: NLOC_B
/* 12783 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 12798
/* 12788 */   MCD_OPC_CheckPredicate, 30, 209, 16, 0, // Skip to: 17098
/* 12793 */   MCD_OPC_Decode, 184, 17, 173, 2, // Opcode: NLOC_H
/* 12798 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 12813
/* 12803 */   MCD_OPC_CheckPredicate, 30, 194, 16, 0, // Skip to: 17098
/* 12808 */   MCD_OPC_Decode, 185, 17, 174, 2, // Opcode: NLOC_W
/* 12813 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 12828
/* 12818 */   MCD_OPC_CheckPredicate, 30, 179, 16, 0, // Skip to: 17098
/* 12823 */   MCD_OPC_Decode, 183, 17, 175, 2, // Opcode: NLOC_D
/* 12828 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 12843
/* 12833 */   MCD_OPC_CheckPredicate, 30, 164, 16, 0, // Skip to: 17098
/* 12838 */   MCD_OPC_Decode, 186, 17, 161, 2, // Opcode: NLZC_B
/* 12843 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 12858
/* 12848 */   MCD_OPC_CheckPredicate, 30, 149, 16, 0, // Skip to: 17098
/* 12853 */   MCD_OPC_Decode, 188, 17, 173, 2, // Opcode: NLZC_H
/* 12858 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 12873
/* 12863 */   MCD_OPC_CheckPredicate, 30, 134, 16, 0, // Skip to: 17098
/* 12868 */   MCD_OPC_Decode, 189, 17, 174, 2, // Opcode: NLZC_W
/* 12873 */   MCD_OPC_FilterValue, 15, 124, 16, 0, // Skip to: 17098
/* 12878 */   MCD_OPC_CheckPredicate, 30, 119, 16, 0, // Skip to: 17098
/* 12883 */   MCD_OPC_Decode, 187, 17, 175, 2, // Opcode: NLZC_D
/* 12888 */   MCD_OPC_FilterValue, 25, 109, 16, 0, // Skip to: 17098
/* 12893 */   MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 12896 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 12911
/* 12901 */   MCD_OPC_CheckPredicate, 30, 96, 16, 0, // Skip to: 17098
/* 12906 */   MCD_OPC_Decode, 149, 12, 174, 2, // Opcode: FCLASS_W
/* 12911 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 12926
/* 12916 */   MCD_OPC_CheckPredicate, 30, 81, 16, 0, // Skip to: 17098
/* 12921 */   MCD_OPC_Decode, 148, 12, 175, 2, // Opcode: FCLASS_D
/* 12926 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 12941
/* 12931 */   MCD_OPC_CheckPredicate, 30, 66, 16, 0, // Skip to: 17098
/* 12936 */   MCD_OPC_Decode, 178, 13, 174, 2, // Opcode: FTRUNC_S_W
/* 12941 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 12956
/* 12946 */   MCD_OPC_CheckPredicate, 30, 51, 16, 0, // Skip to: 17098
/* 12951 */   MCD_OPC_Decode, 177, 13, 175, 2, // Opcode: FTRUNC_S_D
/* 12956 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 12971
/* 12961 */   MCD_OPC_CheckPredicate, 30, 36, 16, 0, // Skip to: 17098
/* 12966 */   MCD_OPC_Decode, 180, 13, 174, 2, // Opcode: FTRUNC_U_W
/* 12971 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 12986
/* 12976 */   MCD_OPC_CheckPredicate, 30, 21, 16, 0, // Skip to: 17098
/* 12981 */   MCD_OPC_Decode, 179, 13, 175, 2, // Opcode: FTRUNC_U_D
/* 12986 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 13001
/* 12991 */   MCD_OPC_CheckPredicate, 30, 6, 16, 0, // Skip to: 17098
/* 12996 */   MCD_OPC_Decode, 150, 13, 174, 2, // Opcode: FSQRT_W
/* 13001 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 13016
/* 13006 */   MCD_OPC_CheckPredicate, 30, 247, 15, 0, // Skip to: 17098
/* 13011 */   MCD_OPC_Decode, 143, 13, 175, 2, // Opcode: FSQRT_D
/* 13016 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 13031
/* 13021 */   MCD_OPC_CheckPredicate, 30, 232, 15, 0, // Skip to: 17098
/* 13026 */   MCD_OPC_Decode, 130, 13, 174, 2, // Opcode: FRSQRT_W
/* 13031 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 13046
/* 13036 */   MCD_OPC_CheckPredicate, 30, 217, 15, 0, // Skip to: 17098
/* 13041 */   MCD_OPC_Decode, 129, 13, 175, 2, // Opcode: FRSQRT_D
/* 13046 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 13061
/* 13051 */   MCD_OPC_CheckPredicate, 30, 202, 15, 0, // Skip to: 17098
/* 13056 */   MCD_OPC_Decode, 254, 12, 174, 2, // Opcode: FRCP_W
/* 13061 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 13076
/* 13066 */   MCD_OPC_CheckPredicate, 30, 187, 15, 0, // Skip to: 17098
/* 13071 */   MCD_OPC_Decode, 253, 12, 175, 2, // Opcode: FRCP_D
/* 13076 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 13091
/* 13081 */   MCD_OPC_CheckPredicate, 30, 172, 15, 0, // Skip to: 17098
/* 13086 */   MCD_OPC_Decode, 128, 13, 174, 2, // Opcode: FRINT_W
/* 13091 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 13106
/* 13096 */   MCD_OPC_CheckPredicate, 30, 157, 15, 0, // Skip to: 17098
/* 13101 */   MCD_OPC_Decode, 255, 12, 175, 2, // Opcode: FRINT_D
/* 13106 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 13121
/* 13111 */   MCD_OPC_CheckPredicate, 30, 142, 15, 0, // Skip to: 17098
/* 13116 */   MCD_OPC_Decode, 203, 12, 174, 2, // Opcode: FLOG2_W
/* 13121 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 13136
/* 13126 */   MCD_OPC_CheckPredicate, 30, 127, 15, 0, // Skip to: 17098
/* 13131 */   MCD_OPC_Decode, 202, 12, 175, 2, // Opcode: FLOG2_D
/* 13136 */   MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 13151
/* 13141 */   MCD_OPC_CheckPredicate, 30, 112, 15, 0, // Skip to: 17098
/* 13146 */   MCD_OPC_Decode, 187, 12, 176, 2, // Opcode: FEXUPL_W
/* 13151 */   MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 13166
/* 13156 */   MCD_OPC_CheckPredicate, 30, 97, 15, 0, // Skip to: 17098
/* 13161 */   MCD_OPC_Decode, 186, 12, 177, 2, // Opcode: FEXUPL_D
/* 13166 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 13181
/* 13171 */   MCD_OPC_CheckPredicate, 30, 82, 15, 0, // Skip to: 17098
/* 13176 */   MCD_OPC_Decode, 189, 12, 176, 2, // Opcode: FEXUPR_W
/* 13181 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 13196
/* 13186 */   MCD_OPC_CheckPredicate, 30, 67, 15, 0, // Skip to: 17098
/* 13191 */   MCD_OPC_Decode, 188, 12, 177, 2, // Opcode: FEXUPR_D
/* 13196 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 13211
/* 13201 */   MCD_OPC_CheckPredicate, 30, 52, 15, 0, // Skip to: 17098
/* 13206 */   MCD_OPC_Decode, 195, 12, 176, 2, // Opcode: FFQL_W
/* 13211 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 13226
/* 13216 */   MCD_OPC_CheckPredicate, 30, 37, 15, 0, // Skip to: 17098
/* 13221 */   MCD_OPC_Decode, 194, 12, 177, 2, // Opcode: FFQL_D
/* 13226 */   MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 13241
/* 13231 */   MCD_OPC_CheckPredicate, 30, 22, 15, 0, // Skip to: 17098
/* 13236 */   MCD_OPC_Decode, 197, 12, 176, 2, // Opcode: FFQR_W
/* 13241 */   MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 13256
/* 13246 */   MCD_OPC_CheckPredicate, 30, 7, 15, 0, // Skip to: 17098
/* 13251 */   MCD_OPC_Decode, 196, 12, 177, 2, // Opcode: FFQR_D
/* 13256 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 13271
/* 13261 */   MCD_OPC_CheckPredicate, 30, 248, 14, 0, // Skip to: 17098
/* 13266 */   MCD_OPC_Decode, 172, 13, 174, 2, // Opcode: FTINT_S_W
/* 13271 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 13286
/* 13276 */   MCD_OPC_CheckPredicate, 30, 233, 14, 0, // Skip to: 17098
/* 13281 */   MCD_OPC_Decode, 171, 13, 175, 2, // Opcode: FTINT_S_D
/* 13286 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 13301
/* 13291 */   MCD_OPC_CheckPredicate, 30, 218, 14, 0, // Skip to: 17098
/* 13296 */   MCD_OPC_Decode, 174, 13, 174, 2, // Opcode: FTINT_U_W
/* 13301 */   MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 13316
/* 13306 */   MCD_OPC_CheckPredicate, 30, 203, 14, 0, // Skip to: 17098
/* 13311 */   MCD_OPC_Decode, 173, 13, 175, 2, // Opcode: FTINT_U_D
/* 13316 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 13331
/* 13321 */   MCD_OPC_CheckPredicate, 30, 188, 14, 0, // Skip to: 17098
/* 13326 */   MCD_OPC_Decode, 191, 12, 174, 2, // Opcode: FFINT_S_W
/* 13331 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 13346
/* 13336 */   MCD_OPC_CheckPredicate, 30, 173, 14, 0, // Skip to: 17098
/* 13341 */   MCD_OPC_Decode, 190, 12, 175, 2, // Opcode: FFINT_S_D
/* 13346 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 13361
/* 13351 */   MCD_OPC_CheckPredicate, 30, 158, 14, 0, // Skip to: 17098
/* 13356 */   MCD_OPC_Decode, 193, 12, 174, 2, // Opcode: FFINT_U_W
/* 13361 */   MCD_OPC_FilterValue, 31, 148, 14, 0, // Skip to: 17098
/* 13366 */   MCD_OPC_CheckPredicate, 30, 143, 14, 0, // Skip to: 17098
/* 13371 */   MCD_OPC_Decode, 192, 12, 175, 2, // Opcode: FFINT_U_D
/* 13376 */   MCD_OPC_FilterValue, 32, 10, 0, 0, // Skip to: 13391
/* 13381 */   MCD_OPC_CheckPredicate, 30, 128, 14, 0, // Skip to: 17098
/* 13386 */   MCD_OPC_Decode, 175, 14, 178, 2, // Opcode: LD_B
/* 13391 */   MCD_OPC_FilterValue, 33, 10, 0, 0, // Skip to: 13406
/* 13396 */   MCD_OPC_CheckPredicate, 30, 113, 14, 0, // Skip to: 17098
/* 13401 */   MCD_OPC_Decode, 177, 14, 178, 2, // Opcode: LD_H
/* 13406 */   MCD_OPC_FilterValue, 34, 10, 0, 0, // Skip to: 13421
/* 13411 */   MCD_OPC_CheckPredicate, 30, 98, 14, 0, // Skip to: 17098
/* 13416 */   MCD_OPC_Decode, 178, 14, 178, 2, // Opcode: LD_W
/* 13421 */   MCD_OPC_FilterValue, 35, 10, 0, 0, // Skip to: 13436
/* 13426 */   MCD_OPC_CheckPredicate, 30, 83, 14, 0, // Skip to: 17098
/* 13431 */   MCD_OPC_Decode, 176, 14, 178, 2, // Opcode: LD_D
/* 13436 */   MCD_OPC_FilterValue, 36, 10, 0, 0, // Skip to: 13451
/* 13441 */   MCD_OPC_CheckPredicate, 30, 68, 14, 0, // Skip to: 17098
/* 13446 */   MCD_OPC_Decode, 186, 20, 178, 2, // Opcode: ST_B
/* 13451 */   MCD_OPC_FilterValue, 37, 10, 0, 0, // Skip to: 13466
/* 13456 */   MCD_OPC_CheckPredicate, 30, 53, 14, 0, // Skip to: 17098
/* 13461 */   MCD_OPC_Decode, 188, 20, 178, 2, // Opcode: ST_H
/* 13466 */   MCD_OPC_FilterValue, 38, 10, 0, 0, // Skip to: 13481
/* 13471 */   MCD_OPC_CheckPredicate, 30, 38, 14, 0, // Skip to: 17098
/* 13476 */   MCD_OPC_Decode, 189, 20, 178, 2, // Opcode: ST_W
/* 13481 */   MCD_OPC_FilterValue, 39, 28, 14, 0, // Skip to: 17098
/* 13486 */   MCD_OPC_CheckPredicate, 30, 23, 14, 0, // Skip to: 17098
/* 13491 */   MCD_OPC_Decode, 187, 20, 178, 2, // Opcode: ST_D
/* 13496 */   MCD_OPC_FilterValue, 31, 165, 12, 0, // Skip to: 16738
/* 13501 */   MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 13504 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 13519
/* 13509 */   MCD_OPC_CheckPredicate, 28, 0, 14, 0, // Skip to: 17098
/* 13514 */   MCD_OPC_Decode, 227, 11, 179, 2, // Opcode: EXT
/* 13519 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 13534
/* 13524 */   MCD_OPC_CheckPredicate, 28, 241, 13, 0, // Skip to: 17098
/* 13529 */   MCD_OPC_Decode, 215, 13, 180, 2, // Opcode: INS
/* 13534 */   MCD_OPC_FilterValue, 8, 17, 0, 0, // Skip to: 13556
/* 13539 */   MCD_OPC_CheckPredicate, 42, 226, 13, 0, // Skip to: 17098
/* 13544 */   MCD_OPC_CheckField, 6, 5, 0, 219, 13, 0, // Skip to: 17098
/* 13551 */   MCD_OPC_Decode, 252, 12, 181, 2, // Opcode: FORK
/* 13556 */   MCD_OPC_FilterValue, 9, 23, 0, 0, // Skip to: 13584
/* 13561 */   MCD_OPC_CheckPredicate, 42, 204, 13, 0, // Skip to: 17098
/* 13566 */   MCD_OPC_CheckField, 16, 5, 0, 197, 13, 0, // Skip to: 17098
/* 13573 */   MCD_OPC_CheckField, 6, 5, 0, 190, 13, 0, // Skip to: 17098
/* 13580 */   MCD_OPC_Decode, 148, 22, 14, // Opcode: YIELD
/* 13584 */   MCD_OPC_FilterValue, 10, 48, 0, 0, // Skip to: 13637
/* 13589 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 13592 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 13607
/* 13597 */   MCD_OPC_CheckPredicate, 37, 168, 13, 0, // Skip to: 17098
/* 13602 */   MCD_OPC_Decode, 250, 14, 182, 2, // Opcode: LWX
/* 13607 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 13622
/* 13612 */   MCD_OPC_CheckPredicate, 37, 153, 13, 0, // Skip to: 17098
/* 13617 */   MCD_OPC_Decode, 187, 14, 182, 2, // Opcode: LHX
/* 13622 */   MCD_OPC_FilterValue, 6, 143, 13, 0, // Skip to: 17098
/* 13627 */   MCD_OPC_CheckPredicate, 37, 138, 13, 0, // Skip to: 17098
/* 13632 */   MCD_OPC_Decode, 147, 14, 182, 2, // Opcode: LBUX
/* 13637 */   MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 13659
/* 13642 */   MCD_OPC_CheckPredicate, 37, 123, 13, 0, // Skip to: 17098
/* 13647 */   MCD_OPC_CheckField, 6, 10, 0, 116, 13, 0, // Skip to: 17098
/* 13654 */   MCD_OPC_Decode, 220, 13, 183, 2, // Opcode: INSV
/* 13659 */   MCD_OPC_FilterValue, 16, 109, 1, 0, // Skip to: 14029
/* 13664 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 13667 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 13682
/* 13672 */   MCD_OPC_CheckPredicate, 37, 93, 13, 0, // Skip to: 17098
/* 13677 */   MCD_OPC_Decode, 241, 5, 184, 2, // Opcode: ADDU_QB
/* 13682 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 13697
/* 13687 */   MCD_OPC_CheckPredicate, 37, 78, 13, 0, // Skip to: 17098
/* 13692 */   MCD_OPC_Decode, 230, 20, 184, 2, // Opcode: SUBU_QB
/* 13697 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 13712
/* 13702 */   MCD_OPC_CheckPredicate, 37, 63, 13, 0, // Skip to: 17098
/* 13707 */   MCD_OPC_Decode, 245, 5, 184, 2, // Opcode: ADDU_S_QB
/* 13712 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 13727
/* 13717 */   MCD_OPC_CheckPredicate, 37, 48, 13, 0, // Skip to: 17098
/* 13722 */   MCD_OPC_Decode, 234, 20, 184, 2, // Opcode: SUBU_S_QB
/* 13727 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 13742
/* 13732 */   MCD_OPC_CheckPredicate, 37, 33, 13, 0, // Skip to: 17098
/* 13737 */   MCD_OPC_Decode, 136, 17, 184, 2, // Opcode: MULEU_S_PH_QBL
/* 13742 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 13757
/* 13747 */   MCD_OPC_CheckPredicate, 37, 18, 13, 0, // Skip to: 17098
/* 13752 */   MCD_OPC_Decode, 138, 17, 184, 2, // Opcode: MULEU_S_PH_QBR
/* 13757 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 13772
/* 13762 */   MCD_OPC_CheckPredicate, 69, 3, 13, 0, // Skip to: 17098
/* 13767 */   MCD_OPC_Decode, 239, 5, 184, 2, // Opcode: ADDU_PH
/* 13772 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 13787
/* 13777 */   MCD_OPC_CheckPredicate, 69, 244, 12, 0, // Skip to: 17098
/* 13782 */   MCD_OPC_Decode, 228, 20, 184, 2, // Opcode: SUBU_PH
/* 13787 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 13802
/* 13792 */   MCD_OPC_CheckPredicate, 37, 229, 12, 0, // Skip to: 17098
/* 13797 */   MCD_OPC_Decode, 211, 5, 184, 2, // Opcode: ADDQ_PH
/* 13802 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 13817
/* 13807 */   MCD_OPC_CheckPredicate, 37, 214, 12, 0, // Skip to: 17098
/* 13812 */   MCD_OPC_Decode, 199, 20, 184, 2, // Opcode: SUBQ_PH
/* 13817 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 13832
/* 13822 */   MCD_OPC_CheckPredicate, 69, 199, 12, 0, // Skip to: 17098
/* 13827 */   MCD_OPC_Decode, 243, 5, 184, 2, // Opcode: ADDU_S_PH
/* 13832 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 13847
/* 13837 */   MCD_OPC_CheckPredicate, 69, 184, 12, 0, // Skip to: 17098
/* 13842 */   MCD_OPC_Decode, 232, 20, 184, 2, // Opcode: SUBU_S_PH
/* 13847 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 13862
/* 13852 */   MCD_OPC_CheckPredicate, 37, 169, 12, 0, // Skip to: 17098
/* 13857 */   MCD_OPC_Decode, 213, 5, 184, 2, // Opcode: ADDQ_S_PH
/* 13862 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 13877
/* 13867 */   MCD_OPC_CheckPredicate, 37, 154, 12, 0, // Skip to: 17098
/* 13872 */   MCD_OPC_Decode, 201, 20, 184, 2, // Opcode: SUBQ_S_PH
/* 13877 */   MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 13891
/* 13882 */   MCD_OPC_CheckPredicate, 37, 139, 12, 0, // Skip to: 17098
/* 13887 */   MCD_OPC_Decode, 218, 5, 50, // Opcode: ADDSC
/* 13891 */   MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 13905
/* 13896 */   MCD_OPC_CheckPredicate, 37, 125, 12, 0, // Skip to: 17098
/* 13901 */   MCD_OPC_Decode, 255, 5, 50, // Opcode: ADDWC
/* 13905 */   MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 13919
/* 13910 */   MCD_OPC_CheckPredicate, 37, 111, 12, 0, // Skip to: 17098
/* 13915 */   MCD_OPC_Decode, 134, 16, 50, // Opcode: MODSUB
/* 13919 */   MCD_OPC_FilterValue, 20, 17, 0, 0, // Skip to: 13941
/* 13924 */   MCD_OPC_CheckPredicate, 37, 97, 12, 0, // Skip to: 17098
/* 13929 */   MCD_OPC_CheckField, 16, 5, 0, 90, 12, 0, // Skip to: 17098
/* 13936 */   MCD_OPC_Decode, 164, 18, 185, 2, // Opcode: RADDU_W_QB
/* 13941 */   MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 13955
/* 13946 */   MCD_OPC_CheckPredicate, 37, 75, 12, 0, // Skip to: 17098
/* 13951 */   MCD_OPC_Decode, 215, 5, 50, // Opcode: ADDQ_S_W
/* 13955 */   MCD_OPC_FilterValue, 23, 9, 0, 0, // Skip to: 13969
/* 13960 */   MCD_OPC_CheckPredicate, 37, 61, 12, 0, // Skip to: 17098
/* 13965 */   MCD_OPC_Decode, 203, 20, 50, // Opcode: SUBQ_S_W
/* 13969 */   MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 13984
/* 13974 */   MCD_OPC_CheckPredicate, 37, 47, 12, 0, // Skip to: 17098
/* 13979 */   MCD_OPC_Decode, 132, 17, 186, 2, // Opcode: MULEQ_S_W_PHL
/* 13984 */   MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 13999
/* 13989 */   MCD_OPC_CheckPredicate, 37, 32, 12, 0, // Skip to: 17098
/* 13994 */   MCD_OPC_Decode, 134, 17, 186, 2, // Opcode: MULEQ_S_W_PHR
/* 13999 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 14014
/* 14004 */   MCD_OPC_CheckPredicate, 69, 17, 12, 0, // Skip to: 17098
/* 14009 */   MCD_OPC_Decode, 144, 17, 184, 2, // Opcode: MULQ_S_PH
/* 14014 */   MCD_OPC_FilterValue, 31, 7, 12, 0, // Skip to: 17098
/* 14019 */   MCD_OPC_CheckPredicate, 37, 2, 12, 0, // Skip to: 17098
/* 14024 */   MCD_OPC_Decode, 140, 17, 184, 2, // Opcode: MULQ_RS_PH
/* 14029 */   MCD_OPC_FilterValue, 17, 113, 1, 0, // Skip to: 14403
/* 14034 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 14037 */   MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 14058
/* 14042 */   MCD_OPC_CheckPredicate, 37, 235, 11, 0, // Skip to: 17098
/* 14047 */   MCD_OPC_CheckField, 11, 5, 0, 228, 11, 0, // Skip to: 17098
/* 14054 */   MCD_OPC_Decode, 228, 8, 68, // Opcode: CMPU_EQ_QB
/* 14058 */   MCD_OPC_FilterValue, 1, 16, 0, 0, // Skip to: 14079
/* 14063 */   MCD_OPC_CheckPredicate, 37, 214, 11, 0, // Skip to: 17098
/* 14068 */   MCD_OPC_CheckField, 11, 5, 0, 207, 11, 0, // Skip to: 17098
/* 14075 */   MCD_OPC_Decode, 232, 8, 68, // Opcode: CMPU_LT_QB
/* 14079 */   MCD_OPC_FilterValue, 2, 16, 0, 0, // Skip to: 14100
/* 14084 */   MCD_OPC_CheckPredicate, 37, 193, 11, 0, // Skip to: 17098
/* 14089 */   MCD_OPC_CheckField, 11, 5, 0, 186, 11, 0, // Skip to: 17098
/* 14096 */   MCD_OPC_Decode, 230, 8, 68, // Opcode: CMPU_LE_QB
/* 14100 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 14115
/* 14105 */   MCD_OPC_CheckPredicate, 37, 172, 11, 0, // Skip to: 17098
/* 14110 */   MCD_OPC_Decode, 242, 17, 184, 2, // Opcode: PICK_QB
/* 14115 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 14130
/* 14120 */   MCD_OPC_CheckPredicate, 37, 157, 11, 0, // Skip to: 17098
/* 14125 */   MCD_OPC_Decode, 222, 8, 186, 2, // Opcode: CMPGU_EQ_QB
/* 14130 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 14145
/* 14135 */   MCD_OPC_CheckPredicate, 37, 142, 11, 0, // Skip to: 17098
/* 14140 */   MCD_OPC_Decode, 226, 8, 186, 2, // Opcode: CMPGU_LT_QB
/* 14145 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 14160
/* 14150 */   MCD_OPC_CheckPredicate, 37, 127, 11, 0, // Skip to: 17098
/* 14155 */   MCD_OPC_Decode, 224, 8, 186, 2, // Opcode: CMPGU_LE_QB
/* 14160 */   MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 14181
/* 14165 */   MCD_OPC_CheckPredicate, 37, 112, 11, 0, // Skip to: 17098
/* 14170 */   MCD_OPC_CheckField, 11, 5, 0, 105, 11, 0, // Skip to: 17098
/* 14177 */   MCD_OPC_Decode, 238, 8, 68, // Opcode: CMP_EQ_PH
/* 14181 */   MCD_OPC_FilterValue, 9, 16, 0, 0, // Skip to: 14202
/* 14186 */   MCD_OPC_CheckPredicate, 37, 91, 11, 0, // Skip to: 17098
/* 14191 */   MCD_OPC_CheckField, 11, 5, 0, 84, 11, 0, // Skip to: 17098
/* 14198 */   MCD_OPC_Decode, 252, 8, 68, // Opcode: CMP_LT_PH
/* 14202 */   MCD_OPC_FilterValue, 10, 16, 0, 0, // Skip to: 14223
/* 14207 */   MCD_OPC_CheckPredicate, 37, 70, 11, 0, // Skip to: 17098
/* 14212 */   MCD_OPC_CheckField, 11, 5, 0, 63, 11, 0, // Skip to: 17098
/* 14219 */   MCD_OPC_Decode, 246, 8, 68, // Opcode: CMP_LE_PH
/* 14223 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 14238
/* 14228 */   MCD_OPC_CheckPredicate, 37, 49, 11, 0, // Skip to: 17098
/* 14233 */   MCD_OPC_Decode, 240, 17, 184, 2, // Opcode: PICK_PH
/* 14238 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 14253
/* 14243 */   MCD_OPC_CheckPredicate, 37, 34, 11, 0, // Skip to: 17098
/* 14248 */   MCD_OPC_Decode, 143, 18, 184, 2, // Opcode: PRECRQ_QB_PH
/* 14253 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 14268
/* 14258 */   MCD_OPC_CheckPredicate, 69, 19, 11, 0, // Skip to: 17098
/* 14263 */   MCD_OPC_Decode, 147, 18, 184, 2, // Opcode: PRECR_QB_PH
/* 14268 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 14283
/* 14273 */   MCD_OPC_CheckPredicate, 37, 4, 11, 0, // Skip to: 17098
/* 14278 */   MCD_OPC_Decode, 223, 17, 184, 2, // Opcode: PACKRL_PH
/* 14283 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 14298
/* 14288 */   MCD_OPC_CheckPredicate, 37, 245, 10, 0, // Skip to: 17098
/* 14293 */   MCD_OPC_Decode, 139, 18, 184, 2, // Opcode: PRECRQU_S_QB_PH
/* 14298 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 14313
/* 14303 */   MCD_OPC_CheckPredicate, 37, 230, 10, 0, // Skip to: 17098
/* 14308 */   MCD_OPC_Decode, 141, 18, 187, 2, // Opcode: PRECRQ_PH_W
/* 14313 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 14328
/* 14318 */   MCD_OPC_CheckPredicate, 37, 215, 10, 0, // Skip to: 17098
/* 14323 */   MCD_OPC_Decode, 145, 18, 187, 2, // Opcode: PRECRQ_RS_PH_W
/* 14328 */   MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 14343
/* 14333 */   MCD_OPC_CheckPredicate, 69, 200, 10, 0, // Skip to: 17098
/* 14338 */   MCD_OPC_Decode, 216, 8, 186, 2, // Opcode: CMPGDU_EQ_QB
/* 14343 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 14358
/* 14348 */   MCD_OPC_CheckPredicate, 69, 185, 10, 0, // Skip to: 17098
/* 14353 */   MCD_OPC_Decode, 220, 8, 186, 2, // Opcode: CMPGDU_LT_QB
/* 14358 */   MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 14373
/* 14363 */   MCD_OPC_CheckPredicate, 69, 170, 10, 0, // Skip to: 17098
/* 14368 */   MCD_OPC_Decode, 218, 8, 186, 2, // Opcode: CMPGDU_LE_QB
/* 14373 */   MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 14388
/* 14378 */   MCD_OPC_CheckPredicate, 69, 155, 10, 0, // Skip to: 17098
/* 14383 */   MCD_OPC_Decode, 149, 18, 188, 2, // Opcode: PRECR_SRA_PH_W
/* 14388 */   MCD_OPC_FilterValue, 31, 145, 10, 0, // Skip to: 17098
/* 14393 */   MCD_OPC_CheckPredicate, 69, 140, 10, 0, // Skip to: 17098
/* 14398 */   MCD_OPC_Decode, 151, 18, 188, 2, // Opcode: PRECR_SRA_R_PH_W
/* 14403 */   MCD_OPC_FilterValue, 18, 128, 1, 0, // Skip to: 14792
/* 14408 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 14411 */   MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 14433
/* 14416 */   MCD_OPC_CheckPredicate, 69, 117, 10, 0, // Skip to: 17098
/* 14421 */   MCD_OPC_CheckField, 21, 5, 0, 110, 10, 0, // Skip to: 17098
/* 14428 */   MCD_OPC_Decode, 190, 5, 189, 2, // Opcode: ABSQ_S_QB
/* 14433 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 14448
/* 14438 */   MCD_OPC_CheckPredicate, 37, 95, 10, 0, // Skip to: 17098
/* 14443 */   MCD_OPC_Decode, 185, 18, 190, 2, // Opcode: REPL_QB
/* 14448 */   MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 14470
/* 14453 */   MCD_OPC_CheckPredicate, 37, 80, 10, 0, // Skip to: 17098
/* 14458 */   MCD_OPC_CheckField, 21, 5, 0, 73, 10, 0, // Skip to: 17098
/* 14465 */   MCD_OPC_Decode, 181, 18, 191, 2, // Opcode: REPLV_QB
/* 14470 */   MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 14492
/* 14475 */   MCD_OPC_CheckPredicate, 37, 58, 10, 0, // Skip to: 17098
/* 14480 */   MCD_OPC_CheckField, 21, 5, 0, 51, 10, 0, // Skip to: 17098
/* 14487 */   MCD_OPC_Decode, 247, 17, 189, 2, // Opcode: PRECEQU_PH_QBL
/* 14492 */   MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 14514
/* 14497 */   MCD_OPC_CheckPredicate, 37, 36, 10, 0, // Skip to: 17098
/* 14502 */   MCD_OPC_CheckField, 21, 5, 0, 29, 10, 0, // Skip to: 17098
/* 14509 */   MCD_OPC_Decode, 251, 17, 189, 2, // Opcode: PRECEQU_PH_QBR
/* 14514 */   MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 14536
/* 14519 */   MCD_OPC_CheckPredicate, 37, 14, 10, 0, // Skip to: 17098
/* 14524 */   MCD_OPC_CheckField, 21, 5, 0, 7, 10, 0, // Skip to: 17098
/* 14531 */   MCD_OPC_Decode, 248, 17, 189, 2, // Opcode: PRECEQU_PH_QBLA
/* 14536 */   MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 14558
/* 14541 */   MCD_OPC_CheckPredicate, 37, 248, 9, 0, // Skip to: 17098
/* 14546 */   MCD_OPC_CheckField, 21, 5, 0, 241, 9, 0, // Skip to: 17098
/* 14553 */   MCD_OPC_Decode, 252, 17, 189, 2, // Opcode: PRECEQU_PH_QBRA
/* 14558 */   MCD_OPC_FilterValue, 9, 17, 0, 0, // Skip to: 14580
/* 14563 */   MCD_OPC_CheckPredicate, 37, 226, 9, 0, // Skip to: 17098
/* 14568 */   MCD_OPC_CheckField, 21, 5, 0, 219, 9, 0, // Skip to: 17098
/* 14575 */   MCD_OPC_Decode, 188, 5, 189, 2, // Opcode: ABSQ_S_PH
/* 14580 */   MCD_OPC_FilterValue, 10, 9, 0, 0, // Skip to: 14594
/* 14585 */   MCD_OPC_CheckPredicate, 37, 204, 9, 0, // Skip to: 17098
/* 14590 */   MCD_OPC_Decode, 183, 18, 85, // Opcode: REPL_PH
/* 14594 */   MCD_OPC_FilterValue, 11, 17, 0, 0, // Skip to: 14616
/* 14599 */   MCD_OPC_CheckPredicate, 37, 190, 9, 0, // Skip to: 17098
/* 14604 */   MCD_OPC_CheckField, 21, 5, 0, 183, 9, 0, // Skip to: 17098
/* 14611 */   MCD_OPC_Decode, 179, 18, 191, 2, // Opcode: REPLV_PH
/* 14616 */   MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 14638
/* 14621 */   MCD_OPC_CheckPredicate, 37, 168, 9, 0, // Skip to: 17098
/* 14626 */   MCD_OPC_CheckField, 21, 5, 0, 161, 9, 0, // Skip to: 17098
/* 14633 */   MCD_OPC_Decode, 255, 17, 192, 2, // Opcode: PRECEQ_W_PHL
/* 14638 */   MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 14660
/* 14643 */   MCD_OPC_CheckPredicate, 37, 146, 9, 0, // Skip to: 17098
/* 14648 */   MCD_OPC_CheckField, 21, 5, 0, 139, 9, 0, // Skip to: 17098
/* 14655 */   MCD_OPC_Decode, 129, 18, 192, 2, // Opcode: PRECEQ_W_PHR
/* 14660 */   MCD_OPC_FilterValue, 17, 17, 0, 0, // Skip to: 14682
/* 14665 */   MCD_OPC_CheckPredicate, 37, 124, 9, 0, // Skip to: 17098
/* 14670 */   MCD_OPC_CheckField, 21, 5, 0, 117, 9, 0, // Skip to: 17098
/* 14677 */   MCD_OPC_Decode, 192, 5, 193, 2, // Opcode: ABSQ_S_W
/* 14682 */   MCD_OPC_FilterValue, 27, 17, 0, 0, // Skip to: 14704
/* 14687 */   MCD_OPC_CheckPredicate, 37, 102, 9, 0, // Skip to: 17098
/* 14692 */   MCD_OPC_CheckField, 21, 5, 0, 95, 9, 0, // Skip to: 17098
/* 14699 */   MCD_OPC_Decode, 165, 7, 193, 2, // Opcode: BITREV
/* 14704 */   MCD_OPC_FilterValue, 28, 17, 0, 0, // Skip to: 14726
/* 14709 */   MCD_OPC_CheckPredicate, 37, 80, 9, 0, // Skip to: 17098
/* 14714 */   MCD_OPC_CheckField, 21, 5, 0, 73, 9, 0, // Skip to: 17098
/* 14721 */   MCD_OPC_Decode, 131, 18, 189, 2, // Opcode: PRECEU_PH_QBL
/* 14726 */   MCD_OPC_FilterValue, 29, 17, 0, 0, // Skip to: 14748
/* 14731 */   MCD_OPC_CheckPredicate, 37, 58, 9, 0, // Skip to: 17098
/* 14736 */   MCD_OPC_CheckField, 21, 5, 0, 51, 9, 0, // Skip to: 17098
/* 14743 */   MCD_OPC_Decode, 135, 18, 189, 2, // Opcode: PRECEU_PH_QBR
/* 14748 */   MCD_OPC_FilterValue, 30, 17, 0, 0, // Skip to: 14770
/* 14753 */   MCD_OPC_CheckPredicate, 37, 36, 9, 0, // Skip to: 17098
/* 14758 */   MCD_OPC_CheckField, 21, 5, 0, 29, 9, 0, // Skip to: 17098
/* 14765 */   MCD_OPC_Decode, 132, 18, 189, 2, // Opcode: PRECEU_PH_QBLA
/* 14770 */   MCD_OPC_FilterValue, 31, 19, 9, 0, // Skip to: 17098
/* 14775 */   MCD_OPC_CheckPredicate, 37, 14, 9, 0, // Skip to: 17098
/* 14780 */   MCD_OPC_CheckField, 21, 5, 0, 7, 9, 0, // Skip to: 17098
/* 14787 */   MCD_OPC_Decode, 136, 18, 189, 2, // Opcode: PRECEU_PH_QBRA
/* 14792 */   MCD_OPC_FilterValue, 19, 75, 1, 0, // Skip to: 15128
/* 14797 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 14800 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 14815
/* 14805 */   MCD_OPC_CheckPredicate, 37, 240, 8, 0, // Skip to: 17098
/* 14810 */   MCD_OPC_Decode, 184, 19, 194, 2, // Opcode: SHLL_QB
/* 14815 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 14830
/* 14820 */   MCD_OPC_CheckPredicate, 37, 225, 8, 0, // Skip to: 17098
/* 14825 */   MCD_OPC_Decode, 216, 19, 194, 2, // Opcode: SHRL_QB
/* 14830 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 14845
/* 14835 */   MCD_OPC_CheckPredicate, 37, 210, 8, 0, // Skip to: 17098
/* 14840 */   MCD_OPC_Decode, 176, 19, 195, 2, // Opcode: SHLLV_QB
/* 14845 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 14860
/* 14850 */   MCD_OPC_CheckPredicate, 37, 195, 8, 0, // Skip to: 17098
/* 14855 */   MCD_OPC_Decode, 212, 19, 195, 2, // Opcode: SHRLV_QB
/* 14860 */   MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 14875
/* 14865 */   MCD_OPC_CheckPredicate, 69, 180, 8, 0, // Skip to: 17098
/* 14870 */   MCD_OPC_Decode, 202, 19, 194, 2, // Opcode: SHRA_QB
/* 14875 */   MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 14890
/* 14880 */   MCD_OPC_CheckPredicate, 69, 165, 8, 0, // Skip to: 17098
/* 14885 */   MCD_OPC_Decode, 206, 19, 194, 2, // Opcode: SHRA_R_QB
/* 14890 */   MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 14905
/* 14895 */   MCD_OPC_CheckPredicate, 69, 150, 8, 0, // Skip to: 17098
/* 14900 */   MCD_OPC_Decode, 192, 19, 195, 2, // Opcode: SHRAV_QB
/* 14905 */   MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 14920
/* 14910 */   MCD_OPC_CheckPredicate, 69, 135, 8, 0, // Skip to: 17098
/* 14915 */   MCD_OPC_Decode, 196, 19, 195, 2, // Opcode: SHRAV_R_QB
/* 14920 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 14935
/* 14925 */   MCD_OPC_CheckPredicate, 37, 120, 8, 0, // Skip to: 17098
/* 14930 */   MCD_OPC_Decode, 182, 19, 194, 2, // Opcode: SHLL_PH
/* 14935 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 14950
/* 14940 */   MCD_OPC_CheckPredicate, 37, 105, 8, 0, // Skip to: 17098
/* 14945 */   MCD_OPC_Decode, 200, 19, 194, 2, // Opcode: SHRA_PH
/* 14950 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 14965
/* 14955 */   MCD_OPC_CheckPredicate, 37, 90, 8, 0, // Skip to: 17098
/* 14960 */   MCD_OPC_Decode, 174, 19, 195, 2, // Opcode: SHLLV_PH
/* 14965 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 14980
/* 14970 */   MCD_OPC_CheckPredicate, 37, 75, 8, 0, // Skip to: 17098
/* 14975 */   MCD_OPC_Decode, 190, 19, 195, 2, // Opcode: SHRAV_PH
/* 14980 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 14995
/* 14985 */   MCD_OPC_CheckPredicate, 37, 60, 8, 0, // Skip to: 17098
/* 14990 */   MCD_OPC_Decode, 186, 19, 194, 2, // Opcode: SHLL_S_PH
/* 14995 */   MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 15010
/* 15000 */   MCD_OPC_CheckPredicate, 37, 45, 8, 0, // Skip to: 17098
/* 15005 */   MCD_OPC_Decode, 204, 19, 194, 2, // Opcode: SHRA_R_PH
/* 15010 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 15025
/* 15015 */   MCD_OPC_CheckPredicate, 37, 30, 8, 0, // Skip to: 17098
/* 15020 */   MCD_OPC_Decode, 178, 19, 195, 2, // Opcode: SHLLV_S_PH
/* 15025 */   MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 15040
/* 15030 */   MCD_OPC_CheckPredicate, 37, 15, 8, 0, // Skip to: 17098
/* 15035 */   MCD_OPC_Decode, 194, 19, 195, 2, // Opcode: SHRAV_R_PH
/* 15040 */   MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 15055
/* 15045 */   MCD_OPC_CheckPredicate, 37, 0, 8, 0, // Skip to: 17098
/* 15050 */   MCD_OPC_Decode, 188, 19, 196, 2, // Opcode: SHLL_S_W
/* 15055 */   MCD_OPC_FilterValue, 21, 10, 0, 0, // Skip to: 15070
/* 15060 */   MCD_OPC_CheckPredicate, 37, 241, 7, 0, // Skip to: 17098
/* 15065 */   MCD_OPC_Decode, 208, 19, 196, 2, // Opcode: SHRA_R_W
/* 15070 */   MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 15084
/* 15075 */   MCD_OPC_CheckPredicate, 37, 226, 7, 0, // Skip to: 17098
/* 15080 */   MCD_OPC_Decode, 180, 19, 44, // Opcode: SHLLV_S_W
/* 15084 */   MCD_OPC_FilterValue, 23, 9, 0, 0, // Skip to: 15098
/* 15089 */   MCD_OPC_CheckPredicate, 37, 212, 7, 0, // Skip to: 17098
/* 15094 */   MCD_OPC_Decode, 198, 19, 44, // Opcode: SHRAV_R_W
/* 15098 */   MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 15113
/* 15103 */   MCD_OPC_CheckPredicate, 69, 198, 7, 0, // Skip to: 17098
/* 15108 */   MCD_OPC_Decode, 214, 19, 194, 2, // Opcode: SHRL_PH
/* 15113 */   MCD_OPC_FilterValue, 27, 188, 7, 0, // Skip to: 17098
/* 15118 */   MCD_OPC_CheckPredicate, 69, 183, 7, 0, // Skip to: 17098
/* 15123 */   MCD_OPC_Decode, 210, 19, 195, 2, // Opcode: SHRLV_PH
/* 15128 */   MCD_OPC_FilterValue, 24, 237, 0, 0, // Skip to: 15370
/* 15133 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 15136 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 15151
/* 15141 */   MCD_OPC_CheckPredicate, 69, 160, 7, 0, // Skip to: 17098
/* 15146 */   MCD_OPC_Decode, 234, 5, 184, 2, // Opcode: ADDUH_QB
/* 15151 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 15166
/* 15156 */   MCD_OPC_CheckPredicate, 69, 145, 7, 0, // Skip to: 17098
/* 15161 */   MCD_OPC_Decode, 223, 20, 184, 2, // Opcode: SUBUH_QB
/* 15166 */   MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 15181
/* 15171 */   MCD_OPC_CheckPredicate, 69, 130, 7, 0, // Skip to: 17098
/* 15176 */   MCD_OPC_Decode, 236, 5, 184, 2, // Opcode: ADDUH_R_QB
/* 15181 */   MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 15196
/* 15186 */   MCD_OPC_CheckPredicate, 69, 115, 7, 0, // Skip to: 17098
/* 15191 */   MCD_OPC_Decode, 225, 20, 184, 2, // Opcode: SUBUH_R_QB
/* 15196 */   MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 15211
/* 15201 */   MCD_OPC_CheckPredicate, 69, 100, 7, 0, // Skip to: 17098
/* 15206 */   MCD_OPC_Decode, 203, 5, 184, 2, // Opcode: ADDQH_PH
/* 15211 */   MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 15226
/* 15216 */   MCD_OPC_CheckPredicate, 69, 85, 7, 0, // Skip to: 17098
/* 15221 */   MCD_OPC_Decode, 191, 20, 184, 2, // Opcode: SUBQH_PH
/* 15226 */   MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 15241
/* 15231 */   MCD_OPC_CheckPredicate, 69, 70, 7, 0, // Skip to: 17098
/* 15236 */   MCD_OPC_Decode, 205, 5, 184, 2, // Opcode: ADDQH_R_PH
/* 15241 */   MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 15256
/* 15246 */   MCD_OPC_CheckPredicate, 69, 55, 7, 0, // Skip to: 17098
/* 15251 */   MCD_OPC_Decode, 193, 20, 184, 2, // Opcode: SUBQH_R_PH
/* 15256 */   MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 15271
/* 15261 */   MCD_OPC_CheckPredicate, 69, 40, 7, 0, // Skip to: 17098
/* 15266 */   MCD_OPC_Decode, 171, 17, 184, 2, // Opcode: MUL_PH
/* 15271 */   MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 15286
/* 15276 */   MCD_OPC_CheckPredicate, 69, 25, 7, 0, // Skip to: 17098
/* 15281 */   MCD_OPC_Decode, 176, 17, 184, 2, // Opcode: MUL_S_PH
/* 15286 */   MCD_OPC_FilterValue, 16, 9, 0, 0, // Skip to: 15300
/* 15291 */   MCD_OPC_CheckPredicate, 69, 10, 7, 0, // Skip to: 17098
/* 15296 */   MCD_OPC_Decode, 209, 5, 50, // Opcode: ADDQH_W
/* 15300 */   MCD_OPC_FilterValue, 17, 9, 0, 0, // Skip to: 15314
/* 15305 */   MCD_OPC_CheckPredicate, 69, 252, 6, 0, // Skip to: 17098
/* 15310 */   MCD_OPC_Decode, 197, 20, 50, // Opcode: SUBQH_W
/* 15314 */   MCD_OPC_FilterValue, 18, 9, 0, 0, // Skip to: 15328
/* 15319 */   MCD_OPC_CheckPredicate, 69, 238, 6, 0, // Skip to: 17098
/* 15324 */   MCD_OPC_Decode, 207, 5, 50, // Opcode: ADDQH_R_W
/* 15328 */   MCD_OPC_FilterValue, 19, 9, 0, 0, // Skip to: 15342
/* 15333 */   MCD_OPC_CheckPredicate, 69, 224, 6, 0, // Skip to: 17098
/* 15338 */   MCD_OPC_Decode, 195, 20, 50, // Opcode: SUBQH_R_W
/* 15342 */   MCD_OPC_FilterValue, 22, 9, 0, 0, // Skip to: 15356
/* 15347 */   MCD_OPC_CheckPredicate, 69, 210, 6, 0, // Skip to: 17098
/* 15352 */   MCD_OPC_Decode, 146, 17, 50, // Opcode: MULQ_S_W
/* 15356 */   MCD_OPC_FilterValue, 23, 201, 6, 0, // Skip to: 17098
/* 15361 */   MCD_OPC_CheckPredicate, 69, 196, 6, 0, // Skip to: 17098
/* 15366 */   MCD_OPC_Decode, 142, 17, 50, // Opcode: MULQ_RS_W
/* 15370 */   MCD_OPC_FilterValue, 25, 17, 0, 0, // Skip to: 15392
/* 15375 */   MCD_OPC_CheckPredicate, 70, 182, 6, 0, // Skip to: 17098
/* 15380 */   MCD_OPC_CheckField, 6, 1, 0, 175, 6, 0, // Skip to: 17098
/* 15387 */   MCD_OPC_Decode, 233, 14, 197, 2, // Opcode: LWLE
/* 15392 */   MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 15414
/* 15397 */   MCD_OPC_CheckPredicate, 70, 160, 6, 0, // Skip to: 17098
/* 15402 */   MCD_OPC_CheckField, 6, 1, 0, 153, 6, 0, // Skip to: 17098
/* 15409 */   MCD_OPC_Decode, 244, 14, 197, 2, // Opcode: LWRE
/* 15414 */   MCD_OPC_FilterValue, 27, 17, 0, 0, // Skip to: 15436
/* 15419 */   MCD_OPC_CheckPredicate, 44, 138, 6, 0, // Skip to: 17098
/* 15424 */   MCD_OPC_CheckField, 6, 1, 0, 131, 6, 0, // Skip to: 17098
/* 15431 */   MCD_OPC_Decode, 140, 8, 198, 2, // Opcode: CACHEE
/* 15436 */   MCD_OPC_FilterValue, 28, 17, 0, 0, // Skip to: 15458
/* 15441 */   MCD_OPC_CheckPredicate, 44, 116, 6, 0, // Skip to: 17098
/* 15446 */   MCD_OPC_CheckField, 6, 1, 0, 109, 6, 0, // Skip to: 17098
/* 15453 */   MCD_OPC_Decode, 228, 18, 197, 2, // Opcode: SBE
/* 15458 */   MCD_OPC_FilterValue, 29, 17, 0, 0, // Skip to: 15480
/* 15463 */   MCD_OPC_CheckPredicate, 44, 94, 6, 0, // Skip to: 17098
/* 15468 */   MCD_OPC_CheckField, 6, 1, 0, 87, 6, 0, // Skip to: 17098
/* 15475 */   MCD_OPC_Decode, 165, 19, 197, 2, // Opcode: SHE
/* 15480 */   MCD_OPC_FilterValue, 30, 17, 0, 0, // Skip to: 15502
/* 15485 */   MCD_OPC_CheckPredicate, 44, 72, 6, 0, // Skip to: 17098
/* 15490 */   MCD_OPC_CheckField, 6, 1, 0, 65, 6, 0, // Skip to: 17098
/* 15497 */   MCD_OPC_Decode, 237, 18, 197, 2, // Opcode: SCE
/* 15502 */   MCD_OPC_FilterValue, 31, 17, 0, 0, // Skip to: 15524
/* 15507 */   MCD_OPC_CheckPredicate, 44, 50, 6, 0, // Skip to: 17098
/* 15512 */   MCD_OPC_CheckField, 6, 1, 0, 43, 6, 0, // Skip to: 17098
/* 15519 */   MCD_OPC_Decode, 135, 21, 197, 2, // Opcode: SWE
/* 15524 */   MCD_OPC_FilterValue, 32, 69, 0, 0, // Skip to: 15598
/* 15529 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 15532 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 15554
/* 15537 */   MCD_OPC_CheckPredicate, 28, 20, 6, 0, // Skip to: 17098
/* 15542 */   MCD_OPC_CheckField, 21, 5, 0, 13, 6, 0, // Skip to: 17098
/* 15549 */   MCD_OPC_Decode, 132, 22, 193, 2, // Opcode: WSBH
/* 15554 */   MCD_OPC_FilterValue, 16, 17, 0, 0, // Skip to: 15576
/* 15559 */   MCD_OPC_CheckPredicate, 28, 254, 5, 0, // Skip to: 17098
/* 15564 */   MCD_OPC_CheckField, 21, 5, 0, 247, 5, 0, // Skip to: 17098
/* 15571 */   MCD_OPC_Decode, 135, 19, 193, 2, // Opcode: SEB
/* 15576 */   MCD_OPC_FilterValue, 24, 237, 5, 0, // Skip to: 17098
/* 15581 */   MCD_OPC_CheckPredicate, 28, 232, 5, 0, // Skip to: 17098
/* 15586 */   MCD_OPC_CheckField, 21, 5, 0, 225, 5, 0, // Skip to: 17098
/* 15593 */   MCD_OPC_Decode, 138, 19, 193, 2, // Opcode: SEH
/* 15598 */   MCD_OPC_FilterValue, 33, 17, 0, 0, // Skip to: 15620
/* 15603 */   MCD_OPC_CheckPredicate, 70, 210, 5, 0, // Skip to: 17098
/* 15608 */   MCD_OPC_CheckField, 6, 1, 0, 203, 5, 0, // Skip to: 17098
/* 15615 */   MCD_OPC_Decode, 139, 21, 197, 2, // Opcode: SWLE
/* 15620 */   MCD_OPC_FilterValue, 34, 17, 0, 0, // Skip to: 15642
/* 15625 */   MCD_OPC_CheckPredicate, 70, 188, 5, 0, // Skip to: 17098
/* 15630 */   MCD_OPC_CheckField, 6, 1, 0, 181, 5, 0, // Skip to: 17098
/* 15637 */   MCD_OPC_Decode, 148, 21, 197, 2, // Opcode: SWRE
/* 15642 */   MCD_OPC_FilterValue, 35, 17, 0, 0, // Skip to: 15664
/* 15647 */   MCD_OPC_CheckPredicate, 44, 166, 5, 0, // Skip to: 17098
/* 15652 */   MCD_OPC_CheckField, 6, 1, 0, 159, 5, 0, // Skip to: 17098
/* 15659 */   MCD_OPC_Decode, 154, 18, 198, 2, // Opcode: PREFE
/* 15664 */   MCD_OPC_FilterValue, 40, 17, 0, 0, // Skip to: 15686
/* 15669 */   MCD_OPC_CheckPredicate, 44, 144, 5, 0, // Skip to: 17098
/* 15674 */   MCD_OPC_CheckField, 6, 1, 0, 137, 5, 0, // Skip to: 17098
/* 15681 */   MCD_OPC_Decode, 154, 14, 197, 2, // Opcode: LBuE
/* 15686 */   MCD_OPC_FilterValue, 41, 17, 0, 0, // Skip to: 15708
/* 15691 */   MCD_OPC_CheckPredicate, 44, 122, 5, 0, // Skip to: 17098
/* 15696 */   MCD_OPC_CheckField, 6, 1, 0, 115, 5, 0, // Skip to: 17098
/* 15703 */   MCD_OPC_Decode, 192, 14, 197, 2, // Opcode: LHuE
/* 15708 */   MCD_OPC_FilterValue, 44, 17, 0, 0, // Skip to: 15730
/* 15713 */   MCD_OPC_CheckPredicate, 44, 100, 5, 0, // Skip to: 17098
/* 15718 */   MCD_OPC_CheckField, 6, 1, 0, 93, 5, 0, // Skip to: 17098
/* 15725 */   MCD_OPC_Decode, 144, 14, 197, 2, // Opcode: LBE
/* 15730 */   MCD_OPC_FilterValue, 45, 17, 0, 0, // Skip to: 15752
/* 15735 */   MCD_OPC_CheckPredicate, 44, 78, 5, 0, // Skip to: 17098
/* 15740 */   MCD_OPC_CheckField, 6, 1, 0, 71, 5, 0, // Skip to: 17098
/* 15747 */   MCD_OPC_Decode, 184, 14, 197, 2, // Opcode: LHE
/* 15752 */   MCD_OPC_FilterValue, 46, 17, 0, 0, // Skip to: 15774
/* 15757 */   MCD_OPC_CheckPredicate, 44, 56, 5, 0, // Skip to: 17098
/* 15762 */   MCD_OPC_CheckField, 6, 1, 0, 49, 5, 0, // Skip to: 17098
/* 15769 */   MCD_OPC_Decode, 202, 14, 197, 2, // Opcode: LLE
/* 15774 */   MCD_OPC_FilterValue, 47, 17, 0, 0, // Skip to: 15796
/* 15779 */   MCD_OPC_CheckPredicate, 44, 34, 5, 0, // Skip to: 17098
/* 15784 */   MCD_OPC_CheckField, 6, 1, 0, 27, 5, 0, // Skip to: 17098
/* 15791 */   MCD_OPC_Decode, 228, 14, 197, 2, // Opcode: LWE
/* 15796 */   MCD_OPC_FilterValue, 48, 231, 1, 0, // Skip to: 16288
/* 15801 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 15804 */   MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 15826
/* 15809 */   MCD_OPC_CheckPredicate, 69, 4, 5, 0, // Skip to: 17098
/* 15814 */   MCD_OPC_CheckField, 13, 3, 0, 253, 4, 0, // Skip to: 17098
/* 15821 */   MCD_OPC_Decode, 163, 11, 232, 1, // Opcode: DPA_W_PH
/* 15826 */   MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 15848
/* 15831 */   MCD_OPC_CheckPredicate, 69, 238, 4, 0, // Skip to: 17098
/* 15836 */   MCD_OPC_CheckField, 13, 3, 0, 231, 4, 0, // Skip to: 17098
/* 15843 */   MCD_OPC_Decode, 186, 11, 232, 1, // Opcode: DPS_W_PH
/* 15848 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 15870
/* 15853 */   MCD_OPC_CheckPredicate, 69, 216, 4, 0, // Skip to: 17098
/* 15858 */   MCD_OPC_CheckField, 13, 3, 0, 209, 4, 0, // Skip to: 17098
/* 15865 */   MCD_OPC_Decode, 153, 17, 232, 1, // Opcode: MULSA_W_PH
/* 15870 */   MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 15892
/* 15875 */   MCD_OPC_CheckPredicate, 37, 194, 4, 0, // Skip to: 17098
/* 15880 */   MCD_OPC_CheckField, 13, 3, 0, 187, 4, 0, // Skip to: 17098
/* 15887 */   MCD_OPC_Decode, 157, 11, 232, 1, // Opcode: DPAU_H_QBL
/* 15892 */   MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 15914
/* 15897 */   MCD_OPC_CheckPredicate, 37, 172, 4, 0, // Skip to: 17098
/* 15902 */   MCD_OPC_CheckField, 13, 3, 0, 165, 4, 0, // Skip to: 17098
/* 15909 */   MCD_OPC_Decode, 155, 11, 232, 1, // Opcode: DPAQ_S_W_PH
/* 15914 */   MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 15936
/* 15919 */   MCD_OPC_CheckPredicate, 37, 150, 4, 0, // Skip to: 17098
/* 15924 */   MCD_OPC_CheckField, 13, 3, 0, 143, 4, 0, // Skip to: 17098
/* 15931 */   MCD_OPC_Decode, 172, 11, 232, 1, // Opcode: DPSQ_S_W_PH
/* 15936 */   MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 15958
/* 15941 */   MCD_OPC_CheckPredicate, 37, 128, 4, 0, // Skip to: 17098
/* 15946 */   MCD_OPC_CheckField, 13, 3, 0, 121, 4, 0, // Skip to: 17098
/* 15953 */   MCD_OPC_Decode, 151, 17, 232, 1, // Opcode: MULSAQ_S_W_PH
/* 15958 */   MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 15980
/* 15963 */   MCD_OPC_CheckPredicate, 37, 106, 4, 0, // Skip to: 17098
/* 15968 */   MCD_OPC_CheckField, 13, 3, 0, 99, 4, 0, // Skip to: 17098
/* 15975 */   MCD_OPC_Decode, 159, 11, 232, 1, // Opcode: DPAU_H_QBR
/* 15980 */   MCD_OPC_FilterValue, 8, 17, 0, 0, // Skip to: 16002
/* 15985 */   MCD_OPC_CheckPredicate, 69, 84, 4, 0, // Skip to: 17098
/* 15990 */   MCD_OPC_CheckField, 13, 3, 0, 77, 4, 0, // Skip to: 17098
/* 15997 */   MCD_OPC_Decode, 161, 11, 232, 1, // Opcode: DPAX_W_PH
/* 16002 */   MCD_OPC_FilterValue, 9, 17, 0, 0, // Skip to: 16024
/* 16007 */   MCD_OPC_CheckPredicate, 69, 62, 4, 0, // Skip to: 17098
/* 16012 */   MCD_OPC_CheckField, 13, 3, 0, 55, 4, 0, // Skip to: 17098
/* 16019 */   MCD_OPC_Decode, 184, 11, 232, 1, // Opcode: DPSX_W_PH
/* 16024 */   MCD_OPC_FilterValue, 11, 17, 0, 0, // Skip to: 16046
/* 16029 */   MCD_OPC_CheckPredicate, 37, 40, 4, 0, // Skip to: 17098
/* 16034 */   MCD_OPC_CheckField, 13, 3, 0, 33, 4, 0, // Skip to: 17098
/* 16041 */   MCD_OPC_Decode, 180, 11, 232, 1, // Opcode: DPSU_H_QBL
/* 16046 */   MCD_OPC_FilterValue, 12, 17, 0, 0, // Skip to: 16068
/* 16051 */   MCD_OPC_CheckPredicate, 37, 18, 4, 0, // Skip to: 17098
/* 16056 */   MCD_OPC_CheckField, 13, 3, 0, 11, 4, 0, // Skip to: 17098
/* 16063 */   MCD_OPC_Decode, 153, 11, 232, 1, // Opcode: DPAQ_SA_L_W
/* 16068 */   MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 16090
/* 16073 */   MCD_OPC_CheckPredicate, 37, 252, 3, 0, // Skip to: 17098
/* 16078 */   MCD_OPC_CheckField, 13, 3, 0, 245, 3, 0, // Skip to: 17098
/* 16085 */   MCD_OPC_Decode, 170, 11, 232, 1, // Opcode: DPSQ_SA_L_W
/* 16090 */   MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 16112
/* 16095 */   MCD_OPC_CheckPredicate, 37, 230, 3, 0, // Skip to: 17098
/* 16100 */   MCD_OPC_CheckField, 13, 3, 0, 223, 3, 0, // Skip to: 17098
/* 16107 */   MCD_OPC_Decode, 182, 11, 232, 1, // Opcode: DPSU_H_QBR
/* 16112 */   MCD_OPC_FilterValue, 16, 17, 0, 0, // Skip to: 16134
/* 16117 */   MCD_OPC_CheckPredicate, 37, 208, 3, 0, // Skip to: 17098
/* 16122 */   MCD_OPC_CheckField, 13, 3, 0, 201, 3, 0, // Skip to: 17098
/* 16129 */   MCD_OPC_Decode, 166, 15, 232, 1, // Opcode: MAQ_SA_W_PHL
/* 16134 */   MCD_OPC_FilterValue, 18, 17, 0, 0, // Skip to: 16156
/* 16139 */   MCD_OPC_CheckPredicate, 37, 186, 3, 0, // Skip to: 17098
/* 16144 */   MCD_OPC_CheckField, 13, 3, 0, 179, 3, 0, // Skip to: 17098
/* 16151 */   MCD_OPC_Decode, 168, 15, 232, 1, // Opcode: MAQ_SA_W_PHR
/* 16156 */   MCD_OPC_FilterValue, 20, 17, 0, 0, // Skip to: 16178
/* 16161 */   MCD_OPC_CheckPredicate, 37, 164, 3, 0, // Skip to: 17098
/* 16166 */   MCD_OPC_CheckField, 13, 3, 0, 157, 3, 0, // Skip to: 17098
/* 16173 */   MCD_OPC_Decode, 170, 15, 232, 1, // Opcode: MAQ_S_W_PHL
/* 16178 */   MCD_OPC_FilterValue, 22, 17, 0, 0, // Skip to: 16200
/* 16183 */   MCD_OPC_CheckPredicate, 37, 142, 3, 0, // Skip to: 17098
/* 16188 */   MCD_OPC_CheckField, 13, 3, 0, 135, 3, 0, // Skip to: 17098
/* 16195 */   MCD_OPC_Decode, 172, 15, 232, 1, // Opcode: MAQ_S_W_PHR
/* 16200 */   MCD_OPC_FilterValue, 24, 17, 0, 0, // Skip to: 16222
/* 16205 */   MCD_OPC_CheckPredicate, 69, 120, 3, 0, // Skip to: 17098
/* 16210 */   MCD_OPC_CheckField, 13, 3, 0, 113, 3, 0, // Skip to: 17098
/* 16217 */   MCD_OPC_Decode, 151, 11, 232, 1, // Opcode: DPAQX_S_W_PH
/* 16222 */   MCD_OPC_FilterValue, 25, 17, 0, 0, // Skip to: 16244
/* 16227 */   MCD_OPC_CheckPredicate, 69, 98, 3, 0, // Skip to: 17098
/* 16232 */   MCD_OPC_CheckField, 13, 3, 0, 91, 3, 0, // Skip to: 17098
/* 16239 */   MCD_OPC_Decode, 168, 11, 232, 1, // Opcode: DPSQX_S_W_PH
/* 16244 */   MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 16266
/* 16249 */   MCD_OPC_CheckPredicate, 69, 76, 3, 0, // Skip to: 17098
/* 16254 */   MCD_OPC_CheckField, 13, 3, 0, 69, 3, 0, // Skip to: 17098
/* 16261 */   MCD_OPC_Decode, 149, 11, 232, 1, // Opcode: DPAQX_SA_W_PH
/* 16266 */   MCD_OPC_FilterValue, 27, 59, 3, 0, // Skip to: 17098
/* 16271 */   MCD_OPC_CheckPredicate, 69, 54, 3, 0, // Skip to: 17098
/* 16276 */   MCD_OPC_CheckField, 13, 3, 0, 47, 3, 0, // Skip to: 17098
/* 16283 */   MCD_OPC_Decode, 166, 11, 232, 1, // Opcode: DPSQX_SA_W_PH
/* 16288 */   MCD_OPC_FilterValue, 49, 48, 0, 0, // Skip to: 16341
/* 16293 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 16296 */   MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 16311
/* 16301 */   MCD_OPC_CheckPredicate, 69, 24, 3, 0, // Skip to: 17098
/* 16306 */   MCD_OPC_Decode, 159, 6, 199, 2, // Opcode: APPEND
/* 16311 */   MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 16326
/* 16316 */   MCD_OPC_CheckPredicate, 69, 9, 3, 0, // Skip to: 17098
/* 16321 */   MCD_OPC_Decode, 160, 18, 199, 2, // Opcode: PREPEND
/* 16326 */   MCD_OPC_FilterValue, 16, 255, 2, 0, // Skip to: 17098
/* 16331 */   MCD_OPC_CheckPredicate, 69, 250, 2, 0, // Skip to: 17098
/* 16336 */   MCD_OPC_Decode, 203, 6, 199, 2, // Opcode: BALIGN
/* 16341 */   MCD_OPC_FilterValue, 56, 107, 1, 0, // Skip to: 16709
/* 16346 */   MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 16349 */   MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 16371
/* 16354 */   MCD_OPC_CheckPredicate, 37, 227, 2, 0, // Skip to: 17098
/* 16359 */   MCD_OPC_CheckField, 13, 3, 0, 220, 2, 0, // Skip to: 17098
/* 16366 */   MCD_OPC_Decode, 250, 11, 200, 2, // Opcode: EXTR_W
/* 16371 */   MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 16393
/* 16376 */   MCD_OPC_CheckPredicate, 37, 205, 2, 0, // Skip to: 17098
/* 16381 */   MCD_OPC_CheckField, 13, 3, 0, 198, 2, 0, // Skip to: 17098
/* 16388 */   MCD_OPC_Decode, 242, 11, 201, 2, // Opcode: EXTRV_W
/* 16393 */   MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 16415
/* 16398 */   MCD_OPC_CheckPredicate, 37, 183, 2, 0, // Skip to: 17098
/* 16403 */   MCD_OPC_CheckField, 13, 3, 0, 176, 2, 0, // Skip to: 17098
/* 16410 */   MCD_OPC_Decode, 228, 11, 200, 2, // Opcode: EXTP
/* 16415 */   MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 16437
/* 16420 */   MCD_OPC_CheckPredicate, 37, 161, 2, 0, // Skip to: 17098
/* 16425 */   MCD_OPC_CheckField, 13, 3, 0, 154, 2, 0, // Skip to: 17098
/* 16432 */   MCD_OPC_Decode, 233, 11, 201, 2, // Opcode: EXTPV
/* 16437 */   MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 16459
/* 16442 */   MCD_OPC_CheckPredicate, 37, 139, 2, 0, // Skip to: 17098
/* 16447 */   MCD_OPC_CheckField, 13, 3, 0, 132, 2, 0, // Skip to: 17098
/* 16454 */   MCD_OPC_Decode, 246, 11, 200, 2, // Opcode: EXTR_R_W
/* 16459 */   MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 16481
/* 16464 */   MCD_OPC_CheckPredicate, 37, 117, 2, 0, // Skip to: 17098
/* 16469 */   MCD_OPC_CheckField, 13, 3, 0, 110, 2, 0, // Skip to: 17098
/* 16476 */   MCD_OPC_Decode, 238, 11, 201, 2, // Opcode: EXTRV_R_W
/* 16481 */   MCD_OPC_FilterValue, 6, 17, 0, 0, // Skip to: 16503
/* 16486 */   MCD_OPC_CheckPredicate, 37, 95, 2, 0, // Skip to: 17098
/* 16491 */   MCD_OPC_CheckField, 13, 3, 0, 88, 2, 0, // Skip to: 17098
/* 16498 */   MCD_OPC_Decode, 244, 11, 200, 2, // Opcode: EXTR_RS_W
/* 16503 */   MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 16525
/* 16508 */   MCD_OPC_CheckPredicate, 37, 73, 2, 0, // Skip to: 17098
/* 16513 */   MCD_OPC_CheckField, 13, 3, 0, 66, 2, 0, // Skip to: 17098
/* 16520 */   MCD_OPC_Decode, 236, 11, 201, 2, // Opcode: EXTRV_RS_W
/* 16525 */   MCD_OPC_FilterValue, 10, 17, 0, 0, // Skip to: 16547
/* 16530 */   MCD_OPC_CheckPredicate, 37, 51, 2, 0, // Skip to: 17098
/* 16535 */   MCD_OPC_CheckField, 13, 3, 0, 44, 2, 0, // Skip to: 17098
/* 16542 */   MCD_OPC_Decode, 229, 11, 200, 2, // Opcode: EXTPDP
/* 16547 */   MCD_OPC_FilterValue, 11, 17, 0, 0, // Skip to: 16569
/* 16552 */   MCD_OPC_CheckPredicate, 37, 29, 2, 0, // Skip to: 17098
/* 16557 */   MCD_OPC_CheckField, 13, 3, 0, 22, 2, 0, // Skip to: 17098
/* 16564 */   MCD_OPC_Decode, 230, 11, 201, 2, // Opcode: EXTPDPV
/* 16569 */   MCD_OPC_FilterValue, 14, 17, 0, 0, // Skip to: 16591
/* 16574 */   MCD_OPC_CheckPredicate, 37, 7, 2, 0, // Skip to: 17098
/* 16579 */   MCD_OPC_CheckField, 13, 3, 0, 0, 2, 0, // Skip to: 17098
/* 16586 */   MCD_OPC_Decode, 248, 11, 200, 2, // Opcode: EXTR_S_H
/* 16591 */   MCD_OPC_FilterValue, 15, 17, 0, 0, // Skip to: 16613
/* 16596 */   MCD_OPC_CheckPredicate, 37, 241, 1, 0, // Skip to: 17098
/* 16601 */   MCD_OPC_CheckField, 13, 3, 0, 234, 1, 0, // Skip to: 17098
/* 16608 */   MCD_OPC_Decode, 240, 11, 201, 2, // Opcode: EXTRV_S_H
/* 16613 */   MCD_OPC_FilterValue, 18, 10, 0, 0, // Skip to: 16628
/* 16618 */   MCD_OPC_CheckPredicate, 37, 219, 1, 0, // Skip to: 17098
/* 16623 */   MCD_OPC_Decode, 166, 18, 202, 2, // Opcode: RDDSP
/* 16628 */   MCD_OPC_FilterValue, 19, 10, 0, 0, // Skip to: 16643
/* 16633 */   MCD_OPC_CheckPredicate, 40, 204, 1, 0, // Skip to: 17098
/* 16638 */   MCD_OPC_Decode, 129, 22, 203, 2, // Opcode: WRDSP
/* 16643 */   MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 16665
/* 16648 */   MCD_OPC_CheckPredicate, 37, 189, 1, 0, // Skip to: 17098
/* 16653 */   MCD_OPC_CheckField, 13, 7, 0, 182, 1, 0, // Skip to: 17098
/* 16660 */   MCD_OPC_Decode, 170, 19, 204, 2, // Opcode: SHILO
/* 16665 */   MCD_OPC_FilterValue, 27, 17, 0, 0, // Skip to: 16687
/* 16670 */   MCD_OPC_CheckPredicate, 37, 167, 1, 0, // Skip to: 17098
/* 16675 */   MCD_OPC_CheckField, 13, 8, 0, 160, 1, 0, // Skip to: 17098
/* 16682 */   MCD_OPC_Decode, 171, 19, 205, 2, // Opcode: SHILOV
/* 16687 */   MCD_OPC_FilterValue, 31, 150, 1, 0, // Skip to: 17098
/* 16692 */   MCD_OPC_CheckPredicate, 37, 145, 1, 0, // Skip to: 17098
/* 16697 */   MCD_OPC_CheckField, 13, 8, 0, 138, 1, 0, // Skip to: 17098
/* 16704 */   MCD_OPC_Decode, 241, 16, 205, 2, // Opcode: MTHLIP
/* 16709 */   MCD_OPC_FilterValue, 59, 128, 1, 0, // Skip to: 17098
/* 16714 */   MCD_OPC_CheckPredicate, 27, 123, 1, 0, // Skip to: 17098
/* 16719 */   MCD_OPC_CheckField, 21, 5, 0, 116, 1, 0, // Skip to: 17098
/* 16726 */   MCD_OPC_CheckField, 9, 2, 0, 109, 1, 0, // Skip to: 17098
/* 16733 */   MCD_OPC_Decode, 168, 18, 206, 2, // Opcode: RDHWR
/* 16738 */   MCD_OPC_FilterValue, 32, 10, 0, 0, // Skip to: 16753
/* 16743 */   MCD_OPC_CheckPredicate, 27, 94, 1, 0, // Skip to: 17098
/* 16748 */   MCD_OPC_Decode, 142, 14, 130, 1, // Opcode: LB
/* 16753 */   MCD_OPC_FilterValue, 33, 10, 0, 0, // Skip to: 16768
/* 16758 */   MCD_OPC_CheckPredicate, 27, 79, 1, 0, // Skip to: 17098
/* 16763 */   MCD_OPC_Decode, 182, 14, 130, 1, // Opcode: LH
/* 16768 */   MCD_OPC_FilterValue, 34, 10, 0, 0, // Skip to: 16783
/* 16773 */   MCD_OPC_CheckPredicate, 31, 64, 1, 0, // Skip to: 17098
/* 16778 */   MCD_OPC_Decode, 231, 14, 130, 1, // Opcode: LWL
/* 16783 */   MCD_OPC_FilterValue, 35, 10, 0, 0, // Skip to: 16798
/* 16788 */   MCD_OPC_CheckPredicate, 27, 49, 1, 0, // Skip to: 17098
/* 16793 */   MCD_OPC_Decode, 217, 14, 130, 1, // Opcode: LW
/* 16798 */   MCD_OPC_FilterValue, 36, 10, 0, 0, // Skip to: 16813
/* 16803 */   MCD_OPC_CheckPredicate, 27, 34, 1, 0, // Skip to: 17098
/* 16808 */   MCD_OPC_Decode, 152, 14, 130, 1, // Opcode: LBu
/* 16813 */   MCD_OPC_FilterValue, 37, 10, 0, 0, // Skip to: 16828
/* 16818 */   MCD_OPC_CheckPredicate, 27, 19, 1, 0, // Skip to: 17098
/* 16823 */   MCD_OPC_Decode, 190, 14, 130, 1, // Opcode: LHu
/* 16828 */   MCD_OPC_FilterValue, 38, 10, 0, 0, // Skip to: 16843
/* 16833 */   MCD_OPC_CheckPredicate, 31, 4, 1, 0, // Skip to: 17098
/* 16838 */   MCD_OPC_Decode, 242, 14, 130, 1, // Opcode: LWR
/* 16843 */   MCD_OPC_FilterValue, 40, 10, 0, 0, // Skip to: 16858
/* 16848 */   MCD_OPC_CheckPredicate, 27, 245, 0, 0, // Skip to: 17098
/* 16853 */   MCD_OPC_Decode, 224, 18, 130, 1, // Opcode: SB
/* 16858 */   MCD_OPC_FilterValue, 41, 10, 0, 0, // Skip to: 16873
/* 16863 */   MCD_OPC_CheckPredicate, 27, 230, 0, 0, // Skip to: 17098
/* 16868 */   MCD_OPC_Decode, 161, 19, 130, 1, // Opcode: SH
/* 16873 */   MCD_OPC_FilterValue, 42, 10, 0, 0, // Skip to: 16888
/* 16878 */   MCD_OPC_CheckPredicate, 31, 215, 0, 0, // Skip to: 17098
/* 16883 */   MCD_OPC_Decode, 137, 21, 130, 1, // Opcode: SWL
/* 16888 */   MCD_OPC_FilterValue, 43, 10, 0, 0, // Skip to: 16903
/* 16893 */   MCD_OPC_CheckPredicate, 27, 200, 0, 0, // Skip to: 17098
/* 16898 */   MCD_OPC_Decode, 251, 20, 130, 1, // Opcode: SW
/* 16903 */   MCD_OPC_FilterValue, 46, 10, 0, 0, // Skip to: 16918
/* 16908 */   MCD_OPC_CheckPredicate, 31, 185, 0, 0, // Skip to: 17098
/* 16913 */   MCD_OPC_Decode, 146, 21, 130, 1, // Opcode: SWR
/* 16918 */   MCD_OPC_FilterValue, 47, 10, 0, 0, // Skip to: 16933
/* 16923 */   MCD_OPC_CheckPredicate, 71, 170, 0, 0, // Skip to: 17098
/* 16928 */   MCD_OPC_Decode, 139, 8, 207, 2, // Opcode: CACHE
/* 16933 */   MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 16948
/* 16938 */   MCD_OPC_CheckPredicate, 72, 155, 0, 0, // Skip to: 17098
/* 16943 */   MCD_OPC_Decode, 197, 14, 130, 1, // Opcode: LL
/* 16948 */   MCD_OPC_FilterValue, 49, 10, 0, 0, // Skip to: 16963
/* 16953 */   MCD_OPC_CheckPredicate, 47, 140, 0, 0, // Skip to: 17098
/* 16958 */   MCD_OPC_Decode, 220, 14, 208, 2, // Opcode: LWC1
/* 16963 */   MCD_OPC_FilterValue, 50, 10, 0, 0, // Skip to: 16978
/* 16968 */   MCD_OPC_CheckPredicate, 31, 125, 0, 0, // Skip to: 17098
/* 16973 */   MCD_OPC_Decode, 222, 14, 209, 2, // Opcode: LWC2
/* 16978 */   MCD_OPC_FilterValue, 51, 10, 0, 0, // Skip to: 16993
/* 16983 */   MCD_OPC_CheckPredicate, 71, 110, 0, 0, // Skip to: 17098
/* 16988 */   MCD_OPC_Decode, 153, 18, 207, 2, // Opcode: PREF
/* 16993 */   MCD_OPC_FilterValue, 53, 10, 0, 0, // Skip to: 17008
/* 16998 */   MCD_OPC_CheckPredicate, 57, 95, 0, 0, // Skip to: 17098
/* 17003 */   MCD_OPC_Decode, 158, 14, 208, 2, // Opcode: LDC1
/* 17008 */   MCD_OPC_FilterValue, 54, 10, 0, 0, // Skip to: 17023
/* 17013 */   MCD_OPC_CheckPredicate, 39, 80, 0, 0, // Skip to: 17098
/* 17018 */   MCD_OPC_Decode, 162, 14, 209, 2, // Opcode: LDC2
/* 17023 */   MCD_OPC_FilterValue, 56, 10, 0, 0, // Skip to: 17038
/* 17028 */   MCD_OPC_CheckPredicate, 72, 65, 0, 0, // Skip to: 17098
/* 17033 */   MCD_OPC_Decode, 232, 18, 130, 1, // Opcode: SC
/* 17038 */   MCD_OPC_FilterValue, 57, 10, 0, 0, // Skip to: 17053
/* 17043 */   MCD_OPC_CheckPredicate, 47, 50, 0, 0, // Skip to: 17098
/* 17048 */   MCD_OPC_Decode, 255, 20, 208, 2, // Opcode: SWC1
/* 17053 */   MCD_OPC_FilterValue, 58, 10, 0, 0, // Skip to: 17068
/* 17058 */   MCD_OPC_CheckPredicate, 31, 35, 0, 0, // Skip to: 17098
/* 17063 */   MCD_OPC_Decode, 129, 21, 209, 2, // Opcode: SWC2
/* 17068 */   MCD_OPC_FilterValue, 61, 10, 0, 0, // Skip to: 17083
/* 17073 */   MCD_OPC_CheckPredicate, 57, 20, 0, 0, // Skip to: 17098
/* 17078 */   MCD_OPC_Decode, 249, 18, 208, 2, // Opcode: SDC1
/* 17083 */   MCD_OPC_FilterValue, 62, 10, 0, 0, // Skip to: 17098
/* 17088 */   MCD_OPC_CheckPredicate, 39, 5, 0, 0, // Skip to: 17098
/* 17093 */   MCD_OPC_Decode, 253, 18, 209, 2, // Opcode: SDC2
/* 17098 */   MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32_64_PTR6432[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 24
/* 8 */       MCD_OPC_CheckPredicate, 73, 41, 0, 0, // Skip to: 54
/* 13 */      MCD_OPC_CheckField, 0, 21, 8, 34, 0, 0, // Skip to: 54
/* 20 */      MCD_OPC_Decode, 253, 13, 13, // Opcode: JR64
/* 24 */      MCD_OPC_FilterValue, 48, 10, 0, 0, // Skip to: 39
/* 29 */      MCD_OPC_CheckPredicate, 74, 20, 0, 0, // Skip to: 54
/* 34 */      MCD_OPC_Decode, 198, 14, 130, 1, // Opcode: LL64
/* 39 */      MCD_OPC_FilterValue, 56, 10, 0, 0, // Skip to: 54
/* 44 */      MCD_OPC_CheckPredicate, 74, 5, 0, 0, // Skip to: 54
/* 49 */      MCD_OPC_Decode, 233, 18, 130, 1, // Opcode: SC64
/* 54 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32r6_64r632[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 14, 2, 0, // Skip to: 534
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 33
/* 16 */      MCD_OPC_CheckPredicate, 75, 133, 9, 0, // Skip to: 2458
/* 21 */      MCD_OPC_CheckField, 8, 3, 0, 126, 9, 0, // Skip to: 2458
/* 28 */      MCD_OPC_Decode, 209, 14, 174, 1, // Opcode: LSA_R6
/* 33 */      MCD_OPC_FilterValue, 9, 17, 0, 0, // Skip to: 55
/* 38 */      MCD_OPC_CheckPredicate, 75, 111, 9, 0, // Skip to: 2458
/* 43 */      MCD_OPC_CheckField, 6, 15, 16, 104, 9, 0, // Skip to: 2458
/* 50 */      MCD_OPC_Decode, 133, 14, 175, 1, // Opcode: JR_HB_R6
/* 55 */      MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 70
/* 60 */      MCD_OPC_CheckPredicate, 76, 89, 9, 0, // Skip to: 2458
/* 65 */      MCD_OPC_Decode, 248, 18, 177, 1, // Opcode: SDBBP_R6
/* 70 */      MCD_OPC_FilterValue, 16, 23, 0, 0, // Skip to: 98
/* 75 */      MCD_OPC_CheckPredicate, 75, 74, 9, 0, // Skip to: 2458
/* 80 */      MCD_OPC_CheckField, 16, 5, 0, 67, 9, 0, // Skip to: 2458
/* 87 */      MCD_OPC_CheckField, 6, 5, 1, 60, 9, 0, // Skip to: 2458
/* 94 */      MCD_OPC_Decode, 215, 8, 14, // Opcode: CLZ_R6
/* 98 */      MCD_OPC_FilterValue, 17, 23, 0, 0, // Skip to: 126
/* 103 */     MCD_OPC_CheckPredicate, 75, 46, 9, 0, // Skip to: 2458
/* 108 */     MCD_OPC_CheckField, 16, 5, 0, 39, 9, 0, // Skip to: 2458
/* 115 */     MCD_OPC_CheckField, 6, 5, 1, 32, 9, 0, // Skip to: 2458
/* 122 */     MCD_OPC_Decode, 195, 8, 14, // Opcode: CLO_R6
/* 126 */     MCD_OPC_FilterValue, 18, 23, 0, 0, // Skip to: 154
/* 131 */     MCD_OPC_CheckPredicate, 77, 18, 9, 0, // Skip to: 2458
/* 136 */     MCD_OPC_CheckField, 16, 5, 0, 11, 9, 0, // Skip to: 2458
/* 143 */     MCD_OPC_CheckField, 6, 5, 1, 4, 9, 0, // Skip to: 2458
/* 150 */     MCD_OPC_Decode, 215, 10, 15, // Opcode: DCLZ_R6
/* 154 */     MCD_OPC_FilterValue, 19, 23, 0, 0, // Skip to: 182
/* 159 */     MCD_OPC_CheckPredicate, 77, 246, 8, 0, // Skip to: 2458
/* 164 */     MCD_OPC_CheckField, 16, 5, 0, 239, 8, 0, // Skip to: 2458
/* 171 */     MCD_OPC_CheckField, 6, 5, 1, 232, 8, 0, // Skip to: 2458
/* 178 */     MCD_OPC_Decode, 213, 10, 15, // Opcode: DCLO_R6
/* 182 */     MCD_OPC_FilterValue, 21, 17, 0, 0, // Skip to: 204
/* 187 */     MCD_OPC_CheckPredicate, 77, 218, 8, 0, // Skip to: 2458
/* 192 */     MCD_OPC_CheckField, 8, 3, 0, 211, 8, 0, // Skip to: 2458
/* 199 */     MCD_OPC_Decode, 244, 10, 183, 1, // Opcode: DLSA_R6
/* 204 */     MCD_OPC_FilterValue, 24, 31, 0, 0, // Skip to: 240
/* 209 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 212 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 226
/* 217 */     MCD_OPC_CheckPredicate, 76, 188, 8, 0, // Skip to: 2458
/* 222 */     MCD_OPC_Decode, 175, 17, 50, // Opcode: MUL_R6
/* 226 */     MCD_OPC_FilterValue, 3, 179, 8, 0, // Skip to: 2458
/* 231 */     MCD_OPC_CheckPredicate, 76, 174, 8, 0, // Skip to: 2458
/* 236 */     MCD_OPC_Decode, 255, 16, 50, // Opcode: MUH
/* 240 */     MCD_OPC_FilterValue, 25, 31, 0, 0, // Skip to: 276
/* 245 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 248 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 262
/* 253 */     MCD_OPC_CheckPredicate, 76, 152, 8, 0, // Skip to: 2458
/* 258 */     MCD_OPC_Decode, 163, 17, 50, // Opcode: MULU
/* 262 */     MCD_OPC_FilterValue, 3, 143, 8, 0, // Skip to: 2458
/* 267 */     MCD_OPC_CheckPredicate, 76, 138, 8, 0, // Skip to: 2458
/* 272 */     MCD_OPC_Decode, 128, 17, 50, // Opcode: MUHU
/* 276 */     MCD_OPC_FilterValue, 26, 31, 0, 0, // Skip to: 312
/* 281 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 284 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 298
/* 289 */     MCD_OPC_CheckPredicate, 76, 116, 8, 0, // Skip to: 2458
/* 294 */     MCD_OPC_Decode, 229, 10, 50, // Opcode: DIV
/* 298 */     MCD_OPC_FilterValue, 3, 107, 8, 0, // Skip to: 2458
/* 303 */     MCD_OPC_CheckPredicate, 76, 102, 8, 0, // Skip to: 2458
/* 308 */     MCD_OPC_Decode, 133, 16, 50, // Opcode: MOD
/* 312 */     MCD_OPC_FilterValue, 27, 31, 0, 0, // Skip to: 348
/* 317 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 320 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 334
/* 325 */     MCD_OPC_CheckPredicate, 76, 80, 8, 0, // Skip to: 2458
/* 330 */     MCD_OPC_Decode, 230, 10, 50, // Opcode: DIVU
/* 334 */     MCD_OPC_FilterValue, 3, 71, 8, 0, // Skip to: 2458
/* 339 */     MCD_OPC_CheckPredicate, 76, 66, 8, 0, // Skip to: 2458
/* 344 */     MCD_OPC_Decode, 136, 16, 50, // Opcode: MODU
/* 348 */     MCD_OPC_FilterValue, 28, 31, 0, 0, // Skip to: 384
/* 353 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 356 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 370
/* 361 */     MCD_OPC_CheckPredicate, 77, 44, 8, 0, // Skip to: 2458
/* 366 */     MCD_OPC_Decode, 136, 11, 12, // Opcode: DMUL_R6
/* 370 */     MCD_OPC_FilterValue, 3, 35, 8, 0, // Skip to: 2458
/* 375 */     MCD_OPC_CheckPredicate, 77, 30, 8, 0, // Skip to: 2458
/* 380 */     MCD_OPC_Decode, 130, 11, 12, // Opcode: DMUH
/* 384 */     MCD_OPC_FilterValue, 29, 31, 0, 0, // Skip to: 420
/* 389 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 392 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 406
/* 397 */     MCD_OPC_CheckPredicate, 77, 8, 8, 0, // Skip to: 2458
/* 402 */     MCD_OPC_Decode, 135, 11, 12, // Opcode: DMULU
/* 406 */     MCD_OPC_FilterValue, 3, 255, 7, 0, // Skip to: 2458
/* 411 */     MCD_OPC_CheckPredicate, 77, 250, 7, 0, // Skip to: 2458
/* 416 */     MCD_OPC_Decode, 131, 11, 12, // Opcode: DMUHU
/* 420 */     MCD_OPC_FilterValue, 30, 31, 0, 0, // Skip to: 456
/* 425 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 428 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 442
/* 433 */     MCD_OPC_CheckPredicate, 77, 228, 7, 0, // Skip to: 2458
/* 438 */     MCD_OPC_Decode, 216, 10, 12, // Opcode: DDIV
/* 442 */     MCD_OPC_FilterValue, 3, 219, 7, 0, // Skip to: 2458
/* 447 */     MCD_OPC_CheckPredicate, 77, 214, 7, 0, // Skip to: 2458
/* 452 */     MCD_OPC_Decode, 250, 10, 12, // Opcode: DMOD
/* 456 */     MCD_OPC_FilterValue, 31, 31, 0, 0, // Skip to: 492
/* 461 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 464 */     MCD_OPC_FilterValue, 2, 9, 0, 0, // Skip to: 478
/* 469 */     MCD_OPC_CheckPredicate, 77, 192, 7, 0, // Skip to: 2458
/* 474 */     MCD_OPC_Decode, 217, 10, 12, // Opcode: DDIVU
/* 478 */     MCD_OPC_FilterValue, 3, 183, 7, 0, // Skip to: 2458
/* 483 */     MCD_OPC_CheckPredicate, 77, 178, 7, 0, // Skip to: 2458
/* 488 */     MCD_OPC_Decode, 251, 10, 12, // Opcode: DMODU
/* 492 */     MCD_OPC_FilterValue, 53, 16, 0, 0, // Skip to: 513
/* 497 */     MCD_OPC_CheckPredicate, 78, 164, 7, 0, // Skip to: 2458
/* 502 */     MCD_OPC_CheckField, 6, 5, 0, 157, 7, 0, // Skip to: 2458
/* 509 */     MCD_OPC_Decode, 141, 19, 50, // Opcode: SELEQZ
/* 513 */     MCD_OPC_FilterValue, 55, 148, 7, 0, // Skip to: 2458
/* 518 */     MCD_OPC_CheckPredicate, 78, 143, 7, 0, // Skip to: 2458
/* 523 */     MCD_OPC_CheckField, 6, 5, 0, 136, 7, 0, // Skip to: 2458
/* 530 */     MCD_OPC_Decode, 148, 19, 50, // Opcode: SELNEZ
/* 534 */     MCD_OPC_FilterValue, 1, 77, 0, 0, // Skip to: 616
/* 539 */     MCD_OPC_ExtractField, 16, 5,  // Inst{20-16} ...
/* 542 */     MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 557
/* 547 */     MCD_OPC_CheckPredicate, 77, 114, 7, 0, // Skip to: 2458
/* 552 */     MCD_OPC_Decode, 207, 10, 210, 2, // Opcode: DAHI
/* 557 */     MCD_OPC_FilterValue, 17, 17, 0, 0, // Skip to: 579
/* 562 */     MCD_OPC_CheckPredicate, 75, 99, 7, 0, // Skip to: 2458
/* 567 */     MCD_OPC_CheckField, 21, 5, 0, 92, 7, 0, // Skip to: 2458
/* 574 */     MCD_OPC_Decode, 200, 6, 187, 1, // Opcode: BAL
/* 579 */     MCD_OPC_FilterValue, 23, 17, 0, 0, // Skip to: 601
/* 584 */     MCD_OPC_CheckPredicate, 76, 77, 7, 0, // Skip to: 2458
/* 589 */     MCD_OPC_CheckField, 21, 5, 0, 70, 7, 0, // Skip to: 2458
/* 596 */     MCD_OPC_Decode, 220, 19, 211, 2, // Opcode: SIGRIE
/* 601 */     MCD_OPC_FilterValue, 30, 60, 7, 0, // Skip to: 2458
/* 606 */     MCD_OPC_CheckPredicate, 77, 55, 7, 0, // Skip to: 2458
/* 611 */     MCD_OPC_Decode, 209, 10, 210, 2, // Opcode: DATI
/* 616 */     MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 631
/* 621 */     MCD_OPC_CheckPredicate, 76, 40, 7, 0, // Skip to: 2458
/* 626 */     MCD_OPC_Decode, 130, 7, 212, 2, // Opcode: BGEZALC
/* 631 */     MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 646
/* 636 */     MCD_OPC_CheckPredicate, 76, 25, 7, 0, // Skip to: 2458
/* 641 */     MCD_OPC_Decode, 187, 7, 213, 2, // Opcode: BLTZALC
/* 646 */     MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 661
/* 651 */     MCD_OPC_CheckPredicate, 76, 10, 7, 0, // Skip to: 2458
/* 656 */     MCD_OPC_Decode, 236, 6, 214, 2, // Opcode: BEQC
/* 661 */     MCD_OPC_FilterValue, 15, 10, 0, 0, // Skip to: 676
/* 666 */     MCD_OPC_CheckPredicate, 75, 251, 6, 0, // Skip to: 2458
/* 671 */     MCD_OPC_Decode, 169, 6, 192, 1, // Opcode: AUI
/* 676 */     MCD_OPC_FilterValue, 16, 45, 0, 0, // Skip to: 726
/* 681 */     MCD_OPC_ExtractField, 0, 16,  // Inst{15-0} ...
/* 684 */     MCD_OPC_FilterValue, 4, 16, 0, 0, // Skip to: 705
/* 689 */     MCD_OPC_CheckPredicate, 75, 228, 6, 0, // Skip to: 2458
/* 694 */     MCD_OPC_CheckField, 21, 5, 11, 221, 6, 0, // Skip to: 2458
/* 701 */     MCD_OPC_Decode, 224, 11, 81, // Opcode: EVP
/* 705 */     MCD_OPC_FilterValue, 36, 212, 6, 0, // Skip to: 2458
/* 710 */     MCD_OPC_CheckPredicate, 75, 207, 6, 0, // Skip to: 2458
/* 715 */     MCD_OPC_CheckField, 21, 5, 11, 200, 6, 0, // Skip to: 2458
/* 722 */     MCD_OPC_Decode, 207, 11, 81, // Opcode: DVP
/* 726 */     MCD_OPC_FilterValue, 17, 135, 3, 0, // Skip to: 1634
/* 731 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 734 */     MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 749
/* 739 */     MCD_OPC_CheckPredicate, 79, 178, 6, 0, // Skip to: 2458
/* 744 */     MCD_OPC_Decode, 211, 6, 215, 2, // Opcode: BC1EQZ
/* 749 */     MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 764
/* 754 */     MCD_OPC_CheckPredicate, 79, 163, 6, 0, // Skip to: 2458
/* 759 */     MCD_OPC_Decode, 216, 6, 215, 2, // Opcode: BC1NEZ
/* 764 */     MCD_OPC_FilterValue, 16, 182, 0, 0, // Skip to: 951
/* 769 */     MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 772 */     MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 787
/* 777 */     MCD_OPC_CheckPredicate, 79, 140, 6, 0, // Skip to: 2458
/* 782 */     MCD_OPC_Decode, 157, 19, 216, 2, // Opcode: SEL_S
/* 787 */     MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 802
/* 792 */     MCD_OPC_CheckPredicate, 79, 125, 6, 0, // Skip to: 2458
/* 797 */     MCD_OPC_Decode, 146, 19, 207, 1, // Opcode: SELEQZ_S
/* 802 */     MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 817
/* 807 */     MCD_OPC_CheckPredicate, 79, 110, 6, 0, // Skip to: 2458
/* 812 */     MCD_OPC_Decode, 153, 19, 207, 1, // Opcode: SELNEZ_S
/* 817 */     MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 832
/* 822 */     MCD_OPC_CheckPredicate, 79, 95, 6, 0, // Skip to: 2458
/* 827 */     MCD_OPC_Decode, 144, 15, 217, 2, // Opcode: MADDF_S
/* 832 */     MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 847
/* 837 */     MCD_OPC_CheckPredicate, 79, 80, 6, 0, // Skip to: 2458
/* 842 */     MCD_OPC_Decode, 195, 16, 217, 2, // Opcode: MSUBF_S
/* 847 */     MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 869
/* 852 */     MCD_OPC_CheckPredicate, 79, 65, 6, 0, // Skip to: 2458
/* 857 */     MCD_OPC_CheckField, 16, 5, 0, 58, 6, 0, // Skip to: 2458
/* 864 */     MCD_OPC_Decode, 189, 18, 208, 1, // Opcode: RINT_S
/* 869 */     MCD_OPC_FilterValue, 27, 17, 0, 0, // Skip to: 891
/* 874 */     MCD_OPC_CheckPredicate, 79, 43, 6, 0, // Skip to: 2458
/* 879 */     MCD_OPC_CheckField, 16, 5, 0, 36, 6, 0, // Skip to: 2458
/* 886 */     MCD_OPC_Decode, 174, 8, 208, 1, // Opcode: CLASS_S
/* 891 */     MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 906
/* 896 */     MCD_OPC_CheckPredicate, 79, 21, 6, 0, // Skip to: 2458
/* 901 */     MCD_OPC_Decode, 251, 15, 207, 1, // Opcode: MIN_S
/* 906 */     MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 921
/* 911 */     MCD_OPC_CheckPredicate, 79, 6, 6, 0, // Skip to: 2458
/* 916 */     MCD_OPC_Decode, 192, 15, 207, 1, // Opcode: MAX_S
/* 921 */     MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 936
/* 926 */     MCD_OPC_CheckPredicate, 79, 247, 5, 0, // Skip to: 2458
/* 931 */     MCD_OPC_Decode, 235, 15, 207, 1, // Opcode: MINA_S
/* 936 */     MCD_OPC_FilterValue, 31, 237, 5, 0, // Skip to: 2458
/* 941 */     MCD_OPC_CheckPredicate, 79, 232, 5, 0, // Skip to: 2458
/* 946 */     MCD_OPC_Decode, 176, 15, 207, 1, // Opcode: MAXA_S
/* 951 */     MCD_OPC_FilterValue, 17, 182, 0, 0, // Skip to: 1138
/* 956 */     MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 959 */     MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 974
/* 964 */     MCD_OPC_CheckPredicate, 79, 209, 5, 0, // Skip to: 2458
/* 969 */     MCD_OPC_Decode, 155, 19, 218, 2, // Opcode: SEL_D
/* 974 */     MCD_OPC_FilterValue, 20, 10, 0, 0, // Skip to: 989
/* 979 */     MCD_OPC_CheckPredicate, 79, 194, 5, 0, // Skip to: 2458
/* 984 */     MCD_OPC_Decode, 143, 19, 219, 2, // Opcode: SELEQZ_D
/* 989 */     MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 1004
/* 994 */     MCD_OPC_CheckPredicate, 79, 179, 5, 0, // Skip to: 2458
/* 999 */     MCD_OPC_Decode, 150, 19, 219, 2, // Opcode: SELNEZ_D
/* 1004 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 1019
/* 1009 */    MCD_OPC_CheckPredicate, 79, 164, 5, 0, // Skip to: 2458
/* 1014 */    MCD_OPC_Decode, 142, 15, 218, 2, // Opcode: MADDF_D
/* 1019 */    MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 1034
/* 1024 */    MCD_OPC_CheckPredicate, 79, 149, 5, 0, // Skip to: 2458
/* 1029 */    MCD_OPC_Decode, 193, 16, 218, 2, // Opcode: MSUBF_D
/* 1034 */    MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 1056
/* 1039 */    MCD_OPC_CheckPredicate, 79, 134, 5, 0, // Skip to: 2458
/* 1044 */    MCD_OPC_CheckField, 16, 5, 0, 127, 5, 0, // Skip to: 2458
/* 1051 */    MCD_OPC_Decode, 187, 18, 219, 1, // Opcode: RINT_D
/* 1056 */    MCD_OPC_FilterValue, 27, 17, 0, 0, // Skip to: 1078
/* 1061 */    MCD_OPC_CheckPredicate, 79, 112, 5, 0, // Skip to: 2458
/* 1066 */    MCD_OPC_CheckField, 16, 5, 0, 105, 5, 0, // Skip to: 2458
/* 1073 */    MCD_OPC_Decode, 172, 8, 219, 1, // Opcode: CLASS_D
/* 1078 */    MCD_OPC_FilterValue, 28, 10, 0, 0, // Skip to: 1093
/* 1083 */    MCD_OPC_CheckPredicate, 79, 90, 5, 0, // Skip to: 2458
/* 1088 */    MCD_OPC_Decode, 249, 15, 219, 2, // Opcode: MIN_D
/* 1093 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 1108
/* 1098 */    MCD_OPC_CheckPredicate, 79, 75, 5, 0, // Skip to: 2458
/* 1103 */    MCD_OPC_Decode, 190, 15, 219, 2, // Opcode: MAX_D
/* 1108 */    MCD_OPC_FilterValue, 30, 10, 0, 0, // Skip to: 1123
/* 1113 */    MCD_OPC_CheckPredicate, 79, 60, 5, 0, // Skip to: 2458
/* 1118 */    MCD_OPC_Decode, 233, 15, 219, 2, // Opcode: MINA_D
/* 1123 */    MCD_OPC_FilterValue, 31, 50, 5, 0, // Skip to: 2458
/* 1128 */    MCD_OPC_CheckPredicate, 79, 45, 5, 0, // Skip to: 2458
/* 1133 */    MCD_OPC_Decode, 174, 15, 219, 2, // Opcode: MAXA_D
/* 1138 */    MCD_OPC_FilterValue, 20, 243, 0, 0, // Skip to: 1386
/* 1143 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 1146 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 1161
/* 1151 */    MCD_OPC_CheckPredicate, 79, 22, 5, 0, // Skip to: 2458
/* 1156 */    MCD_OPC_Decode, 243, 8, 220, 2, // Opcode: CMP_F_S
/* 1161 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 1176
/* 1166 */    MCD_OPC_CheckPredicate, 79, 7, 5, 0, // Skip to: 2458
/* 1171 */    MCD_OPC_Decode, 174, 9, 220, 2, // Opcode: CMP_UN_S
/* 1176 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1191
/* 1181 */    MCD_OPC_CheckPredicate, 79, 248, 4, 0, // Skip to: 2458
/* 1186 */    MCD_OPC_Decode, 240, 8, 220, 2, // Opcode: CMP_EQ_S
/* 1191 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1206
/* 1196 */    MCD_OPC_CheckPredicate, 79, 233, 4, 0, // Skip to: 2458
/* 1201 */    MCD_OPC_Decode, 162, 9, 220, 2, // Opcode: CMP_UEQ_S
/* 1206 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 1221
/* 1211 */    MCD_OPC_CheckPredicate, 79, 218, 4, 0, // Skip to: 2458
/* 1216 */    MCD_OPC_Decode, 254, 8, 220, 2, // Opcode: CMP_LT_S
/* 1221 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1236
/* 1226 */    MCD_OPC_CheckPredicate, 79, 203, 4, 0, // Skip to: 2458
/* 1231 */    MCD_OPC_Decode, 170, 9, 220, 2, // Opcode: CMP_ULT_S
/* 1236 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 1251
/* 1241 */    MCD_OPC_CheckPredicate, 79, 188, 4, 0, // Skip to: 2458
/* 1246 */    MCD_OPC_Decode, 248, 8, 220, 2, // Opcode: CMP_LE_S
/* 1251 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 1266
/* 1256 */    MCD_OPC_CheckPredicate, 79, 173, 4, 0, // Skip to: 2458
/* 1261 */    MCD_OPC_Decode, 166, 9, 220, 2, // Opcode: CMP_ULE_S
/* 1266 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 1281
/* 1271 */    MCD_OPC_CheckPredicate, 79, 158, 4, 0, // Skip to: 2458
/* 1276 */    MCD_OPC_Decode, 130, 9, 220, 2, // Opcode: CMP_SAF_S
/* 1281 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1296
/* 1286 */    MCD_OPC_CheckPredicate, 79, 143, 4, 0, // Skip to: 2458
/* 1291 */    MCD_OPC_Decode, 158, 9, 220, 2, // Opcode: CMP_SUN_S
/* 1296 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1311
/* 1301 */    MCD_OPC_CheckPredicate, 79, 128, 4, 0, // Skip to: 2458
/* 1306 */    MCD_OPC_Decode, 134, 9, 220, 2, // Opcode: CMP_SEQ_S
/* 1311 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1326
/* 1316 */    MCD_OPC_CheckPredicate, 79, 113, 4, 0, // Skip to: 2458
/* 1321 */    MCD_OPC_Decode, 146, 9, 220, 2, // Opcode: CMP_SUEQ_S
/* 1326 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 1341
/* 1331 */    MCD_OPC_CheckPredicate, 79, 98, 4, 0, // Skip to: 2458
/* 1336 */    MCD_OPC_Decode, 142, 9, 220, 2, // Opcode: CMP_SLT_S
/* 1341 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 1356
/* 1346 */    MCD_OPC_CheckPredicate, 79, 83, 4, 0, // Skip to: 2458
/* 1351 */    MCD_OPC_Decode, 154, 9, 220, 2, // Opcode: CMP_SULT_S
/* 1356 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 1371
/* 1361 */    MCD_OPC_CheckPredicate, 79, 68, 4, 0, // Skip to: 2458
/* 1366 */    MCD_OPC_Decode, 138, 9, 220, 2, // Opcode: CMP_SLE_S
/* 1371 */    MCD_OPC_FilterValue, 15, 58, 4, 0, // Skip to: 2458
/* 1376 */    MCD_OPC_CheckPredicate, 79, 53, 4, 0, // Skip to: 2458
/* 1381 */    MCD_OPC_Decode, 150, 9, 220, 2, // Opcode: CMP_SULE_S
/* 1386 */    MCD_OPC_FilterValue, 21, 43, 4, 0, // Skip to: 2458
/* 1391 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 1394 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 1409
/* 1399 */    MCD_OPC_CheckPredicate, 79, 30, 4, 0, // Skip to: 2458
/* 1404 */    MCD_OPC_Decode, 242, 8, 221, 2, // Opcode: CMP_F_D
/* 1409 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 1424
/* 1414 */    MCD_OPC_CheckPredicate, 79, 15, 4, 0, // Skip to: 2458
/* 1419 */    MCD_OPC_Decode, 172, 9, 221, 2, // Opcode: CMP_UN_D
/* 1424 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1439
/* 1429 */    MCD_OPC_CheckPredicate, 79, 0, 4, 0, // Skip to: 2458
/* 1434 */    MCD_OPC_Decode, 236, 8, 221, 2, // Opcode: CMP_EQ_D
/* 1439 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1454
/* 1444 */    MCD_OPC_CheckPredicate, 79, 241, 3, 0, // Skip to: 2458
/* 1449 */    MCD_OPC_Decode, 160, 9, 221, 2, // Opcode: CMP_UEQ_D
/* 1454 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 1469
/* 1459 */    MCD_OPC_CheckPredicate, 79, 226, 3, 0, // Skip to: 2458
/* 1464 */    MCD_OPC_Decode, 250, 8, 221, 2, // Opcode: CMP_LT_D
/* 1469 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1484
/* 1474 */    MCD_OPC_CheckPredicate, 79, 211, 3, 0, // Skip to: 2458
/* 1479 */    MCD_OPC_Decode, 168, 9, 221, 2, // Opcode: CMP_ULT_D
/* 1484 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 1499
/* 1489 */    MCD_OPC_CheckPredicate, 79, 196, 3, 0, // Skip to: 2458
/* 1494 */    MCD_OPC_Decode, 244, 8, 221, 2, // Opcode: CMP_LE_D
/* 1499 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 1514
/* 1504 */    MCD_OPC_CheckPredicate, 79, 181, 3, 0, // Skip to: 2458
/* 1509 */    MCD_OPC_Decode, 164, 9, 221, 2, // Opcode: CMP_ULE_D
/* 1514 */    MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 1529
/* 1519 */    MCD_OPC_CheckPredicate, 79, 166, 3, 0, // Skip to: 2458
/* 1524 */    MCD_OPC_Decode, 128, 9, 221, 2, // Opcode: CMP_SAF_D
/* 1529 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1544
/* 1534 */    MCD_OPC_CheckPredicate, 79, 151, 3, 0, // Skip to: 2458
/* 1539 */    MCD_OPC_Decode, 156, 9, 221, 2, // Opcode: CMP_SUN_D
/* 1544 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1559
/* 1549 */    MCD_OPC_CheckPredicate, 79, 136, 3, 0, // Skip to: 2458
/* 1554 */    MCD_OPC_Decode, 132, 9, 221, 2, // Opcode: CMP_SEQ_D
/* 1559 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1574
/* 1564 */    MCD_OPC_CheckPredicate, 79, 121, 3, 0, // Skip to: 2458
/* 1569 */    MCD_OPC_Decode, 144, 9, 221, 2, // Opcode: CMP_SUEQ_D
/* 1574 */    MCD_OPC_FilterValue, 12, 10, 0, 0, // Skip to: 1589
/* 1579 */    MCD_OPC_CheckPredicate, 79, 106, 3, 0, // Skip to: 2458
/* 1584 */    MCD_OPC_Decode, 140, 9, 221, 2, // Opcode: CMP_SLT_D
/* 1589 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 1604
/* 1594 */    MCD_OPC_CheckPredicate, 79, 91, 3, 0, // Skip to: 2458
/* 1599 */    MCD_OPC_Decode, 152, 9, 221, 2, // Opcode: CMP_SULT_D
/* 1604 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 1619
/* 1609 */    MCD_OPC_CheckPredicate, 79, 76, 3, 0, // Skip to: 2458
/* 1614 */    MCD_OPC_Decode, 136, 9, 221, 2, // Opcode: CMP_SLE_D
/* 1619 */    MCD_OPC_FilterValue, 15, 66, 3, 0, // Skip to: 2458
/* 1624 */    MCD_OPC_CheckPredicate, 79, 61, 3, 0, // Skip to: 2458
/* 1629 */    MCD_OPC_Decode, 148, 9, 221, 2, // Opcode: CMP_SULE_D
/* 1634 */    MCD_OPC_FilterValue, 18, 93, 0, 0, // Skip to: 1732
/* 1639 */    MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 1642 */    MCD_OPC_FilterValue, 9, 10, 0, 0, // Skip to: 1657
/* 1647 */    MCD_OPC_CheckPredicate, 76, 38, 3, 0, // Skip to: 2458
/* 1652 */    MCD_OPC_Decode, 221, 6, 222, 2, // Opcode: BC2EQZ
/* 1657 */    MCD_OPC_FilterValue, 10, 10, 0, 0, // Skip to: 1672
/* 1662 */    MCD_OPC_CheckPredicate, 76, 23, 3, 0, // Skip to: 2458
/* 1667 */    MCD_OPC_Decode, 224, 14, 223, 2, // Opcode: LWC2_R6
/* 1672 */    MCD_OPC_FilterValue, 11, 10, 0, 0, // Skip to: 1687
/* 1677 */    MCD_OPC_CheckPredicate, 76, 8, 3, 0, // Skip to: 2458
/* 1682 */    MCD_OPC_Decode, 131, 21, 223, 2, // Opcode: SWC2_R6
/* 1687 */    MCD_OPC_FilterValue, 13, 10, 0, 0, // Skip to: 1702
/* 1692 */    MCD_OPC_CheckPredicate, 76, 249, 2, 0, // Skip to: 2458
/* 1697 */    MCD_OPC_Decode, 223, 6, 222, 2, // Opcode: BC2NEZ
/* 1702 */    MCD_OPC_FilterValue, 14, 10, 0, 0, // Skip to: 1717
/* 1707 */    MCD_OPC_CheckPredicate, 76, 234, 2, 0, // Skip to: 2458
/* 1712 */    MCD_OPC_Decode, 164, 14, 223, 2, // Opcode: LDC2_R6
/* 1717 */    MCD_OPC_FilterValue, 15, 224, 2, 0, // Skip to: 2458
/* 1722 */    MCD_OPC_CheckPredicate, 76, 219, 2, 0, // Skip to: 2458
/* 1727 */    MCD_OPC_Decode, 255, 18, 223, 2, // Opcode: SDC2_R6
/* 1732 */    MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 1747
/* 1737 */    MCD_OPC_CheckPredicate, 76, 204, 2, 0, // Skip to: 2458
/* 1742 */    MCD_OPC_Decode, 135, 7, 224, 2, // Opcode: BGEZC
/* 1747 */    MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 1762
/* 1752 */    MCD_OPC_CheckPredicate, 76, 189, 2, 0, // Skip to: 2458
/* 1757 */    MCD_OPC_Decode, 192, 7, 225, 2, // Opcode: BLTZC
/* 1762 */    MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 1777
/* 1767 */    MCD_OPC_CheckPredicate, 76, 174, 2, 0, // Skip to: 2458
/* 1772 */    MCD_OPC_Decode, 203, 7, 226, 2, // Opcode: BNEC
/* 1777 */    MCD_OPC_FilterValue, 29, 10, 0, 0, // Skip to: 1792
/* 1782 */    MCD_OPC_CheckPredicate, 77, 159, 2, 0, // Skip to: 2458
/* 1787 */    MCD_OPC_Decode, 210, 10, 227, 2, // Opcode: DAUI
/* 1792 */    MCD_OPC_FilterValue, 31, 135, 1, 0, // Skip to: 2188
/* 1797 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 1800 */    MCD_OPC_FilterValue, 15, 123, 0, 0, // Skip to: 1928
/* 1805 */    MCD_OPC_ExtractField, 6, 10,  // Inst{15-6} ...
/* 1808 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 1823
/* 1813 */    MCD_OPC_CheckPredicate, 80, 128, 2, 0, // Skip to: 2458
/* 1818 */    MCD_OPC_Decode, 183, 9, 228, 2, // Opcode: CRC32B
/* 1823 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 1838
/* 1828 */    MCD_OPC_CheckPredicate, 80, 113, 2, 0, // Skip to: 2458
/* 1833 */    MCD_OPC_Decode, 189, 9, 228, 2, // Opcode: CRC32H
/* 1838 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1853
/* 1843 */    MCD_OPC_CheckPredicate, 80, 98, 2, 0, // Skip to: 2458
/* 1848 */    MCD_OPC_Decode, 190, 9, 228, 2, // Opcode: CRC32W
/* 1853 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1868
/* 1858 */    MCD_OPC_CheckPredicate, 81, 83, 2, 0, // Skip to: 2458
/* 1863 */    MCD_OPC_Decode, 188, 9, 228, 2, // Opcode: CRC32D
/* 1868 */    MCD_OPC_FilterValue, 4, 10, 0, 0, // Skip to: 1883
/* 1873 */    MCD_OPC_CheckPredicate, 80, 68, 2, 0, // Skip to: 2458
/* 1878 */    MCD_OPC_Decode, 184, 9, 228, 2, // Opcode: CRC32CB
/* 1883 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1898
/* 1888 */    MCD_OPC_CheckPredicate, 80, 53, 2, 0, // Skip to: 2458
/* 1893 */    MCD_OPC_Decode, 186, 9, 228, 2, // Opcode: CRC32CH
/* 1898 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 1913
/* 1903 */    MCD_OPC_CheckPredicate, 80, 38, 2, 0, // Skip to: 2458
/* 1908 */    MCD_OPC_Decode, 187, 9, 228, 2, // Opcode: CRC32CW
/* 1913 */    MCD_OPC_FilterValue, 7, 28, 2, 0, // Skip to: 2458
/* 1918 */    MCD_OPC_CheckPredicate, 81, 23, 2, 0, // Skip to: 2458
/* 1923 */    MCD_OPC_Decode, 185, 9, 228, 2, // Opcode: CRC32CD
/* 1928 */    MCD_OPC_FilterValue, 32, 47, 0, 0, // Skip to: 1980
/* 1933 */    MCD_OPC_ExtractField, 8, 3,  // Inst{10-8} ...
/* 1936 */    MCD_OPC_FilterValue, 0, 24, 0, 0, // Skip to: 1965
/* 1941 */    MCD_OPC_CheckPredicate, 75, 0, 2, 0, // Skip to: 2458
/* 1946 */    MCD_OPC_CheckField, 21, 5, 0, 249, 1, 0, // Skip to: 2458
/* 1953 */    MCD_OPC_CheckField, 6, 2, 0, 242, 1, 0, // Skip to: 2458
/* 1960 */    MCD_OPC_Decode, 167, 7, 193, 2, // Opcode: BITSWAP
/* 1965 */    MCD_OPC_FilterValue, 2, 232, 1, 0, // Skip to: 2458
/* 1970 */    MCD_OPC_CheckPredicate, 75, 227, 1, 0, // Skip to: 2458
/* 1975 */    MCD_OPC_Decode, 141, 6, 229, 2, // Opcode: ALIGN
/* 1980 */    MCD_OPC_FilterValue, 36, 47, 0, 0, // Skip to: 2032
/* 1985 */    MCD_OPC_ExtractField, 9, 2,  // Inst{10-9} ...
/* 1988 */    MCD_OPC_FilterValue, 0, 24, 0, 0, // Skip to: 2017
/* 1993 */    MCD_OPC_CheckPredicate, 77, 204, 1, 0, // Skip to: 2458
/* 1998 */    MCD_OPC_CheckField, 21, 5, 0, 197, 1, 0, // Skip to: 2458
/* 2005 */    MCD_OPC_CheckField, 6, 3, 0, 190, 1, 0, // Skip to: 2458
/* 2012 */    MCD_OPC_Decode, 211, 10, 230, 2, // Opcode: DBITSWAP
/* 2017 */    MCD_OPC_FilterValue, 1, 180, 1, 0, // Skip to: 2458
/* 2022 */    MCD_OPC_CheckPredicate, 77, 175, 1, 0, // Skip to: 2458
/* 2027 */    MCD_OPC_Decode, 208, 10, 231, 2, // Opcode: DALIGN
/* 2032 */    MCD_OPC_FilterValue, 37, 17, 0, 0, // Skip to: 2054
/* 2037 */    MCD_OPC_CheckPredicate, 76, 160, 1, 0, // Skip to: 2458
/* 2042 */    MCD_OPC_CheckField, 6, 1, 0, 153, 1, 0, // Skip to: 2458
/* 2049 */    MCD_OPC_Decode, 144, 8, 198, 2, // Opcode: CACHE_R6
/* 2054 */    MCD_OPC_FilterValue, 38, 10, 0, 0, // Skip to: 2069
/* 2059 */    MCD_OPC_CheckPredicate, 82, 138, 1, 0, // Skip to: 2458
/* 2064 */    MCD_OPC_Decode, 241, 18, 232, 2, // Opcode: SC_R6
/* 2069 */    MCD_OPC_FilterValue, 39, 10, 0, 0, // Skip to: 2084
/* 2074 */    MCD_OPC_CheckPredicate, 75, 123, 1, 0, // Skip to: 2458
/* 2079 */    MCD_OPC_Decode, 236, 18, 232, 2, // Opcode: SCD_R6
/* 2084 */    MCD_OPC_FilterValue, 53, 17, 0, 0, // Skip to: 2106
/* 2089 */    MCD_OPC_CheckPredicate, 76, 108, 1, 0, // Skip to: 2458
/* 2094 */    MCD_OPC_CheckField, 6, 1, 0, 101, 1, 0, // Skip to: 2458
/* 2101 */    MCD_OPC_Decode, 159, 18, 198, 2, // Opcode: PREF_R6
/* 2106 */    MCD_OPC_FilterValue, 54, 10, 0, 0, // Skip to: 2121
/* 2111 */    MCD_OPC_CheckPredicate, 82, 86, 1, 0, // Skip to: 2458
/* 2116 */    MCD_OPC_Decode, 206, 14, 232, 2, // Opcode: LL_R6
/* 2121 */    MCD_OPC_FilterValue, 55, 10, 0, 0, // Skip to: 2136
/* 2126 */    MCD_OPC_CheckPredicate, 77, 71, 1, 0, // Skip to: 2458
/* 2131 */    MCD_OPC_Decode, 201, 14, 232, 2, // Opcode: LLD_R6
/* 2136 */    MCD_OPC_FilterValue, 61, 61, 1, 0, // Skip to: 2458
/* 2141 */    MCD_OPC_ExtractField, 6, 2,  // Inst{7-6} ...
/* 2144 */    MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 2166
/* 2149 */    MCD_OPC_CheckPredicate, 83, 48, 1, 0, // Skip to: 2458
/* 2154 */    MCD_OPC_CheckField, 10, 11, 0, 41, 1, 0, // Skip to: 2458
/* 2161 */    MCD_OPC_Decode, 181, 13, 175, 1, // Opcode: GINVI
/* 2166 */    MCD_OPC_FilterValue, 2, 31, 1, 0, // Skip to: 2458
/* 2171 */    MCD_OPC_CheckPredicate, 83, 26, 1, 0, // Skip to: 2458
/* 2176 */    MCD_OPC_CheckField, 10, 11, 0, 19, 1, 0, // Skip to: 2458
/* 2183 */    MCD_OPC_Decode, 183, 13, 233, 2, // Opcode: GINVT
/* 2188 */    MCD_OPC_FilterValue, 50, 10, 0, 0, // Skip to: 2203
/* 2193 */    MCD_OPC_CheckPredicate, 76, 4, 1, 0, // Skip to: 2458
/* 2198 */    MCD_OPC_Decode, 209, 6, 234, 2, // Opcode: BC
/* 2203 */    MCD_OPC_FilterValue, 53, 27, 0, 0, // Skip to: 2235
/* 2208 */    MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 2225
/* 2213 */    MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 2225
/* 2220 */    MCD_OPC_Decode, 146, 7, 169, 1, // Opcode: BGTZC_MMR6
/* 2225 */    MCD_OPC_CheckPredicate, 24, 228, 0, 0, // Skip to: 2458
/* 2230 */    MCD_OPC_Decode, 194, 7, 169, 1, // Opcode: BLTZC_MMR6
/* 2235 */    MCD_OPC_FilterValue, 54, 26, 0, 0, // Skip to: 2266
/* 2240 */    MCD_OPC_CheckPredicate, 75, 11, 0, 0, // Skip to: 2256
/* 2245 */    MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 2256
/* 2252 */    MCD_OPC_Decode, 248, 13, 92, // Opcode: JIC
/* 2256 */    MCD_OPC_CheckPredicate, 76, 197, 0, 0, // Skip to: 2458
/* 2261 */    MCD_OPC_Decode, 243, 6, 235, 2, // Opcode: BEQZC
/* 2266 */    MCD_OPC_FilterValue, 58, 10, 0, 0, // Skip to: 2281
/* 2271 */    MCD_OPC_CheckPredicate, 75, 182, 0, 0, // Skip to: 2458
/* 2276 */    MCD_OPC_Decode, 201, 6, 234, 2, // Opcode: BALC
/* 2281 */    MCD_OPC_FilterValue, 59, 109, 0, 0, // Skip to: 2395
/* 2286 */    MCD_OPC_ExtractField, 19, 2,  // Inst{20-19} ...
/* 2289 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2304
/* 2294 */    MCD_OPC_CheckPredicate, 75, 159, 0, 0, // Skip to: 2458
/* 2299 */    MCD_OPC_Decode, 195, 5, 163, 1, // Opcode: ADDIUPC
/* 2304 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 2319
/* 2309 */    MCD_OPC_CheckPredicate, 75, 144, 0, 0, // Skip to: 2458
/* 2314 */    MCD_OPC_Decode, 239, 14, 163, 1, // Opcode: LWPC
/* 2319 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 2334
/* 2324 */    MCD_OPC_CheckPredicate, 84, 129, 0, 0, // Skip to: 2458
/* 2329 */    MCD_OPC_Decode, 248, 14, 163, 1, // Opcode: LWUPC
/* 2334 */    MCD_OPC_FilterValue, 3, 119, 0, 0, // Skip to: 2458
/* 2339 */    MCD_OPC_ExtractField, 18, 1,  // Inst{18} ...
/* 2342 */    MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 2357
/* 2347 */    MCD_OPC_CheckPredicate, 84, 106, 0, 0, // Skip to: 2458
/* 2352 */    MCD_OPC_Decode, 171, 14, 236, 2, // Opcode: LDPC
/* 2357 */    MCD_OPC_FilterValue, 1, 96, 0, 0, // Skip to: 2458
/* 2362 */    MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 2365 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 2380
/* 2370 */    MCD_OPC_CheckPredicate, 75, 83, 0, 0, // Skip to: 2458
/* 2375 */    MCD_OPC_Decode, 170, 6, 164, 1, // Opcode: AUIPC
/* 2380 */    MCD_OPC_FilterValue, 3, 73, 0, 0, // Skip to: 2458
/* 2385 */    MCD_OPC_CheckPredicate, 75, 68, 0, 0, // Skip to: 2458
/* 2390 */    MCD_OPC_Decode, 143, 6, 164, 1, // Opcode: ALUIPC
/* 2395 */    MCD_OPC_FilterValue, 61, 27, 0, 0, // Skip to: 2427
/* 2400 */    MCD_OPC_CheckPredicate, 24, 12, 0, 0, // Skip to: 2417
/* 2405 */    MCD_OPC_CheckField, 16, 5, 0, 5, 0, 0, // Skip to: 2417
/* 2412 */    MCD_OPC_Decode, 175, 7, 171, 1, // Opcode: BLEZC_MMR6
/* 2417 */    MCD_OPC_CheckPredicate, 24, 36, 0, 0, // Skip to: 2458
/* 2422 */    MCD_OPC_Decode, 137, 7, 171, 1, // Opcode: BGEZC_MMR6
/* 2427 */    MCD_OPC_FilterValue, 62, 26, 0, 0, // Skip to: 2458
/* 2432 */    MCD_OPC_CheckPredicate, 75, 11, 0, 0, // Skip to: 2448
/* 2437 */    MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 2448
/* 2444 */    MCD_OPC_Decode, 245, 13, 92, // Opcode: JIALC
/* 2448 */    MCD_OPC_CheckPredicate, 76, 5, 0, 0, // Skip to: 2458
/* 2453 */    MCD_OPC_Decode, 218, 7, 235, 2, // Opcode: BNEZC
/* 2458 */    MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32r6_64r6_Ambiguous32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 6, 27, 0, 0, // Skip to: 35
/* 8 */       MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 25
/* 13 */      MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 25
/* 20 */      MCD_OPC_Decode, 171, 7, 212, 2, // Opcode: BLEZALC
/* 25 */      MCD_OPC_CheckPredicate, 76, 165, 0, 0, // Skip to: 195
/* 30 */      MCD_OPC_Decode, 252, 6, 212, 2, // Opcode: BGEUC
/* 35 */      MCD_OPC_FilterValue, 7, 27, 0, 0, // Skip to: 67
/* 40 */      MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 57
/* 45 */      MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 57
/* 52 */      MCD_OPC_Decode, 142, 7, 213, 2, // Opcode: BGTZALC
/* 57 */      MCD_OPC_CheckPredicate, 76, 133, 0, 0, // Skip to: 195
/* 62 */      MCD_OPC_Decode, 181, 7, 213, 2, // Opcode: BLTUC
/* 67 */      MCD_OPC_FilterValue, 8, 27, 0, 0, // Skip to: 99
/* 72 */      MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 89
/* 77 */      MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 89
/* 84 */      MCD_OPC_Decode, 241, 6, 226, 2, // Opcode: BEQZALC
/* 89 */      MCD_OPC_CheckPredicate, 76, 101, 0, 0, // Skip to: 195
/* 94 */      MCD_OPC_Decode, 231, 7, 214, 2, // Opcode: BOVC
/* 99 */      MCD_OPC_FilterValue, 22, 27, 0, 0, // Skip to: 131
/* 104 */     MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 121
/* 109 */     MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 121
/* 116 */     MCD_OPC_Decode, 173, 7, 224, 2, // Opcode: BLEZC
/* 121 */     MCD_OPC_CheckPredicate, 76, 69, 0, 0, // Skip to: 195
/* 126 */     MCD_OPC_Decode, 249, 6, 224, 2, // Opcode: BGEC
/* 131 */     MCD_OPC_FilterValue, 23, 27, 0, 0, // Skip to: 163
/* 136 */     MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 153
/* 141 */     MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 153
/* 148 */     MCD_OPC_Decode, 144, 7, 225, 2, // Opcode: BGTZC
/* 153 */     MCD_OPC_CheckPredicate, 76, 37, 0, 0, // Skip to: 195
/* 158 */     MCD_OPC_Decode, 178, 7, 225, 2, // Opcode: BLTC
/* 163 */     MCD_OPC_FilterValue, 24, 27, 0, 0, // Skip to: 195
/* 168 */     MCD_OPC_CheckPredicate, 76, 12, 0, 0, // Skip to: 185
/* 173 */     MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 185
/* 180 */     MCD_OPC_Decode, 216, 7, 226, 2, // Opcode: BNEZALC
/* 185 */     MCD_OPC_CheckPredicate, 76, 5, 0, 0, // Skip to: 195
/* 190 */     MCD_OPC_Decode, 224, 7, 226, 2, // Opcode: BNVC
/* 195 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32r6_64r6_BranchZero32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 22, 10, 0, 0, // Skip to: 18
/* 8 */       MCD_OPC_CheckPredicate, 85, 20, 0, 0, // Skip to: 33
/* 13 */      MCD_OPC_Decode, 136, 7, 224, 2, // Opcode: BGEZC64
/* 18 */      MCD_OPC_FilterValue, 23, 10, 0, 0, // Skip to: 33
/* 23 */      MCD_OPC_CheckPredicate, 85, 5, 0, 0, // Skip to: 33
/* 28 */      MCD_OPC_Decode, 193, 7, 225, 2, // Opcode: BLTZC64
/* 33 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32r6_64r6_GP6432[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 53, 0, 0, // Skip to: 61
/* 8 */       MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 11 */      MCD_OPC_FilterValue, 53, 9, 0, 0, // Skip to: 25
/* 16 */      MCD_OPC_CheckPredicate, 86, 226, 0, 0, // Skip to: 247
/* 21 */      MCD_OPC_Decode, 142, 19, 12, // Opcode: SELEQZ64
/* 25 */      MCD_OPC_FilterValue, 55, 9, 0, 0, // Skip to: 39
/* 30 */      MCD_OPC_CheckPredicate, 86, 212, 0, 0, // Skip to: 247
/* 35 */      MCD_OPC_Decode, 149, 19, 12, // Opcode: SELNEZ64
/* 39 */      MCD_OPC_FilterValue, 137, 8, 202, 0, 0, // Skip to: 247
/* 45 */      MCD_OPC_CheckPredicate, 75, 197, 0, 0, // Skip to: 247
/* 50 */      MCD_OPC_CheckField, 11, 10, 0, 190, 0, 0, // Skip to: 247
/* 57 */      MCD_OPC_Decode, 132, 14, 13, // Opcode: JR_HB64_R6
/* 61 */      MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 76
/* 66 */      MCD_OPC_CheckPredicate, 85, 176, 0, 0, // Skip to: 247
/* 71 */      MCD_OPC_Decode, 253, 6, 212, 2, // Opcode: BGEUC64
/* 76 */      MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 91
/* 81 */      MCD_OPC_CheckPredicate, 85, 161, 0, 0, // Skip to: 247
/* 86 */      MCD_OPC_Decode, 182, 7, 213, 2, // Opcode: BLTUC64
/* 91 */      MCD_OPC_FilterValue, 8, 10, 0, 0, // Skip to: 106
/* 96 */      MCD_OPC_CheckPredicate, 85, 146, 0, 0, // Skip to: 247
/* 101 */     MCD_OPC_Decode, 237, 6, 214, 2, // Opcode: BEQC64
/* 106 */     MCD_OPC_FilterValue, 22, 27, 0, 0, // Skip to: 138
/* 111 */     MCD_OPC_CheckPredicate, 85, 12, 0, 0, // Skip to: 128
/* 116 */     MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 128
/* 123 */     MCD_OPC_Decode, 174, 7, 224, 2, // Opcode: BLEZC64
/* 128 */     MCD_OPC_CheckPredicate, 85, 114, 0, 0, // Skip to: 247
/* 133 */     MCD_OPC_Decode, 250, 6, 224, 2, // Opcode: BGEC64
/* 138 */     MCD_OPC_FilterValue, 23, 27, 0, 0, // Skip to: 170
/* 143 */     MCD_OPC_CheckPredicate, 85, 12, 0, 0, // Skip to: 160
/* 148 */     MCD_OPC_CheckField, 21, 5, 0, 5, 0, 0, // Skip to: 160
/* 155 */     MCD_OPC_Decode, 145, 7, 225, 2, // Opcode: BGTZC64
/* 160 */     MCD_OPC_CheckPredicate, 85, 82, 0, 0, // Skip to: 247
/* 165 */     MCD_OPC_Decode, 179, 7, 225, 2, // Opcode: BLTC64
/* 170 */     MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 185
/* 175 */     MCD_OPC_CheckPredicate, 85, 67, 0, 0, // Skip to: 247
/* 180 */     MCD_OPC_Decode, 204, 7, 226, 2, // Opcode: BNEC64
/* 185 */     MCD_OPC_FilterValue, 54, 26, 0, 0, // Skip to: 216
/* 190 */     MCD_OPC_CheckPredicate, 85, 11, 0, 0, // Skip to: 206
/* 195 */     MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 206
/* 202 */     MCD_OPC_Decode, 249, 13, 11, // Opcode: JIC64
/* 206 */     MCD_OPC_CheckPredicate, 85, 36, 0, 0, // Skip to: 247
/* 211 */     MCD_OPC_Decode, 245, 6, 237, 2, // Opcode: BEQZC64
/* 216 */     MCD_OPC_FilterValue, 62, 26, 0, 0, // Skip to: 247
/* 221 */     MCD_OPC_CheckPredicate, 85, 11, 0, 0, // Skip to: 237
/* 226 */     MCD_OPC_CheckField, 21, 5, 0, 4, 0, 0, // Skip to: 237
/* 233 */     MCD_OPC_Decode, 246, 13, 11, // Opcode: JIALC64
/* 237 */     MCD_OPC_CheckPredicate, 85, 5, 0, 0, // Skip to: 247
/* 242 */     MCD_OPC_Decode, 220, 7, 237, 2, // Opcode: BNEZC64
/* 247 */     MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips32r6_64r6_PTR6432[] = {
/* 0 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 3 */       MCD_OPC_FilterValue, 38, 17, 0, 0, // Skip to: 25
/* 8 */       MCD_OPC_CheckPredicate, 87, 34, 0, 0, // Skip to: 47
/* 13 */      MCD_OPC_CheckField, 26, 6, 31, 27, 0, 0, // Skip to: 47
/* 20 */      MCD_OPC_Decode, 234, 18, 232, 2, // Opcode: SC64_R6
/* 25 */      MCD_OPC_FilterValue, 54, 17, 0, 0, // Skip to: 47
/* 30 */      MCD_OPC_CheckPredicate, 87, 12, 0, 0, // Skip to: 47
/* 35 */      MCD_OPC_CheckField, 26, 6, 31, 5, 0, 0, // Skip to: 47
/* 42 */      MCD_OPC_Decode, 199, 14, 232, 2, // Opcode: LL64_R6
/* 47 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMips6432[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 0, 236, 1, 0, // Skip to: 500
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 8, 16, 0, 0, // Skip to: 32
/* 16 */      MCD_OPC_CheckPredicate, 88, 214, 4, 0, // Skip to: 1259
/* 21 */      MCD_OPC_CheckField, 6, 15, 16, 207, 4, 0, // Skip to: 1259
/* 28 */      MCD_OPC_Decode, 131, 14, 13, // Opcode: JR_HB64
/* 32 */      MCD_OPC_FilterValue, 9, 45, 0, 0, // Skip to: 82
/* 37 */      MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 40 */      MCD_OPC_FilterValue, 0, 16, 0, 0, // Skip to: 61
/* 45 */      MCD_OPC_CheckPredicate, 89, 185, 4, 0, // Skip to: 1259
/* 50 */      MCD_OPC_CheckField, 16, 5, 0, 178, 4, 0, // Skip to: 1259
/* 57 */      MCD_OPC_Decode, 232, 13, 15, // Opcode: JALR64
/* 61 */      MCD_OPC_FilterValue, 16, 169, 4, 0, // Skip to: 1259
/* 66 */      MCD_OPC_CheckPredicate, 90, 164, 4, 0, // Skip to: 1259
/* 71 */      MCD_OPC_CheckField, 16, 5, 0, 157, 4, 0, // Skip to: 1259
/* 78 */      MCD_OPC_Decode, 239, 13, 15, // Opcode: JALR_HB64
/* 82 */      MCD_OPC_FilterValue, 20, 17, 0, 0, // Skip to: 104
/* 87 */      MCD_OPC_CheckPredicate, 91, 143, 4, 0, // Skip to: 1259
/* 92 */      MCD_OPC_CheckField, 6, 5, 0, 136, 4, 0, // Skip to: 1259
/* 99 */      MCD_OPC_Decode, 197, 11, 238, 2, // Opcode: DSLLV
/* 104 */     MCD_OPC_FilterValue, 22, 33, 0, 0, // Skip to: 142
/* 109 */     MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 112 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 127
/* 117 */     MCD_OPC_CheckPredicate, 91, 113, 4, 0, // Skip to: 1259
/* 122 */     MCD_OPC_Decode, 203, 11, 238, 2, // Opcode: DSRLV
/* 127 */     MCD_OPC_FilterValue, 1, 103, 4, 0, // Skip to: 1259
/* 132 */     MCD_OPC_CheckPredicate, 90, 98, 4, 0, // Skip to: 1259
/* 137 */     MCD_OPC_Decode, 190, 11, 238, 2, // Opcode: DROTRV
/* 142 */     MCD_OPC_FilterValue, 23, 17, 0, 0, // Skip to: 164
/* 147 */     MCD_OPC_CheckPredicate, 91, 83, 4, 0, // Skip to: 1259
/* 152 */     MCD_OPC_CheckField, 6, 5, 0, 76, 4, 0, // Skip to: 1259
/* 159 */     MCD_OPC_Decode, 200, 11, 238, 2, // Opcode: DSRAV
/* 164 */     MCD_OPC_FilterValue, 28, 17, 0, 0, // Skip to: 186
/* 169 */     MCD_OPC_CheckPredicate, 92, 61, 4, 0, // Skip to: 1259
/* 174 */     MCD_OPC_CheckField, 6, 10, 0, 54, 4, 0, // Skip to: 1259
/* 181 */     MCD_OPC_Decode, 133, 11, 239, 2, // Opcode: DMULT
/* 186 */     MCD_OPC_FilterValue, 29, 17, 0, 0, // Skip to: 208
/* 191 */     MCD_OPC_CheckPredicate, 92, 39, 4, 0, // Skip to: 1259
/* 196 */     MCD_OPC_CheckField, 6, 10, 0, 32, 4, 0, // Skip to: 1259
/* 203 */     MCD_OPC_Decode, 134, 11, 239, 2, // Opcode: DMULTu
/* 208 */     MCD_OPC_FilterValue, 30, 17, 0, 0, // Skip to: 230
/* 213 */     MCD_OPC_CheckPredicate, 92, 17, 4, 0, // Skip to: 1259
/* 218 */     MCD_OPC_CheckField, 6, 10, 0, 10, 4, 0, // Skip to: 1259
/* 225 */     MCD_OPC_Decode, 192, 11, 239, 2, // Opcode: DSDIV
/* 230 */     MCD_OPC_FilterValue, 31, 17, 0, 0, // Skip to: 252
/* 235 */     MCD_OPC_CheckPredicate, 92, 251, 3, 0, // Skip to: 1259
/* 240 */     MCD_OPC_CheckField, 6, 10, 0, 244, 3, 0, // Skip to: 1259
/* 247 */     MCD_OPC_Decode, 206, 11, 239, 2, // Opcode: DUDIV
/* 252 */     MCD_OPC_FilterValue, 44, 16, 0, 0, // Skip to: 273
/* 257 */     MCD_OPC_CheckPredicate, 91, 229, 3, 0, // Skip to: 1259
/* 262 */     MCD_OPC_CheckField, 6, 5, 0, 222, 3, 0, // Skip to: 1259
/* 269 */     MCD_OPC_Decode, 203, 10, 12, // Opcode: DADD
/* 273 */     MCD_OPC_FilterValue, 45, 16, 0, 0, // Skip to: 294
/* 278 */     MCD_OPC_CheckPredicate, 91, 208, 3, 0, // Skip to: 1259
/* 283 */     MCD_OPC_CheckField, 6, 5, 0, 201, 3, 0, // Skip to: 1259
/* 290 */     MCD_OPC_Decode, 206, 10, 12, // Opcode: DADDu
/* 294 */     MCD_OPC_FilterValue, 46, 16, 0, 0, // Skip to: 315
/* 299 */     MCD_OPC_CheckPredicate, 91, 187, 3, 0, // Skip to: 1259
/* 304 */     MCD_OPC_CheckField, 6, 5, 0, 180, 3, 0, // Skip to: 1259
/* 311 */     MCD_OPC_Decode, 204, 11, 12, // Opcode: DSUB
/* 315 */     MCD_OPC_FilterValue, 47, 16, 0, 0, // Skip to: 336
/* 320 */     MCD_OPC_CheckPredicate, 91, 166, 3, 0, // Skip to: 1259
/* 325 */     MCD_OPC_CheckField, 6, 5, 0, 159, 3, 0, // Skip to: 1259
/* 332 */     MCD_OPC_Decode, 205, 11, 12, // Opcode: DSUBu
/* 336 */     MCD_OPC_FilterValue, 56, 17, 0, 0, // Skip to: 358
/* 341 */     MCD_OPC_CheckPredicate, 91, 145, 3, 0, // Skip to: 1259
/* 346 */     MCD_OPC_CheckField, 21, 5, 0, 138, 3, 0, // Skip to: 1259
/* 353 */     MCD_OPC_Decode, 194, 11, 240, 2, // Opcode: DSLL
/* 358 */     MCD_OPC_FilterValue, 58, 33, 0, 0, // Skip to: 396
/* 363 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 366 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 381
/* 371 */     MCD_OPC_CheckPredicate, 91, 115, 3, 0, // Skip to: 1259
/* 376 */     MCD_OPC_Decode, 201, 11, 240, 2, // Opcode: DSRL
/* 381 */     MCD_OPC_FilterValue, 1, 105, 3, 0, // Skip to: 1259
/* 386 */     MCD_OPC_CheckPredicate, 90, 100, 3, 0, // Skip to: 1259
/* 391 */     MCD_OPC_Decode, 188, 11, 240, 2, // Opcode: DROTR
/* 396 */     MCD_OPC_FilterValue, 59, 17, 0, 0, // Skip to: 418
/* 401 */     MCD_OPC_CheckPredicate, 91, 85, 3, 0, // Skip to: 1259
/* 406 */     MCD_OPC_CheckField, 21, 5, 0, 78, 3, 0, // Skip to: 1259
/* 413 */     MCD_OPC_Decode, 198, 11, 240, 2, // Opcode: DSRA
/* 418 */     MCD_OPC_FilterValue, 60, 17, 0, 0, // Skip to: 440
/* 423 */     MCD_OPC_CheckPredicate, 91, 63, 3, 0, // Skip to: 1259
/* 428 */     MCD_OPC_CheckField, 21, 5, 0, 56, 3, 0, // Skip to: 1259
/* 435 */     MCD_OPC_Decode, 195, 11, 240, 2, // Opcode: DSLL32
/* 440 */     MCD_OPC_FilterValue, 62, 33, 0, 0, // Skip to: 478
/* 445 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 448 */     MCD_OPC_FilterValue, 0, 10, 0, 0, // Skip to: 463
/* 453 */     MCD_OPC_CheckPredicate, 91, 33, 3, 0, // Skip to: 1259
/* 458 */     MCD_OPC_Decode, 202, 11, 240, 2, // Opcode: DSRL32
/* 463 */     MCD_OPC_FilterValue, 1, 23, 3, 0, // Skip to: 1259
/* 468 */     MCD_OPC_CheckPredicate, 90, 18, 3, 0, // Skip to: 1259
/* 473 */     MCD_OPC_Decode, 189, 11, 240, 2, // Opcode: DROTR32
/* 478 */     MCD_OPC_FilterValue, 63, 8, 3, 0, // Skip to: 1259
/* 483 */     MCD_OPC_CheckPredicate, 91, 3, 3, 0, // Skip to: 1259
/* 488 */     MCD_OPC_CheckField, 21, 5, 0, 252, 2, 0, // Skip to: 1259
/* 495 */     MCD_OPC_Decode, 199, 11, 240, 2, // Opcode: DSRA32
/* 500 */     MCD_OPC_FilterValue, 16, 85, 0, 0, // Skip to: 590
/* 505 */     MCD_OPC_ExtractField, 3, 8,  // Inst{10-3} ...
/* 508 */     MCD_OPC_FilterValue, 0, 33, 0, 0, // Skip to: 546
/* 513 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 516 */     MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 531
/* 521 */     MCD_OPC_CheckPredicate, 93, 221, 2, 0, // Skip to: 1259
/* 526 */     MCD_OPC_Decode, 245, 10, 241, 2, // Opcode: DMFC0
/* 531 */     MCD_OPC_FilterValue, 5, 211, 2, 0, // Skip to: 1259
/* 536 */     MCD_OPC_CheckPredicate, 93, 206, 2, 0, // Skip to: 1259
/* 541 */     MCD_OPC_Decode, 253, 10, 242, 2, // Opcode: DMTC0
/* 546 */     MCD_OPC_FilterValue, 32, 17, 0, 0, // Skip to: 568
/* 551 */     MCD_OPC_CheckPredicate, 94, 191, 2, 0, // Skip to: 1259
/* 556 */     MCD_OPC_CheckField, 21, 5, 3, 184, 2, 0, // Skip to: 1259
/* 563 */     MCD_OPC_Decode, 249, 10, 241, 2, // Opcode: DMFGC0
/* 568 */     MCD_OPC_FilterValue, 96, 174, 2, 0, // Skip to: 1259
/* 573 */     MCD_OPC_CheckPredicate, 94, 169, 2, 0, // Skip to: 1259
/* 578 */     MCD_OPC_CheckField, 21, 5, 3, 162, 2, 0, // Skip to: 1259
/* 585 */     MCD_OPC_Decode, 129, 11, 242, 2, // Opcode: DMTGC0
/* 590 */     MCD_OPC_FilterValue, 18, 47, 0, 0, // Skip to: 642
/* 595 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 598 */     MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 620
/* 603 */     MCD_OPC_CheckPredicate, 93, 139, 2, 0, // Skip to: 1259
/* 608 */     MCD_OPC_CheckField, 3, 8, 0, 132, 2, 0, // Skip to: 1259
/* 615 */     MCD_OPC_Decode, 247, 10, 243, 2, // Opcode: DMFC2
/* 620 */     MCD_OPC_FilterValue, 5, 122, 2, 0, // Skip to: 1259
/* 625 */     MCD_OPC_CheckPredicate, 93, 117, 2, 0, // Skip to: 1259
/* 630 */     MCD_OPC_CheckField, 3, 8, 0, 110, 2, 0, // Skip to: 1259
/* 637 */     MCD_OPC_Decode, 255, 10, 244, 2, // Opcode: DMTC2
/* 642 */     MCD_OPC_FilterValue, 21, 3, 1, 0, // Skip to: 906
/* 647 */     MCD_OPC_ExtractField, 0, 13,  // Inst{12-0} ...
/* 650 */     MCD_OPC_FilterValue, 188, 8, 10, 0, 0, // Skip to: 666
/* 656 */     MCD_OPC_CheckPredicate, 15, 86, 2, 0, // Skip to: 1259
/* 661 */     MCD_OPC_Decode, 241, 9, 245, 2, // Opcode: C_F_D64_MM
/* 666 */     MCD_OPC_FilterValue, 252, 8, 10, 0, 0, // Skip to: 682
/* 672 */     MCD_OPC_CheckPredicate, 15, 70, 2, 0, // Skip to: 1259
/* 677 */     MCD_OPC_Decode, 197, 10, 245, 2, // Opcode: C_UN_D64_MM
/* 682 */     MCD_OPC_FilterValue, 188, 9, 10, 0, 0, // Skip to: 698
/* 688 */     MCD_OPC_CheckPredicate, 15, 54, 2, 0, // Skip to: 1259
/* 693 */     MCD_OPC_Decode, 235, 9, 245, 2, // Opcode: C_EQ_D64_MM
/* 698 */     MCD_OPC_FilterValue, 252, 9, 10, 0, 0, // Skip to: 714
/* 704 */     MCD_OPC_CheckPredicate, 15, 38, 2, 0, // Skip to: 1259
/* 709 */     MCD_OPC_Decode, 179, 10, 245, 2, // Opcode: C_UEQ_D64_MM
/* 714 */     MCD_OPC_FilterValue, 188, 10, 10, 0, 0, // Skip to: 730
/* 720 */     MCD_OPC_CheckPredicate, 15, 22, 2, 0, // Skip to: 1259
/* 725 */     MCD_OPC_Decode, 161, 10, 245, 2, // Opcode: C_OLT_D64_MM
/* 730 */     MCD_OPC_FilterValue, 252, 10, 10, 0, 0, // Skip to: 746
/* 736 */     MCD_OPC_CheckPredicate, 15, 6, 2, 0, // Skip to: 1259
/* 741 */     MCD_OPC_Decode, 191, 10, 245, 2, // Opcode: C_ULT_D64_MM
/* 746 */     MCD_OPC_FilterValue, 188, 11, 10, 0, 0, // Skip to: 762
/* 752 */     MCD_OPC_CheckPredicate, 15, 246, 1, 0, // Skip to: 1259
/* 757 */     MCD_OPC_Decode, 155, 10, 245, 2, // Opcode: C_OLE_D64_MM
/* 762 */     MCD_OPC_FilterValue, 252, 11, 10, 0, 0, // Skip to: 778
/* 768 */     MCD_OPC_CheckPredicate, 15, 230, 1, 0, // Skip to: 1259
/* 773 */     MCD_OPC_Decode, 185, 10, 245, 2, // Opcode: C_ULE_D64_MM
/* 778 */     MCD_OPC_FilterValue, 188, 12, 10, 0, 0, // Skip to: 794
/* 784 */     MCD_OPC_CheckPredicate, 15, 214, 1, 0, // Skip to: 1259
/* 789 */     MCD_OPC_Decode, 173, 10, 245, 2, // Opcode: C_SF_D64_MM
/* 794 */     MCD_OPC_FilterValue, 252, 12, 10, 0, 0, // Skip to: 810
/* 800 */     MCD_OPC_CheckPredicate, 15, 198, 1, 0, // Skip to: 1259
/* 805 */     MCD_OPC_Decode, 137, 10, 245, 2, // Opcode: C_NGLE_D64_MM
/* 810 */     MCD_OPC_FilterValue, 188, 13, 10, 0, 0, // Skip to: 826
/* 816 */     MCD_OPC_CheckPredicate, 15, 182, 1, 0, // Skip to: 1259
/* 821 */     MCD_OPC_Decode, 167, 10, 245, 2, // Opcode: C_SEQ_D64_MM
/* 826 */     MCD_OPC_FilterValue, 252, 13, 10, 0, 0, // Skip to: 842
/* 832 */     MCD_OPC_CheckPredicate, 15, 166, 1, 0, // Skip to: 1259
/* 837 */     MCD_OPC_Decode, 143, 10, 245, 2, // Opcode: C_NGL_D64_MM
/* 842 */     MCD_OPC_FilterValue, 188, 14, 10, 0, 0, // Skip to: 858
/* 848 */     MCD_OPC_CheckPredicate, 15, 150, 1, 0, // Skip to: 1259
/* 853 */     MCD_OPC_Decode, 253, 9, 245, 2, // Opcode: C_LT_D64_MM
/* 858 */     MCD_OPC_FilterValue, 252, 14, 10, 0, 0, // Skip to: 874
/* 864 */     MCD_OPC_CheckPredicate, 15, 134, 1, 0, // Skip to: 1259
/* 869 */     MCD_OPC_Decode, 131, 10, 245, 2, // Opcode: C_NGE_D64_MM
/* 874 */     MCD_OPC_FilterValue, 188, 15, 10, 0, 0, // Skip to: 890
/* 880 */     MCD_OPC_CheckPredicate, 15, 118, 1, 0, // Skip to: 1259
/* 885 */     MCD_OPC_Decode, 247, 9, 245, 2, // Opcode: C_LE_D64_MM
/* 890 */     MCD_OPC_FilterValue, 252, 15, 107, 1, 0, // Skip to: 1259
/* 896 */     MCD_OPC_CheckPredicate, 15, 102, 1, 0, // Skip to: 1259
/* 901 */     MCD_OPC_Decode, 149, 10, 245, 2, // Opcode: C_NGT_D64_MM
/* 906 */     MCD_OPC_FilterValue, 24, 10, 0, 0, // Skip to: 921
/* 911 */     MCD_OPC_CheckPredicate, 95, 87, 1, 0, // Skip to: 1259
/* 916 */     MCD_OPC_Decode, 204, 10, 246, 2, // Opcode: DADDi
/* 921 */     MCD_OPC_FilterValue, 25, 10, 0, 0, // Skip to: 936
/* 926 */     MCD_OPC_CheckPredicate, 91, 72, 1, 0, // Skip to: 1259
/* 931 */     MCD_OPC_Decode, 205, 10, 246, 2, // Opcode: DADDiu
/* 936 */     MCD_OPC_FilterValue, 26, 10, 0, 0, // Skip to: 951
/* 941 */     MCD_OPC_CheckPredicate, 95, 57, 1, 0, // Skip to: 1259
/* 946 */     MCD_OPC_Decode, 170, 14, 130, 1, // Opcode: LDL
/* 951 */     MCD_OPC_FilterValue, 27, 10, 0, 0, // Skip to: 966
/* 956 */     MCD_OPC_CheckPredicate, 95, 42, 1, 0, // Skip to: 1259
/* 961 */     MCD_OPC_Decode, 172, 14, 130, 1, // Opcode: LDR
/* 966 */     MCD_OPC_FilterValue, 28, 33, 0, 0, // Skip to: 1004
/* 971 */     MCD_OPC_ExtractField, 0, 11,  // Inst{10-0} ...
/* 974 */     MCD_OPC_FilterValue, 36, 10, 0, 0, // Skip to: 989
/* 979 */     MCD_OPC_CheckPredicate, 96, 19, 1, 0, // Skip to: 1259
/* 984 */     MCD_OPC_Decode, 214, 10, 247, 2, // Opcode: DCLZ
/* 989 */     MCD_OPC_FilterValue, 37, 9, 1, 0, // Skip to: 1259
/* 994 */     MCD_OPC_CheckPredicate, 96, 4, 1, 0, // Skip to: 1259
/* 999 */     MCD_OPC_Decode, 212, 10, 247, 2, // Opcode: DCLO
/* 1004 */    MCD_OPC_FilterValue, 31, 145, 0, 0, // Skip to: 1154
/* 1009 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 1012 */    MCD_OPC_FilterValue, 1, 10, 0, 0, // Skip to: 1027
/* 1017 */    MCD_OPC_CheckPredicate, 90, 237, 0, 0, // Skip to: 1259
/* 1022 */    MCD_OPC_Decode, 223, 10, 248, 2, // Opcode: DEXTM
/* 1027 */    MCD_OPC_FilterValue, 2, 10, 0, 0, // Skip to: 1042
/* 1032 */    MCD_OPC_CheckPredicate, 90, 222, 0, 0, // Skip to: 1259
/* 1037 */    MCD_OPC_Decode, 224, 10, 248, 2, // Opcode: DEXTU
/* 1042 */    MCD_OPC_FilterValue, 3, 10, 0, 0, // Skip to: 1057
/* 1047 */    MCD_OPC_CheckPredicate, 90, 207, 0, 0, // Skip to: 1259
/* 1052 */    MCD_OPC_Decode, 221, 10, 248, 2, // Opcode: DEXT
/* 1057 */    MCD_OPC_FilterValue, 5, 10, 0, 0, // Skip to: 1072
/* 1062 */    MCD_OPC_CheckPredicate, 90, 192, 0, 0, // Skip to: 1259
/* 1067 */    MCD_OPC_Decode, 227, 10, 249, 2, // Opcode: DINSM
/* 1072 */    MCD_OPC_FilterValue, 6, 10, 0, 0, // Skip to: 1087
/* 1077 */    MCD_OPC_CheckPredicate, 90, 177, 0, 0, // Skip to: 1259
/* 1082 */    MCD_OPC_Decode, 228, 10, 249, 2, // Opcode: DINSU
/* 1087 */    MCD_OPC_FilterValue, 7, 10, 0, 0, // Skip to: 1102
/* 1092 */    MCD_OPC_CheckPredicate, 90, 162, 0, 0, // Skip to: 1259
/* 1097 */    MCD_OPC_Decode, 226, 10, 249, 2, // Opcode: DINS
/* 1102 */    MCD_OPC_FilterValue, 36, 152, 0, 0, // Skip to: 1259
/* 1107 */    MCD_OPC_ExtractField, 6, 5,  // Inst{10-6} ...
/* 1110 */    MCD_OPC_FilterValue, 2, 17, 0, 0, // Skip to: 1132
/* 1115 */    MCD_OPC_CheckPredicate, 90, 139, 0, 0, // Skip to: 1259
/* 1120 */    MCD_OPC_CheckField, 21, 5, 0, 132, 0, 0, // Skip to: 1259
/* 1127 */    MCD_OPC_Decode, 191, 11, 230, 2, // Opcode: DSBH
/* 1132 */    MCD_OPC_FilterValue, 5, 122, 0, 0, // Skip to: 1259
/* 1137 */    MCD_OPC_CheckPredicate, 90, 117, 0, 0, // Skip to: 1259
/* 1142 */    MCD_OPC_CheckField, 21, 5, 0, 110, 0, 0, // Skip to: 1259
/* 1149 */    MCD_OPC_Decode, 193, 11, 230, 2, // Opcode: DSHD
/* 1154 */    MCD_OPC_FilterValue, 39, 10, 0, 0, // Skip to: 1169
/* 1159 */    MCD_OPC_CheckPredicate, 91, 95, 0, 0, // Skip to: 1259
/* 1164 */    MCD_OPC_Decode, 129, 15, 130, 1, // Opcode: LWu
/* 1169 */    MCD_OPC_FilterValue, 44, 10, 0, 0, // Skip to: 1184
/* 1174 */    MCD_OPC_CheckPredicate, 95, 80, 0, 0, // Skip to: 1259
/* 1179 */    MCD_OPC_Decode, 131, 19, 130, 1, // Opcode: SDL
/* 1184 */    MCD_OPC_FilterValue, 45, 10, 0, 0, // Skip to: 1199
/* 1189 */    MCD_OPC_CheckPredicate, 95, 65, 0, 0, // Skip to: 1259
/* 1194 */    MCD_OPC_Decode, 132, 19, 130, 1, // Opcode: SDR
/* 1199 */    MCD_OPC_FilterValue, 52, 10, 0, 0, // Skip to: 1214
/* 1204 */    MCD_OPC_CheckPredicate, 92, 50, 0, 0, // Skip to: 1259
/* 1209 */    MCD_OPC_Decode, 200, 14, 130, 1, // Opcode: LLD
/* 1214 */    MCD_OPC_FilterValue, 55, 10, 0, 0, // Skip to: 1229
/* 1219 */    MCD_OPC_CheckPredicate, 91, 35, 0, 0, // Skip to: 1259
/* 1224 */    MCD_OPC_Decode, 157, 14, 130, 1, // Opcode: LD
/* 1229 */    MCD_OPC_FilterValue, 60, 10, 0, 0, // Skip to: 1244
/* 1234 */    MCD_OPC_CheckPredicate, 95, 20, 0, 0, // Skip to: 1259
/* 1239 */    MCD_OPC_Decode, 235, 18, 130, 1, // Opcode: SCD
/* 1244 */    MCD_OPC_FilterValue, 63, 10, 0, 0, // Skip to: 1259
/* 1249 */    MCD_OPC_CheckPredicate, 91, 5, 0, 0, // Skip to: 1259
/* 1254 */    MCD_OPC_Decode, 242, 18, 130, 1, // Opcode: SD
/* 1259 */    MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMipsDSP32[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 35, 10, 0, 0, // Skip to: 18
/* 8 */       MCD_OPC_CheckPredicate, 97, 20, 0, 0, // Skip to: 33
/* 13 */      MCD_OPC_Decode, 226, 14, 130, 1, // Opcode: LWDSP
/* 18 */      MCD_OPC_FilterValue, 43, 10, 0, 0, // Skip to: 33
/* 23 */      MCD_OPC_CheckPredicate, 97, 5, 0, 0, // Skip to: 33
/* 28 */      MCD_OPC_Decode, 133, 21, 130, 1, // Opcode: SWDSP
/* 33 */      MCD_OPC_Fail,
  0
};

static const uint8_t DecoderTableMipsFP6432[] = {
/* 0 */       MCD_OPC_ExtractField, 26, 6,  // Inst{31-26} ...
/* 3 */       MCD_OPC_FilterValue, 17, 249, 5, 0, // Skip to: 1537
/* 8 */       MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 11 */      MCD_OPC_FilterValue, 0, 121, 0, 0, // Skip to: 137
/* 16 */      MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 19 */      MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 41
/* 24 */      MCD_OPC_CheckPredicate, 98, 158, 6, 0, // Skip to: 1723
/* 29 */      MCD_OPC_CheckField, 6, 5, 0, 151, 6, 0, // Skip to: 1723
/* 36 */      MCD_OPC_Decode, 205, 15, 250, 2, // Opcode: MFC1_D64
/* 41 */      MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 63
/* 46 */      MCD_OPC_CheckPredicate, 99, 136, 6, 0, // Skip to: 1723
/* 51 */      MCD_OPC_CheckField, 6, 5, 0, 129, 6, 0, // Skip to: 1723
/* 58 */      MCD_OPC_Decode, 215, 15, 250, 2, // Opcode: MFHC1_D64
/* 63 */      MCD_OPC_FilterValue, 4, 17, 0, 0, // Skip to: 85
/* 68 */      MCD_OPC_CheckPredicate, 98, 114, 6, 0, // Skip to: 1723
/* 73 */      MCD_OPC_CheckField, 6, 5, 0, 107, 6, 0, // Skip to: 1723
/* 80 */      MCD_OPC_Decode, 220, 16, 251, 2, // Opcode: MTC1_D64
/* 85 */      MCD_OPC_FilterValue, 7, 17, 0, 0, // Skip to: 107
/* 90 */      MCD_OPC_CheckPredicate, 99, 92, 6, 0, // Skip to: 1723
/* 95 */      MCD_OPC_CheckField, 6, 5, 0, 85, 6, 0, // Skip to: 1723
/* 102 */     MCD_OPC_Decode, 231, 16, 252, 2, // Opcode: MTHC1_D64
/* 107 */     MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 122
/* 112 */     MCD_OPC_CheckPredicate, 98, 70, 6, 0, // Skip to: 1723
/* 117 */     MCD_OPC_Decode, 137, 12, 219, 2, // Opcode: FADD_D64
/* 122 */     MCD_OPC_FilterValue, 22, 60, 6, 0, // Skip to: 1723
/* 127 */     MCD_OPC_CheckPredicate, 100, 55, 6, 0, // Skip to: 1723
/* 132 */     MCD_OPC_Decode, 139, 12, 219, 2, // Opcode: FADD_PS64
/* 137 */     MCD_OPC_FilterValue, 1, 33, 0, 0, // Skip to: 175
/* 142 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 145 */     MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 160
/* 150 */     MCD_OPC_CheckPredicate, 98, 32, 6, 0, // Skip to: 1723
/* 155 */     MCD_OPC_Decode, 154, 13, 219, 2, // Opcode: FSUB_D64
/* 160 */     MCD_OPC_FilterValue, 22, 22, 6, 0, // Skip to: 1723
/* 165 */     MCD_OPC_CheckPredicate, 100, 17, 6, 0, // Skip to: 1723
/* 170 */     MCD_OPC_Decode, 156, 13, 219, 2, // Opcode: FSUB_PS64
/* 175 */     MCD_OPC_FilterValue, 2, 33, 0, 0, // Skip to: 213
/* 180 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 183 */     MCD_OPC_FilterValue, 17, 10, 0, 0, // Skip to: 198
/* 188 */     MCD_OPC_CheckPredicate, 98, 250, 5, 0, // Skip to: 1723
/* 193 */     MCD_OPC_Decode, 238, 12, 219, 2, // Opcode: FMUL_D64
/* 198 */     MCD_OPC_FilterValue, 22, 240, 5, 0, // Skip to: 1723
/* 203 */     MCD_OPC_CheckPredicate, 100, 235, 5, 0, // Skip to: 1723
/* 208 */     MCD_OPC_Decode, 240, 12, 219, 2, // Opcode: FMUL_PS64
/* 213 */     MCD_OPC_FilterValue, 3, 17, 0, 0, // Skip to: 235
/* 218 */     MCD_OPC_CheckPredicate, 98, 220, 5, 0, // Skip to: 1723
/* 223 */     MCD_OPC_CheckField, 21, 5, 17, 213, 5, 0, // Skip to: 1723
/* 230 */     MCD_OPC_Decode, 176, 12, 219, 2, // Opcode: FDIV_D64
/* 235 */     MCD_OPC_FilterValue, 4, 18, 0, 0, // Skip to: 258
/* 240 */     MCD_OPC_CheckPredicate, 101, 198, 5, 0, // Skip to: 1723
/* 245 */     MCD_OPC_CheckField, 16, 10, 160, 4, 190, 5, 0, // Skip to: 1723
/* 253 */     MCD_OPC_Decode, 146, 13, 219, 1, // Opcode: FSQRT_D64
/* 258 */     MCD_OPC_FilterValue, 5, 18, 0, 0, // Skip to: 281
/* 263 */     MCD_OPC_CheckPredicate, 98, 175, 5, 0, // Skip to: 1723
/* 268 */     MCD_OPC_CheckField, 16, 10, 160, 4, 167, 5, 0, // Skip to: 1723
/* 276 */     MCD_OPC_Decode, 130, 12, 219, 1, // Opcode: FABS_D64
/* 281 */     MCD_OPC_FilterValue, 6, 18, 0, 0, // Skip to: 304
/* 286 */     MCD_OPC_CheckPredicate, 98, 152, 5, 0, // Skip to: 1723
/* 291 */     MCD_OPC_CheckField, 16, 10, 160, 4, 144, 5, 0, // Skip to: 1723
/* 299 */     MCD_OPC_Decode, 227, 12, 219, 1, // Opcode: FMOV_D64
/* 304 */     MCD_OPC_FilterValue, 7, 18, 0, 0, // Skip to: 327
/* 309 */     MCD_OPC_CheckPredicate, 98, 129, 5, 0, // Skip to: 1723
/* 314 */     MCD_OPC_CheckField, 16, 10, 160, 4, 121, 5, 0, // Skip to: 1723
/* 322 */     MCD_OPC_Decode, 247, 12, 219, 1, // Opcode: FNEG_D64
/* 327 */     MCD_OPC_FilterValue, 8, 35, 0, 0, // Skip to: 367
/* 332 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 335 */     MCD_OPC_FilterValue, 128, 4, 10, 0, 0, // Skip to: 351
/* 341 */     MCD_OPC_CheckPredicate, 101, 97, 5, 0, // Skip to: 1723
/* 346 */     MCD_OPC_Decode, 197, 18, 212, 1, // Opcode: ROUND_L_S
/* 351 */     MCD_OPC_FilterValue, 160, 4, 86, 5, 0, // Skip to: 1723
/* 357 */     MCD_OPC_CheckPredicate, 102, 81, 5, 0, // Skip to: 1723
/* 362 */     MCD_OPC_Decode, 195, 18, 219, 1, // Opcode: ROUND_L_D64
/* 367 */     MCD_OPC_FilterValue, 9, 35, 0, 0, // Skip to: 407
/* 372 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 375 */     MCD_OPC_FilterValue, 128, 4, 10, 0, 0, // Skip to: 391
/* 381 */     MCD_OPC_CheckPredicate, 101, 57, 5, 0, // Skip to: 1723
/* 386 */     MCD_OPC_Decode, 235, 21, 212, 1, // Opcode: TRUNC_L_S
/* 391 */     MCD_OPC_FilterValue, 160, 4, 46, 5, 0, // Skip to: 1723
/* 397 */     MCD_OPC_CheckPredicate, 102, 41, 5, 0, // Skip to: 1723
/* 402 */     MCD_OPC_Decode, 233, 21, 219, 1, // Opcode: TRUNC_L_D64
/* 407 */     MCD_OPC_FilterValue, 10, 35, 0, 0, // Skip to: 447
/* 412 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 415 */     MCD_OPC_FilterValue, 128, 4, 10, 0, 0, // Skip to: 431
/* 421 */     MCD_OPC_CheckPredicate, 101, 17, 5, 0, // Skip to: 1723
/* 426 */     MCD_OPC_Decode, 147, 8, 212, 1, // Opcode: CEIL_L_S
/* 431 */     MCD_OPC_FilterValue, 160, 4, 6, 5, 0, // Skip to: 1723
/* 437 */     MCD_OPC_CheckPredicate, 102, 1, 5, 0, // Skip to: 1723
/* 442 */     MCD_OPC_Decode, 145, 8, 219, 1, // Opcode: CEIL_L_D64
/* 447 */     MCD_OPC_FilterValue, 11, 35, 0, 0, // Skip to: 487
/* 452 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 455 */     MCD_OPC_FilterValue, 128, 4, 10, 0, 0, // Skip to: 471
/* 461 */     MCD_OPC_CheckPredicate, 101, 233, 4, 0, // Skip to: 1723
/* 466 */     MCD_OPC_Decode, 206, 12, 212, 1, // Opcode: FLOOR_L_S
/* 471 */     MCD_OPC_FilterValue, 160, 4, 222, 4, 0, // Skip to: 1723
/* 477 */     MCD_OPC_CheckPredicate, 102, 217, 4, 0, // Skip to: 1723
/* 482 */     MCD_OPC_Decode, 204, 12, 219, 1, // Opcode: FLOOR_L_D64
/* 487 */     MCD_OPC_FilterValue, 12, 18, 0, 0, // Skip to: 510
/* 492 */     MCD_OPC_CheckPredicate, 101, 202, 4, 0, // Skip to: 1723
/* 497 */     MCD_OPC_CheckField, 16, 10, 160, 4, 194, 4, 0, // Skip to: 1723
/* 505 */     MCD_OPC_Decode, 200, 18, 253, 2, // Opcode: ROUND_W_D64
/* 510 */     MCD_OPC_FilterValue, 13, 18, 0, 0, // Skip to: 533
/* 515 */     MCD_OPC_CheckPredicate, 101, 179, 4, 0, // Skip to: 1723
/* 520 */     MCD_OPC_CheckField, 16, 10, 160, 4, 171, 4, 0, // Skip to: 1723
/* 528 */     MCD_OPC_Decode, 238, 21, 253, 2, // Opcode: TRUNC_W_D64
/* 533 */     MCD_OPC_FilterValue, 14, 18, 0, 0, // Skip to: 556
/* 538 */     MCD_OPC_CheckPredicate, 101, 156, 4, 0, // Skip to: 1723
/* 543 */     MCD_OPC_CheckField, 16, 10, 160, 4, 148, 4, 0, // Skip to: 1723
/* 551 */     MCD_OPC_Decode, 150, 8, 253, 2, // Opcode: CEIL_W_D64
/* 556 */     MCD_OPC_FilterValue, 15, 18, 0, 0, // Skip to: 579
/* 561 */     MCD_OPC_CheckPredicate, 101, 133, 4, 0, // Skip to: 1723
/* 566 */     MCD_OPC_CheckField, 16, 10, 160, 4, 125, 4, 0, // Skip to: 1723
/* 574 */     MCD_OPC_Decode, 209, 12, 253, 2, // Opcode: FLOOR_W_D64
/* 579 */     MCD_OPC_FilterValue, 17, 47, 0, 0, // Skip to: 631
/* 584 */     MCD_OPC_ExtractField, 16, 2,  // Inst{17-16} ...
/* 587 */     MCD_OPC_FilterValue, 0, 17, 0, 0, // Skip to: 609
/* 592 */     MCD_OPC_CheckPredicate, 103, 102, 4, 0, // Skip to: 1723
/* 597 */     MCD_OPC_CheckField, 21, 5, 17, 95, 4, 0, // Skip to: 1723
/* 604 */     MCD_OPC_Decode, 154, 16, 254, 2, // Opcode: MOVF_D64
/* 609 */     MCD_OPC_FilterValue, 1, 85, 4, 0, // Skip to: 1723
/* 614 */     MCD_OPC_CheckPredicate, 103, 80, 4, 0, // Skip to: 1723
/* 619 */     MCD_OPC_CheckField, 21, 5, 17, 73, 4, 0, // Skip to: 1723
/* 626 */     MCD_OPC_Decode, 174, 16, 254, 2, // Opcode: MOVT_D64
/* 631 */     MCD_OPC_FilterValue, 18, 17, 0, 0, // Skip to: 653
/* 636 */     MCD_OPC_CheckPredicate, 103, 58, 4, 0, // Skip to: 1723
/* 641 */     MCD_OPC_CheckField, 21, 5, 17, 51, 4, 0, // Skip to: 1723
/* 648 */     MCD_OPC_Decode, 186, 16, 255, 2, // Opcode: MOVZ_I_D64
/* 653 */     MCD_OPC_FilterValue, 19, 17, 0, 0, // Skip to: 675
/* 658 */     MCD_OPC_CheckPredicate, 103, 36, 4, 0, // Skip to: 1723
/* 663 */     MCD_OPC_CheckField, 21, 5, 17, 29, 4, 0, // Skip to: 1723
/* 670 */     MCD_OPC_Decode, 166, 16, 255, 2, // Opcode: MOVN_I_D64
/* 675 */     MCD_OPC_FilterValue, 21, 18, 0, 0, // Skip to: 698
/* 680 */     MCD_OPC_CheckPredicate, 104, 14, 4, 0, // Skip to: 1723
/* 685 */     MCD_OPC_CheckField, 16, 10, 160, 4, 6, 4, 0, // Skip to: 1723
/* 693 */     MCD_OPC_Decode, 175, 18, 219, 1, // Opcode: RECIP_D64
/* 698 */     MCD_OPC_FilterValue, 22, 18, 0, 0, // Skip to: 721
/* 703 */     MCD_OPC_CheckPredicate, 104, 247, 3, 0, // Skip to: 1723
/* 708 */     MCD_OPC_CheckField, 16, 10, 160, 4, 239, 3, 0, // Skip to: 1723
/* 716 */     MCD_OPC_Decode, 208, 18, 219, 1, // Opcode: RSQRT_D64
/* 721 */     MCD_OPC_FilterValue, 24, 17, 0, 0, // Skip to: 743
/* 726 */     MCD_OPC_CheckPredicate, 105, 224, 3, 0, // Skip to: 1723
/* 731 */     MCD_OPC_CheckField, 21, 5, 22, 217, 3, 0, // Skip to: 1723
/* 738 */     MCD_OPC_Decode, 217, 5, 219, 2, // Opcode: ADDR_PS64
/* 743 */     MCD_OPC_FilterValue, 26, 17, 0, 0, // Skip to: 765
/* 748 */     MCD_OPC_CheckPredicate, 105, 202, 3, 0, // Skip to: 1723
/* 753 */     MCD_OPC_CheckField, 21, 5, 22, 195, 3, 0, // Skip to: 1723
/* 760 */     MCD_OPC_Decode, 148, 17, 219, 2, // Opcode: MULR_PS64
/* 765 */     MCD_OPC_FilterValue, 32, 51, 0, 0, // Skip to: 821
/* 770 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 773 */     MCD_OPC_FilterValue, 160, 4, 10, 0, 0, // Skip to: 789
/* 779 */     MCD_OPC_CheckPredicate, 98, 171, 3, 0, // Skip to: 1723
/* 784 */     MCD_OPC_Decode, 216, 9, 253, 2, // Opcode: CVT_S_D64
/* 789 */     MCD_OPC_FilterValue, 160, 5, 10, 0, 0, // Skip to: 805
/* 795 */     MCD_OPC_CheckPredicate, 106, 155, 3, 0, // Skip to: 1723
/* 800 */     MCD_OPC_Decode, 218, 9, 253, 2, // Opcode: CVT_S_L
/* 805 */     MCD_OPC_FilterValue, 192, 5, 144, 3, 0, // Skip to: 1723
/* 811 */     MCD_OPC_CheckPredicate, 100, 139, 3, 0, // Skip to: 1723
/* 816 */     MCD_OPC_Decode, 221, 9, 253, 2, // Opcode: CVT_S_PU64
/* 821 */     MCD_OPC_FilterValue, 33, 51, 0, 0, // Skip to: 877
/* 826 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 829 */     MCD_OPC_FilterValue, 128, 4, 10, 0, 0, // Skip to: 845
/* 835 */     MCD_OPC_CheckPredicate, 98, 115, 3, 0, // Skip to: 1723
/* 840 */     MCD_OPC_Decode, 200, 9, 212, 1, // Opcode: CVT_D64_S
/* 845 */     MCD_OPC_FilterValue, 128, 5, 10, 0, 0, // Skip to: 861
/* 851 */     MCD_OPC_CheckPredicate, 98, 99, 3, 0, // Skip to: 1723
/* 856 */     MCD_OPC_Decode, 202, 9, 212, 1, // Opcode: CVT_D64_W
/* 861 */     MCD_OPC_FilterValue, 160, 5, 88, 3, 0, // Skip to: 1723
/* 867 */     MCD_OPC_CheckPredicate, 106, 83, 3, 0, // Skip to: 1723
/* 872 */     MCD_OPC_Decode, 199, 9, 219, 1, // Opcode: CVT_D64_L
/* 877 */     MCD_OPC_FilterValue, 36, 35, 0, 0, // Skip to: 917
/* 882 */     MCD_OPC_ExtractField, 16, 10,  // Inst{25-16} ...
/* 885 */     MCD_OPC_FilterValue, 160, 4, 10, 0, 0, // Skip to: 901
/* 891 */     MCD_OPC_CheckPredicate, 98, 59, 3, 0, // Skip to: 1723
/* 896 */     MCD_OPC_Decode, 227, 9, 253, 2, // Opcode: CVT_W_D64
/* 901 */     MCD_OPC_FilterValue, 192, 5, 48, 3, 0, // Skip to: 1723
/* 907 */     MCD_OPC_CheckPredicate, 105, 43, 3, 0, // Skip to: 1723
/* 912 */     MCD_OPC_Decode, 213, 9, 219, 1, // Opcode: CVT_PW_PS64
/* 917 */     MCD_OPC_FilterValue, 38, 40, 0, 0, // Skip to: 962
/* 922 */     MCD_OPC_ExtractField, 21, 5,  // Inst{25-21} ...
/* 925 */     MCD_OPC_FilterValue, 16, 10, 0, 0, // Skip to: 940
/* 930 */     MCD_OPC_CheckPredicate, 100, 20, 3, 0, // Skip to: 1723
/* 935 */     MCD_OPC_Decode, 212, 9, 128, 3, // Opcode: CVT_PS_S64
/* 940 */     MCD_OPC_FilterValue, 20, 10, 3, 0, // Skip to: 1723
/* 945 */     MCD_OPC_CheckPredicate, 105, 5, 3, 0, // Skip to: 1723
/* 950 */     MCD_OPC_CheckField, 16, 5, 0, 254, 2, 0, // Skip to: 1723
/* 957 */     MCD_OPC_Decode, 211, 9, 219, 1, // Opcode: CVT_PS_PW64
/* 962 */     MCD_OPC_FilterValue, 40, 18, 0, 0, // Skip to: 985
/* 967 */     MCD_OPC_CheckPredicate, 100, 239, 2, 0, // Skip to: 1723
/* 972 */     MCD_OPC_CheckField, 16, 10, 192, 5, 231, 2, 0, // Skip to: 1723
/* 980 */     MCD_OPC_Decode, 220, 9, 253, 2, // Opcode: CVT_S_PL64
/* 985 */     MCD_OPC_FilterValue, 44, 17, 0, 0, // Skip to: 1007
/* 990 */     MCD_OPC_CheckPredicate, 100, 216, 2, 0, // Skip to: 1723
/* 995 */     MCD_OPC_CheckField, 21, 5, 22, 209, 2, 0, // Skip to: 1723
/* 1002 */    MCD_OPC_Decode, 244, 17, 219, 2, // Opcode: PLL_PS64
/* 1007 */    MCD_OPC_FilterValue, 45, 17, 0, 0, // Skip to: 1029
/* 1012 */    MCD_OPC_CheckPredicate, 100, 194, 2, 0, // Skip to: 1723
/* 1017 */    MCD_OPC_CheckField, 21, 5, 22, 187, 2, 0, // Skip to: 1723
/* 1024 */    MCD_OPC_Decode, 245, 17, 219, 2, // Opcode: PLU_PS64
/* 1029 */    MCD_OPC_FilterValue, 46, 17, 0, 0, // Skip to: 1051
/* 1034 */    MCD_OPC_CheckPredicate, 100, 172, 2, 0, // Skip to: 1723
/* 1039 */    MCD_OPC_CheckField, 21, 5, 22, 165, 2, 0, // Skip to: 1723
/* 1046 */    MCD_OPC_Decode, 162, 18, 219, 2, // Opcode: PUL_PS64
/* 1051 */    MCD_OPC_FilterValue, 47, 17, 0, 0, // Skip to: 1073
/* 1056 */    MCD_OPC_CheckPredicate, 100, 150, 2, 0, // Skip to: 1723
/* 1061 */    MCD_OPC_CheckField, 21, 5, 22, 143, 2, 0, // Skip to: 1723
/* 1068 */    MCD_OPC_Decode, 163, 18, 219, 2, // Opcode: PUU_PS64
/* 1073 */    MCD_OPC_FilterValue, 48, 24, 0, 0, // Skip to: 1102
/* 1078 */    MCD_OPC_CheckPredicate, 107, 128, 2, 0, // Skip to: 1723
/* 1083 */    MCD_OPC_CheckField, 21, 5, 17, 121, 2, 0, // Skip to: 1723
/* 1090 */    MCD_OPC_CheckField, 6, 2, 0, 114, 2, 0, // Skip to: 1723
/* 1097 */    MCD_OPC_Decode, 240, 9, 129, 3, // Opcode: C_F_D64
/* 1102 */    MCD_OPC_FilterValue, 49, 24, 0, 0, // Skip to: 1131
/* 1107 */    MCD_OPC_CheckPredicate, 107, 99, 2, 0, // Skip to: 1723
/* 1112 */    MCD_OPC_CheckField, 21, 5, 17, 92, 2, 0, // Skip to: 1723
/* 1119 */    MCD_OPC_CheckField, 6, 2, 0, 85, 2, 0, // Skip to: 1723
/* 1126 */    MCD_OPC_Decode, 196, 10, 129, 3, // Opcode: C_UN_D64
/* 1131 */    MCD_OPC_FilterValue, 50, 24, 0, 0, // Skip to: 1160
/* 1136 */    MCD_OPC_CheckPredicate, 107, 70, 2, 0, // Skip to: 1723
/* 1141 */    MCD_OPC_CheckField, 21, 5, 17, 63, 2, 0, // Skip to: 1723
/* 1148 */    MCD_OPC_CheckField, 6, 2, 0, 56, 2, 0, // Skip to: 1723
/* 1155 */    MCD_OPC_Decode, 234, 9, 129, 3, // Opcode: C_EQ_D64
/* 1160 */    MCD_OPC_FilterValue, 51, 24, 0, 0, // Skip to: 1189
/* 1165 */    MCD_OPC_CheckPredicate, 107, 41, 2, 0, // Skip to: 1723
/* 1170 */    MCD_OPC_CheckField, 21, 5, 17, 34, 2, 0, // Skip to: 1723
/* 1177 */    MCD_OPC_CheckField, 6, 2, 0, 27, 2, 0, // Skip to: 1723
/* 1184 */    MCD_OPC_Decode, 178, 10, 129, 3, // Opcode: C_UEQ_D64
/* 1189 */    MCD_OPC_FilterValue, 52, 24, 0, 0, // Skip to: 1218
/* 1194 */    MCD_OPC_CheckPredicate, 107, 12, 2, 0, // Skip to: 1723
/* 1199 */    MCD_OPC_CheckField, 21, 5, 17, 5, 2, 0, // Skip to: 1723
/* 1206 */    MCD_OPC_CheckField, 6, 2, 0, 254, 1, 0, // Skip to: 1723
/* 1213 */    MCD_OPC_Decode, 160, 10, 129, 3, // Opcode: C_OLT_D64
/* 1218 */    MCD_OPC_FilterValue, 53, 24, 0, 0, // Skip to: 1247
/* 1223 */    MCD_OPC_CheckPredicate, 107, 239, 1, 0, // Skip to: 1723
/* 1228 */    MCD_OPC_CheckField, 21, 5, 17, 232, 1, 0, // Skip to: 1723
/* 1235 */    MCD_OPC_CheckField, 6, 2, 0, 225, 1, 0, // Skip to: 1723
/* 1242 */    MCD_OPC_Decode, 190, 10, 129, 3, // Opcode: C_ULT_D64
/* 1247 */    MCD_OPC_FilterValue, 54, 24, 0, 0, // Skip to: 1276
/* 1252 */    MCD_OPC_CheckPredicate, 107, 210, 1, 0, // Skip to: 1723
/* 1257 */    MCD_OPC_CheckField, 21, 5, 17, 203, 1, 0, // Skip to: 1723
/* 1264 */    MCD_OPC_CheckField, 6, 2, 0, 196, 1, 0, // Skip to: 1723
/* 1271 */    MCD_OPC_Decode, 154, 10, 129, 3, // Opcode: C_OLE_D64
/* 1276 */    MCD_OPC_FilterValue, 55, 24, 0, 0, // Skip to: 1305
/* 1281 */    MCD_OPC_CheckPredicate, 107, 181, 1, 0, // Skip to: 1723
/* 1286 */    MCD_OPC_CheckField, 21, 5, 17, 174, 1, 0, // Skip to: 1723
/* 1293 */    MCD_OPC_CheckField, 6, 2, 0, 167, 1, 0, // Skip to: 1723
/* 1300 */    MCD_OPC_Decode, 184, 10, 129, 3, // Opcode: C_ULE_D64
/* 1305 */    MCD_OPC_FilterValue, 56, 24, 0, 0, // Skip to: 1334
/* 1310 */    MCD_OPC_CheckPredicate, 107, 152, 1, 0, // Skip to: 1723
/* 1315 */    MCD_OPC_CheckField, 21, 5, 17, 145, 1, 0, // Skip to: 1723
/* 1322 */    MCD_OPC_CheckField, 6, 2, 0, 138, 1, 0, // Skip to: 1723
/* 1329 */    MCD_OPC_Decode, 172, 10, 129, 3, // Opcode: C_SF_D64
/* 1334 */    MCD_OPC_FilterValue, 57, 24, 0, 0, // Skip to: 1363
/* 1339 */    MCD_OPC_CheckPredicate, 107, 123, 1, 0, // Skip to: 1723
/* 1344 */    MCD_OPC_CheckField, 21, 5, 17, 116, 1, 0, // Skip to: 1723
/* 1351 */    MCD_OPC_CheckField, 6, 2, 0, 109, 1, 0, // Skip to: 1723
/* 1358 */    MCD_OPC_Decode, 136, 10, 129, 3, // Opcode: C_NGLE_D64
/* 1363 */    MCD_OPC_FilterValue, 58, 24, 0, 0, // Skip to: 1392
/* 1368 */    MCD_OPC_CheckPredicate, 107, 94, 1, 0, // Skip to: 1723
/* 1373 */    MCD_OPC_CheckField, 21, 5, 17, 87, 1, 0, // Skip to: 1723
/* 1380 */    MCD_OPC_CheckField, 6, 2, 0, 80, 1, 0, // Skip to: 1723
/* 1387 */    MCD_OPC_Decode, 166, 10, 129, 3, // Opcode: C_SEQ_D64
/* 1392 */    MCD_OPC_FilterValue, 59, 24, 0, 0, // Skip to: 1421
/* 1397 */    MCD_OPC_CheckPredicate, 107, 65, 1, 0, // Skip to: 1723
/* 1402 */    MCD_OPC_CheckField, 21, 5, 17, 58, 1, 0, // Skip to: 1723
/* 1409 */    MCD_OPC_CheckField, 6, 2, 0, 51, 1, 0, // Skip to: 1723
/* 1416 */    MCD_OPC_Decode, 142, 10, 129, 3, // Opcode: C_NGL_D64
/* 1421 */    MCD_OPC_FilterValue, 60, 24, 0, 0, // Skip to: 1450
/* 1426 */    MCD_OPC_CheckPredicate, 107, 36, 1, 0, // Skip to: 1723
/* 1431 */    MCD_OPC_CheckField, 21, 5, 17, 29, 1, 0, // Skip to: 1723
/* 1438 */    MCD_OPC_CheckField, 6, 2, 0, 22, 1, 0, // Skip to: 1723
/* 1445 */    MCD_OPC_Decode, 252, 9, 129, 3, // Opcode: C_LT_D64
/* 1450 */    MCD_OPC_FilterValue, 61, 24, 0, 0, // Skip to: 1479
/* 1455 */    MCD_OPC_CheckPredicate, 107, 7, 1, 0, // Skip to: 1723
/* 1460 */    MCD_OPC_CheckField, 21, 5, 17, 0, 1, 0, // Skip to: 1723
/* 1467 */    MCD_OPC_CheckField, 6, 2, 0, 249, 0, 0, // Skip to: 1723
/* 1474 */    MCD_OPC_Decode, 130, 10, 129, 3, // Opcode: C_NGE_D64
/* 1479 */    MCD_OPC_FilterValue, 62, 24, 0, 0, // Skip to: 1508
/* 1484 */    MCD_OPC_CheckPredicate, 107, 234, 0, 0, // Skip to: 1723
/* 1489 */    MCD_OPC_CheckField, 21, 5, 17, 227, 0, 0, // Skip to: 1723
/* 1496 */    MCD_OPC_CheckField, 6, 2, 0, 220, 0, 0, // Skip to: 1723
/* 1503 */    MCD_OPC_Decode, 246, 9, 129, 3, // Opcode: C_LE_D64
/* 1508 */    MCD_OPC_FilterValue, 63, 210, 0, 0, // Skip to: 1723
/* 1513 */    MCD_OPC_CheckPredicate, 107, 205, 0, 0, // Skip to: 1723
/* 1518 */    MCD_OPC_CheckField, 21, 5, 17, 198, 0, 0, // Skip to: 1723
/* 1525 */    MCD_OPC_CheckField, 6, 2, 0, 191, 0, 0, // Skip to: 1723
/* 1532 */    MCD_OPC_Decode, 148, 10, 129, 3, // Opcode: C_NGT_D64
/* 1537 */    MCD_OPC_FilterValue, 19, 151, 0, 0, // Skip to: 1693
/* 1542 */    MCD_OPC_ExtractField, 0, 6,  // Inst{5-0} ...
/* 1545 */    MCD_OPC_FilterValue, 1, 17, 0, 0, // Skip to: 1567
/* 1550 */    MCD_OPC_CheckPredicate, 108, 168, 0, 0, // Skip to: 1723
/* 1555 */    MCD_OPC_CheckField, 11, 5, 0, 161, 0, 0, // Skip to: 1723
/* 1562 */    MCD_OPC_Decode, 174, 14, 130, 3, // Opcode: LDXC164
/* 1567 */    MCD_OPC_FilterValue, 5, 17, 0, 0, // Skip to: 1589
/* 1572 */    MCD_OPC_CheckPredicate, 109, 146, 0, 0, // Skip to: 1723
/* 1577 */    MCD_OPC_CheckField, 11, 5, 0, 139, 0, 0, // Skip to: 1723
/* 1584 */    MCD_OPC_Decode, 212, 14, 130, 3, // Opcode: LUXC164
/* 1589 */    MCD_OPC_FilterValue, 9, 17, 0, 0, // Skip to: 1611
/* 1594 */    MCD_OPC_CheckPredicate, 108, 124, 0, 0, // Skip to: 1723
/* 1599 */    MCD_OPC_CheckField, 6, 5, 0, 117, 0, 0, // Skip to: 1723
/* 1606 */    MCD_OPC_Decode, 134, 19, 131, 3, // Opcode: SDXC164
/* 1611 */    MCD_OPC_FilterValue, 13, 17, 0, 0, // Skip to: 1633
/* 1616 */    MCD_OPC_CheckPredicate, 109, 102, 0, 0, // Skip to: 1723
/* 1621 */    MCD_OPC_CheckField, 6, 5, 0, 95, 0, 0, // Skip to: 1723
/* 1628 */    MCD_OPC_Decode, 249, 20, 131, 3, // Opcode: SUXC164
/* 1633 */    MCD_OPC_FilterValue, 33, 10, 0, 0, // Skip to: 1648
/* 1638 */    MCD_OPC_CheckPredicate, 110, 80, 0, 0, // Skip to: 1723
/* 1643 */    MCD_OPC_Decode, 158, 15, 132, 3, // Opcode: MADD_D64
/* 1648 */    MCD_OPC_FilterValue, 41, 10, 0, 0, // Skip to: 1663
/* 1653 */    MCD_OPC_CheckPredicate, 110, 65, 0, 0, // Skip to: 1723
/* 1658 */    MCD_OPC_Decode, 209, 16, 132, 3, // Opcode: MSUB_D64
/* 1663 */    MCD_OPC_FilterValue, 49, 10, 0, 0, // Skip to: 1678
/* 1668 */    MCD_OPC_CheckPredicate, 111, 50, 0, 0, // Skip to: 1723
/* 1673 */    MCD_OPC_Decode, 192, 17, 132, 3, // Opcode: NMADD_D64
/* 1678 */    MCD_OPC_FilterValue, 57, 40, 0, 0, // Skip to: 1723
/* 1683 */    MCD_OPC_CheckPredicate, 111, 35, 0, 0, // Skip to: 1723
/* 1688 */    MCD_OPC_Decode, 197, 17, 132, 3, // Opcode: NMSUB_D64
/* 1693 */    MCD_OPC_FilterValue, 53, 10, 0, 0, // Skip to: 1708
/* 1698 */    MCD_OPC_CheckPredicate, 101, 20, 0, 0, // Skip to: 1723
/* 1703 */    MCD_OPC_Decode, 159, 14, 208, 2, // Opcode: LDC164
/* 1708 */    MCD_OPC_FilterValue, 61, 10, 0, 0, // Skip to: 1723
/* 1713 */    MCD_OPC_CheckPredicate, 101, 5, 0, 0, // Skip to: 1723
/* 1718 */    MCD_OPC_Decode, 250, 18, 208, 2, // Opcode: SDC164
/* 1723 */    MCD_OPC_Fail,
  0
};

static bool getbool(uint64_t b)
{
	return b != 0;
}
static bool checkDecoderPredicate(unsigned Idx, uint64_t Bits) {
  switch (Idx) {
  default: llvm_unreachable("Invalid index!");
  case 0:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 1));
  case 1:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureCnMips, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 2:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureCnMips, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 3:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureCnMips, 1));
  case 4:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips64, 1) && checkFeatureRequired(Bits, Mips_FeatureCnMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 5:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureCnMipsP, 1));
  case 6:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0));
  case 7:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1));
  case 8:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureDSP, 1));
  case 9:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureDSPR2, 1));
  case 10:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r5, 1) && checkFeatureRequired(Bits, Mips_FeatureVirt, 1));
  case 11:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureDSPR3, 1));
  case 12:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureDSP, 1));
  case 13:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 14:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0));
  case 15:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 16:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0));
  case 17:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 18:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 19:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 20:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 21:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureEVA, 1));
  case 22:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureEVA, 1));
  case 23:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 24:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1));
  case 25:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureGINV, 1));
  case 26:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMicroMips, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 27:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 28:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 29:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 30:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMSA, 1));
  case 31:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 32:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0));
  case 33:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0) && checkFeatureRequired(Bits, Mips_FeatureUseIndirectJumpsHazard, 0));
  case 34:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32, 1));
  case 35:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 36:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 37:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureDSP, 1));
  case 38:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMSA, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64, 1));
  case 39:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 40:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureDSP, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 41:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r5, 1) && checkFeatureRequired(Bits, Mips_FeatureVirt, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 42:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMT, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 43:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 44:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureEVA, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 45:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r5, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 46:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 47:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 48:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 49:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 50:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 51:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 52:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 53:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 54:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 55:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 56:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 57:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 58:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 59:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 60:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 61:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 62:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 63:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips5_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 64:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0));
  case 65:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0));
  case 66:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 67:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 68:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 69:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureDSPR2, 1));
  case 70:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureEVA, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 71:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 72:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 73:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 74:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 75:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1));
  case 76:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 77:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 78:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureGP64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 79:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 80:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureCRC, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 81:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 1) && checkFeatureRequired(Bits, Mips_FeatureCRC, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 82:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 83:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1) && checkFeatureRequired(Bits, Mips_FeatureGINV, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 84:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 1));
  case 85:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureGP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 1));
  case 86:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureGP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 1));
  case 87:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 88:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 89:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeaturePTR64Bit, 1));
  case 90:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 91:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3, 1) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 92:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 93:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureGP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips3, 1));
  case 94:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r5, 1) && checkFeatureRequired(Bits, Mips_FeatureVirt, 1));
  case 95:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0));
  case 96:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureGP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64, 1) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 97:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureDSP, 1));
  case 98:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 99:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 100:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 101:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 102:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips3_32, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 103:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips4_32, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 104:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 105:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMips3D, 1));
  case 106:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips3_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 107:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 108:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0));
  case 109:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips5_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  case 110:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0));
  case 111:
    return getbool(checkFeatureRequired(Bits, Mips_FeatureMips16, 0) && checkFeatureRequired(Bits, Mips_FeatureFP64Bit, 1) && checkFeatureRequired(Bits, Mips_FeatureMips4_32r2, 1) && checkFeatureRequired(Bits, Mips_FeatureMips32r6, 0) && checkFeatureRequired(Bits, Mips_FeatureMips64r6, 0) && checkFeatureRequired(Bits, Mips_FeatureSoftFloat, 0) && checkFeatureRequired(Bits, Mips_FeatureNoMadd4, 0) && checkFeatureRequired(Bits, Mips_FeatureMicroMips, 0));
  }
}

#define DecodeToMCInst(fname, fieldname, InsnType) \
static DecodeStatus fname(DecodeStatus S, unsigned Idx, InsnType insn, MCInst *MI, \
                uint64_t Address, bool *Decoder) {\
  InsnType tmp;\
  switch (Idx) {\
  default: llvm_unreachable("Invalid index!");\
  case 0:\
    return S;\
  case 1:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 2:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 3:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 3, 2) << 3;\
    tmp |= fieldFromInstruction(insn, 5, 3) << 0;\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 4:\
    tmp = fieldFromInstruction(insn, 0, 4);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 5:\
    tmp = fieldFromInstruction(insn, 2, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 5, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 6:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 5, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 7:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 5, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 8:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 0, 5) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 11;\
    tmp |= fieldFromInstruction(insn, 21, 6) << 5;\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 9:\
    tmp = fieldFromInstruction(insn, 5, 3);\
    if (DecodeCPU16RegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 10:\
    if (DecodeFMem3(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 11:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 12:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 13:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 14:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 15:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 16:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 10);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 10) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 17:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 18:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 19:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 20:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 21:\
    if (DecodeMemMMImm4(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 22:\
    tmp = fieldFromInstruction(insn, 5, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 23:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 3);\
    if (DecodePOOL16BEncodedField(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 24:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 4);\
    if (DecodeANDI16Imm(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 25:\
    tmp = fieldFromInstruction(insn, 3, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 26:\
    tmp = fieldFromInstruction(insn, 3, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 3, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 27:\
    if (DecodeMemMMReglistImm4Lsl2(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 28:\
    tmp = fieldFromInstruction(insn, 0, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 29:\
    tmp = fieldFromInstruction(insn, 0, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 30:\
    tmp = fieldFromInstruction(insn, 0, 5);\
    if (DecodeUImmWithOffsetAndScale(MI, tmp, Address, Decoder, 5, 0, 4) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 31:\
    if (DecodeMemMMSPImm5Lsl2(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 32:\
    tmp = fieldFromInstruction(insn, 5, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 5, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 4);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 4) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 33:\
    tmp = fieldFromInstruction(insn, 1, 9);\
    if (DecodeSimm9SP(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 34:\
    if (DecodeMemMMGPImm7Lsl2(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 35:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 3);\
    if (DecodeAddiur2Simm7(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 36:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 1, 6);\
    if (DecodeUImmWithOffsetAndScale(MI, tmp, Address, Decoder, 6, 0, 4) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 37:\
    if (DecodeMovePOperands(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 38:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 7);\
    if (DecodeBranchTarget7MM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 39:\
    tmp = fieldFromInstruction(insn, 0, 10);\
    if (DecodeBranchTarget10MM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 40:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 7);\
    if (DecodeLi16Imm(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 41:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 42:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 43:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 44:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 45:\
    tmp = fieldFromInstruction(insn, 16, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 6, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 46:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeInsSize(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 47:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 48:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 49:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 50:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 51:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 52:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 53:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 54:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 6);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 55:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeUImmWithOffset(MI, tmp, Address, Decoder, 5, 1) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 56:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 57:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 58:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 59:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 12, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 60:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 12, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 61:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 62:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeHI32DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 63:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 13, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 64:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeLO32DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 65:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 66:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 67:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 68:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 69:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 70:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 71:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 72:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 73:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 74:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeHWRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 75:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 76:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 77:\
    tmp = fieldFromInstruction(insn, 16, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 78:\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 79:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 80:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 81:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 82:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 13, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 83:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 7);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 84:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 14, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 85:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 10);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 10) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 86:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 87:\
    if (DecodeMemMMImm16(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 88:\
    if (DecodeMemMMImm12(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 89:\
    if (DecodeCacheOpMM(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 90:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 91:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 92:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 93:\
    if (DecodeSyncI_MM(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 94:\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget1SImm16(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 95:\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 96:\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 97:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 98:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 99:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 100:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 101:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 102:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 103:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 104:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 105:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 106:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 107:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 108:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 109:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 110:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 111:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 112:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 113:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 114:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 115:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 116:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCCRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 117:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 118:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 119:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCCRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 120:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 121:\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 122:\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 123:\
    if (DecodeMemMMImm9(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 124:\
    if (DecodePrefeOpMM(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 125:\
    if (DecodeJumpTargetMM(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 126:\
    tmp = fieldFromInstruction(insn, 23, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 23);\
    if (DecodeSimm23Lsl2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 127:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 128:\
    if (DecodeFMemMMR2(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 129:\
    if (DecodeJumpTargetXMM(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 130:\
    if (DecodeMem(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 131:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 132:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 133:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 134:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 135:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 136:\
    tmp = fieldFromInstruction(insn, 1, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 137:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 138:\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 4, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 7, 3);\
    if (DecodeGPRMM16RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 139:\
    tmp = fieldFromInstruction(insn, 5, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 140:\
    tmp = fieldFromInstruction(insn, 5, 5);\
    if (DecodeUImmWithOffsetAndScale(MI, tmp, Address, Decoder, 5, 0, 4) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 141:\
    tmp = fieldFromInstruction(insn, 6, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 142:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeHWRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 143:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 2);\
    if (DecodeUImmWithOffset(MI, tmp, Address, Decoder, 2, 1) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 144:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 145:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 9, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 146:\
    tmp = fieldFromInstruction(insn, 6, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 147:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 148:\
    if (DecodeLoadByte15(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 149:\
    if (DecodeFMemCop2MMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 150:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 151:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTargetMM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 152:\
    if (DecodeSynciR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 153:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 154:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 155:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 156:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 157:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 158:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 159:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 160:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 161:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 162:\
    if (DecodePOP35GroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 163:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 19);\
    if (DecodeSimm19Lsl2(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 164:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 165:\
    if (DecodePOP37GroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 166:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (DecodeBranchTarget21MM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 167:\
    tmp = fieldFromInstruction(insn, 0, 26);\
    if (DecodeBranchTarget26MM(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 168:\
    if (DecodeBlezGroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 169:\
    if (DecodePOP65GroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 170:\
    if (DecodeBgtzGroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 171:\
    if (DecodePOP75GroupBranchMMR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 172:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 173:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 174:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 2);\
    if (DecodeUImmWithOffset(MI, tmp, Address, Decoder, 2, 1) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 175:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 176:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 177:\
    tmp = fieldFromInstruction(insn, 6, 20);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 178:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 179:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 180:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 181:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeHI32DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 182:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeLO32DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 183:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 2);\
    if (DecodeUImmWithOffset(MI, tmp, Address, Decoder, 2, 1) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 184:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 185:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 186:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 187:\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 188:\
    if (DecodeSyncI(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 189:\
    if (DecodeJumpTarget(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 190:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 191:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 192:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 193:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 194:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 195:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 5, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 4, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 196:\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 197:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 198:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 199:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCCRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 200:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 201:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 202:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 203:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCCRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 204:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 205:\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 206:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 207:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 208:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 209:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 210:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 211:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 212:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 213:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 214:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 215:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 216:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 217:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 218:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 219:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 220:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 221:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 222:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 223:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 224:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 225:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 226:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 227:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 228:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 229:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 230:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 231:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeAFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 232:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 233:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 234:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 235:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 236:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 237:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 8);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 238:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 239:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 240:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 241:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 242:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 243:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 244:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 245:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 246:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 6);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 247:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 248:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 249:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 6);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 250:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 251:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 252:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 253:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 254:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 255:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 256:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 257:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 258:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 259:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 260:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 261:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 262:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 263:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 264:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 265:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 266:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 267:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 268:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 269:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 270:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 271:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 272:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 273:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 274:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 275:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 276:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 277:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 278:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 279:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSACtrlRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 280:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 281:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 282:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 283:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 284:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSACtrlRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 285:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 286:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 287:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 288:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 289:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 290:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 4);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 291:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 292:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 293:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 1);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 294:\
    if (DecodeINSVE_DF(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 295:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 296:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 297:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128BRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 298:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 299:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 300:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 301:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 302:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 303:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 304:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128HRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 305:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeMSA128DRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeMSA128WRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 306:\
    if (DecodeMSA128Mem(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 307:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeUImmWithOffset(MI, tmp, Address, Decoder, 5, 1) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 308:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeInsSize(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 309:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 310:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 311:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 312:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 313:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 314:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 315:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 316:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 317:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 318:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 319:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 320:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 321:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 322:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 323:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeDSPRRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 324:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 325:\
    if (DecodeMemEVA(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 326:\
    if (DecodeCacheeOp_CacheOpR6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 327:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 328:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 329:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 330:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 331:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 10);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 332:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 20, 6);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 6) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 333:\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 2);\
    if (DecodeACC64DSPRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 334:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeHWRegsRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 335:\
    if (DecodeCacheOp(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 336:\
    if (DecodeFMem(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 337:\
    if (DecodeFMem2(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 338:\
    if (DecodeDAHIDATI(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 339:\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 340:\
    if (DecodeBlezGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 341:\
    if (DecodeBgtzGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 342:\
    if (DecodeAddiGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 343:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 344:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 345:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 346:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 347:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 348:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 349:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGRCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 350:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeBranchTarget(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 351:\
    if (DecodeFMemCop2R6(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 352:\
    if (DecodeBlezlGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 353:\
    if (DecodeBgtzlGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 354:\
    if (DecodeDaddiGroupBranch(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 355:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 356:\
    if (DecodeCRC(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 357:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 358:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 359:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 360:\
    if (DecodeSpecial3LlSc(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 361:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 8, 2);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 362:\
    tmp = fieldFromInstruction(insn, 0, 26);\
    if (DecodeBranchTarget26(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 363:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (DecodeBranchTarget21(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 364:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 18);\
    if (DecodeSimm18Lsl3(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 365:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 21);\
    if (DecodeBranchTarget21(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 366:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 367:\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 368:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 369:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 370:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP0RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 371:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 372:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeCOP2RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 3);\
    MCOperand_CreateImm0(MI, tmp);\
    return S;\
  case 373:\
    tmp = fieldFromInstruction(insn, 13, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 374:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 0, 16);\
    if (DecodeSImmWithOffsetAndScale(MI, tmp, Address, Decoder, 16) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 375:\
    tmp = 0x0;\
    tmp |= fieldFromInstruction(insn, 11, 5) << 0;\
    tmp |= fieldFromInstruction(insn, 16, 5) << 0;\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeGPR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 376:\
    if (DecodeDEXT(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 377:\
    if (DecodeDINS(MI, insn, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 378:\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 379:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 380:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 381:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 382:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 18, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 383:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeGPR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 384:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR32RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 385:\
    tmp = fieldFromInstruction(insn, 8, 3);\
    if (DecodeFCCRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 386:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 387:\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodePtrRegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  case 388:\
    tmp = fieldFromInstruction(insn, 6, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 21, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 11, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    tmp = fieldFromInstruction(insn, 16, 5);\
    if (DecodeFGR64RegisterClass(MI, tmp, Address, Decoder) == MCDisassembler_Fail) { return MCDisassembler_Fail; }\
    return S;\
  }\
}\

#define DecodeInstruction(fname, fieldname, decoder, InsnType) \
static DecodeStatus fname(const uint8_t DecodeTable[], MCInst *MI, \
           InsnType insn, uint64_t Address, MCRegisterInfo *MRI, int feature) \
{ \
  unsigned Start, Len, NumToSkip, PIdx, Opc, DecodeIdx; \
  InsnType Val, FieldValue, PositiveMask, NegativeMask; \
  bool Pred, Fail, DecodeComplete = true; \
  uint32_t ExpectedValue; \
  const uint8_t *Ptr = DecodeTable; \
  uint32_t CurFieldValue = 0; \
  DecodeStatus S = MCDisassembler_Success; \
  while (true) { \
    switch (*Ptr) { \
    default: \
      return MCDisassembler_Fail; \
    case MCD_OPC_ExtractField: { \
      Start = *++Ptr; \
      Len = *++Ptr; \
      ++Ptr; \
      CurFieldValue = fieldname(insn, Start, Len); \
      break; \
    } \
    case MCD_OPC_FilterValue: { \
      /* Decode the field value. */ \
      Val = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Perform the filter operation. */ \
      if (Val != CurFieldValue) \
        Ptr += NumToSkip; \
      break; \
    } \
    case MCD_OPC_CheckField: { \
      Start = *++Ptr; \
      Len = *++Ptr; \
      FieldValue = fieldname(insn, Start, Len); \
      /* Decode the field value. */ \
      ExpectedValue = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* If the actual and expected values don't match, skip. */ \
      if (ExpectedValue != FieldValue) \
        Ptr += NumToSkip; \
      break; \
    } \
    case MCD_OPC_CheckPredicate: { \
      /* Decode the Predicate Index value. */ \
      PIdx = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Check the predicate. */ \
      if (!(Pred = checkDecoderPredicate(PIdx, feature))) \
        Ptr += NumToSkip; \
		/* printf("55 PIdx = %u, Pred = %u\n", PIdx, Pred); */ \
      (void)Pred; \
      break; \
    } \
    case MCD_OPC_Decode: { \
      /* Decode the Opcode value. */ \
      Opc = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      DecodeIdx = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      MCInst_clear(MI); \
      MCInst_setOpcode(MI, Opc); \
      S = decoder(S, DecodeIdx, insn, MI, Address, &DecodeComplete); \
      /* assert(DecodeComplete); */ \
      return S; \
    } \
    case MCD_OPC_TryDecode: { \
      /* Decode the Opcode value. */ \
      Opc = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      DecodeIdx = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      /* NumToSkip is a plain 24-bit integer. */ \
      NumToSkip = *Ptr++; \
      NumToSkip |= (*Ptr++) << 8; \
      NumToSkip |= (*Ptr++) << 16; \
      /* Perform the decode operation. */ \
      MCInst_setOpcode(MI, Opc); \
      S = decoder(S, DecodeIdx, insn, MI, Address, &DecodeComplete); \
      if (DecodeComplete) { \
        /* Decoding complete. */ \
        return S; \
      } else { \
        /* assert(S == MCDisassembler_Fail); */ \
        /* If the decoding was incomplete, skip. */ \
        Ptr += NumToSkip; \
        /* Reset decode status. This also drops a SoftFail status that could be */ \
        /* set before the decode attempt. */ \
        S = MCDisassembler_Success; \
      } \
      break; \
    } \
    case MCD_OPC_SoftFail: { \
      /* Decode the mask values. */ \
      PositiveMask = decodeULEB128(++Ptr, &Len); \
      Ptr += Len; \
      NegativeMask = decodeULEB128(Ptr, &Len); \
      Ptr += Len; \
      Fail = (insn & PositiveMask) || (~insn & NegativeMask); \
      if (Fail) \
        S = MCDisassembler_SoftFail; \
      break; \
    } \
    case MCD_OPC_Fail: { \
      return MCDisassembler_Fail; \
    } \
    } \
  } \
  /* llvm_unreachable("bogosity detected in disassembler state machine!");*/  \
}

FieldFromInstruction(fieldFromInstruction, uint32_t)
DecodeToMCInst(decodeToMCInst, fieldFromInstruction, uint32_t)
DecodeInstruction(decodeInstruction, fieldFromInstruction, decodeToMCInst, uint32_t)

#endif // MIPS_GET_DISASSEMBLER
#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

#define Mips_AT 1
#define Mips_DSPCCond 2
#define Mips_DSPCarry 3
#define Mips_DSPEFI 4
#define Mips_DSPOutFlag 5
#define Mips_DSPPos 6
#define Mips_DSPSCount 7
#define Mips_FP 8
#define Mips_GP 9
#define Mips_MSAAccess 10
#define Mips_MSACSR 11
#define Mips_MSAIR 12
#define Mips_MSAMap 13
#define Mips_MSAModify 14
#define Mips_MSARequest 15
#define Mips_MSASave 16
#define Mips_MSAUnmap 17
#define Mips_PC 18
#define Mips_RA 19
#define Mips_SP 20
#define Mips_ZERO 21
#define Mips_A0 22
#define Mips_A1 23
#define Mips_A2 24
#define Mips_A3 25
#define Mips_AC0 26
#define Mips_AC1 27
#define Mips_AC2 28
#define Mips_AC3 29
#define Mips_AT_64 30
#define Mips_COP00 31
#define Mips_COP01 32
#define Mips_COP02 33
#define Mips_COP03 34
#define Mips_COP04 35
#define Mips_COP05 36
#define Mips_COP06 37
#define Mips_COP07 38
#define Mips_COP08 39
#define Mips_COP09 40
#define Mips_COP20 41
#define Mips_COP21 42
#define Mips_COP22 43
#define Mips_COP23 44
#define Mips_COP24 45
#define Mips_COP25 46
#define Mips_COP26 47
#define Mips_COP27 48
#define Mips_COP28 49
#define Mips_COP29 50
#define Mips_COP30 51
#define Mips_COP31 52
#define Mips_COP32 53
#define Mips_COP33 54
#define Mips_COP34 55
#define Mips_COP35 56
#define Mips_COP36 57
#define Mips_COP37 58
#define Mips_COP38 59
#define Mips_COP39 60
#define Mips_COP010 61
#define Mips_COP011 62
#define Mips_COP012 63
#define Mips_COP013 64
#define Mips_COP014 65
#define Mips_COP015 66
#define Mips_COP016 67
#define Mips_COP017 68
#define Mips_COP018 69
#define Mips_COP019 70
#define Mips_COP020 71
#define Mips_COP021 72
#define Mips_COP022 73
#define Mips_COP023 74
#define Mips_COP024 75
#define Mips_COP025 76
#define Mips_COP026 77
#define Mips_COP027 78
#define Mips_COP028 79
#define Mips_COP029 80
#define Mips_COP030 81
#define Mips_COP031 82
#define Mips_COP210 83
#define Mips_COP211 84
#define Mips_COP212 85
#define Mips_COP213 86
#define Mips_COP214 87
#define Mips_COP215 88
#define Mips_COP216 89
#define Mips_COP217 90
#define Mips_COP218 91
#define Mips_COP219 92
#define Mips_COP220 93
#define Mips_COP221 94
#define Mips_COP222 95
#define Mips_COP223 96
#define Mips_COP224 97
#define Mips_COP225 98
#define Mips_COP226 99
#define Mips_COP227 100
#define Mips_COP228 101
#define Mips_COP229 102
#define Mips_COP230 103
#define Mips_COP231 104
#define Mips_COP310 105
#define Mips_COP311 106
#define Mips_COP312 107
#define Mips_COP313 108
#define Mips_COP314 109
#define Mips_COP315 110
#define Mips_COP316 111
#define Mips_COP317 112
#define Mips_COP318 113
#define Mips_COP319 114
#define Mips_COP320 115
#define Mips_COP321 116
#define Mips_COP322 117
#define Mips_COP323 118
#define Mips_COP324 119
#define Mips_COP325 120
#define Mips_COP326 121
#define Mips_COP327 122
#define Mips_COP328 123
#define Mips_COP329 124
#define Mips_COP330 125
#define Mips_COP331 126
#define Mips_D0 127
#define Mips_D1 128
#define Mips_D2 129
#define Mips_D3 130
#define Mips_D4 131
#define Mips_D5 132
#define Mips_D6 133
#define Mips_D7 134
#define Mips_D8 135
#define Mips_D9 136
#define Mips_D10 137
#define Mips_D11 138
#define Mips_D12 139
#define Mips_D13 140
#define Mips_D14 141
#define Mips_D15 142
#define Mips_DSPOutFlag20 143
#define Mips_DSPOutFlag21 144
#define Mips_DSPOutFlag22 145
#define Mips_DSPOutFlag23 146
#define Mips_F0 147
#define Mips_F1 148
#define Mips_F2 149
#define Mips_F3 150
#define Mips_F4 151
#define Mips_F5 152
#define Mips_F6 153
#define Mips_F7 154
#define Mips_F8 155
#define Mips_F9 156
#define Mips_F10 157
#define Mips_F11 158
#define Mips_F12 159
#define Mips_F13 160
#define Mips_F14 161
#define Mips_F15 162
#define Mips_F16 163
#define Mips_F17 164
#define Mips_F18 165
#define Mips_F19 166
#define Mips_F20 167
#define Mips_F21 168
#define Mips_F22 169
#define Mips_F23 170
#define Mips_F24 171
#define Mips_F25 172
#define Mips_F26 173
#define Mips_F27 174
#define Mips_F28 175
#define Mips_F29 176
#define Mips_F30 177
#define Mips_F31 178
#define Mips_FCC0 179
#define Mips_FCC1 180
#define Mips_FCC2 181
#define Mips_FCC3 182
#define Mips_FCC4 183
#define Mips_FCC5 184
#define Mips_FCC6 185
#define Mips_FCC7 186
#define Mips_FCR0 187
#define Mips_FCR1 188
#define Mips_FCR2 189
#define Mips_FCR3 190
#define Mips_FCR4 191
#define Mips_FCR5 192
#define Mips_FCR6 193
#define Mips_FCR7 194
#define Mips_FCR8 195
#define Mips_FCR9 196
#define Mips_FCR10 197
#define Mips_FCR11 198
#define Mips_FCR12 199
#define Mips_FCR13 200
#define Mips_FCR14 201
#define Mips_FCR15 202
#define Mips_FCR16 203
#define Mips_FCR17 204
#define Mips_FCR18 205
#define Mips_FCR19 206
#define Mips_FCR20 207
#define Mips_FCR21 208
#define Mips_FCR22 209
#define Mips_FCR23 210
#define Mips_FCR24 211
#define Mips_FCR25 212
#define Mips_FCR26 213
#define Mips_FCR27 214
#define Mips_FCR28 215
#define Mips_FCR29 216
#define Mips_FCR30 217
#define Mips_FCR31 218
#define Mips_FP_64 219
#define Mips_F_HI0 220
#define Mips_F_HI1 221
#define Mips_F_HI2 222
#define Mips_F_HI3 223
#define Mips_F_HI4 224
#define Mips_F_HI5 225
#define Mips_F_HI6 226
#define Mips_F_HI7 227
#define Mips_F_HI8 228
#define Mips_F_HI9 229
#define Mips_F_HI10 230
#define Mips_F_HI11 231
#define Mips_F_HI12 232
#define Mips_F_HI13 233
#define Mips_F_HI14 234
#define Mips_F_HI15 235
#define Mips_F_HI16 236
#define Mips_F_HI17 237
#define Mips_F_HI18 238
#define Mips_F_HI19 239
#define Mips_F_HI20 240
#define Mips_F_HI21 241
#define Mips_F_HI22 242
#define Mips_F_HI23 243
#define Mips_F_HI24 244
#define Mips_F_HI25 245
#define Mips_F_HI26 246
#define Mips_F_HI27 247
#define Mips_F_HI28 248
#define Mips_F_HI29 249
#define Mips_F_HI30 250
#define Mips_F_HI31 251
#define Mips_GP_64 252
#define Mips_HI0 253
#define Mips_HI1 254
#define Mips_HI2 255
#define Mips_HI3 256
#define Mips_HWR0 257
#define Mips_HWR1 258
#define Mips_HWR2 259
#define Mips_HWR3 260
#define Mips_HWR4 261
#define Mips_HWR5 262
#define Mips_HWR6 263
#define Mips_HWR7 264
#define Mips_HWR8 265
#define Mips_HWR9 266
#define Mips_HWR10 267
#define Mips_HWR11 268
#define Mips_HWR12 269
#define Mips_HWR13 270
#define Mips_HWR14 271
#define Mips_HWR15 272
#define Mips_HWR16 273
#define Mips_HWR17 274
#define Mips_HWR18 275
#define Mips_HWR19 276
#define Mips_HWR20 277
#define Mips_HWR21 278
#define Mips_HWR22 279
#define Mips_HWR23 280
#define Mips_HWR24 281
#define Mips_HWR25 282
#define Mips_HWR26 283
#define Mips_HWR27 284
#define Mips_HWR28 285
#define Mips_HWR29 286
#define Mips_HWR30 287
#define Mips_HWR31 288
#define Mips_K0 289
#define Mips_K1 290
#define Mips_LO0 291
#define Mips_LO1 292
#define Mips_LO2 293
#define Mips_LO3 294
#define Mips_MPL0 295
#define Mips_MPL1 296
#define Mips_MPL2 297
#define Mips_MSA8 298
#define Mips_MSA9 299
#define Mips_MSA10 300
#define Mips_MSA11 301
#define Mips_MSA12 302
#define Mips_MSA13 303
#define Mips_MSA14 304
#define Mips_MSA15 305
#define Mips_MSA16 306
#define Mips_MSA17 307
#define Mips_MSA18 308
#define Mips_MSA19 309
#define Mips_MSA20 310
#define Mips_MSA21 311
#define Mips_MSA22 312
#define Mips_MSA23 313
#define Mips_MSA24 314
#define Mips_MSA25 315
#define Mips_MSA26 316
#define Mips_MSA27 317
#define Mips_MSA28 318
#define Mips_MSA29 319
#define Mips_MSA30 320
#define Mips_MSA31 321
#define Mips_P0 322
#define Mips_P1 323
#define Mips_P2 324
#define Mips_RA_64 325
#define Mips_S0 326
#define Mips_S1 327
#define Mips_S2 328
#define Mips_S3 329
#define Mips_S4 330
#define Mips_S5 331
#define Mips_S6 332
#define Mips_S7 333
#define Mips_SP_64 334
#define Mips_T0 335
#define Mips_T1 336
#define Mips_T2 337
#define Mips_T3 338
#define Mips_T4 339
#define Mips_T5 340
#define Mips_T6 341
#define Mips_T7 342
#define Mips_T8 343
#define Mips_T9 344
#define Mips_V0 345
#define Mips_V1 346
#define Mips_W0 347
#define Mips_W1 348
#define Mips_W2 349
#define Mips_W3 350
#define Mips_W4 351
#define Mips_W5 352
#define Mips_W6 353
#define Mips_W7 354
#define Mips_W8 355
#define Mips_W9 356
#define Mips_W10 357
#define Mips_W11 358
#define Mips_W12 359
#define Mips_W13 360
#define Mips_W14 361
#define Mips_W15 362
#define Mips_W16 363
#define Mips_W17 364
#define Mips_W18 365
#define Mips_W19 366
#define Mips_W20 367
#define Mips_W21 368
#define Mips_W22 369
#define Mips_W23 370
#define Mips_W24 371
#define Mips_W25 372
#define Mips_W26 373
#define Mips_W27 374
#define Mips_W28 375
#define Mips_W29 376
#define Mips_W30 377
#define Mips_W31 378
#define Mips_ZERO_64 379
#define Mips_A0_64 380
#define Mips_A1_64 381
#define Mips_A2_64 382
#define Mips_A3_64 383
#define Mips_AC0_64 384
#define Mips_D0_64 385
#define Mips_D1_64 386
#define Mips_D2_64 387
#define Mips_D3_64 388
#define Mips_D4_64 389
#define Mips_D5_64 390
#define Mips_D6_64 391
#define Mips_D7_64 392
#define Mips_D8_64 393
#define Mips_D9_64 394
#define Mips_D10_64 395
#define Mips_D11_64 396
#define Mips_D12_64 397
#define Mips_D13_64 398
#define Mips_D14_64 399
#define Mips_D15_64 400
#define Mips_D16_64 401
#define Mips_D17_64 402
#define Mips_D18_64 403
#define Mips_D19_64 404
#define Mips_D20_64 405
#define Mips_D21_64 406
#define Mips_D22_64 407
#define Mips_D23_64 408
#define Mips_D24_64 409
#define Mips_D25_64 410
#define Mips_D26_64 411
#define Mips_D27_64 412
#define Mips_D28_64 413
#define Mips_D29_64 414
#define Mips_D30_64 415
#define Mips_D31_64 416
#define Mips_DSPOutFlag16_19 417
#define Mips_HI0_64 418
#define Mips_K0_64 419
#define Mips_K1_64 420
#define Mips_LO0_64 421
#define Mips_S0_64 422
#define Mips_S1_64 423
#define Mips_S2_64 424
#define Mips_S3_64 425
#define Mips_S4_64 426
#define Mips_S5_64 427
#define Mips_S6_64 428
#define Mips_S7_64 429
#define Mips_T0_64 430
#define Mips_T1_64 431
#define Mips_T2_64 432
#define Mips_T3_64 433
#define Mips_T4_64 434
#define Mips_T5_64 435
#define Mips_T6_64 436
#define Mips_T7_64 437
#define Mips_T8_64 438
#define Mips_T9_64 439
#define Mips_V0_64 440
#define Mips_V1_64 441
#define Mips_NUM_TARGET_REGS 442


// Register classes

#define Mips_MSA128F16RegClassID 0
#define Mips_CCRRegClassID 1
#define Mips_COP0RegClassID 2
#define Mips_COP2RegClassID 3
#define Mips_COP3RegClassID 4
#define Mips_DSPRRegClassID 5
#define Mips_FGR32RegClassID 6
#define Mips_FGRCCRegClassID 7
#define Mips_GPR32RegClassID 8
#define Mips_HWRegsRegClassID 9
#define Mips_MSACtrlRegClassID 10
#define Mips_GPR32NONZERORegClassID 11
#define Mips_CPU16RegsPlusSPRegClassID 12
#define Mips_CPU16RegsRegClassID 13
#define Mips_FCCRegClassID 14
#define Mips_GPRMM16RegClassID 15
#define Mips_GPRMM16MovePRegClassID 16
#define Mips_GPRMM16ZeroRegClassID 17
#define Mips_CPU16Regs_and_GPRMM16ZeroRegClassID 18
#define Mips_GPR32NONZERO_and_GPRMM16MovePRegClassID 19
#define Mips_GPRMM16MovePPairSecondRegClassID 20
#define Mips_CPU16Regs_and_GPRMM16MovePRegClassID 21
#define Mips_GPRMM16MoveP_and_GPRMM16ZeroRegClassID 22
#define Mips_HI32DSPRegClassID 23
#define Mips_LO32DSPRegClassID 24
#define Mips_CPU16Regs_and_GPRMM16MovePPairSecondRegClassID 25
#define Mips_GPRMM16MovePPairFirstRegClassID 26
#define Mips_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroRegClassID 27
#define Mips_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondRegClassID 28
#define Mips_CPURARegRegClassID 29
#define Mips_CPUSPRegRegClassID 30
#define Mips_DSPCCRegClassID 31
#define Mips_GP32RegClassID 32
#define Mips_GPR32ZERORegClassID 33
#define Mips_HI32RegClassID 34
#define Mips_LO32RegClassID 35
#define Mips_SP32RegClassID 36
#define Mips_FGR64RegClassID 37
#define Mips_GPR64RegClassID 38
#define Mips_GPR64_with_sub_32_in_GPR32NONZERORegClassID 39
#define Mips_AFGR64RegClassID 40
#define Mips_GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID 41
#define Mips_GPR64_with_sub_32_in_CPU16RegsRegClassID 42
#define Mips_GPR64_with_sub_32_in_GPRMM16MovePRegClassID 43
#define Mips_GPR64_with_sub_32_in_GPRMM16ZeroRegClassID 44
#define Mips_GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16ZeroRegClassID 45
#define Mips_GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MovePRegClassID 46
#define Mips_GPR64_with_sub_32_in_GPRMM16MovePPairSecondRegClassID 47
#define Mips_ACC64DSPRegClassID 48
#define Mips_GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePRegClassID 49
#define Mips_GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16ZeroRegClassID 50
#define Mips_GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecondRegClassID 51
#define Mips_GPR64_with_sub_32_in_GPRMM16MovePPairFirstRegClassID 52
#define Mips_GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroRegClassID 53
#define Mips_OCTEON_MPLRegClassID 54
#define Mips_OCTEON_PRegClassID 55
#define Mips_GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondRegClassID 56
#define Mips_ACC64RegClassID 57
#define Mips_GP64RegClassID 58
#define Mips_GPR64_with_sub_32_in_CPURARegRegClassID 59
#define Mips_GPR64_with_sub_32_in_GPR32ZERORegClassID 60
#define Mips_HI64RegClassID 61
#define Mips_LO64RegClassID 62
#define Mips_SP64RegClassID 63
#define Mips_MSA128BRegClassID 64
#define Mips_MSA128DRegClassID 65
#define Mips_MSA128HRegClassID 66
#define Mips_MSA128WRegClassID 67
#define Mips_MSA128WEvensRegClassID 68
#define Mips_ACC128RegClassID 69

#endif // GET_REGINFO_ENUM

#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
#define Mips_PHI	 0
#define Mips_INLINEASM	 1
#define Mips_INLINEASM_BR	 2
#define Mips_CFI_INSTRUCTION	 3
#define Mips_EH_LABEL	 4
#define Mips_GC_LABEL	 5
#define Mips_ANNOTATION_LABEL	 6
#define Mips_KILL	 7
#define Mips_EXTRACT_SUBREG	 8
#define Mips_INSERT_SUBREG	 9
#define Mips_IMPLICIT_DEF	 10
#define Mips_SUBREG_TO_REG	 11
#define Mips_COPY_TO_REGCLASS	 12
#define Mips_DBG_VALUE	 13
#define Mips_DBG_VALUE_LIST	 14
#define Mips_DBG_INSTR_REF	 15
#define Mips_DBG_PHI	 16
#define Mips_DBG_LABEL	 17
#define Mips_REG_SEQUENCE	 18
#define Mips_COPY	 19
#define Mips_BUNDLE	 20
#define Mips_LIFETIME_START	 21
#define Mips_LIFETIME_END	 22
#define Mips_PSEUDO_PROBE	 23
#define Mips_ARITH_FENCE	 24
#define Mips_STACKMAP	 25
#define Mips_FENTRY_CALL	 26
#define Mips_PATCHPOINT	 27
#define Mips_LOAD_STACK_GUARD	 28
#define Mips_PREALLOCATED_SETUP	 29
#define Mips_PREALLOCATED_ARG	 30
#define Mips_STATEPOINT	 31
#define Mips_LOCAL_ESCAPE	 32
#define Mips_FAULTING_OP	 33
#define Mips_PATCHABLE_OP	 34
#define Mips_PATCHABLE_FUNCTION_ENTER	 35
#define Mips_PATCHABLE_RET	 36
#define Mips_PATCHABLE_FUNCTION_EXIT	 37
#define Mips_PATCHABLE_TAIL_CALL	 38
#define Mips_PATCHABLE_EVENT_CALL	 39
#define Mips_PATCHABLE_TYPED_EVENT_CALL	 40
#define Mips_ICALL_BRANCH_FUNNEL	 41
#define Mips_G_ASSERT_SEXT	 42
#define Mips_G_ASSERT_ZEXT	 43
#define Mips_G_ADD	 44
#define Mips_G_SUB	 45
#define Mips_G_MUL	 46
#define Mips_G_SDIV	 47
#define Mips_G_UDIV	 48
#define Mips_G_SREM	 49
#define Mips_G_UREM	 50
#define Mips_G_SDIVREM	 51
#define Mips_G_UDIVREM	 52
#define Mips_G_AND	 53
#define Mips_G_OR	 54
#define Mips_G_XOR	 55
#define Mips_G_IMPLICIT_DEF	 56
#define Mips_G_PHI	 57
#define Mips_G_FRAME_INDEX	 58
#define Mips_G_GLOBAL_VALUE	 59
#define Mips_G_EXTRACT	 60
#define Mips_G_UNMERGE_VALUES	 61
#define Mips_G_INSERT	 62
#define Mips_G_MERGE_VALUES	 63
#define Mips_G_BUILD_VECTOR	 64
#define Mips_G_BUILD_VECTOR_TRUNC	 65
#define Mips_G_CONCAT_VECTORS	 66
#define Mips_G_PTRTOINT	 67
#define Mips_G_INTTOPTR	 68
#define Mips_G_BITCAST	 69
#define Mips_G_FREEZE	 70
#define Mips_G_INTRINSIC_TRUNC	 71
#define Mips_G_INTRINSIC_ROUND	 72
#define Mips_G_INTRINSIC_LRINT	 73
#define Mips_G_INTRINSIC_ROUNDEVEN	 74
#define Mips_G_READCYCLECOUNTER	 75
#define Mips_G_LOAD	 76
#define Mips_G_SEXTLOAD	 77
#define Mips_G_ZEXTLOAD	 78
#define Mips_G_INDEXED_LOAD	 79
#define Mips_G_INDEXED_SEXTLOAD	 80
#define Mips_G_INDEXED_ZEXTLOAD	 81
#define Mips_G_STORE	 82
#define Mips_G_INDEXED_STORE	 83
#define Mips_G_ATOMIC_CMPXCHG_WITH_SUCCESS	 84
#define Mips_G_ATOMIC_CMPXCHG	 85
#define Mips_G_ATOMICRMW_XCHG	 86
#define Mips_G_ATOMICRMW_ADD	 87
#define Mips_G_ATOMICRMW_SUB	 88
#define Mips_G_ATOMICRMW_AND	 89
#define Mips_G_ATOMICRMW_NAND	 90
#define Mips_G_ATOMICRMW_OR	 91
#define Mips_G_ATOMICRMW_XOR	 92
#define Mips_G_ATOMICRMW_MAX	 93
#define Mips_G_ATOMICRMW_MIN	 94
#define Mips_G_ATOMICRMW_UMAX	 95
#define Mips_G_ATOMICRMW_UMIN	 96
#define Mips_G_ATOMICRMW_FADD	 97
#define Mips_G_ATOMICRMW_FSUB	 98
#define Mips_G_FENCE	 99
#define Mips_G_BRCOND	 100
#define Mips_G_BRINDIRECT	 101
#define Mips_G_INTRINSIC	 102
#define Mips_G_INTRINSIC_W_SIDE_EFFECTS	 103
#define Mips_G_ANYEXT	 104
#define Mips_G_TRUNC	 105
#define Mips_G_CONSTANT	 106
#define Mips_G_FCONSTANT	 107
#define Mips_G_VASTART	 108
#define Mips_G_VAARG	 109
#define Mips_G_SEXT	 110
#define Mips_G_SEXT_INREG	 111
#define Mips_G_ZEXT	 112
#define Mips_G_SHL	 113
#define Mips_G_LSHR	 114
#define Mips_G_ASHR	 115
#define Mips_G_FSHL	 116
#define Mips_G_FSHR	 117
#define Mips_G_ROTR	 118
#define Mips_G_ROTL	 119
#define Mips_G_ICMP	 120
#define Mips_G_FCMP	 121
#define Mips_G_SELECT	 122
#define Mips_G_UADDO	 123
#define Mips_G_UADDE	 124
#define Mips_G_USUBO	 125
#define Mips_G_USUBE	 126
#define Mips_G_SADDO	 127
#define Mips_G_SADDE	 128
#define Mips_G_SSUBO	 129
#define Mips_G_SSUBE	 130
#define Mips_G_UMULO	 131
#define Mips_G_SMULO	 132
#define Mips_G_UMULH	 133
#define Mips_G_SMULH	 134
#define Mips_G_UADDSAT	 135
#define Mips_G_SADDSAT	 136
#define Mips_G_USUBSAT	 137
#define Mips_G_SSUBSAT	 138
#define Mips_G_USHLSAT	 139
#define Mips_G_SSHLSAT	 140
#define Mips_G_SMULFIX	 141
#define Mips_G_UMULFIX	 142
#define Mips_G_SMULFIXSAT	 143
#define Mips_G_UMULFIXSAT	 144
#define Mips_G_SDIVFIX	 145
#define Mips_G_UDIVFIX	 146
#define Mips_G_SDIVFIXSAT	 147
#define Mips_G_UDIVFIXSAT	 148
#define Mips_G_FADD	 149
#define Mips_G_FSUB	 150
#define Mips_G_FMUL	 151
#define Mips_G_FMA	 152
#define Mips_G_FMAD	 153
#define Mips_G_FDIV	 154
#define Mips_G_FREM	 155
#define Mips_G_FPOW	 156
#define Mips_G_FPOWI	 157
#define Mips_G_FEXP	 158
#define Mips_G_FEXP2	 159
#define Mips_G_FLOG	 160
#define Mips_G_FLOG2	 161
#define Mips_G_FLOG10	 162
#define Mips_G_FNEG	 163
#define Mips_G_FPEXT	 164
#define Mips_G_FPTRUNC	 165
#define Mips_G_FPTOSI	 166
#define Mips_G_FPTOUI	 167
#define Mips_G_SITOFP	 168
#define Mips_G_UITOFP	 169
#define Mips_G_FABS	 170
#define Mips_G_FCOPYSIGN	 171
#define Mips_G_FCANONICALIZE	 172
#define Mips_G_FMINNUM	 173
#define Mips_G_FMAXNUM	 174
#define Mips_G_FMINNUM_IEEE	 175
#define Mips_G_FMAXNUM_IEEE	 176
#define Mips_G_FMINIMUM	 177
#define Mips_G_FMAXIMUM	 178
#define Mips_G_PTR_ADD	 179
#define Mips_G_PTRMASK	 180
#define Mips_G_SMIN	 181
#define Mips_G_SMAX	 182
#define Mips_G_UMIN	 183
#define Mips_G_UMAX	 184
#define Mips_G_ABS	 185
#define Mips_G_LROUND	 186
#define Mips_G_LLROUND	 187
#define Mips_G_BR	 188
#define Mips_G_BRJT	 189
#define Mips_G_INSERT_VECTOR_ELT	 190
#define Mips_G_EXTRACT_VECTOR_ELT	 191
#define Mips_G_SHUFFLE_VECTOR	 192
#define Mips_G_CTTZ	 193
#define Mips_G_CTTZ_ZERO_UNDEF	 194
#define Mips_G_CTLZ	 195
#define Mips_G_CTLZ_ZERO_UNDEF	 196
#define Mips_G_CTPOP	 197
#define Mips_G_BSWAP	 198
#define Mips_G_BITREVERSE	 199
#define Mips_G_FCEIL	 200
#define Mips_G_FCOS	 201
#define Mips_G_FSIN	 202
#define Mips_G_FSQRT	 203
#define Mips_G_FFLOOR	 204
#define Mips_G_FRINT	 205
#define Mips_G_FNEARBYINT	 206
#define Mips_G_ADDRSPACE_CAST	 207
#define Mips_G_BLOCK_ADDR	 208
#define Mips_G_JUMP_TABLE	 209
#define Mips_G_DYN_STACKALLOC	 210
#define Mips_G_STRICT_FADD	 211
#define Mips_G_STRICT_FSUB	 212
#define Mips_G_STRICT_FMUL	 213
#define Mips_G_STRICT_FDIV	 214
#define Mips_G_STRICT_FREM	 215
#define Mips_G_STRICT_FMA	 216
#define Mips_G_STRICT_FSQRT	 217
#define Mips_G_READ_REGISTER	 218
#define Mips_G_WRITE_REGISTER	 219
#define Mips_G_MEMCPY	 220
#define Mips_G_MEMCPY_INLINE	 221
#define Mips_G_MEMMOVE	 222
#define Mips_G_MEMSET	 223
#define Mips_G_BZERO	 224
#define Mips_G_VECREDUCE_SEQ_FADD	 225
#define Mips_G_VECREDUCE_SEQ_FMUL	 226
#define Mips_G_VECREDUCE_FADD	 227
#define Mips_G_VECREDUCE_FMUL	 228
#define Mips_G_VECREDUCE_FMAX	 229
#define Mips_G_VECREDUCE_FMIN	 230
#define Mips_G_VECREDUCE_ADD	 231
#define Mips_G_VECREDUCE_MUL	 232
#define Mips_G_VECREDUCE_AND	 233
#define Mips_G_VECREDUCE_OR	 234
#define Mips_G_VECREDUCE_XOR	 235
#define Mips_G_VECREDUCE_SMAX	 236
#define Mips_G_VECREDUCE_SMIN	 237
#define Mips_G_VECREDUCE_UMAX	 238
#define Mips_G_VECREDUCE_UMIN	 239
#define Mips_G_SBFX	 240
#define Mips_G_UBFX	 241
#define Mips_ABSMacro	 242
#define Mips_ADJCALLSTACKDOWN	 243
#define Mips_ADJCALLSTACKUP	 244
#define Mips_AND_V_D_PSEUDO	 245
#define Mips_AND_V_H_PSEUDO	 246
#define Mips_AND_V_W_PSEUDO	 247
#define Mips_ATOMIC_CMP_SWAP_I16	 248
#define Mips_ATOMIC_CMP_SWAP_I16_POSTRA	 249
#define Mips_ATOMIC_CMP_SWAP_I32	 250
#define Mips_ATOMIC_CMP_SWAP_I32_POSTRA	 251
#define Mips_ATOMIC_CMP_SWAP_I64	 252
#define Mips_ATOMIC_CMP_SWAP_I64_POSTRA	 253
#define Mips_ATOMIC_CMP_SWAP_I8	 254
#define Mips_ATOMIC_CMP_SWAP_I8_POSTRA	 255
#define Mips_ATOMIC_LOAD_ADD_I16	 256
#define Mips_ATOMIC_LOAD_ADD_I16_POSTRA	 257
#define Mips_ATOMIC_LOAD_ADD_I32	 258
#define Mips_ATOMIC_LOAD_ADD_I32_POSTRA	 259
#define Mips_ATOMIC_LOAD_ADD_I64	 260
#define Mips_ATOMIC_LOAD_ADD_I64_POSTRA	 261
#define Mips_ATOMIC_LOAD_ADD_I8	 262
#define Mips_ATOMIC_LOAD_ADD_I8_POSTRA	 263
#define Mips_ATOMIC_LOAD_AND_I16	 264
#define Mips_ATOMIC_LOAD_AND_I16_POSTRA	 265
#define Mips_ATOMIC_LOAD_AND_I32	 266
#define Mips_ATOMIC_LOAD_AND_I32_POSTRA	 267
#define Mips_ATOMIC_LOAD_AND_I64	 268
#define Mips_ATOMIC_LOAD_AND_I64_POSTRA	 269
#define Mips_ATOMIC_LOAD_AND_I8	 270
#define Mips_ATOMIC_LOAD_AND_I8_POSTRA	 271
#define Mips_ATOMIC_LOAD_MAX_I16	 272
#define Mips_ATOMIC_LOAD_MAX_I16_POSTRA	 273
#define Mips_ATOMIC_LOAD_MAX_I32	 274
#define Mips_ATOMIC_LOAD_MAX_I32_POSTRA	 275
#define Mips_ATOMIC_LOAD_MAX_I64	 276
#define Mips_ATOMIC_LOAD_MAX_I64_POSTRA	 277
#define Mips_ATOMIC_LOAD_MAX_I8	 278
#define Mips_ATOMIC_LOAD_MAX_I8_POSTRA	 279
#define Mips_ATOMIC_LOAD_MIN_I16	 280
#define Mips_ATOMIC_LOAD_MIN_I16_POSTRA	 281
#define Mips_ATOMIC_LOAD_MIN_I32	 282
#define Mips_ATOMIC_LOAD_MIN_I32_POSTRA	 283
#define Mips_ATOMIC_LOAD_MIN_I64	 284
#define Mips_ATOMIC_LOAD_MIN_I64_POSTRA	 285
#define Mips_ATOMIC_LOAD_MIN_I8	 286
#define Mips_ATOMIC_LOAD_MIN_I8_POSTRA	 287
#define Mips_ATOMIC_LOAD_NAND_I16	 288
#define Mips_ATOMIC_LOAD_NAND_I16_POSTRA	 289
#define Mips_ATOMIC_LOAD_NAND_I32	 290
#define Mips_ATOMIC_LOAD_NAND_I32_POSTRA	 291
#define Mips_ATOMIC_LOAD_NAND_I64	 292
#define Mips_ATOMIC_LOAD_NAND_I64_POSTRA	 293
#define Mips_ATOMIC_LOAD_NAND_I8	 294
#define Mips_ATOMIC_LOAD_NAND_I8_POSTRA	 295
#define Mips_ATOMIC_LOAD_OR_I16	 296
#define Mips_ATOMIC_LOAD_OR_I16_POSTRA	 297
#define Mips_ATOMIC_LOAD_OR_I32	 298
#define Mips_ATOMIC_LOAD_OR_I32_POSTRA	 299
#define Mips_ATOMIC_LOAD_OR_I64	 300
#define Mips_ATOMIC_LOAD_OR_I64_POSTRA	 301
#define Mips_ATOMIC_LOAD_OR_I8	 302
#define Mips_ATOMIC_LOAD_OR_I8_POSTRA	 303
#define Mips_ATOMIC_LOAD_SUB_I16	 304
#define Mips_ATOMIC_LOAD_SUB_I16_POSTRA	 305
#define Mips_ATOMIC_LOAD_SUB_I32	 306
#define Mips_ATOMIC_LOAD_SUB_I32_POSTRA	 307
#define Mips_ATOMIC_LOAD_SUB_I64	 308
#define Mips_ATOMIC_LOAD_SUB_I64_POSTRA	 309
#define Mips_ATOMIC_LOAD_SUB_I8	 310
#define Mips_ATOMIC_LOAD_SUB_I8_POSTRA	 311
#define Mips_ATOMIC_LOAD_UMAX_I16	 312
#define Mips_ATOMIC_LOAD_UMAX_I16_POSTRA	 313
#define Mips_ATOMIC_LOAD_UMAX_I32	 314
#define Mips_ATOMIC_LOAD_UMAX_I32_POSTRA	 315
#define Mips_ATOMIC_LOAD_UMAX_I64	 316
#define Mips_ATOMIC_LOAD_UMAX_I64_POSTRA	 317
#define Mips_ATOMIC_LOAD_UMAX_I8	 318
#define Mips_ATOMIC_LOAD_UMAX_I8_POSTRA	 319
#define Mips_ATOMIC_LOAD_UMIN_I16	 320
#define Mips_ATOMIC_LOAD_UMIN_I16_POSTRA	 321
#define Mips_ATOMIC_LOAD_UMIN_I32	 322
#define Mips_ATOMIC_LOAD_UMIN_I32_POSTRA	 323
#define Mips_ATOMIC_LOAD_UMIN_I64	 324
#define Mips_ATOMIC_LOAD_UMIN_I64_POSTRA	 325
#define Mips_ATOMIC_LOAD_UMIN_I8	 326
#define Mips_ATOMIC_LOAD_UMIN_I8_POSTRA	 327
#define Mips_ATOMIC_LOAD_XOR_I16	 328
#define Mips_ATOMIC_LOAD_XOR_I16_POSTRA	 329
#define Mips_ATOMIC_LOAD_XOR_I32	 330
#define Mips_ATOMIC_LOAD_XOR_I32_POSTRA	 331
#define Mips_ATOMIC_LOAD_XOR_I64	 332
#define Mips_ATOMIC_LOAD_XOR_I64_POSTRA	 333
#define Mips_ATOMIC_LOAD_XOR_I8	 334
#define Mips_ATOMIC_LOAD_XOR_I8_POSTRA	 335
#define Mips_ATOMIC_SWAP_I16	 336
#define Mips_ATOMIC_SWAP_I16_POSTRA	 337
#define Mips_ATOMIC_SWAP_I32	 338
#define Mips_ATOMIC_SWAP_I32_POSTRA	 339
#define Mips_ATOMIC_SWAP_I64	 340
#define Mips_ATOMIC_SWAP_I64_POSTRA	 341
#define Mips_ATOMIC_SWAP_I8	 342
#define Mips_ATOMIC_SWAP_I8_POSTRA	 343
#define Mips_B	 344
#define Mips_BAL_BR	 345
#define Mips_BAL_BR_MM	 346
#define Mips_BEQLImmMacro	 347
#define Mips_BGE	 348
#define Mips_BGEImmMacro	 349
#define Mips_BGEL	 350
#define Mips_BGELImmMacro	 351
#define Mips_BGEU	 352
#define Mips_BGEUImmMacro	 353
#define Mips_BGEUL	 354
#define Mips_BGEULImmMacro	 355
#define Mips_BGT	 356
#define Mips_BGTImmMacro	 357
#define Mips_BGTL	 358
#define Mips_BGTLImmMacro	 359
#define Mips_BGTU	 360
#define Mips_BGTUImmMacro	 361
#define Mips_BGTUL	 362
#define Mips_BGTULImmMacro	 363
#define Mips_BLE	 364
#define Mips_BLEImmMacro	 365
#define Mips_BLEL	 366
#define Mips_BLELImmMacro	 367
#define Mips_BLEU	 368
#define Mips_BLEUImmMacro	 369
#define Mips_BLEUL	 370
#define Mips_BLEULImmMacro	 371
#define Mips_BLT	 372
#define Mips_BLTImmMacro	 373
#define Mips_BLTL	 374
#define Mips_BLTLImmMacro	 375
#define Mips_BLTU	 376
#define Mips_BLTUImmMacro	 377
#define Mips_BLTUL	 378
#define Mips_BLTULImmMacro	 379
#define Mips_BNELImmMacro	 380
#define Mips_BPOSGE32_PSEUDO	 381
#define Mips_BSEL_D_PSEUDO	 382
#define Mips_BSEL_FD_PSEUDO	 383
#define Mips_BSEL_FW_PSEUDO	 384
#define Mips_BSEL_H_PSEUDO	 385
#define Mips_BSEL_W_PSEUDO	 386
#define Mips_B_MM	 387
#define Mips_B_MMR6_Pseudo	 388
#define Mips_B_MM_Pseudo	 389
#define Mips_BeqImm	 390
#define Mips_BneImm	 391
#define Mips_BteqzT8CmpX16	 392
#define Mips_BteqzT8CmpiX16	 393
#define Mips_BteqzT8SltX16	 394
#define Mips_BteqzT8SltiX16	 395
#define Mips_BteqzT8SltiuX16	 396
#define Mips_BteqzT8SltuX16	 397
#define Mips_BtnezT8CmpX16	 398
#define Mips_BtnezT8CmpiX16	 399
#define Mips_BtnezT8SltX16	 400
#define Mips_BtnezT8SltiX16	 401
#define Mips_BtnezT8SltiuX16	 402
#define Mips_BtnezT8SltuX16	 403
#define Mips_BuildPairF64	 404
#define Mips_BuildPairF64_64	 405
#define Mips_CFTC1	 406
#define Mips_CONSTPOOL_ENTRY	 407
#define Mips_COPY_FD_PSEUDO	 408
#define Mips_COPY_FW_PSEUDO	 409
#define Mips_CTTC1	 410
#define Mips_Constant32	 411
#define Mips_DMULImmMacro	 412
#define Mips_DMULMacro	 413
#define Mips_DMULOMacro	 414
#define Mips_DMULOUMacro	 415
#define Mips_DROL	 416
#define Mips_DROLImm	 417
#define Mips_DROR	 418
#define Mips_DRORImm	 419
#define Mips_DSDivIMacro	 420
#define Mips_DSDivMacro	 421
#define Mips_DSRemIMacro	 422
#define Mips_DSRemMacro	 423
#define Mips_DUDivIMacro	 424
#define Mips_DUDivMacro	 425
#define Mips_DURemIMacro	 426
#define Mips_DURemMacro	 427
#define Mips_ERet	 428
#define Mips_ExtractElementF64	 429
#define Mips_ExtractElementF64_64	 430
#define Mips_FABS_D	 431
#define Mips_FABS_W	 432
#define Mips_FEXP2_D_1_PSEUDO	 433
#define Mips_FEXP2_W_1_PSEUDO	 434
#define Mips_FILL_FD_PSEUDO	 435
#define Mips_FILL_FW_PSEUDO	 436
#define Mips_GotPrologue16	 437
#define Mips_INSERT_B_VIDX64_PSEUDO	 438
#define Mips_INSERT_B_VIDX_PSEUDO	 439
#define Mips_INSERT_D_VIDX64_PSEUDO	 440
#define Mips_INSERT_D_VIDX_PSEUDO	 441
#define Mips_INSERT_FD_PSEUDO	 442
#define Mips_INSERT_FD_VIDX64_PSEUDO	 443
#define Mips_INSERT_FD_VIDX_PSEUDO	 444
#define Mips_INSERT_FW_PSEUDO	 445
#define Mips_INSERT_FW_VIDX64_PSEUDO	 446
#define Mips_INSERT_FW_VIDX_PSEUDO	 447
#define Mips_INSERT_H_VIDX64_PSEUDO	 448
#define Mips_INSERT_H_VIDX_PSEUDO	 449
#define Mips_INSERT_W_VIDX64_PSEUDO	 450
#define Mips_INSERT_W_VIDX_PSEUDO	 451
#define Mips_JALR64Pseudo	 452
#define Mips_JALRHB64Pseudo	 453
#define Mips_JALRHBPseudo	 454
#define Mips_JALRPseudo	 455
#define Mips_JAL_MMR6	 456
#define Mips_JalOneReg	 457
#define Mips_JalTwoReg	 458
#define Mips_LDMacro	 459
#define Mips_LDR_D	 460
#define Mips_LDR_W	 461
#define Mips_LD_F16	 462
#define Mips_LOAD_ACC128	 463
#define Mips_LOAD_ACC64	 464
#define Mips_LOAD_ACC64DSP	 465
#define Mips_LOAD_CCOND_DSP	 466
#define Mips_LONG_BRANCH_ADDiu	 467
#define Mips_LONG_BRANCH_ADDiu2Op	 468
#define Mips_LONG_BRANCH_DADDiu	 469
#define Mips_LONG_BRANCH_DADDiu2Op	 470
#define Mips_LONG_BRANCH_LUi	 471
#define Mips_LONG_BRANCH_LUi2Op	 472
#define Mips_LONG_BRANCH_LUi2Op_64	 473
#define Mips_LWM_MM	 474
#define Mips_LoadAddrImm32	 475
#define Mips_LoadAddrImm64	 476
#define Mips_LoadAddrReg32	 477
#define Mips_LoadAddrReg64	 478
#define Mips_LoadImm32	 479
#define Mips_LoadImm64	 480
#define Mips_LoadImmDoubleFGR	 481
#define Mips_LoadImmDoubleFGR_32	 482
#define Mips_LoadImmDoubleGPR	 483
#define Mips_LoadImmSingleFGR	 484
#define Mips_LoadImmSingleGPR	 485
#define Mips_LwConstant32	 486
#define Mips_MFTACX	 487
#define Mips_MFTC0	 488
#define Mips_MFTC1	 489
#define Mips_MFTDSP	 490
#define Mips_MFTGPR	 491
#define Mips_MFTHC1	 492
#define Mips_MFTHI	 493
#define Mips_MFTLO	 494
#define Mips_MIPSeh_return32	 495
#define Mips_MIPSeh_return64	 496
#define Mips_MSA_FP_EXTEND_D_PSEUDO	 497
#define Mips_MSA_FP_EXTEND_W_PSEUDO	 498
#define Mips_MSA_FP_ROUND_D_PSEUDO	 499
#define Mips_MSA_FP_ROUND_W_PSEUDO	 500
#define Mips_MTTACX	 501
#define Mips_MTTC0	 502
#define Mips_MTTC1	 503
#define Mips_MTTDSP	 504
#define Mips_MTTGPR	 505
#define Mips_MTTHC1	 506
#define Mips_MTTHI	 507
#define Mips_MTTLO	 508
#define Mips_MULImmMacro	 509
#define Mips_MULOMacro	 510
#define Mips_MULOUMacro	 511
#define Mips_MultRxRy16	 512
#define Mips_MultRxRyRz16	 513
#define Mips_MultuRxRy16	 514
#define Mips_MultuRxRyRz16	 515
#define Mips_NOP	 516
#define Mips_NORImm	 517
#define Mips_NORImm64	 518
#define Mips_NOR_V_D_PSEUDO	 519
#define Mips_NOR_V_H_PSEUDO	 520
#define Mips_NOR_V_W_PSEUDO	 521
#define Mips_OR_V_D_PSEUDO	 522
#define Mips_OR_V_H_PSEUDO	 523
#define Mips_OR_V_W_PSEUDO	 524
#define Mips_PseudoCMPU_EQ_QB	 525
#define Mips_PseudoCMPU_LE_QB	 526
#define Mips_PseudoCMPU_LT_QB	 527
#define Mips_PseudoCMP_EQ_PH	 528
#define Mips_PseudoCMP_LE_PH	 529
#define Mips_PseudoCMP_LT_PH	 530
#define Mips_PseudoCVT_D32_W	 531
#define Mips_PseudoCVT_D64_L	 532
#define Mips_PseudoCVT_D64_W	 533
#define Mips_PseudoCVT_S_L	 534
#define Mips_PseudoCVT_S_W	 535
#define Mips_PseudoDMULT	 536
#define Mips_PseudoDMULTu	 537
#define Mips_PseudoDSDIV	 538
#define Mips_PseudoDUDIV	 539
#define Mips_PseudoD_SELECT_I	 540
#define Mips_PseudoD_SELECT_I64	 541
#define Mips_PseudoIndirectBranch	 542
#define Mips_PseudoIndirectBranch64	 543
#define Mips_PseudoIndirectBranch64R6	 544
#define Mips_PseudoIndirectBranchR6	 545
#define Mips_PseudoIndirectBranch_MM	 546
#define Mips_PseudoIndirectBranch_MMR6	 547
#define Mips_PseudoIndirectHazardBranch	 548
#define Mips_PseudoIndirectHazardBranch64	 549
#define Mips_PseudoIndrectHazardBranch64R6	 550
#define Mips_PseudoIndrectHazardBranchR6	 551
#define Mips_PseudoMADD	 552
#define Mips_PseudoMADDU	 553
#define Mips_PseudoMADDU_MM	 554
#define Mips_PseudoMADD_MM	 555
#define Mips_PseudoMFHI	 556
#define Mips_PseudoMFHI64	 557
#define Mips_PseudoMFHI_MM	 558
#define Mips_PseudoMFLO	 559
#define Mips_PseudoMFLO64	 560
#define Mips_PseudoMFLO_MM	 561
#define Mips_PseudoMSUB	 562
#define Mips_PseudoMSUBU	 563
#define Mips_PseudoMSUBU_MM	 564
#define Mips_PseudoMSUB_MM	 565
#define Mips_PseudoMTLOHI	 566
#define Mips_PseudoMTLOHI64	 567
#define Mips_PseudoMTLOHI_DSP	 568
#define Mips_PseudoMTLOHI_MM	 569
#define Mips_PseudoMULT	 570
#define Mips_PseudoMULT_MM	 571
#define Mips_PseudoMULTu	 572
#define Mips_PseudoMULTu_MM	 573
#define Mips_PseudoPICK_PH	 574
#define Mips_PseudoPICK_QB	 575
#define Mips_PseudoReturn	 576
#define Mips_PseudoReturn64	 577
#define Mips_PseudoSDIV	 578
#define Mips_PseudoSELECTFP_F_D32	 579
#define Mips_PseudoSELECTFP_F_D64	 580
#define Mips_PseudoSELECTFP_F_I	 581
#define Mips_PseudoSELECTFP_F_I64	 582
#define Mips_PseudoSELECTFP_F_S	 583
#define Mips_PseudoSELECTFP_T_D32	 584
#define Mips_PseudoSELECTFP_T_D64	 585
#define Mips_PseudoSELECTFP_T_I	 586
#define Mips_PseudoSELECTFP_T_I64	 587
#define Mips_PseudoSELECTFP_T_S	 588
#define Mips_PseudoSELECT_D32	 589
#define Mips_PseudoSELECT_D64	 590
#define Mips_PseudoSELECT_I	 591
#define Mips_PseudoSELECT_I64	 592
#define Mips_PseudoSELECT_S	 593
#define Mips_PseudoTRUNC_W_D	 594
#define Mips_PseudoTRUNC_W_D32	 595
#define Mips_PseudoTRUNC_W_S	 596
#define Mips_PseudoUDIV	 597
#define Mips_ROL	 598
#define Mips_ROLImm	 599
#define Mips_ROR	 600
#define Mips_RORImm	 601
#define Mips_RetRA	 602
#define Mips_RetRA16	 603
#define Mips_SDC1_M1	 604
#define Mips_SDIV_MM_Pseudo	 605
#define Mips_SDMacro	 606
#define Mips_SDivIMacro	 607
#define Mips_SDivMacro	 608
#define Mips_SEQIMacro	 609
#define Mips_SEQMacro	 610
#define Mips_SGE	 611
#define Mips_SGEImm	 612
#define Mips_SGEImm64	 613
#define Mips_SGEU	 614
#define Mips_SGEUImm	 615
#define Mips_SGEUImm64	 616
#define Mips_SGTImm	 617
#define Mips_SGTImm64	 618
#define Mips_SGTUImm	 619
#define Mips_SGTUImm64	 620
#define Mips_SLE	 621
#define Mips_SLEImm	 622
#define Mips_SLEImm64	 623
#define Mips_SLEU	 624
#define Mips_SLEUImm	 625
#define Mips_SLEUImm64	 626
#define Mips_SLTImm64	 627
#define Mips_SLTUImm64	 628
#define Mips_SNEIMacro	 629
#define Mips_SNEMacro	 630
#define Mips_SNZ_B_PSEUDO	 631
#define Mips_SNZ_D_PSEUDO	 632
#define Mips_SNZ_H_PSEUDO	 633
#define Mips_SNZ_V_PSEUDO	 634
#define Mips_SNZ_W_PSEUDO	 635
#define Mips_SRemIMacro	 636
#define Mips_SRemMacro	 637
#define Mips_STORE_ACC128	 638
#define Mips_STORE_ACC64	 639
#define Mips_STORE_ACC64DSP	 640
#define Mips_STORE_CCOND_DSP	 641
#define Mips_STR_D	 642
#define Mips_STR_W	 643
#define Mips_ST_F16	 644
#define Mips_SWM_MM	 645
#define Mips_SZ_B_PSEUDO	 646
#define Mips_SZ_D_PSEUDO	 647
#define Mips_SZ_H_PSEUDO	 648
#define Mips_SZ_V_PSEUDO	 649
#define Mips_SZ_W_PSEUDO	 650
#define Mips_SaaAddr	 651
#define Mips_SaadAddr	 652
#define Mips_SelBeqZ	 653
#define Mips_SelBneZ	 654
#define Mips_SelTBteqZCmp	 655
#define Mips_SelTBteqZCmpi	 656
#define Mips_SelTBteqZSlt	 657
#define Mips_SelTBteqZSlti	 658
#define Mips_SelTBteqZSltiu	 659
#define Mips_SelTBteqZSltu	 660
#define Mips_SelTBtneZCmp	 661
#define Mips_SelTBtneZCmpi	 662
#define Mips_SelTBtneZSlt	 663
#define Mips_SelTBtneZSlti	 664
#define Mips_SelTBtneZSltiu	 665
#define Mips_SelTBtneZSltu	 666
#define Mips_SltCCRxRy16	 667
#define Mips_SltiCCRxImmX16	 668
#define Mips_SltiuCCRxImmX16	 669
#define Mips_SltuCCRxRy16	 670
#define Mips_SltuRxRyRz16	 671
#define Mips_TAILCALL	 672
#define Mips_TAILCALL64R6REG	 673
#define Mips_TAILCALLHB64R6REG	 674
#define Mips_TAILCALLHBR6REG	 675
#define Mips_TAILCALLR6REG	 676
#define Mips_TAILCALLREG	 677
#define Mips_TAILCALLREG64	 678
#define Mips_TAILCALLREGHB	 679
#define Mips_TAILCALLREGHB64	 680
#define Mips_TAILCALLREG_MM	 681
#define Mips_TAILCALLREG_MMR6	 682
#define Mips_TAILCALL_MM	 683
#define Mips_TAILCALL_MMR6	 684
#define Mips_TRAP	 685
#define Mips_TRAP_MM	 686
#define Mips_UDIV_MM_Pseudo	 687
#define Mips_UDivIMacro	 688
#define Mips_UDivMacro	 689
#define Mips_URemIMacro	 690
#define Mips_URemMacro	 691
#define Mips_Ulh	 692
#define Mips_Ulhu	 693
#define Mips_Ulw	 694
#define Mips_Ush	 695
#define Mips_Usw	 696
#define Mips_XOR_V_D_PSEUDO	 697
#define Mips_XOR_V_H_PSEUDO	 698
#define Mips_XOR_V_W_PSEUDO	 699
#define Mips_ABSQ_S_PH	 700
#define Mips_ABSQ_S_PH_MM	 701
#define Mips_ABSQ_S_QB	 702
#define Mips_ABSQ_S_QB_MMR2	 703
#define Mips_ABSQ_S_W	 704
#define Mips_ABSQ_S_W_MM	 705
#define Mips_ADD	 706
#define Mips_ADDIUPC	 707
#define Mips_ADDIUPC_MM	 708
#define Mips_ADDIUPC_MMR6	 709
#define Mips_ADDIUR1SP_MM	 710
#define Mips_ADDIUR2_MM	 711
#define Mips_ADDIUS5_MM	 712
#define Mips_ADDIUSP_MM	 713
#define Mips_ADDIU_MMR6	 714
#define Mips_ADDQH_PH	 715
#define Mips_ADDQH_PH_MMR2	 716
#define Mips_ADDQH_R_PH	 717
#define Mips_ADDQH_R_PH_MMR2	 718
#define Mips_ADDQH_R_W	 719
#define Mips_ADDQH_R_W_MMR2	 720
#define Mips_ADDQH_W	 721
#define Mips_ADDQH_W_MMR2	 722
#define Mips_ADDQ_PH	 723
#define Mips_ADDQ_PH_MM	 724
#define Mips_ADDQ_S_PH	 725
#define Mips_ADDQ_S_PH_MM	 726
#define Mips_ADDQ_S_W	 727
#define Mips_ADDQ_S_W_MM	 728
#define Mips_ADDR_PS64	 729
#define Mips_ADDSC	 730
#define Mips_ADDSC_MM	 731
#define Mips_ADDS_A_B	 732
#define Mips_ADDS_A_D	 733
#define Mips_ADDS_A_H	 734
#define Mips_ADDS_A_W	 735
#define Mips_ADDS_S_B	 736
#define Mips_ADDS_S_D	 737
#define Mips_ADDS_S_H	 738
#define Mips_ADDS_S_W	 739
#define Mips_ADDS_U_B	 740
#define Mips_ADDS_U_D	 741
#define Mips_ADDS_U_H	 742
#define Mips_ADDS_U_W	 743
#define Mips_ADDU16_MM	 744
#define Mips_ADDU16_MMR6	 745
#define Mips_ADDUH_QB	 746
#define Mips_ADDUH_QB_MMR2	 747
#define Mips_ADDUH_R_QB	 748
#define Mips_ADDUH_R_QB_MMR2	 749
#define Mips_ADDU_MMR6	 750
#define Mips_ADDU_PH	 751
#define Mips_ADDU_PH_MMR2	 752
#define Mips_ADDU_QB	 753
#define Mips_ADDU_QB_MM	 754
#define Mips_ADDU_S_PH	 755
#define Mips_ADDU_S_PH_MMR2	 756
#define Mips_ADDU_S_QB	 757
#define Mips_ADDU_S_QB_MM	 758
#define Mips_ADDVI_B	 759
#define Mips_ADDVI_D	 760
#define Mips_ADDVI_H	 761
#define Mips_ADDVI_W	 762
#define Mips_ADDV_B	 763
#define Mips_ADDV_D	 764
#define Mips_ADDV_H	 765
#define Mips_ADDV_W	 766
#define Mips_ADDWC	 767
#define Mips_ADDWC_MM	 768
#define Mips_ADD_A_B	 769
#define Mips_ADD_A_D	 770
#define Mips_ADD_A_H	 771
#define Mips_ADD_A_W	 772
#define Mips_ADD_MM	 773
#define Mips_ADD_MMR6	 774
#define Mips_ADDi	 775
#define Mips_ADDi_MM	 776
#define Mips_ADDiu	 777
#define Mips_ADDiu_MM	 778
#define Mips_ADDu	 779
#define Mips_ADDu_MM	 780
#define Mips_ALIGN	 781
#define Mips_ALIGN_MMR6	 782
#define Mips_ALUIPC	 783
#define Mips_ALUIPC_MMR6	 784
#define Mips_AND	 785
#define Mips_AND16_MM	 786
#define Mips_AND16_MMR6	 787
#define Mips_AND64	 788
#define Mips_ANDI16_MM	 789
#define Mips_ANDI16_MMR6	 790
#define Mips_ANDI_B	 791
#define Mips_ANDI_MMR6	 792
#define Mips_AND_MM	 793
#define Mips_AND_MMR6	 794
#define Mips_AND_V	 795
#define Mips_ANDi	 796
#define Mips_ANDi64	 797
#define Mips_ANDi_MM	 798
#define Mips_APPEND	 799
#define Mips_APPEND_MMR2	 800
#define Mips_ASUB_S_B	 801
#define Mips_ASUB_S_D	 802
#define Mips_ASUB_S_H	 803
#define Mips_ASUB_S_W	 804
#define Mips_ASUB_U_B	 805
#define Mips_ASUB_U_D	 806
#define Mips_ASUB_U_H	 807
#define Mips_ASUB_U_W	 808
#define Mips_AUI	 809
#define Mips_AUIPC	 810
#define Mips_AUIPC_MMR6	 811
#define Mips_AUI_MMR6	 812
#define Mips_AVER_S_B	 813
#define Mips_AVER_S_D	 814
#define Mips_AVER_S_H	 815
#define Mips_AVER_S_W	 816
#define Mips_AVER_U_B	 817
#define Mips_AVER_U_D	 818
#define Mips_AVER_U_H	 819
#define Mips_AVER_U_W	 820
#define Mips_AVE_S_B	 821
#define Mips_AVE_S_D	 822
#define Mips_AVE_S_H	 823
#define Mips_AVE_S_W	 824
#define Mips_AVE_U_B	 825
#define Mips_AVE_U_D	 826
#define Mips_AVE_U_H	 827
#define Mips_AVE_U_W	 828
#define Mips_AddiuRxImmX16	 829
#define Mips_AddiuRxPcImmX16	 830
#define Mips_AddiuRxRxImm16	 831
#define Mips_AddiuRxRxImmX16	 832
#define Mips_AddiuRxRyOffMemX16	 833
#define Mips_AddiuSpImm16	 834
#define Mips_AddiuSpImmX16	 835
#define Mips_AdduRxRyRz16	 836
#define Mips_AndRxRxRy16	 837
#define Mips_B16_MM	 838
#define Mips_BADDu	 839
#define Mips_BAL	 840
#define Mips_BALC	 841
#define Mips_BALC_MMR6	 842
#define Mips_BALIGN	 843
#define Mips_BALIGN_MMR2	 844
#define Mips_BBIT0	 845
#define Mips_BBIT032	 846
#define Mips_BBIT1	 847
#define Mips_BBIT132	 848
#define Mips_BC	 849
#define Mips_BC16_MMR6	 850
#define Mips_BC1EQZ	 851
#define Mips_BC1EQZC_MMR6	 852
#define Mips_BC1F	 853
#define Mips_BC1FL	 854
#define Mips_BC1F_MM	 855
#define Mips_BC1NEZ	 856
#define Mips_BC1NEZC_MMR6	 857
#define Mips_BC1T	 858
#define Mips_BC1TL	 859
#define Mips_BC1T_MM	 860
#define Mips_BC2EQZ	 861
#define Mips_BC2EQZC_MMR6	 862
#define Mips_BC2NEZ	 863
#define Mips_BC2NEZC_MMR6	 864
#define Mips_BCLRI_B	 865
#define Mips_BCLRI_D	 866
#define Mips_BCLRI_H	 867
#define Mips_BCLRI_W	 868
#define Mips_BCLR_B	 869
#define Mips_BCLR_D	 870
#define Mips_BCLR_H	 871
#define Mips_BCLR_W	 872
#define Mips_BC_MMR6	 873
#define Mips_BEQ	 874
#define Mips_BEQ64	 875
#define Mips_BEQC	 876
#define Mips_BEQC64	 877
#define Mips_BEQC_MMR6	 878
#define Mips_BEQL	 879
#define Mips_BEQZ16_MM	 880
#define Mips_BEQZALC	 881
#define Mips_BEQZALC_MMR6	 882
#define Mips_BEQZC	 883
#define Mips_BEQZC16_MMR6	 884
#define Mips_BEQZC64	 885
#define Mips_BEQZC_MM	 886
#define Mips_BEQZC_MMR6	 887
#define Mips_BEQ_MM	 888
#define Mips_BGEC	 889
#define Mips_BGEC64	 890
#define Mips_BGEC_MMR6	 891
#define Mips_BGEUC	 892
#define Mips_BGEUC64	 893
#define Mips_BGEUC_MMR6	 894
#define Mips_BGEZ	 895
#define Mips_BGEZ64	 896
#define Mips_BGEZAL	 897
#define Mips_BGEZALC	 898
#define Mips_BGEZALC_MMR6	 899
#define Mips_BGEZALL	 900
#define Mips_BGEZALS_MM	 901
#define Mips_BGEZAL_MM	 902
#define Mips_BGEZC	 903
#define Mips_BGEZC64	 904
#define Mips_BGEZC_MMR6	 905
#define Mips_BGEZL	 906
#define Mips_BGEZ_MM	 907
#define Mips_BGTZ	 908
#define Mips_BGTZ64	 909
#define Mips_BGTZALC	 910
#define Mips_BGTZALC_MMR6	 911
#define Mips_BGTZC	 912
#define Mips_BGTZC64	 913
#define Mips_BGTZC_MMR6	 914
#define Mips_BGTZL	 915
#define Mips_BGTZ_MM	 916
#define Mips_BINSLI_B	 917
#define Mips_BINSLI_D	 918
#define Mips_BINSLI_H	 919
#define Mips_BINSLI_W	 920
#define Mips_BINSL_B	 921
#define Mips_BINSL_D	 922
#define Mips_BINSL_H	 923
#define Mips_BINSL_W	 924
#define Mips_BINSRI_B	 925
#define Mips_BINSRI_D	 926
#define Mips_BINSRI_H	 927
#define Mips_BINSRI_W	 928
#define Mips_BINSR_B	 929
#define Mips_BINSR_D	 930
#define Mips_BINSR_H	 931
#define Mips_BINSR_W	 932
#define Mips_BITREV	 933
#define Mips_BITREV_MM	 934
#define Mips_BITSWAP	 935
#define Mips_BITSWAP_MMR6	 936
#define Mips_BLEZ	 937
#define Mips_BLEZ64	 938
#define Mips_BLEZALC	 939
#define Mips_BLEZALC_MMR6	 940
#define Mips_BLEZC	 941
#define Mips_BLEZC64	 942
#define Mips_BLEZC_MMR6	 943
#define Mips_BLEZL	 944
#define Mips_BLEZ_MM	 945
#define Mips_BLTC	 946
#define Mips_BLTC64	 947
#define Mips_BLTC_MMR6	 948
#define Mips_BLTUC	 949
#define Mips_BLTUC64	 950
#define Mips_BLTUC_MMR6	 951
#define Mips_BLTZ	 952
#define Mips_BLTZ64	 953
#define Mips_BLTZAL	 954
#define Mips_BLTZALC	 955
#define Mips_BLTZALC_MMR6	 956
#define Mips_BLTZALL	 957
#define Mips_BLTZALS_MM	 958
#define Mips_BLTZAL_MM	 959
#define Mips_BLTZC	 960
#define Mips_BLTZC64	 961
#define Mips_BLTZC_MMR6	 962
#define Mips_BLTZL	 963
#define Mips_BLTZ_MM	 964
#define Mips_BMNZI_B	 965
#define Mips_BMNZ_V	 966
#define Mips_BMZI_B	 967
#define Mips_BMZ_V	 968
#define Mips_BNE	 969
#define Mips_BNE64	 970
#define Mips_BNEC	 971
#define Mips_BNEC64	 972
#define Mips_BNEC_MMR6	 973
#define Mips_BNEGI_B	 974
#define Mips_BNEGI_D	 975
#define Mips_BNEGI_H	 976
#define Mips_BNEGI_W	 977
#define Mips_BNEG_B	 978
#define Mips_BNEG_D	 979
#define Mips_BNEG_H	 980
#define Mips_BNEG_W	 981
#define Mips_BNEL	 982
#define Mips_BNEZ16_MM	 983
#define Mips_BNEZALC	 984
#define Mips_BNEZALC_MMR6	 985
#define Mips_BNEZC	 986
#define Mips_BNEZC16_MMR6	 987
#define Mips_BNEZC64	 988
#define Mips_BNEZC_MM	 989
#define Mips_BNEZC_MMR6	 990
#define Mips_BNE_MM	 991
#define Mips_BNVC	 992
#define Mips_BNVC_MMR6	 993
#define Mips_BNZ_B	 994
#define Mips_BNZ_D	 995
#define Mips_BNZ_H	 996
#define Mips_BNZ_V	 997
#define Mips_BNZ_W	 998
#define Mips_BOVC	 999
#define Mips_BOVC_MMR6	 1000
#define Mips_BPOSGE32	 1001
#define Mips_BPOSGE32C_MMR3	 1002
#define Mips_BPOSGE32_MM	 1003
#define Mips_BREAK	 1004
#define Mips_BREAK16_MM	 1005
#define Mips_BREAK16_MMR6	 1006
#define Mips_BREAK_MM	 1007
#define Mips_BREAK_MMR6	 1008
#define Mips_BSELI_B	 1009
#define Mips_BSEL_V	 1010
#define Mips_BSETI_B	 1011
#define Mips_BSETI_D	 1012
#define Mips_BSETI_H	 1013
#define Mips_BSETI_W	 1014
#define Mips_BSET_B	 1015
#define Mips_BSET_D	 1016
#define Mips_BSET_H	 1017
#define Mips_BSET_W	 1018
#define Mips_BZ_B	 1019
#define Mips_BZ_D	 1020
#define Mips_BZ_H	 1021
#define Mips_BZ_V	 1022
#define Mips_BZ_W	 1023
#define Mips_BeqzRxImm16	 1024
#define Mips_BeqzRxImmX16	 1025
#define Mips_Bimm16	 1026
#define Mips_BimmX16	 1027
#define Mips_BnezRxImm16	 1028
#define Mips_BnezRxImmX16	 1029
#define Mips_Break16	 1030
#define Mips_Bteqz16	 1031
#define Mips_BteqzX16	 1032
#define Mips_Btnez16	 1033
#define Mips_BtnezX16	 1034
#define Mips_CACHE	 1035
#define Mips_CACHEE	 1036
#define Mips_CACHEE_MM	 1037
#define Mips_CACHE_MM	 1038
#define Mips_CACHE_MMR6	 1039
#define Mips_CACHE_R6	 1040
#define Mips_CEIL_L_D64	 1041
#define Mips_CEIL_L_D_MMR6	 1042
#define Mips_CEIL_L_S	 1043
#define Mips_CEIL_L_S_MMR6	 1044
#define Mips_CEIL_W_D32	 1045
#define Mips_CEIL_W_D64	 1046
#define Mips_CEIL_W_D_MMR6	 1047
#define Mips_CEIL_W_MM	 1048
#define Mips_CEIL_W_S	 1049
#define Mips_CEIL_W_S_MM	 1050
#define Mips_CEIL_W_S_MMR6	 1051
#define Mips_CEQI_B	 1052
#define Mips_CEQI_D	 1053
#define Mips_CEQI_H	 1054
#define Mips_CEQI_W	 1055
#define Mips_CEQ_B	 1056
#define Mips_CEQ_D	 1057
#define Mips_CEQ_H	 1058
#define Mips_CEQ_W	 1059
#define Mips_CFC1	 1060
#define Mips_CFC1_MM	 1061
#define Mips_CFC2_MM	 1062
#define Mips_CFCMSA	 1063
#define Mips_CINS	 1064
#define Mips_CINS32	 1065
#define Mips_CINS64_32	 1066
#define Mips_CINS_i32	 1067
#define Mips_CLASS_D	 1068
#define Mips_CLASS_D_MMR6	 1069
#define Mips_CLASS_S	 1070
#define Mips_CLASS_S_MMR6	 1071
#define Mips_CLEI_S_B	 1072
#define Mips_CLEI_S_D	 1073
#define Mips_CLEI_S_H	 1074
#define Mips_CLEI_S_W	 1075
#define Mips_CLEI_U_B	 1076
#define Mips_CLEI_U_D	 1077
#define Mips_CLEI_U_H	 1078
#define Mips_CLEI_U_W	 1079
#define Mips_CLE_S_B	 1080
#define Mips_CLE_S_D	 1081
#define Mips_CLE_S_H	 1082
#define Mips_CLE_S_W	 1083
#define Mips_CLE_U_B	 1084
#define Mips_CLE_U_D	 1085
#define Mips_CLE_U_H	 1086
#define Mips_CLE_U_W	 1087
#define Mips_CLO	 1088
#define Mips_CLO_MM	 1089
#define Mips_CLO_MMR6	 1090
#define Mips_CLO_R6	 1091
#define Mips_CLTI_S_B	 1092
#define Mips_CLTI_S_D	 1093
#define Mips_CLTI_S_H	 1094
#define Mips_CLTI_S_W	 1095
#define Mips_CLTI_U_B	 1096
#define Mips_CLTI_U_D	 1097
#define Mips_CLTI_U_H	 1098
#define Mips_CLTI_U_W	 1099
#define Mips_CLT_S_B	 1100
#define Mips_CLT_S_D	 1101
#define Mips_CLT_S_H	 1102
#define Mips_CLT_S_W	 1103
#define Mips_CLT_U_B	 1104
#define Mips_CLT_U_D	 1105
#define Mips_CLT_U_H	 1106
#define Mips_CLT_U_W	 1107
#define Mips_CLZ	 1108
#define Mips_CLZ_MM	 1109
#define Mips_CLZ_MMR6	 1110
#define Mips_CLZ_R6	 1111
#define Mips_CMPGDU_EQ_QB	 1112
#define Mips_CMPGDU_EQ_QB_MMR2	 1113
#define Mips_CMPGDU_LE_QB	 1114
#define Mips_CMPGDU_LE_QB_MMR2	 1115
#define Mips_CMPGDU_LT_QB	 1116
#define Mips_CMPGDU_LT_QB_MMR2	 1117
#define Mips_CMPGU_EQ_QB	 1118
#define Mips_CMPGU_EQ_QB_MM	 1119
#define Mips_CMPGU_LE_QB	 1120
#define Mips_CMPGU_LE_QB_MM	 1121
#define Mips_CMPGU_LT_QB	 1122
#define Mips_CMPGU_LT_QB_MM	 1123
#define Mips_CMPU_EQ_QB	 1124
#define Mips_CMPU_EQ_QB_MM	 1125
#define Mips_CMPU_LE_QB	 1126
#define Mips_CMPU_LE_QB_MM	 1127
#define Mips_CMPU_LT_QB	 1128
#define Mips_CMPU_LT_QB_MM	 1129
#define Mips_CMP_AF_D_MMR6	 1130
#define Mips_CMP_AF_S_MMR6	 1131
#define Mips_CMP_EQ_D	 1132
#define Mips_CMP_EQ_D_MMR6	 1133
#define Mips_CMP_EQ_PH	 1134
#define Mips_CMP_EQ_PH_MM	 1135
#define Mips_CMP_EQ_S	 1136
#define Mips_CMP_EQ_S_MMR6	 1137
#define Mips_CMP_F_D	 1138
#define Mips_CMP_F_S	 1139
#define Mips_CMP_LE_D	 1140
#define Mips_CMP_LE_D_MMR6	 1141
#define Mips_CMP_LE_PH	 1142
#define Mips_CMP_LE_PH_MM	 1143
#define Mips_CMP_LE_S	 1144
#define Mips_CMP_LE_S_MMR6	 1145
#define Mips_CMP_LT_D	 1146
#define Mips_CMP_LT_D_MMR6	 1147
#define Mips_CMP_LT_PH	 1148
#define Mips_CMP_LT_PH_MM	 1149
#define Mips_CMP_LT_S	 1150
#define Mips_CMP_LT_S_MMR6	 1151
#define Mips_CMP_SAF_D	 1152
#define Mips_CMP_SAF_D_MMR6	 1153
#define Mips_CMP_SAF_S	 1154
#define Mips_CMP_SAF_S_MMR6	 1155
#define Mips_CMP_SEQ_D	 1156
#define Mips_CMP_SEQ_D_MMR6	 1157
#define Mips_CMP_SEQ_S	 1158
#define Mips_CMP_SEQ_S_MMR6	 1159
#define Mips_CMP_SLE_D	 1160
#define Mips_CMP_SLE_D_MMR6	 1161
#define Mips_CMP_SLE_S	 1162
#define Mips_CMP_SLE_S_MMR6	 1163
#define Mips_CMP_SLT_D	 1164
#define Mips_CMP_SLT_D_MMR6	 1165
#define Mips_CMP_SLT_S	 1166
#define Mips_CMP_SLT_S_MMR6	 1167
#define Mips_CMP_SUEQ_D	 1168
#define Mips_CMP_SUEQ_D_MMR6	 1169
#define Mips_CMP_SUEQ_S	 1170
#define Mips_CMP_SUEQ_S_MMR6	 1171
#define Mips_CMP_SULE_D	 1172
#define Mips_CMP_SULE_D_MMR6	 1173
#define Mips_CMP_SULE_S	 1174
#define Mips_CMP_SULE_S_MMR6	 1175
#define Mips_CMP_SULT_D	 1176
#define Mips_CMP_SULT_D_MMR6	 1177
#define Mips_CMP_SULT_S	 1178
#define Mips_CMP_SULT_S_MMR6	 1179
#define Mips_CMP_SUN_D	 1180
#define Mips_CMP_SUN_D_MMR6	 1181
#define Mips_CMP_SUN_S	 1182
#define Mips_CMP_SUN_S_MMR6	 1183
#define Mips_CMP_UEQ_D	 1184
#define Mips_CMP_UEQ_D_MMR6	 1185
#define Mips_CMP_UEQ_S	 1186
#define Mips_CMP_UEQ_S_MMR6	 1187
#define Mips_CMP_ULE_D	 1188
#define Mips_CMP_ULE_D_MMR6	 1189
#define Mips_CMP_ULE_S	 1190
#define Mips_CMP_ULE_S_MMR6	 1191
#define Mips_CMP_ULT_D	 1192
#define Mips_CMP_ULT_D_MMR6	 1193
#define Mips_CMP_ULT_S	 1194
#define Mips_CMP_ULT_S_MMR6	 1195
#define Mips_CMP_UN_D	 1196
#define Mips_CMP_UN_D_MMR6	 1197
#define Mips_CMP_UN_S	 1198
#define Mips_CMP_UN_S_MMR6	 1199
#define Mips_COPY_S_B	 1200
#define Mips_COPY_S_D	 1201
#define Mips_COPY_S_H	 1202
#define Mips_COPY_S_W	 1203
#define Mips_COPY_U_B	 1204
#define Mips_COPY_U_H	 1205
#define Mips_COPY_U_W	 1206
#define Mips_CRC32B	 1207
#define Mips_CRC32CB	 1208
#define Mips_CRC32CD	 1209
#define Mips_CRC32CH	 1210
#define Mips_CRC32CW	 1211
#define Mips_CRC32D	 1212
#define Mips_CRC32H	 1213
#define Mips_CRC32W	 1214
#define Mips_CTC1	 1215
#define Mips_CTC1_MM	 1216
#define Mips_CTC2_MM	 1217
#define Mips_CTCMSA	 1218
#define Mips_CVT_D32_S	 1219
#define Mips_CVT_D32_S_MM	 1220
#define Mips_CVT_D32_W	 1221
#define Mips_CVT_D32_W_MM	 1222
#define Mips_CVT_D64_L	 1223
#define Mips_CVT_D64_S	 1224
#define Mips_CVT_D64_S_MM	 1225
#define Mips_CVT_D64_W	 1226
#define Mips_CVT_D64_W_MM	 1227
#define Mips_CVT_D_L_MMR6	 1228
#define Mips_CVT_L_D64	 1229
#define Mips_CVT_L_D64_MM	 1230
#define Mips_CVT_L_D_MMR6	 1231
#define Mips_CVT_L_S	 1232
#define Mips_CVT_L_S_MM	 1233
#define Mips_CVT_L_S_MMR6	 1234
#define Mips_CVT_PS_PW64	 1235
#define Mips_CVT_PS_S64	 1236
#define Mips_CVT_PW_PS64	 1237
#define Mips_CVT_S_D32	 1238
#define Mips_CVT_S_D32_MM	 1239
#define Mips_CVT_S_D64	 1240
#define Mips_CVT_S_D64_MM	 1241
#define Mips_CVT_S_L	 1242
#define Mips_CVT_S_L_MMR6	 1243
#define Mips_CVT_S_PL64	 1244
#define Mips_CVT_S_PU64	 1245
#define Mips_CVT_S_W	 1246
#define Mips_CVT_S_W_MM	 1247
#define Mips_CVT_S_W_MMR6	 1248
#define Mips_CVT_W_D32	 1249
#define Mips_CVT_W_D32_MM	 1250
#define Mips_CVT_W_D64	 1251
#define Mips_CVT_W_D64_MM	 1252
#define Mips_CVT_W_S	 1253
#define Mips_CVT_W_S_MM	 1254
#define Mips_CVT_W_S_MMR6	 1255
#define Mips_C_EQ_D32	 1256
#define Mips_C_EQ_D32_MM	 1257
#define Mips_C_EQ_D64	 1258
#define Mips_C_EQ_D64_MM	 1259
#define Mips_C_EQ_S	 1260
#define Mips_C_EQ_S_MM	 1261
#define Mips_C_F_D32	 1262
#define Mips_C_F_D32_MM	 1263
#define Mips_C_F_D64	 1264
#define Mips_C_F_D64_MM	 1265
#define Mips_C_F_S	 1266
#define Mips_C_F_S_MM	 1267
#define Mips_C_LE_D32	 1268
#define Mips_C_LE_D32_MM	 1269
#define Mips_C_LE_D64	 1270
#define Mips_C_LE_D64_MM	 1271
#define Mips_C_LE_S	 1272
#define Mips_C_LE_S_MM	 1273
#define Mips_C_LT_D32	 1274
#define Mips_C_LT_D32_MM	 1275
#define Mips_C_LT_D64	 1276
#define Mips_C_LT_D64_MM	 1277
#define Mips_C_LT_S	 1278
#define Mips_C_LT_S_MM	 1279
#define Mips_C_NGE_D32	 1280
#define Mips_C_NGE_D32_MM	 1281
#define Mips_C_NGE_D64	 1282
#define Mips_C_NGE_D64_MM	 1283
#define Mips_C_NGE_S	 1284
#define Mips_C_NGE_S_MM	 1285
#define Mips_C_NGLE_D32	 1286
#define Mips_C_NGLE_D32_MM	 1287
#define Mips_C_NGLE_D64	 1288
#define Mips_C_NGLE_D64_MM	 1289
#define Mips_C_NGLE_S	 1290
#define Mips_C_NGLE_S_MM	 1291
#define Mips_C_NGL_D32	 1292
#define Mips_C_NGL_D32_MM	 1293
#define Mips_C_NGL_D64	 1294
#define Mips_C_NGL_D64_MM	 1295
#define Mips_C_NGL_S	 1296
#define Mips_C_NGL_S_MM	 1297
#define Mips_C_NGT_D32	 1298
#define Mips_C_NGT_D32_MM	 1299
#define Mips_C_NGT_D64	 1300
#define Mips_C_NGT_D64_MM	 1301
#define Mips_C_NGT_S	 1302
#define Mips_C_NGT_S_MM	 1303
#define Mips_C_OLE_D32	 1304
#define Mips_C_OLE_D32_MM	 1305
#define Mips_C_OLE_D64	 1306
#define Mips_C_OLE_D64_MM	 1307
#define Mips_C_OLE_S	 1308
#define Mips_C_OLE_S_MM	 1309
#define Mips_C_OLT_D32	 1310
#define Mips_C_OLT_D32_MM	 1311
#define Mips_C_OLT_D64	 1312
#define Mips_C_OLT_D64_MM	 1313
#define Mips_C_OLT_S	 1314
#define Mips_C_OLT_S_MM	 1315
#define Mips_C_SEQ_D32	 1316
#define Mips_C_SEQ_D32_MM	 1317
#define Mips_C_SEQ_D64	 1318
#define Mips_C_SEQ_D64_MM	 1319
#define Mips_C_SEQ_S	 1320
#define Mips_C_SEQ_S_MM	 1321
#define Mips_C_SF_D32	 1322
#define Mips_C_SF_D32_MM	 1323
#define Mips_C_SF_D64	 1324
#define Mips_C_SF_D64_MM	 1325
#define Mips_C_SF_S	 1326
#define Mips_C_SF_S_MM	 1327
#define Mips_C_UEQ_D32	 1328
#define Mips_C_UEQ_D32_MM	 1329
#define Mips_C_UEQ_D64	 1330
#define Mips_C_UEQ_D64_MM	 1331
#define Mips_C_UEQ_S	 1332
#define Mips_C_UEQ_S_MM	 1333
#define Mips_C_ULE_D32	 1334
#define Mips_C_ULE_D32_MM	 1335
#define Mips_C_ULE_D64	 1336
#define Mips_C_ULE_D64_MM	 1337
#define Mips_C_ULE_S	 1338
#define Mips_C_ULE_S_MM	 1339
#define Mips_C_ULT_D32	 1340
#define Mips_C_ULT_D32_MM	 1341
#define Mips_C_ULT_D64	 1342
#define Mips_C_ULT_D64_MM	 1343
#define Mips_C_ULT_S	 1344
#define Mips_C_ULT_S_MM	 1345
#define Mips_C_UN_D32	 1346
#define Mips_C_UN_D32_MM	 1347
#define Mips_C_UN_D64	 1348
#define Mips_C_UN_D64_MM	 1349
#define Mips_C_UN_S	 1350
#define Mips_C_UN_S_MM	 1351
#define Mips_CmpRxRy16	 1352
#define Mips_CmpiRxImm16	 1353
#define Mips_CmpiRxImmX16	 1354
#define Mips_DADD	 1355
#define Mips_DADDi	 1356
#define Mips_DADDiu	 1357
#define Mips_DADDu	 1358
#define Mips_DAHI	 1359
#define Mips_DALIGN	 1360
#define Mips_DATI	 1361
#define Mips_DAUI	 1362
#define Mips_DBITSWAP	 1363
#define Mips_DCLO	 1364
#define Mips_DCLO_R6	 1365
#define Mips_DCLZ	 1366
#define Mips_DCLZ_R6	 1367
#define Mips_DDIV	 1368
#define Mips_DDIVU	 1369
#define Mips_DERET	 1370
#define Mips_DERET_MM	 1371
#define Mips_DERET_MMR6	 1372
#define Mips_DEXT	 1373
#define Mips_DEXT64_32	 1374
#define Mips_DEXTM	 1375
#define Mips_DEXTU	 1376
#define Mips_DI	 1377
#define Mips_DINS	 1378
#define Mips_DINSM	 1379
#define Mips_DINSU	 1380
#define Mips_DIV	 1381
#define Mips_DIVU	 1382
#define Mips_DIVU_MMR6	 1383
#define Mips_DIV_MMR6	 1384
#define Mips_DIV_S_B	 1385
#define Mips_DIV_S_D	 1386
#define Mips_DIV_S_H	 1387
#define Mips_DIV_S_W	 1388
#define Mips_DIV_U_B	 1389
#define Mips_DIV_U_D	 1390
#define Mips_DIV_U_H	 1391
#define Mips_DIV_U_W	 1392
#define Mips_DI_MM	 1393
#define Mips_DI_MMR6	 1394
#define Mips_DLSA	 1395
#define Mips_DLSA_R6	 1396
#define Mips_DMFC0	 1397
#define Mips_DMFC1	 1398
#define Mips_DMFC2	 1399
#define Mips_DMFC2_OCTEON	 1400
#define Mips_DMFGC0	 1401
#define Mips_DMOD	 1402
#define Mips_DMODU	 1403
#define Mips_DMT	 1404
#define Mips_DMTC0	 1405
#define Mips_DMTC1	 1406
#define Mips_DMTC2	 1407
#define Mips_DMTC2_OCTEON	 1408
#define Mips_DMTGC0	 1409
#define Mips_DMUH	 1410
#define Mips_DMUHU	 1411
#define Mips_DMUL	 1412
#define Mips_DMULT	 1413
#define Mips_DMULTu	 1414
#define Mips_DMULU	 1415
#define Mips_DMUL_R6	 1416
#define Mips_DOTP_S_D	 1417
#define Mips_DOTP_S_H	 1418
#define Mips_DOTP_S_W	 1419
#define Mips_DOTP_U_D	 1420
#define Mips_DOTP_U_H	 1421
#define Mips_DOTP_U_W	 1422
#define Mips_DPADD_S_D	 1423
#define Mips_DPADD_S_H	 1424
#define Mips_DPADD_S_W	 1425
#define Mips_DPADD_U_D	 1426
#define Mips_DPADD_U_H	 1427
#define Mips_DPADD_U_W	 1428
#define Mips_DPAQX_SA_W_PH	 1429
#define Mips_DPAQX_SA_W_PH_MMR2	 1430
#define Mips_DPAQX_S_W_PH	 1431
#define Mips_DPAQX_S_W_PH_MMR2	 1432
#define Mips_DPAQ_SA_L_W	 1433
#define Mips_DPAQ_SA_L_W_MM	 1434
#define Mips_DPAQ_S_W_PH	 1435
#define Mips_DPAQ_S_W_PH_MM	 1436
#define Mips_DPAU_H_QBL	 1437
#define Mips_DPAU_H_QBL_MM	 1438
#define Mips_DPAU_H_QBR	 1439
#define Mips_DPAU_H_QBR_MM	 1440
#define Mips_DPAX_W_PH	 1441
#define Mips_DPAX_W_PH_MMR2	 1442
#define Mips_DPA_W_PH	 1443
#define Mips_DPA_W_PH_MMR2	 1444
#define Mips_DPOP	 1445
#define Mips_DPSQX_SA_W_PH	 1446
#define Mips_DPSQX_SA_W_PH_MMR2	 1447
#define Mips_DPSQX_S_W_PH	 1448
#define Mips_DPSQX_S_W_PH_MMR2	 1449
#define Mips_DPSQ_SA_L_W	 1450
#define Mips_DPSQ_SA_L_W_MM	 1451
#define Mips_DPSQ_S_W_PH	 1452
#define Mips_DPSQ_S_W_PH_MM	 1453
#define Mips_DPSUB_S_D	 1454
#define Mips_DPSUB_S_H	 1455
#define Mips_DPSUB_S_W	 1456
#define Mips_DPSUB_U_D	 1457
#define Mips_DPSUB_U_H	 1458
#define Mips_DPSUB_U_W	 1459
#define Mips_DPSU_H_QBL	 1460
#define Mips_DPSU_H_QBL_MM	 1461
#define Mips_DPSU_H_QBR	 1462
#define Mips_DPSU_H_QBR_MM	 1463
#define Mips_DPSX_W_PH	 1464
#define Mips_DPSX_W_PH_MMR2	 1465
#define Mips_DPS_W_PH	 1466
#define Mips_DPS_W_PH_MMR2	 1467
#define Mips_DROTR	 1468
#define Mips_DROTR32	 1469
#define Mips_DROTRV	 1470
#define Mips_DSBH	 1471
#define Mips_DSDIV	 1472
#define Mips_DSHD	 1473
#define Mips_DSLL	 1474
#define Mips_DSLL32	 1475
#define Mips_DSLL64_32	 1476
#define Mips_DSLLV	 1477
#define Mips_DSRA	 1478
#define Mips_DSRA32	 1479
#define Mips_DSRAV	 1480
#define Mips_DSRL	 1481
#define Mips_DSRL32	 1482
#define Mips_DSRLV	 1483
#define Mips_DSUB	 1484
#define Mips_DSUBu	 1485
#define Mips_DUDIV	 1486
#define Mips_DVP	 1487
#define Mips_DVPE	 1488
#define Mips_DVP_MMR6	 1489
#define Mips_DivRxRy16	 1490
#define Mips_DivuRxRy16	 1491
#define Mips_EHB	 1492
#define Mips_EHB_MM	 1493
#define Mips_EHB_MMR6	 1494
#define Mips_EI	 1495
#define Mips_EI_MM	 1496
#define Mips_EI_MMR6	 1497
#define Mips_EMT	 1498
#define Mips_ERET	 1499
#define Mips_ERETNC	 1500
#define Mips_ERETNC_MMR6	 1501
#define Mips_ERET_MM	 1502
#define Mips_ERET_MMR6	 1503
#define Mips_EVP	 1504
#define Mips_EVPE	 1505
#define Mips_EVP_MMR6	 1506
#define Mips_EXT	 1507
#define Mips_EXTP	 1508
#define Mips_EXTPDP	 1509
#define Mips_EXTPDPV	 1510
#define Mips_EXTPDPV_MM	 1511
#define Mips_EXTPDP_MM	 1512
#define Mips_EXTPV	 1513
#define Mips_EXTPV_MM	 1514
#define Mips_EXTP_MM	 1515
#define Mips_EXTRV_RS_W	 1516
#define Mips_EXTRV_RS_W_MM	 1517
#define Mips_EXTRV_R_W	 1518
#define Mips_EXTRV_R_W_MM	 1519
#define Mips_EXTRV_S_H	 1520
#define Mips_EXTRV_S_H_MM	 1521
#define Mips_EXTRV_W	 1522
#define Mips_EXTRV_W_MM	 1523
#define Mips_EXTR_RS_W	 1524
#define Mips_EXTR_RS_W_MM	 1525
#define Mips_EXTR_R_W	 1526
#define Mips_EXTR_R_W_MM	 1527
#define Mips_EXTR_S_H	 1528
#define Mips_EXTR_S_H_MM	 1529
#define Mips_EXTR_W	 1530
#define Mips_EXTR_W_MM	 1531
#define Mips_EXTS	 1532
#define Mips_EXTS32	 1533
#define Mips_EXT_MM	 1534
#define Mips_EXT_MMR6	 1535
#define Mips_FABS_D32	 1536
#define Mips_FABS_D32_MM	 1537
#define Mips_FABS_D64	 1538
#define Mips_FABS_D64_MM	 1539
#define Mips_FABS_S	 1540
#define Mips_FABS_S_MM	 1541
#define Mips_FADD_D	 1542
#define Mips_FADD_D32	 1543
#define Mips_FADD_D32_MM	 1544
#define Mips_FADD_D64	 1545
#define Mips_FADD_D64_MM	 1546
#define Mips_FADD_PS64	 1547
#define Mips_FADD_S	 1548
#define Mips_FADD_S_MM	 1549
#define Mips_FADD_S_MMR6	 1550
#define Mips_FADD_W	 1551
#define Mips_FCAF_D	 1552
#define Mips_FCAF_W	 1553
#define Mips_FCEQ_D	 1554
#define Mips_FCEQ_W	 1555
#define Mips_FCLASS_D	 1556
#define Mips_FCLASS_W	 1557
#define Mips_FCLE_D	 1558
#define Mips_FCLE_W	 1559
#define Mips_FCLT_D	 1560
#define Mips_FCLT_W	 1561
#define Mips_FCMP_D32	 1562
#define Mips_FCMP_D32_MM	 1563
#define Mips_FCMP_D64	 1564
#define Mips_FCMP_S32	 1565
#define Mips_FCMP_S32_MM	 1566
#define Mips_FCNE_D	 1567
#define Mips_FCNE_W	 1568
#define Mips_FCOR_D	 1569
#define Mips_FCOR_W	 1570
#define Mips_FCUEQ_D	 1571
#define Mips_FCUEQ_W	 1572
#define Mips_FCULE_D	 1573
#define Mips_FCULE_W	 1574
#define Mips_FCULT_D	 1575
#define Mips_FCULT_W	 1576
#define Mips_FCUNE_D	 1577
#define Mips_FCUNE_W	 1578
#define Mips_FCUN_D	 1579
#define Mips_FCUN_W	 1580
#define Mips_FDIV_D	 1581
#define Mips_FDIV_D32	 1582
#define Mips_FDIV_D32_MM	 1583
#define Mips_FDIV_D64	 1584
#define Mips_FDIV_D64_MM	 1585
#define Mips_FDIV_S	 1586
#define Mips_FDIV_S_MM	 1587
#define Mips_FDIV_S_MMR6	 1588
#define Mips_FDIV_W	 1589
#define Mips_FEXDO_H	 1590
#define Mips_FEXDO_W	 1591
#define Mips_FEXP2_D	 1592
#define Mips_FEXP2_W	 1593
#define Mips_FEXUPL_D	 1594
#define Mips_FEXUPL_W	 1595
#define Mips_FEXUPR_D	 1596
#define Mips_FEXUPR_W	 1597
#define Mips_FFINT_S_D	 1598
#define Mips_FFINT_S_W	 1599
#define Mips_FFINT_U_D	 1600
#define Mips_FFINT_U_W	 1601
#define Mips_FFQL_D	 1602
#define Mips_FFQL_W	 1603
#define Mips_FFQR_D	 1604
#define Mips_FFQR_W	 1605
#define Mips_FILL_B	 1606
#define Mips_FILL_D	 1607
#define Mips_FILL_H	 1608
#define Mips_FILL_W	 1609
#define Mips_FLOG2_D	 1610
#define Mips_FLOG2_W	 1611
#define Mips_FLOOR_L_D64	 1612
#define Mips_FLOOR_L_D_MMR6	 1613
#define Mips_FLOOR_L_S	 1614
#define Mips_FLOOR_L_S_MMR6	 1615
#define Mips_FLOOR_W_D32	 1616
#define Mips_FLOOR_W_D64	 1617
#define Mips_FLOOR_W_D_MMR6	 1618
#define Mips_FLOOR_W_MM	 1619
#define Mips_FLOOR_W_S	 1620
#define Mips_FLOOR_W_S_MM	 1621
#define Mips_FLOOR_W_S_MMR6	 1622
#define Mips_FMADD_D	 1623
#define Mips_FMADD_W	 1624
#define Mips_FMAX_A_D	 1625
#define Mips_FMAX_A_W	 1626
#define Mips_FMAX_D	 1627
#define Mips_FMAX_W	 1628
#define Mips_FMIN_A_D	 1629
#define Mips_FMIN_A_W	 1630
#define Mips_FMIN_D	 1631
#define Mips_FMIN_W	 1632
#define Mips_FMOV_D32	 1633
#define Mips_FMOV_D32_MM	 1634
#define Mips_FMOV_D64	 1635
#define Mips_FMOV_D64_MM	 1636
#define Mips_FMOV_D_MMR6	 1637
#define Mips_FMOV_S	 1638
#define Mips_FMOV_S_MM	 1639
#define Mips_FMOV_S_MMR6	 1640
#define Mips_FMSUB_D	 1641
#define Mips_FMSUB_W	 1642
#define Mips_FMUL_D	 1643
#define Mips_FMUL_D32	 1644
#define Mips_FMUL_D32_MM	 1645
#define Mips_FMUL_D64	 1646
#define Mips_FMUL_D64_MM	 1647
#define Mips_FMUL_PS64	 1648
#define Mips_FMUL_S	 1649
#define Mips_FMUL_S_MM	 1650
#define Mips_FMUL_S_MMR6	 1651
#define Mips_FMUL_W	 1652
#define Mips_FNEG_D32	 1653
#define Mips_FNEG_D32_MM	 1654
#define Mips_FNEG_D64	 1655
#define Mips_FNEG_D64_MM	 1656
#define Mips_FNEG_S	 1657
#define Mips_FNEG_S_MM	 1658
#define Mips_FNEG_S_MMR6	 1659
#define Mips_FORK	 1660
#define Mips_FRCP_D	 1661
#define Mips_FRCP_W	 1662
#define Mips_FRINT_D	 1663
#define Mips_FRINT_W	 1664
#define Mips_FRSQRT_D	 1665
#define Mips_FRSQRT_W	 1666
#define Mips_FSAF_D	 1667
#define Mips_FSAF_W	 1668
#define Mips_FSEQ_D	 1669
#define Mips_FSEQ_W	 1670
#define Mips_FSLE_D	 1671
#define Mips_FSLE_W	 1672
#define Mips_FSLT_D	 1673
#define Mips_FSLT_W	 1674
#define Mips_FSNE_D	 1675
#define Mips_FSNE_W	 1676
#define Mips_FSOR_D	 1677
#define Mips_FSOR_W	 1678
#define Mips_FSQRT_D	 1679
#define Mips_FSQRT_D32	 1680
#define Mips_FSQRT_D32_MM	 1681
#define Mips_FSQRT_D64	 1682
#define Mips_FSQRT_D64_MM	 1683
#define Mips_FSQRT_S	 1684
#define Mips_FSQRT_S_MM	 1685
#define Mips_FSQRT_W	 1686
#define Mips_FSUB_D	 1687
#define Mips_FSUB_D32	 1688
#define Mips_FSUB_D32_MM	 1689
#define Mips_FSUB_D64	 1690
#define Mips_FSUB_D64_MM	 1691
#define Mips_FSUB_PS64	 1692
#define Mips_FSUB_S	 1693
#define Mips_FSUB_S_MM	 1694
#define Mips_FSUB_S_MMR6	 1695
#define Mips_FSUB_W	 1696
#define Mips_FSUEQ_D	 1697
#define Mips_FSUEQ_W	 1698
#define Mips_FSULE_D	 1699
#define Mips_FSULE_W	 1700
#define Mips_FSULT_D	 1701
#define Mips_FSULT_W	 1702
#define Mips_FSUNE_D	 1703
#define Mips_FSUNE_W	 1704
#define Mips_FSUN_D	 1705
#define Mips_FSUN_W	 1706
#define Mips_FTINT_S_D	 1707
#define Mips_FTINT_S_W	 1708
#define Mips_FTINT_U_D	 1709
#define Mips_FTINT_U_W	 1710
#define Mips_FTQ_H	 1711
#define Mips_FTQ_W	 1712
#define Mips_FTRUNC_S_D	 1713
#define Mips_FTRUNC_S_W	 1714
#define Mips_FTRUNC_U_D	 1715
#define Mips_FTRUNC_U_W	 1716
#define Mips_GINVI	 1717
#define Mips_GINVI_MMR6	 1718
#define Mips_GINVT	 1719
#define Mips_GINVT_MMR6	 1720
#define Mips_HADD_S_D	 1721
#define Mips_HADD_S_H	 1722
#define Mips_HADD_S_W	 1723
#define Mips_HADD_U_D	 1724
#define Mips_HADD_U_H	 1725
#define Mips_HADD_U_W	 1726
#define Mips_HSUB_S_D	 1727
#define Mips_HSUB_S_H	 1728
#define Mips_HSUB_S_W	 1729
#define Mips_HSUB_U_D	 1730
#define Mips_HSUB_U_H	 1731
#define Mips_HSUB_U_W	 1732
#define Mips_HYPCALL	 1733
#define Mips_HYPCALL_MM	 1734
#define Mips_ILVEV_B	 1735
#define Mips_ILVEV_D	 1736
#define Mips_ILVEV_H	 1737
#define Mips_ILVEV_W	 1738
#define Mips_ILVL_B	 1739
#define Mips_ILVL_D	 1740
#define Mips_ILVL_H	 1741
#define Mips_ILVL_W	 1742
#define Mips_ILVOD_B	 1743
#define Mips_ILVOD_D	 1744
#define Mips_ILVOD_H	 1745
#define Mips_ILVOD_W	 1746
#define Mips_ILVR_B	 1747
#define Mips_ILVR_D	 1748
#define Mips_ILVR_H	 1749
#define Mips_ILVR_W	 1750
#define Mips_INS	 1751
#define Mips_INSERT_B	 1752
#define Mips_INSERT_D	 1753
#define Mips_INSERT_H	 1754
#define Mips_INSERT_W	 1755
#define Mips_INSV	 1756
#define Mips_INSVE_B	 1757
#define Mips_INSVE_D	 1758
#define Mips_INSVE_H	 1759
#define Mips_INSVE_W	 1760
#define Mips_INSV_MM	 1761
#define Mips_INS_MM	 1762
#define Mips_INS_MMR6	 1763
#define Mips_J	 1764
#define Mips_JAL	 1765
#define Mips_JALR	 1766
#define Mips_JALR16_MM	 1767
#define Mips_JALR64	 1768
#define Mips_JALRC16_MMR6	 1769
#define Mips_JALRC_HB_MMR6	 1770
#define Mips_JALRC_MMR6	 1771
#define Mips_JALRS16_MM	 1772
#define Mips_JALRS_MM	 1773
#define Mips_JALR_HB	 1774
#define Mips_JALR_HB64	 1775
#define Mips_JALR_MM	 1776
#define Mips_JALS_MM	 1777
#define Mips_JALX	 1778
#define Mips_JALX_MM	 1779
#define Mips_JAL_MM	 1780
#define Mips_JIALC	 1781
#define Mips_JIALC64	 1782
#define Mips_JIALC_MMR6	 1783
#define Mips_JIC	 1784
#define Mips_JIC64	 1785
#define Mips_JIC_MMR6	 1786
#define Mips_JR	 1787
#define Mips_JR16_MM	 1788
#define Mips_JR64	 1789
#define Mips_JRADDIUSP	 1790
#define Mips_JRC16_MM	 1791
#define Mips_JRC16_MMR6	 1792
#define Mips_JRCADDIUSP_MMR6	 1793
#define Mips_JR_HB	 1794
#define Mips_JR_HB64	 1795
#define Mips_JR_HB64_R6	 1796
#define Mips_JR_HB_R6	 1797
#define Mips_JR_MM	 1798
#define Mips_J_MM	 1799
#define Mips_Jal16	 1800
#define Mips_JalB16	 1801
#define Mips_JrRa16	 1802
#define Mips_JrcRa16	 1803
#define Mips_JrcRx16	 1804
#define Mips_JumpLinkReg16	 1805
#define Mips_LB	 1806
#define Mips_LB64	 1807
#define Mips_LBE	 1808
#define Mips_LBE_MM	 1809
#define Mips_LBU16_MM	 1810
#define Mips_LBUX	 1811
#define Mips_LBUX_MM	 1812
#define Mips_LBU_MMR6	 1813
#define Mips_LB_MM	 1814
#define Mips_LB_MMR6	 1815
#define Mips_LBu	 1816
#define Mips_LBu64	 1817
#define Mips_LBuE	 1818
#define Mips_LBuE_MM	 1819
#define Mips_LBu_MM	 1820
#define Mips_LD	 1821
#define Mips_LDC1	 1822
#define Mips_LDC164	 1823
#define Mips_LDC1_D64_MMR6	 1824
#define Mips_LDC1_MM	 1825
#define Mips_LDC2	 1826
#define Mips_LDC2_MMR6	 1827
#define Mips_LDC2_R6	 1828
#define Mips_LDC3	 1829
#define Mips_LDI_B	 1830
#define Mips_LDI_D	 1831
#define Mips_LDI_H	 1832
#define Mips_LDI_W	 1833
#define Mips_LDL	 1834
#define Mips_LDPC	 1835
#define Mips_LDR	 1836
#define Mips_LDXC1	 1837
#define Mips_LDXC164	 1838
#define Mips_LD_B	 1839
#define Mips_LD_D	 1840
#define Mips_LD_H	 1841
#define Mips_LD_W	 1842
#define Mips_LEA_ADDiu	 1843
#define Mips_LEA_ADDiu64	 1844
#define Mips_LEA_ADDiu_MM	 1845
#define Mips_LH	 1846
#define Mips_LH64	 1847
#define Mips_LHE	 1848
#define Mips_LHE_MM	 1849
#define Mips_LHU16_MM	 1850
#define Mips_LHX	 1851
#define Mips_LHX_MM	 1852
#define Mips_LH_MM	 1853
#define Mips_LHu	 1854
#define Mips_LHu64	 1855
#define Mips_LHuE	 1856
#define Mips_LHuE_MM	 1857
#define Mips_LHu_MM	 1858
#define Mips_LI16_MM	 1859
#define Mips_LI16_MMR6	 1860
#define Mips_LL	 1861
#define Mips_LL64	 1862
#define Mips_LL64_R6	 1863
#define Mips_LLD	 1864
#define Mips_LLD_R6	 1865
#define Mips_LLE	 1866
#define Mips_LLE_MM	 1867
#define Mips_LL_MM	 1868
#define Mips_LL_MMR6	 1869
#define Mips_LL_R6	 1870
#define Mips_LSA	 1871
#define Mips_LSA_MMR6	 1872
#define Mips_LSA_R6	 1873
#define Mips_LUI_MMR6	 1874
#define Mips_LUXC1	 1875
#define Mips_LUXC164	 1876
#define Mips_LUXC1_MM	 1877
#define Mips_LUi	 1878
#define Mips_LUi64	 1879
#define Mips_LUi_MM	 1880
#define Mips_LW	 1881
#define Mips_LW16_MM	 1882
#define Mips_LW64	 1883
#define Mips_LWC1	 1884
#define Mips_LWC1_MM	 1885
#define Mips_LWC2	 1886
#define Mips_LWC2_MMR6	 1887
#define Mips_LWC2_R6	 1888
#define Mips_LWC3	 1889
#define Mips_LWDSP	 1890
#define Mips_LWDSP_MM	 1891
#define Mips_LWE	 1892
#define Mips_LWE_MM	 1893
#define Mips_LWGP_MM	 1894
#define Mips_LWL	 1895
#define Mips_LWL64	 1896
#define Mips_LWLE	 1897
#define Mips_LWLE_MM	 1898
#define Mips_LWL_MM	 1899
#define Mips_LWM16_MM	 1900
#define Mips_LWM16_MMR6	 1901
#define Mips_LWM32_MM	 1902
#define Mips_LWPC	 1903
#define Mips_LWPC_MMR6	 1904
#define Mips_LWP_MM	 1905
#define Mips_LWR	 1906
#define Mips_LWR64	 1907
#define Mips_LWRE	 1908
#define Mips_LWRE_MM	 1909
#define Mips_LWR_MM	 1910
#define Mips_LWSP_MM	 1911
#define Mips_LWUPC	 1912
#define Mips_LWU_MM	 1913
#define Mips_LWX	 1914
#define Mips_LWXC1	 1915
#define Mips_LWXC1_MM	 1916
#define Mips_LWXS_MM	 1917
#define Mips_LWX_MM	 1918
#define Mips_LW_MM	 1919
#define Mips_LW_MMR6	 1920
#define Mips_LWu	 1921
#define Mips_LbRxRyOffMemX16	 1922
#define Mips_LbuRxRyOffMemX16	 1923
#define Mips_LhRxRyOffMemX16	 1924
#define Mips_LhuRxRyOffMemX16	 1925
#define Mips_LiRxImm16	 1926
#define Mips_LiRxImmAlignX16	 1927
#define Mips_LiRxImmX16	 1928
#define Mips_LwRxPcTcp16	 1929
#define Mips_LwRxPcTcpX16	 1930
#define Mips_LwRxRyOffMemX16	 1931
#define Mips_LwRxSpImmX16	 1932
#define Mips_MADD	 1933
#define Mips_MADDF_D	 1934
#define Mips_MADDF_D_MMR6	 1935
#define Mips_MADDF_S	 1936
#define Mips_MADDF_S_MMR6	 1937
#define Mips_MADDR_Q_H	 1938
#define Mips_MADDR_Q_W	 1939
#define Mips_MADDU	 1940
#define Mips_MADDU_DSP	 1941
#define Mips_MADDU_DSP_MM	 1942
#define Mips_MADDU_MM	 1943
#define Mips_MADDV_B	 1944
#define Mips_MADDV_D	 1945
#define Mips_MADDV_H	 1946
#define Mips_MADDV_W	 1947
#define Mips_MADD_D32	 1948
#define Mips_MADD_D32_MM	 1949
#define Mips_MADD_D64	 1950
#define Mips_MADD_DSP	 1951
#define Mips_MADD_DSP_MM	 1952
#define Mips_MADD_MM	 1953
#define Mips_MADD_Q_H	 1954
#define Mips_MADD_Q_W	 1955
#define Mips_MADD_S	 1956
#define Mips_MADD_S_MM	 1957
#define Mips_MAQ_SA_W_PHL	 1958
#define Mips_MAQ_SA_W_PHL_MM	 1959
#define Mips_MAQ_SA_W_PHR	 1960
#define Mips_MAQ_SA_W_PHR_MM	 1961
#define Mips_MAQ_S_W_PHL	 1962
#define Mips_MAQ_S_W_PHL_MM	 1963
#define Mips_MAQ_S_W_PHR	 1964
#define Mips_MAQ_S_W_PHR_MM	 1965
#define Mips_MAXA_D	 1966
#define Mips_MAXA_D_MMR6	 1967
#define Mips_MAXA_S	 1968
#define Mips_MAXA_S_MMR6	 1969
#define Mips_MAXI_S_B	 1970
#define Mips_MAXI_S_D	 1971
#define Mips_MAXI_S_H	 1972
#define Mips_MAXI_S_W	 1973
#define Mips_MAXI_U_B	 1974
#define Mips_MAXI_U_D	 1975
#define Mips_MAXI_U_H	 1976
#define Mips_MAXI_U_W	 1977
#define Mips_MAX_A_B	 1978
#define Mips_MAX_A_D	 1979
#define Mips_MAX_A_H	 1980
#define Mips_MAX_A_W	 1981
#define Mips_MAX_D	 1982
#define Mips_MAX_D_MMR6	 1983
#define Mips_MAX_S	 1984
#define Mips_MAX_S_B	 1985
#define Mips_MAX_S_D	 1986
#define Mips_MAX_S_H	 1987
#define Mips_MAX_S_MMR6	 1988
#define Mips_MAX_S_W	 1989
#define Mips_MAX_U_B	 1990
#define Mips_MAX_U_D	 1991
#define Mips_MAX_U_H	 1992
#define Mips_MAX_U_W	 1993
#define Mips_MFC0	 1994
#define Mips_MFC0_MMR6	 1995
#define Mips_MFC1	 1996
#define Mips_MFC1_D64	 1997
#define Mips_MFC1_MM	 1998
#define Mips_MFC1_MMR6	 1999
#define Mips_MFC2	 2000
#define Mips_MFC2_MMR6	 2001
#define Mips_MFGC0	 2002
#define Mips_MFGC0_MM	 2003
#define Mips_MFHC0_MMR6	 2004
#define Mips_MFHC1_D32	 2005
#define Mips_MFHC1_D32_MM	 2006
#define Mips_MFHC1_D64	 2007
#define Mips_MFHC1_D64_MM	 2008
#define Mips_MFHC2_MMR6	 2009
#define Mips_MFHGC0	 2010
#define Mips_MFHGC0_MM	 2011
#define Mips_MFHI	 2012
#define Mips_MFHI16_MM	 2013
#define Mips_MFHI64	 2014
#define Mips_MFHI_DSP	 2015
#define Mips_MFHI_DSP_MM	 2016
#define Mips_MFHI_MM	 2017
#define Mips_MFLO	 2018
#define Mips_MFLO16_MM	 2019
#define Mips_MFLO64	 2020
#define Mips_MFLO_DSP	 2021
#define Mips_MFLO_DSP_MM	 2022
#define Mips_MFLO_MM	 2023
#define Mips_MFTR	 2024
#define Mips_MINA_D	 2025
#define Mips_MINA_D_MMR6	 2026
#define Mips_MINA_S	 2027
#define Mips_MINA_S_MMR6	 2028
#define Mips_MINI_S_B	 2029
#define Mips_MINI_S_D	 2030
#define Mips_MINI_S_H	 2031
#define Mips_MINI_S_W	 2032
#define Mips_MINI_U_B	 2033
#define Mips_MINI_U_D	 2034
#define Mips_MINI_U_H	 2035
#define Mips_MINI_U_W	 2036
#define Mips_MIN_A_B	 2037
#define Mips_MIN_A_D	 2038
#define Mips_MIN_A_H	 2039
#define Mips_MIN_A_W	 2040
#define Mips_MIN_D	 2041
#define Mips_MIN_D_MMR6	 2042
#define Mips_MIN_S	 2043
#define Mips_MIN_S_B	 2044
#define Mips_MIN_S_D	 2045
#define Mips_MIN_S_H	 2046
#define Mips_MIN_S_MMR6	 2047
#define Mips_MIN_S_W	 2048
#define Mips_MIN_U_B	 2049
#define Mips_MIN_U_D	 2050
#define Mips_MIN_U_H	 2051
#define Mips_MIN_U_W	 2052
#define Mips_MOD	 2053
#define Mips_MODSUB	 2054
#define Mips_MODSUB_MM	 2055
#define Mips_MODU	 2056
#define Mips_MODU_MMR6	 2057
#define Mips_MOD_MMR6	 2058
#define Mips_MOD_S_B	 2059
#define Mips_MOD_S_D	 2060
#define Mips_MOD_S_H	 2061
#define Mips_MOD_S_W	 2062
#define Mips_MOD_U_B	 2063
#define Mips_MOD_U_D	 2064
#define Mips_MOD_U_H	 2065
#define Mips_MOD_U_W	 2066
#define Mips_MOVE16_MM	 2067
#define Mips_MOVE16_MMR6	 2068
#define Mips_MOVEP_MM	 2069
#define Mips_MOVEP_MMR6	 2070
#define Mips_MOVE_V	 2071
#define Mips_MOVF_D32	 2072
#define Mips_MOVF_D32_MM	 2073
#define Mips_MOVF_D64	 2074
#define Mips_MOVF_I	 2075
#define Mips_MOVF_I64	 2076
#define Mips_MOVF_I_MM	 2077
#define Mips_MOVF_S	 2078
#define Mips_MOVF_S_MM	 2079
#define Mips_MOVN_I64_D64	 2080
#define Mips_MOVN_I64_I	 2081
#define Mips_MOVN_I64_I64	 2082
#define Mips_MOVN_I64_S	 2083
#define Mips_MOVN_I_D32	 2084
#define Mips_MOVN_I_D32_MM	 2085
#define Mips_MOVN_I_D64	 2086
#define Mips_MOVN_I_I	 2087
#define Mips_MOVN_I_I64	 2088
#define Mips_MOVN_I_MM	 2089
#define Mips_MOVN_I_S	 2090
#define Mips_MOVN_I_S_MM	 2091
#define Mips_MOVT_D32	 2092
#define Mips_MOVT_D32_MM	 2093
#define Mips_MOVT_D64	 2094
#define Mips_MOVT_I	 2095
#define Mips_MOVT_I64	 2096
#define Mips_MOVT_I_MM	 2097
#define Mips_MOVT_S	 2098
#define Mips_MOVT_S_MM	 2099
#define Mips_MOVZ_I64_D64	 2100
#define Mips_MOVZ_I64_I	 2101
#define Mips_MOVZ_I64_I64	 2102
#define Mips_MOVZ_I64_S	 2103
#define Mips_MOVZ_I_D32	 2104
#define Mips_MOVZ_I_D32_MM	 2105
#define Mips_MOVZ_I_D64	 2106
#define Mips_MOVZ_I_I	 2107
#define Mips_MOVZ_I_I64	 2108
#define Mips_MOVZ_I_MM	 2109
#define Mips_MOVZ_I_S	 2110
#define Mips_MOVZ_I_S_MM	 2111
#define Mips_MSUB	 2112
#define Mips_MSUBF_D	 2113
#define Mips_MSUBF_D_MMR6	 2114
#define Mips_MSUBF_S	 2115
#define Mips_MSUBF_S_MMR6	 2116
#define Mips_MSUBR_Q_H	 2117
#define Mips_MSUBR_Q_W	 2118
#define Mips_MSUBU	 2119
#define Mips_MSUBU_DSP	 2120
#define Mips_MSUBU_DSP_MM	 2121
#define Mips_MSUBU_MM	 2122
#define Mips_MSUBV_B	 2123
#define Mips_MSUBV_D	 2124
#define Mips_MSUBV_H	 2125
#define Mips_MSUBV_W	 2126
#define Mips_MSUB_D32	 2127
#define Mips_MSUB_D32_MM	 2128
#define Mips_MSUB_D64	 2129
#define Mips_MSUB_DSP	 2130
#define Mips_MSUB_DSP_MM	 2131
#define Mips_MSUB_MM	 2132
#define Mips_MSUB_Q_H	 2133
#define Mips_MSUB_Q_W	 2134
#define Mips_MSUB_S	 2135
#define Mips_MSUB_S_MM	 2136
#define Mips_MTC0	 2137
#define Mips_MTC0_MMR6	 2138
#define Mips_MTC1	 2139
#define Mips_MTC1_D64	 2140
#define Mips_MTC1_D64_MM	 2141
#define Mips_MTC1_MM	 2142
#define Mips_MTC1_MMR6	 2143
#define Mips_MTC2	 2144
#define Mips_MTC2_MMR6	 2145
#define Mips_MTGC0	 2146
#define Mips_MTGC0_MM	 2147
#define Mips_MTHC0_MMR6	 2148
#define Mips_MTHC1_D32	 2149
#define Mips_MTHC1_D32_MM	 2150
#define Mips_MTHC1_D64	 2151
#define Mips_MTHC1_D64_MM	 2152
#define Mips_MTHC2_MMR6	 2153
#define Mips_MTHGC0	 2154
#define Mips_MTHGC0_MM	 2155
#define Mips_MTHI	 2156
#define Mips_MTHI64	 2157
#define Mips_MTHI_DSP	 2158
#define Mips_MTHI_DSP_MM	 2159
#define Mips_MTHI_MM	 2160
#define Mips_MTHLIP	 2161
#define Mips_MTHLIP_MM	 2162
#define Mips_MTLO	 2163
#define Mips_MTLO64	 2164
#define Mips_MTLO_DSP	 2165
#define Mips_MTLO_DSP_MM	 2166
#define Mips_MTLO_MM	 2167
#define Mips_MTM0	 2168
#define Mips_MTM1	 2169
#define Mips_MTM2	 2170
#define Mips_MTP0	 2171
#define Mips_MTP1	 2172
#define Mips_MTP2	 2173
#define Mips_MTTR	 2174
#define Mips_MUH	 2175
#define Mips_MUHU	 2176
#define Mips_MUHU_MMR6	 2177
#define Mips_MUH_MMR6	 2178
#define Mips_MUL	 2179
#define Mips_MULEQ_S_W_PHL	 2180
#define Mips_MULEQ_S_W_PHL_MM	 2181
#define Mips_MULEQ_S_W_PHR	 2182
#define Mips_MULEQ_S_W_PHR_MM	 2183
#define Mips_MULEU_S_PH_QBL	 2184
#define Mips_MULEU_S_PH_QBL_MM	 2185
#define Mips_MULEU_S_PH_QBR	 2186
#define Mips_MULEU_S_PH_QBR_MM	 2187
#define Mips_MULQ_RS_PH	 2188
#define Mips_MULQ_RS_PH_MM	 2189
#define Mips_MULQ_RS_W	 2190
#define Mips_MULQ_RS_W_MMR2	 2191
#define Mips_MULQ_S_PH	 2192
#define Mips_MULQ_S_PH_MMR2	 2193
#define Mips_MULQ_S_W	 2194
#define Mips_MULQ_S_W_MMR2	 2195
#define Mips_MULR_PS64	 2196
#define Mips_MULR_Q_H	 2197
#define Mips_MULR_Q_W	 2198
#define Mips_MULSAQ_S_W_PH	 2199
#define Mips_MULSAQ_S_W_PH_MM	 2200
#define Mips_MULSA_W_PH	 2201
#define Mips_MULSA_W_PH_MMR2	 2202
#define Mips_MULT	 2203
#define Mips_MULTU_DSP	 2204
#define Mips_MULTU_DSP_MM	 2205
#define Mips_MULT_DSP	 2206
#define Mips_MULT_DSP_MM	 2207
#define Mips_MULT_MM	 2208
#define Mips_MULTu	 2209
#define Mips_MULTu_MM	 2210
#define Mips_MULU	 2211
#define Mips_MULU_MMR6	 2212
#define Mips_MULV_B	 2213
#define Mips_MULV_D	 2214
#define Mips_MULV_H	 2215
#define Mips_MULV_W	 2216
#define Mips_MUL_MM	 2217
#define Mips_MUL_MMR6	 2218
#define Mips_MUL_PH	 2219
#define Mips_MUL_PH_MMR2	 2220
#define Mips_MUL_Q_H	 2221
#define Mips_MUL_Q_W	 2222
#define Mips_MUL_R6	 2223
#define Mips_MUL_S_PH	 2224
#define Mips_MUL_S_PH_MMR2	 2225
#define Mips_Mfhi16	 2226
#define Mips_Mflo16	 2227
#define Mips_Move32R16	 2228
#define Mips_MoveR3216	 2229
#define Mips_NLOC_B	 2230
#define Mips_NLOC_D	 2231
#define Mips_NLOC_H	 2232
#define Mips_NLOC_W	 2233
#define Mips_NLZC_B	 2234
#define Mips_NLZC_D	 2235
#define Mips_NLZC_H	 2236
#define Mips_NLZC_W	 2237
#define Mips_NMADD_D32	 2238
#define Mips_NMADD_D32_MM	 2239
#define Mips_NMADD_D64	 2240
#define Mips_NMADD_S	 2241
#define Mips_NMADD_S_MM	 2242
#define Mips_NMSUB_D32	 2243
#define Mips_NMSUB_D32_MM	 2244
#define Mips_NMSUB_D64	 2245
#define Mips_NMSUB_S	 2246
#define Mips_NMSUB_S_MM	 2247
#define Mips_NOR	 2248
#define Mips_NOR64	 2249
#define Mips_NORI_B	 2250
#define Mips_NOR_MM	 2251
#define Mips_NOR_MMR6	 2252
#define Mips_NOR_V	 2253
#define Mips_NOT16_MM	 2254
#define Mips_NOT16_MMR6	 2255
#define Mips_NegRxRy16	 2256
#define Mips_NotRxRy16	 2257
#define Mips_OR	 2258
#define Mips_OR16_MM	 2259
#define Mips_OR16_MMR6	 2260
#define Mips_OR64	 2261
#define Mips_ORI_B	 2262
#define Mips_ORI_MMR6	 2263
#define Mips_OR_MM	 2264
#define Mips_OR_MMR6	 2265
#define Mips_OR_V	 2266
#define Mips_ORi	 2267
#define Mips_ORi64	 2268
#define Mips_ORi_MM	 2269
#define Mips_OrRxRxRy16	 2270
#define Mips_PACKRL_PH	 2271
#define Mips_PACKRL_PH_MM	 2272
#define Mips_PAUSE	 2273
#define Mips_PAUSE_MM	 2274
#define Mips_PAUSE_MMR6	 2275
#define Mips_PCKEV_B	 2276
#define Mips_PCKEV_D	 2277
#define Mips_PCKEV_H	 2278
#define Mips_PCKEV_W	 2279
#define Mips_PCKOD_B	 2280
#define Mips_PCKOD_D	 2281
#define Mips_PCKOD_H	 2282
#define Mips_PCKOD_W	 2283
#define Mips_PCNT_B	 2284
#define Mips_PCNT_D	 2285
#define Mips_PCNT_H	 2286
#define Mips_PCNT_W	 2287
#define Mips_PICK_PH	 2288
#define Mips_PICK_PH_MM	 2289
#define Mips_PICK_QB	 2290
#define Mips_PICK_QB_MM	 2291
#define Mips_PLL_PS64	 2292
#define Mips_PLU_PS64	 2293
#define Mips_POP	 2294
#define Mips_PRECEQU_PH_QBL	 2295
#define Mips_PRECEQU_PH_QBLA	 2296
#define Mips_PRECEQU_PH_QBLA_MM	 2297
#define Mips_PRECEQU_PH_QBL_MM	 2298
#define Mips_PRECEQU_PH_QBR	 2299
#define Mips_PRECEQU_PH_QBRA	 2300
#define Mips_PRECEQU_PH_QBRA_MM	 2301
#define Mips_PRECEQU_PH_QBR_MM	 2302
#define Mips_PRECEQ_W_PHL	 2303
#define Mips_PRECEQ_W_PHL_MM	 2304
#define Mips_PRECEQ_W_PHR	 2305
#define Mips_PRECEQ_W_PHR_MM	 2306
#define Mips_PRECEU_PH_QBL	 2307
#define Mips_PRECEU_PH_QBLA	 2308
#define Mips_PRECEU_PH_QBLA_MM	 2309
#define Mips_PRECEU_PH_QBL_MM	 2310
#define Mips_PRECEU_PH_QBR	 2311
#define Mips_PRECEU_PH_QBRA	 2312
#define Mips_PRECEU_PH_QBRA_MM	 2313
#define Mips_PRECEU_PH_QBR_MM	 2314
#define Mips_PRECRQU_S_QB_PH	 2315
#define Mips_PRECRQU_S_QB_PH_MM	 2316
#define Mips_PRECRQ_PH_W	 2317
#define Mips_PRECRQ_PH_W_MM	 2318
#define Mips_PRECRQ_QB_PH	 2319
#define Mips_PRECRQ_QB_PH_MM	 2320
#define Mips_PRECRQ_RS_PH_W	 2321
#define Mips_PRECRQ_RS_PH_W_MM	 2322
#define Mips_PRECR_QB_PH	 2323
#define Mips_PRECR_QB_PH_MMR2	 2324
#define Mips_PRECR_SRA_PH_W	 2325
#define Mips_PRECR_SRA_PH_W_MMR2	 2326
#define Mips_PRECR_SRA_R_PH_W	 2327
#define Mips_PRECR_SRA_R_PH_W_MMR2	 2328
#define Mips_PREF	 2329
#define Mips_PREFE	 2330
#define Mips_PREFE_MM	 2331
#define Mips_PREFX_MM	 2332
#define Mips_PREF_MM	 2333
#define Mips_PREF_MMR6	 2334
#define Mips_PREF_R6	 2335
#define Mips_PREPEND	 2336
#define Mips_PREPEND_MMR2	 2337
#define Mips_PUL_PS64	 2338
#define Mips_PUU_PS64	 2339
#define Mips_RADDU_W_QB	 2340
#define Mips_RADDU_W_QB_MM	 2341
#define Mips_RDDSP	 2342
#define Mips_RDDSP_MM	 2343
#define Mips_RDHWR	 2344
#define Mips_RDHWR64	 2345
#define Mips_RDHWR_MM	 2346
#define Mips_RDHWR_MMR6	 2347
#define Mips_RDPGPR_MMR6	 2348
#define Mips_RECIP_D32	 2349
#define Mips_RECIP_D32_MM	 2350
#define Mips_RECIP_D64	 2351
#define Mips_RECIP_D64_MM	 2352
#define Mips_RECIP_S	 2353
#define Mips_RECIP_S_MM	 2354
#define Mips_REPLV_PH	 2355
#define Mips_REPLV_PH_MM	 2356
#define Mips_REPLV_QB	 2357
#define Mips_REPLV_QB_MM	 2358
#define Mips_REPL_PH	 2359
#define Mips_REPL_PH_MM	 2360
#define Mips_REPL_QB	 2361
#define Mips_REPL_QB_MM	 2362
#define Mips_RINT_D	 2363
#define Mips_RINT_D_MMR6	 2364
#define Mips_RINT_S	 2365
#define Mips_RINT_S_MMR6	 2366
#define Mips_ROTR	 2367
#define Mips_ROTRV	 2368
#define Mips_ROTRV_MM	 2369
#define Mips_ROTR_MM	 2370
#define Mips_ROUND_L_D64	 2371
#define Mips_ROUND_L_D_MMR6	 2372
#define Mips_ROUND_L_S	 2373
#define Mips_ROUND_L_S_MMR6	 2374
#define Mips_ROUND_W_D32	 2375
#define Mips_ROUND_W_D64	 2376
#define Mips_ROUND_W_D_MMR6	 2377
#define Mips_ROUND_W_MM	 2378
#define Mips_ROUND_W_S	 2379
#define Mips_ROUND_W_S_MM	 2380
#define Mips_ROUND_W_S_MMR6	 2381
#define Mips_RSQRT_D32	 2382
#define Mips_RSQRT_D32_MM	 2383
#define Mips_RSQRT_D64	 2384
#define Mips_RSQRT_D64_MM	 2385
#define Mips_RSQRT_S	 2386
#define Mips_RSQRT_S_MM	 2387
#define Mips_Restore16	 2388
#define Mips_RestoreX16	 2389
#define Mips_SAA	 2390
#define Mips_SAAD	 2391
#define Mips_SAT_S_B	 2392
#define Mips_SAT_S_D	 2393
#define Mips_SAT_S_H	 2394
#define Mips_SAT_S_W	 2395
#define Mips_SAT_U_B	 2396
#define Mips_SAT_U_D	 2397
#define Mips_SAT_U_H	 2398
#define Mips_SAT_U_W	 2399
#define Mips_SB	 2400
#define Mips_SB16_MM	 2401
#define Mips_SB16_MMR6	 2402
#define Mips_SB64	 2403
#define Mips_SBE	 2404
#define Mips_SBE_MM	 2405
#define Mips_SB_MM	 2406
#define Mips_SB_MMR6	 2407
#define Mips_SC	 2408
#define Mips_SC64	 2409
#define Mips_SC64_R6	 2410
#define Mips_SCD	 2411
#define Mips_SCD_R6	 2412
#define Mips_SCE	 2413
#define Mips_SCE_MM	 2414
#define Mips_SC_MM	 2415
#define Mips_SC_MMR6	 2416
#define Mips_SC_R6	 2417
#define Mips_SD	 2418
#define Mips_SDBBP	 2419
#define Mips_SDBBP16_MM	 2420
#define Mips_SDBBP16_MMR6	 2421
#define Mips_SDBBP_MM	 2422
#define Mips_SDBBP_MMR6	 2423
#define Mips_SDBBP_R6	 2424
#define Mips_SDC1	 2425
#define Mips_SDC164	 2426
#define Mips_SDC1_D64_MMR6	 2427
#define Mips_SDC1_MM	 2428
#define Mips_SDC2	 2429
#define Mips_SDC2_MMR6	 2430
#define Mips_SDC2_R6	 2431
#define Mips_SDC3	 2432
#define Mips_SDIV	 2433
#define Mips_SDIV_MM	 2434
#define Mips_SDL	 2435
#define Mips_SDR	 2436
#define Mips_SDXC1	 2437
#define Mips_SDXC164	 2438
#define Mips_SEB	 2439
#define Mips_SEB64	 2440
#define Mips_SEB_MM	 2441
#define Mips_SEH	 2442
#define Mips_SEH64	 2443
#define Mips_SEH_MM	 2444
#define Mips_SELEQZ	 2445
#define Mips_SELEQZ64	 2446
#define Mips_SELEQZ_D	 2447
#define Mips_SELEQZ_D_MMR6	 2448
#define Mips_SELEQZ_MMR6	 2449
#define Mips_SELEQZ_S	 2450
#define Mips_SELEQZ_S_MMR6	 2451
#define Mips_SELNEZ	 2452
#define Mips_SELNEZ64	 2453
#define Mips_SELNEZ_D	 2454
#define Mips_SELNEZ_D_MMR6	 2455
#define Mips_SELNEZ_MMR6	 2456
#define Mips_SELNEZ_S	 2457
#define Mips_SELNEZ_S_MMR6	 2458
#define Mips_SEL_D	 2459
#define Mips_SEL_D_MMR6	 2460
#define Mips_SEL_S	 2461
#define Mips_SEL_S_MMR6	 2462
#define Mips_SEQ	 2463
#define Mips_SEQi	 2464
#define Mips_SH	 2465
#define Mips_SH16_MM	 2466
#define Mips_SH16_MMR6	 2467
#define Mips_SH64	 2468
#define Mips_SHE	 2469
#define Mips_SHE_MM	 2470
#define Mips_SHF_B	 2471
#define Mips_SHF_H	 2472
#define Mips_SHF_W	 2473
#define Mips_SHILO	 2474
#define Mips_SHILOV	 2475
#define Mips_SHILOV_MM	 2476
#define Mips_SHILO_MM	 2477
#define Mips_SHLLV_PH	 2478
#define Mips_SHLLV_PH_MM	 2479
#define Mips_SHLLV_QB	 2480
#define Mips_SHLLV_QB_MM	 2481
#define Mips_SHLLV_S_PH	 2482
#define Mips_SHLLV_S_PH_MM	 2483
#define Mips_SHLLV_S_W	 2484
#define Mips_SHLLV_S_W_MM	 2485
#define Mips_SHLL_PH	 2486
#define Mips_SHLL_PH_MM	 2487
#define Mips_SHLL_QB	 2488
#define Mips_SHLL_QB_MM	 2489
#define Mips_SHLL_S_PH	 2490
#define Mips_SHLL_S_PH_MM	 2491
#define Mips_SHLL_S_W	 2492
#define Mips_SHLL_S_W_MM	 2493
#define Mips_SHRAV_PH	 2494
#define Mips_SHRAV_PH_MM	 2495
#define Mips_SHRAV_QB	 2496
#define Mips_SHRAV_QB_MMR2	 2497
#define Mips_SHRAV_R_PH	 2498
#define Mips_SHRAV_R_PH_MM	 2499
#define Mips_SHRAV_R_QB	 2500
#define Mips_SHRAV_R_QB_MMR2	 2501
#define Mips_SHRAV_R_W	 2502
#define Mips_SHRAV_R_W_MM	 2503
#define Mips_SHRA_PH	 2504
#define Mips_SHRA_PH_MM	 2505
#define Mips_SHRA_QB	 2506
#define Mips_SHRA_QB_MMR2	 2507
#define Mips_SHRA_R_PH	 2508
#define Mips_SHRA_R_PH_MM	 2509
#define Mips_SHRA_R_QB	 2510
#define Mips_SHRA_R_QB_MMR2	 2511
#define Mips_SHRA_R_W	 2512
#define Mips_SHRA_R_W_MM	 2513
#define Mips_SHRLV_PH	 2514
#define Mips_SHRLV_PH_MMR2	 2515
#define Mips_SHRLV_QB	 2516
#define Mips_SHRLV_QB_MM	 2517
#define Mips_SHRL_PH	 2518
#define Mips_SHRL_PH_MMR2	 2519
#define Mips_SHRL_QB	 2520
#define Mips_SHRL_QB_MM	 2521
#define Mips_SH_MM	 2522
#define Mips_SH_MMR6	 2523
#define Mips_SIGRIE	 2524
#define Mips_SIGRIE_MMR6	 2525
#define Mips_SLDI_B	 2526
#define Mips_SLDI_D	 2527
#define Mips_SLDI_H	 2528
#define Mips_SLDI_W	 2529
#define Mips_SLD_B	 2530
#define Mips_SLD_D	 2531
#define Mips_SLD_H	 2532
#define Mips_SLD_W	 2533
#define Mips_SLL	 2534
#define Mips_SLL16_MM	 2535
#define Mips_SLL16_MMR6	 2536
#define Mips_SLL64_32	 2537
#define Mips_SLL64_64	 2538
#define Mips_SLLI_B	 2539
#define Mips_SLLI_D	 2540
#define Mips_SLLI_H	 2541
#define Mips_SLLI_W	 2542
#define Mips_SLLV	 2543
#define Mips_SLLV_MM	 2544
#define Mips_SLL_B	 2545
#define Mips_SLL_D	 2546
#define Mips_SLL_H	 2547
#define Mips_SLL_MM	 2548
#define Mips_SLL_MMR6	 2549
#define Mips_SLL_W	 2550
#define Mips_SLT	 2551
#define Mips_SLT64	 2552
#define Mips_SLT_MM	 2553
#define Mips_SLTi	 2554
#define Mips_SLTi64	 2555
#define Mips_SLTi_MM	 2556
#define Mips_SLTiu	 2557
#define Mips_SLTiu64	 2558
#define Mips_SLTiu_MM	 2559
#define Mips_SLTu	 2560
#define Mips_SLTu64	 2561
#define Mips_SLTu_MM	 2562
#define Mips_SNE	 2563
#define Mips_SNEi	 2564
#define Mips_SPLATI_B	 2565
#define Mips_SPLATI_D	 2566
#define Mips_SPLATI_H	 2567
#define Mips_SPLATI_W	 2568
#define Mips_SPLAT_B	 2569
#define Mips_SPLAT_D	 2570
#define Mips_SPLAT_H	 2571
#define Mips_SPLAT_W	 2572
#define Mips_SRA	 2573
#define Mips_SRAI_B	 2574
#define Mips_SRAI_D	 2575
#define Mips_SRAI_H	 2576
#define Mips_SRAI_W	 2577
#define Mips_SRARI_B	 2578
#define Mips_SRARI_D	 2579
#define Mips_SRARI_H	 2580
#define Mips_SRARI_W	 2581
#define Mips_SRAR_B	 2582
#define Mips_SRAR_D	 2583
#define Mips_SRAR_H	 2584
#define Mips_SRAR_W	 2585
#define Mips_SRAV	 2586
#define Mips_SRAV_MM	 2587
#define Mips_SRA_B	 2588
#define Mips_SRA_D	 2589
#define Mips_SRA_H	 2590
#define Mips_SRA_MM	 2591
#define Mips_SRA_W	 2592
#define Mips_SRL	 2593
#define Mips_SRL16_MM	 2594
#define Mips_SRL16_MMR6	 2595
#define Mips_SRLI_B	 2596
#define Mips_SRLI_D	 2597
#define Mips_SRLI_H	 2598
#define Mips_SRLI_W	 2599
#define Mips_SRLRI_B	 2600
#define Mips_SRLRI_D	 2601
#define Mips_SRLRI_H	 2602
#define Mips_SRLRI_W	 2603
#define Mips_SRLR_B	 2604
#define Mips_SRLR_D	 2605
#define Mips_SRLR_H	 2606
#define Mips_SRLR_W	 2607
#define Mips_SRLV	 2608
#define Mips_SRLV_MM	 2609
#define Mips_SRL_B	 2610
#define Mips_SRL_D	 2611
#define Mips_SRL_H	 2612
#define Mips_SRL_MM	 2613
#define Mips_SRL_W	 2614
#define Mips_SSNOP	 2615
#define Mips_SSNOP_MM	 2616
#define Mips_SSNOP_MMR6	 2617
#define Mips_ST_B	 2618
#define Mips_ST_D	 2619
#define Mips_ST_H	 2620
#define Mips_ST_W	 2621
#define Mips_SUB	 2622
#define Mips_SUBQH_PH	 2623
#define Mips_SUBQH_PH_MMR2	 2624
#define Mips_SUBQH_R_PH	 2625
#define Mips_SUBQH_R_PH_MMR2	 2626
#define Mips_SUBQH_R_W	 2627
#define Mips_SUBQH_R_W_MMR2	 2628
#define Mips_SUBQH_W	 2629
#define Mips_SUBQH_W_MMR2	 2630
#define Mips_SUBQ_PH	 2631
#define Mips_SUBQ_PH_MM	 2632
#define Mips_SUBQ_S_PH	 2633
#define Mips_SUBQ_S_PH_MM	 2634
#define Mips_SUBQ_S_W	 2635
#define Mips_SUBQ_S_W_MM	 2636
#define Mips_SUBSUS_U_B	 2637
#define Mips_SUBSUS_U_D	 2638
#define Mips_SUBSUS_U_H	 2639
#define Mips_SUBSUS_U_W	 2640
#define Mips_SUBSUU_S_B	 2641
#define Mips_SUBSUU_S_D	 2642
#define Mips_SUBSUU_S_H	 2643
#define Mips_SUBSUU_S_W	 2644
#define Mips_SUBS_S_B	 2645
#define Mips_SUBS_S_D	 2646
#define Mips_SUBS_S_H	 2647
#define Mips_SUBS_S_W	 2648
#define Mips_SUBS_U_B	 2649
#define Mips_SUBS_U_D	 2650
#define Mips_SUBS_U_H	 2651
#define Mips_SUBS_U_W	 2652
#define Mips_SUBU16_MM	 2653
#define Mips_SUBU16_MMR6	 2654
#define Mips_SUBUH_QB	 2655
#define Mips_SUBUH_QB_MMR2	 2656
#define Mips_SUBUH_R_QB	 2657
#define Mips_SUBUH_R_QB_MMR2	 2658
#define Mips_SUBU_MMR6	 2659
#define Mips_SUBU_PH	 2660
#define Mips_SUBU_PH_MMR2	 2661
#define Mips_SUBU_QB	 2662
#define Mips_SUBU_QB_MM	 2663
#define Mips_SUBU_S_PH	 2664
#define Mips_SUBU_S_PH_MMR2	 2665
#define Mips_SUBU_S_QB	 2666
#define Mips_SUBU_S_QB_MM	 2667
#define Mips_SUBVI_B	 2668
#define Mips_SUBVI_D	 2669
#define Mips_SUBVI_H	 2670
#define Mips_SUBVI_W	 2671
#define Mips_SUBV_B	 2672
#define Mips_SUBV_D	 2673
#define Mips_SUBV_H	 2674
#define Mips_SUBV_W	 2675
#define Mips_SUB_MM	 2676
#define Mips_SUB_MMR6	 2677
#define Mips_SUBu	 2678
#define Mips_SUBu_MM	 2679
#define Mips_SUXC1	 2680
#define Mips_SUXC164	 2681
#define Mips_SUXC1_MM	 2682
#define Mips_SW	 2683
#define Mips_SW16_MM	 2684
#define Mips_SW16_MMR6	 2685
#define Mips_SW64	 2686
#define Mips_SWC1	 2687
#define Mips_SWC1_MM	 2688
#define Mips_SWC2	 2689
#define Mips_SWC2_MMR6	 2690
#define Mips_SWC2_R6	 2691
#define Mips_SWC3	 2692
#define Mips_SWDSP	 2693
#define Mips_SWDSP_MM	 2694
#define Mips_SWE	 2695
#define Mips_SWE_MM	 2696
#define Mips_SWL	 2697
#define Mips_SWL64	 2698
#define Mips_SWLE	 2699
#define Mips_SWLE_MM	 2700
#define Mips_SWL_MM	 2701
#define Mips_SWM16_MM	 2702
#define Mips_SWM16_MMR6	 2703
#define Mips_SWM32_MM	 2704
#define Mips_SWP_MM	 2705
#define Mips_SWR	 2706
#define Mips_SWR64	 2707
#define Mips_SWRE	 2708
#define Mips_SWRE_MM	 2709
#define Mips_SWR_MM	 2710
#define Mips_SWSP_MM	 2711
#define Mips_SWSP_MMR6	 2712
#define Mips_SWXC1	 2713
#define Mips_SWXC1_MM	 2714
#define Mips_SW_MM	 2715
#define Mips_SW_MMR6	 2716
#define Mips_SYNC	 2717
#define Mips_SYNCI	 2718
#define Mips_SYNCI_MM	 2719
#define Mips_SYNCI_MMR6	 2720
#define Mips_SYNC_MM	 2721
#define Mips_SYNC_MMR6	 2722
#define Mips_SYSCALL	 2723
#define Mips_SYSCALL_MM	 2724
#define Mips_Save16	 2725
#define Mips_SaveX16	 2726
#define Mips_SbRxRyOffMemX16	 2727
#define Mips_SebRx16	 2728
#define Mips_SehRx16	 2729
#define Mips_ShRxRyOffMemX16	 2730
#define Mips_SllX16	 2731
#define Mips_SllvRxRy16	 2732
#define Mips_SltRxRy16	 2733
#define Mips_SltiRxImm16	 2734
#define Mips_SltiRxImmX16	 2735
#define Mips_SltiuRxImm16	 2736
#define Mips_SltiuRxImmX16	 2737
#define Mips_SltuRxRy16	 2738
#define Mips_SraX16	 2739
#define Mips_SravRxRy16	 2740
#define Mips_SrlX16	 2741
#define Mips_SrlvRxRy16	 2742
#define Mips_SubuRxRyRz16	 2743
#define Mips_SwRxRyOffMemX16	 2744
#define Mips_SwRxSpImmX16	 2745
#define Mips_TEQ	 2746
#define Mips_TEQI	 2747
#define Mips_TEQI_MM	 2748
#define Mips_TEQ_MM	 2749
#define Mips_TGE	 2750
#define Mips_TGEI	 2751
#define Mips_TGEIU	 2752
#define Mips_TGEIU_MM	 2753
#define Mips_TGEI_MM	 2754
#define Mips_TGEU	 2755
#define Mips_TGEU_MM	 2756
#define Mips_TGE_MM	 2757
#define Mips_TLBGINV	 2758
#define Mips_TLBGINVF	 2759
#define Mips_TLBGINVF_MM	 2760
#define Mips_TLBGINV_MM	 2761
#define Mips_TLBGP	 2762
#define Mips_TLBGP_MM	 2763
#define Mips_TLBGR	 2764
#define Mips_TLBGR_MM	 2765
#define Mips_TLBGWI	 2766
#define Mips_TLBGWI_MM	 2767
#define Mips_TLBGWR	 2768
#define Mips_TLBGWR_MM	 2769
#define Mips_TLBINV	 2770
#define Mips_TLBINVF	 2771
#define Mips_TLBINVF_MMR6	 2772
#define Mips_TLBINV_MMR6	 2773
#define Mips_TLBP	 2774
#define Mips_TLBP_MM	 2775
#define Mips_TLBR	 2776
#define Mips_TLBR_MM	 2777
#define Mips_TLBWI	 2778
#define Mips_TLBWI_MM	 2779
#define Mips_TLBWR	 2780
#define Mips_TLBWR_MM	 2781
#define Mips_TLT	 2782
#define Mips_TLTI	 2783
#define Mips_TLTIU_MM	 2784
#define Mips_TLTI_MM	 2785
#define Mips_TLTU	 2786
#define Mips_TLTU_MM	 2787
#define Mips_TLT_MM	 2788
#define Mips_TNE	 2789
#define Mips_TNEI	 2790
#define Mips_TNEI_MM	 2791
#define Mips_TNE_MM	 2792
#define Mips_TRUNC_L_D64	 2793
#define Mips_TRUNC_L_D_MMR6	 2794
#define Mips_TRUNC_L_S	 2795
#define Mips_TRUNC_L_S_MMR6	 2796
#define Mips_TRUNC_W_D32	 2797
#define Mips_TRUNC_W_D64	 2798
#define Mips_TRUNC_W_D_MMR6	 2799
#define Mips_TRUNC_W_MM	 2800
#define Mips_TRUNC_W_S	 2801
#define Mips_TRUNC_W_S_MM	 2802
#define Mips_TRUNC_W_S_MMR6	 2803
#define Mips_TTLTIU	 2804
#define Mips_UDIV	 2805
#define Mips_UDIV_MM	 2806
#define Mips_V3MULU	 2807
#define Mips_VMM0	 2808
#define Mips_VMULU	 2809
#define Mips_VSHF_B	 2810
#define Mips_VSHF_D	 2811
#define Mips_VSHF_H	 2812
#define Mips_VSHF_W	 2813
#define Mips_WAIT	 2814
#define Mips_WAIT_MM	 2815
#define Mips_WAIT_MMR6	 2816
#define Mips_WRDSP	 2817
#define Mips_WRDSP_MM	 2818
#define Mips_WRPGPR_MMR6	 2819
#define Mips_WSBH	 2820
#define Mips_WSBH_MM	 2821
#define Mips_WSBH_MMR6	 2822
#define Mips_XOR	 2823
#define Mips_XOR16_MM	 2824
#define Mips_XOR16_MMR6	 2825
#define Mips_XOR64	 2826
#define Mips_XORI_B	 2827
#define Mips_XORI_MMR6	 2828
#define Mips_XOR_MM	 2829
#define Mips_XOR_MMR6	 2830
#define Mips_XOR_V	 2831
#define Mips_XORi	 2832
#define Mips_XORi64	 2833
#define Mips_XORi_MM	 2834
#define Mips_XorRxRxRy16	 2835
#define Mips_YIELD	 2836
#endif // GET_INSTRINFO_ENUM

#ifdef GET_REGINFO_EXTRA
#undef GET_REGINFO_EXTRA

// Subregister indices

enum {
  NoSubRegister,
  Mips_sub_32,	// 1
    Mips_sub_64,	// 2
    Mips_sub_dsp16_19,	// 3
    Mips_sub_dsp20,	// 4
    Mips_sub_dsp21,	// 5
    Mips_sub_dsp22,	// 6
    Mips_sub_dsp23,	// 7
    Mips_sub_hi,	// 8
    Mips_sub_lo,	// 9
    Mips_sub_hi_then_sub_32,	// 10
    Mips_sub_32_sub_hi_then_sub_32,	// 11
  Mips_NUM_TARGET_SUBREGS
};
#endif // GET_REGINFO_EXTRA


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC



static const MCPhysReg MipsRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 4, 1, 1, 1, 1, 0,
  /* 8 */ 412, 65262, 1, 1, 1, 0,
  /* 14 */ 20, 1, 0,
  /* 17 */ 21, 1, 0,
  /* 20 */ 22, 1, 0,
  /* 23 */ 23, 1, 0,
  /* 26 */ 24, 1, 0,
  /* 29 */ 25, 1, 0,
  /* 32 */ 26, 1, 0,
  /* 35 */ 27, 1, 0,
  /* 38 */ 28, 1, 0,
  /* 41 */ 29, 1, 0,
  /* 44 */ 30, 1, 0,
  /* 47 */ 31, 1, 0,
  /* 50 */ 32, 1, 0,
  /* 53 */ 33, 1, 0,
  /* 56 */ 34, 1, 0,
  /* 59 */ 35, 1, 0,
  /* 62 */ 65415, 1, 0,
  /* 65 */ 65513, 1, 0,
  /* 68 */ 3, 0,
  /* 70 */ 4, 0,
  /* 72 */ 6, 0,
  /* 74 */ 11, 0,
  /* 76 */ 12, 0,
  /* 78 */ 22, 0,
  /* 80 */ 23, 0,
  /* 82 */ 29, 0,
  /* 84 */ 30, 0,
  /* 86 */ 65284, 72, 0,
  /* 89 */ 65322, 72, 0,
  /* 92 */ 38, 65298, 73, 0,
  /* 96 */ 95, 0,
  /* 98 */ 96, 0,
  /* 100 */ 130, 0,
  /* 102 */ 211, 0,
  /* 104 */ 243, 0,
  /* 106 */ 306, 0,
  /* 108 */ 314, 0,
  /* 110 */ 358, 0,
  /* 112 */ 64983, 0,
  /* 114 */ 65060, 0,
  /* 116 */ 65124, 0,
  /* 118 */ 65178, 0,
  /* 120 */ 65181, 0,
  /* 122 */ 65222, 0,
  /* 124 */ 65230, 0,
  /* 126 */ 65271, 0,
  /* 128 */ 65293, 0,
  /* 130 */ 37, 65406, 127, 65371, 65309, 0,
  /* 136 */ 65325, 0,
  /* 138 */ 65371, 0,
  /* 140 */ 65386, 0,
  /* 142 */ 65395, 0,
  /* 144 */ 65396, 0,
  /* 146 */ 65397, 0,
  /* 148 */ 65398, 0,
  /* 150 */ 65406, 0,
  /* 152 */ 65415, 0,
  /* 154 */ 65440, 0,
  /* 156 */ 65441, 0,
  /* 158 */ 165, 65498, 0,
  /* 161 */ 65516, 258, 65498, 0,
  /* 165 */ 65515, 259, 65498, 0,
  /* 169 */ 65514, 260, 65498, 0,
  /* 173 */ 65513, 261, 65498, 0,
  /* 177 */ 65512, 262, 65498, 0,
  /* 181 */ 65511, 263, 65498, 0,
  /* 185 */ 65510, 264, 65498, 0,
  /* 189 */ 65509, 265, 65498, 0,
  /* 193 */ 65508, 266, 65498, 0,
  /* 197 */ 65507, 267, 65498, 0,
  /* 201 */ 65506, 268, 65498, 0,
  /* 205 */ 65505, 269, 65498, 0,
  /* 209 */ 65504, 270, 65498, 0,
  /* 213 */ 65503, 271, 65498, 0,
  /* 217 */ 65502, 272, 65498, 0,
  /* 221 */ 65501, 273, 65498, 0,
  /* 225 */ 65500, 274, 65498, 0,
  /* 229 */ 65271, 395, 65499, 0,
  /* 233 */ 65309, 392, 65502, 0,
  /* 237 */ 65507, 0,
  /* 239 */ 65510, 0,
  /* 241 */ 65511, 0,
  /* 243 */ 65512, 0,
  /* 245 */ 65516, 0,
  /* 247 */ 65521, 0,
  /* 249 */ 65522, 0,
  /* 251 */ 65535, 0,
};

static const uint16_t MipsSubRegIdxLists[] = {
  /* 0 */ 1, 0,
  /* 2 */ 3, 4, 5, 6, 7, 0,
  /* 8 */ 2, 9, 8, 0,
  /* 12 */ 9, 1, 8, 10, 11, 0,
};


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
static const char MipsRegStrings[] = {
  /* 0 */ "COP00\0"
  /* 6 */ "COP010\0"
  /* 13 */ "COP210\0"
  /* 20 */ "COP310\0"
  /* 27 */ "MSA10\0"
  /* 33 */ "D10\0"
  /* 37 */ "F10\0"
  /* 41 */ "F_HI10\0"
  /* 48 */ "FCR10\0"
  /* 54 */ "HWR10\0"
  /* 60 */ "W10\0"
  /* 64 */ "COP020\0"
  /* 71 */ "COP220\0"
  /* 78 */ "COP320\0"
  /* 85 */ "MSA20\0"
  /* 91 */ "F20\0"
  /* 95 */ "F_HI20\0"
  /* 102 */ "COP20\0"
  /* 108 */ "FCR20\0"
  /* 114 */ "HWR20\0"
  /* 120 */ "W20\0"
  /* 124 */ "DSPOutFlag20\0"
  /* 137 */ "COP030\0"
  /* 144 */ "COP230\0"
  /* 151 */ "COP330\0"
  /* 158 */ "MSA30\0"
  /* 164 */ "F30\0"
  /* 168 */ "F_HI30\0"
  /* 175 */ "COP30\0"
  /* 181 */ "FCR30\0"
  /* 187 */ "HWR30\0"
  /* 193 */ "W30\0"
  /* 197 */ "A0\0"
  /* 200 */ "AC0\0"
  /* 204 */ "FCC0\0"
  /* 209 */ "D0\0"
  /* 212 */ "F0\0"
  /* 215 */ "F_HI0\0"
  /* 221 */ "K0\0"
  /* 224 */ "MPL0\0"
  /* 229 */ "LO0\0"
  /* 233 */ "P0\0"
  /* 236 */ "FCR0\0"
  /* 241 */ "HWR0\0"
  /* 246 */ "S0\0"
  /* 249 */ "T0\0"
  /* 252 */ "V0\0"
  /* 255 */ "W0\0"
  /* 258 */ "COP01\0"
  /* 264 */ "COP011\0"
  /* 271 */ "COP211\0"
  /* 278 */ "COP311\0"
  /* 285 */ "MSA11\0"
  /* 291 */ "D11\0"
  /* 295 */ "F11\0"
  /* 299 */ "F_HI11\0"
  /* 306 */ "FCR11\0"
  /* 312 */ "HWR11\0"
  /* 318 */ "W11\0"
  /* 322 */ "COP021\0"
  /* 329 */ "COP221\0"
  /* 336 */ "COP321\0"
  /* 343 */ "MSA21\0"
  /* 349 */ "F21\0"
  /* 353 */ "F_HI21\0"
  /* 360 */ "COP21\0"
  /* 366 */ "FCR21\0"
  /* 372 */ "HWR21\0"
  /* 378 */ "W21\0"
  /* 382 */ "DSPOutFlag21\0"
  /* 395 */ "COP031\0"
  /* 402 */ "COP231\0"
  /* 409 */ "COP331\0"
  /* 416 */ "MSA31\0"
  /* 422 */ "F31\0"
  /* 426 */ "F_HI31\0"
  /* 433 */ "COP31\0"
  /* 439 */ "FCR31\0"
  /* 445 */ "HWR31\0"
  /* 451 */ "W31\0"
  /* 455 */ "A1\0"
  /* 458 */ "AC1\0"
  /* 462 */ "FCC1\0"
  /* 467 */ "D1\0"
  /* 470 */ "F1\0"
  /* 473 */ "F_HI1\0"
  /* 479 */ "K1\0"
  /* 482 */ "MPL1\0"
  /* 487 */ "LO1\0"
  /* 491 */ "P1\0"
  /* 494 */ "FCR1\0"
  /* 499 */ "HWR1\0"
  /* 504 */ "S1\0"
  /* 507 */ "T1\0"
  /* 510 */ "V1\0"
  /* 513 */ "W1\0"
  /* 516 */ "COP02\0"
  /* 522 */ "COP012\0"
  /* 529 */ "COP212\0"
  /* 536 */ "COP312\0"
  /* 543 */ "MSA12\0"
  /* 549 */ "D12\0"
  /* 553 */ "F12\0"
  /* 557 */ "F_HI12\0"
  /* 564 */ "FCR12\0"
  /* 570 */ "HWR12\0"
  /* 576 */ "W12\0"
  /* 580 */ "COP022\0"
  /* 587 */ "COP222\0"
  /* 594 */ "COP322\0"
  /* 601 */ "MSA22\0"
  /* 607 */ "F22\0"
  /* 611 */ "F_HI22\0"
  /* 618 */ "COP22\0"
  /* 624 */ "FCR22\0"
  /* 630 */ "HWR22\0"
  /* 636 */ "W22\0"
  /* 640 */ "DSPOutFlag22\0"
  /* 653 */ "COP32\0"
  /* 659 */ "A2\0"
  /* 662 */ "AC2\0"
  /* 666 */ "FCC2\0"
  /* 671 */ "D2\0"
  /* 674 */ "F2\0"
  /* 677 */ "F_HI2\0"
  /* 683 */ "MPL2\0"
  /* 688 */ "LO2\0"
  /* 692 */ "P2\0"
  /* 695 */ "FCR2\0"
  /* 700 */ "HWR2\0"
  /* 705 */ "S2\0"
  /* 708 */ "T2\0"
  /* 711 */ "W2\0"
  /* 714 */ "COP03\0"
  /* 720 */ "COP013\0"
  /* 727 */ "COP213\0"
  /* 734 */ "COP313\0"
  /* 741 */ "MSA13\0"
  /* 747 */ "D13\0"
  /* 751 */ "F13\0"
  /* 755 */ "F_HI13\0"
  /* 762 */ "FCR13\0"
  /* 768 */ "HWR13\0"
  /* 774 */ "W13\0"
  /* 778 */ "COP023\0"
  /* 785 */ "COP223\0"
  /* 792 */ "COP323\0"
  /* 799 */ "MSA23\0"
  /* 805 */ "F23\0"
  /* 809 */ "F_HI23\0"
  /* 816 */ "COP23\0"
  /* 822 */ "FCR23\0"
  /* 828 */ "HWR23\0"
  /* 834 */ "W23\0"
  /* 838 */ "DSPOutFlag23\0"
  /* 851 */ "COP33\0"
  /* 857 */ "A3\0"
  /* 860 */ "AC3\0"
  /* 864 */ "FCC3\0"
  /* 869 */ "D3\0"
  /* 872 */ "F3\0"
  /* 875 */ "F_HI3\0"
  /* 881 */ "LO3\0"
  /* 885 */ "FCR3\0"
  /* 890 */ "HWR3\0"
  /* 895 */ "S3\0"
  /* 898 */ "T3\0"
  /* 901 */ "W3\0"
  /* 904 */ "COP04\0"
  /* 910 */ "COP014\0"
  /* 917 */ "COP214\0"
  /* 924 */ "COP314\0"
  /* 931 */ "MSA14\0"
  /* 937 */ "D14\0"
  /* 941 */ "F14\0"
  /* 945 */ "F_HI14\0"
  /* 952 */ "FCR14\0"
  /* 958 */ "HWR14\0"
  /* 964 */ "W14\0"
  /* 968 */ "COP024\0"
  /* 975 */ "COP224\0"
  /* 982 */ "COP324\0"
  /* 989 */ "MSA24\0"
  /* 995 */ "F24\0"
  /* 999 */ "F_HI24\0"
  /* 1006 */ "COP24\0"
  /* 1012 */ "FCR24\0"
  /* 1018 */ "HWR24\0"
  /* 1024 */ "W24\0"
  /* 1028 */ "COP34\0"
  /* 1034 */ "D10_64\0"
  /* 1041 */ "D20_64\0"
  /* 1048 */ "D30_64\0"
  /* 1055 */ "A0_64\0"
  /* 1061 */ "AC0_64\0"
  /* 1068 */ "D0_64\0"
  /* 1074 */ "HI0_64\0"
  /* 1081 */ "K0_64\0"
  /* 1087 */ "LO0_64\0"
  /* 1094 */ "S0_64\0"
  /* 1100 */ "T0_64\0"
  /* 1106 */ "V0_64\0"
  /* 1112 */ "D11_64\0"
  /* 1119 */ "D21_64\0"
  /* 1126 */ "D31_64\0"
  /* 1133 */ "A1_64\0"
  /* 1139 */ "D1_64\0"
  /* 1145 */ "K1_64\0"
  /* 1151 */ "S1_64\0"
  /* 1157 */ "T1_64\0"
  /* 1163 */ "V1_64\0"
  /* 1169 */ "D12_64\0"
  /* 1176 */ "D22_64\0"
  /* 1183 */ "A2_64\0"
  /* 1189 */ "D2_64\0"
  /* 1195 */ "S2_64\0"
  /* 1201 */ "T2_64\0"
  /* 1207 */ "D13_64\0"
  /* 1214 */ "D23_64\0"
  /* 1221 */ "A3_64\0"
  /* 1227 */ "D3_64\0"
  /* 1233 */ "S3_64\0"
  /* 1239 */ "T3_64\0"
  /* 1245 */ "D14_64\0"
  /* 1252 */ "D24_64\0"
  /* 1259 */ "D4_64\0"
  /* 1265 */ "S4_64\0"
  /* 1271 */ "T4_64\0"
  /* 1277 */ "D15_64\0"
  /* 1284 */ "D25_64\0"
  /* 1291 */ "D5_64\0"
  /* 1297 */ "S5_64\0"
  /* 1303 */ "T5_64\0"
  /* 1309 */ "D16_64\0"
  /* 1316 */ "D26_64\0"
  /* 1323 */ "D6_64\0"
  /* 1329 */ "S6_64\0"
  /* 1335 */ "T6_64\0"
  /* 1341 */ "D17_64\0"
  /* 1348 */ "D27_64\0"
  /* 1355 */ "D7_64\0"
  /* 1361 */ "S7_64\0"
  /* 1367 */ "T7_64\0"
  /* 1373 */ "D18_64\0"
  /* 1380 */ "D28_64\0"
  /* 1387 */ "D8_64\0"
  /* 1393 */ "T8_64\0"
  /* 1399 */ "D19_64\0"
  /* 1406 */ "D29_64\0"
  /* 1413 */ "D9_64\0"
  /* 1419 */ "T9_64\0"
  /* 1425 */ "RA_64\0"
  /* 1431 */ "ZERO_64\0"
  /* 1439 */ "FP_64\0"
  /* 1445 */ "GP_64\0"
  /* 1451 */ "SP_64\0"
  /* 1457 */ "AT_64\0"
  /* 1463 */ "FCC4\0"
  /* 1468 */ "D4\0"
  /* 1471 */ "F4\0"
  /* 1474 */ "F_HI4\0"
  /* 1480 */ "FCR4\0"
  /* 1485 */ "HWR4\0"
  /* 1490 */ "S4\0"
  /* 1493 */ "T4\0"
  /* 1496 */ "W4\0"
  /* 1499 */ "COP05\0"
  /* 1505 */ "COP015\0"
  /* 1512 */ "COP215\0"
  /* 1519 */ "COP315\0"
  /* 1526 */ "MSA15\0"
  /* 1532 */ "D15\0"
  /* 1536 */ "F15\0"
  /* 1540 */ "F_HI15\0"
  /* 1547 */ "FCR15\0"
  /* 1553 */ "HWR15\0"
  /* 1559 */ "W15\0"
  /* 1563 */ "COP025\0"
  /* 1570 */ "COP225\0"
  /* 1577 */ "COP325\0"
  /* 1584 */ "MSA25\0"
  /* 1590 */ "F25\0"
  /* 1594 */ "F_HI25\0"
  /* 1601 */ "COP25\0"
  /* 1607 */ "FCR25\0"
  /* 1613 */ "HWR25\0"
  /* 1619 */ "W25\0"
  /* 1623 */ "COP35\0"
  /* 1629 */ "FCC5\0"
  /* 1634 */ "D5\0"
  /* 1637 */ "F5\0"
  /* 1640 */ "F_HI5\0"
  /* 1646 */ "FCR5\0"
  /* 1651 */ "HWR5\0"
  /* 1656 */ "S5\0"
  /* 1659 */ "T5\0"
  /* 1662 */ "W5\0"
  /* 1665 */ "COP06\0"
  /* 1671 */ "COP016\0"
  /* 1678 */ "COP216\0"
  /* 1685 */ "COP316\0"
  /* 1692 */ "MSA16\0"
  /* 1698 */ "F16\0"
  /* 1702 */ "F_HI16\0"
  /* 1709 */ "FCR16\0"
  /* 1715 */ "HWR16\0"
  /* 1721 */ "W16\0"
  /* 1725 */ "COP026\0"
  /* 1732 */ "COP226\0"
  /* 1739 */ "COP326\0"
  /* 1746 */ "MSA26\0"
  /* 1752 */ "F26\0"
  /* 1756 */ "F_HI26\0"
  /* 1763 */ "COP26\0"
  /* 1769 */ "FCR26\0"
  /* 1775 */ "HWR26\0"
  /* 1781 */ "W26\0"
  /* 1785 */ "COP36\0"
  /* 1791 */ "FCC6\0"
  /* 1796 */ "D6\0"
  /* 1799 */ "F6\0"
  /* 1802 */ "F_HI6\0"
  /* 1808 */ "FCR6\0"
  /* 1813 */ "HWR6\0"
  /* 1818 */ "S6\0"
  /* 1821 */ "T6\0"
  /* 1824 */ "W6\0"
  /* 1827 */ "COP07\0"
  /* 1833 */ "COP017\0"
  /* 1840 */ "COP217\0"
  /* 1847 */ "COP317\0"
  /* 1854 */ "MSA17\0"
  /* 1860 */ "F17\0"
  /* 1864 */ "F_HI17\0"
  /* 1871 */ "FCR17\0"
  /* 1877 */ "HWR17\0"
  /* 1883 */ "W17\0"
  /* 1887 */ "COP027\0"
  /* 1894 */ "COP227\0"
  /* 1901 */ "COP327\0"
  /* 1908 */ "MSA27\0"
  /* 1914 */ "F27\0"
  /* 1918 */ "F_HI27\0"
  /* 1925 */ "COP27\0"
  /* 1931 */ "FCR27\0"
  /* 1937 */ "HWR27\0"
  /* 1943 */ "W27\0"
  /* 1947 */ "COP37\0"
  /* 1953 */ "FCC7\0"
  /* 1958 */ "D7\0"
  /* 1961 */ "F7\0"
  /* 1964 */ "F_HI7\0"
  /* 1970 */ "FCR7\0"
  /* 1975 */ "HWR7\0"
  /* 1980 */ "S7\0"
  /* 1983 */ "T7\0"
  /* 1986 */ "W7\0"
  /* 1989 */ "COP08\0"
  /* 1995 */ "COP018\0"
  /* 2002 */ "COP218\0"
  /* 2009 */ "COP318\0"
  /* 2016 */ "MSA18\0"
  /* 2022 */ "F18\0"
  /* 2026 */ "F_HI18\0"
  /* 2033 */ "FCR18\0"
  /* 2039 */ "HWR18\0"
  /* 2045 */ "W18\0"
  /* 2049 */ "COP028\0"
  /* 2056 */ "COP228\0"
  /* 2063 */ "COP328\0"
  /* 2070 */ "MSA28\0"
  /* 2076 */ "F28\0"
  /* 2080 */ "F_HI28\0"
  /* 2087 */ "COP28\0"
  /* 2093 */ "FCR28\0"
  /* 2099 */ "HWR28\0"
  /* 2105 */ "W28\0"
  /* 2109 */ "COP38\0"
  /* 2115 */ "MSA8\0"
  /* 2120 */ "D8\0"
  /* 2123 */ "F8\0"
  /* 2126 */ "F_HI8\0"
  /* 2132 */ "FCR8\0"
  /* 2137 */ "HWR8\0"
  /* 2142 */ "T8\0"
  /* 2145 */ "W8\0"
  /* 2148 */ "COP09\0"
  /* 2154 */ "COP019\0"
  /* 2161 */ "COP219\0"
  /* 2168 */ "COP319\0"
  /* 2175 */ "MSA19\0"
  /* 2181 */ "F19\0"
  /* 2185 */ "F_HI19\0"
  /* 2192 */ "FCR19\0"
  /* 2198 */ "HWR19\0"
  /* 2204 */ "W19\0"
  /* 2208 */ "DSPOutFlag16_19\0"
  /* 2224 */ "COP029\0"
  /* 2231 */ "COP229\0"
  /* 2238 */ "COP329\0"
  /* 2245 */ "MSA29\0"
  /* 2251 */ "F29\0"
  /* 2255 */ "F_HI29\0"
  /* 2262 */ "COP29\0"
  /* 2268 */ "FCR29\0"
  /* 2274 */ "HWR29\0"
  /* 2280 */ "W29\0"
  /* 2284 */ "COP39\0"
  /* 2290 */ "MSA9\0"
  /* 2295 */ "D9\0"
  /* 2298 */ "F9\0"
  /* 2301 */ "F_HI9\0"
  /* 2307 */ "FCR9\0"
  /* 2312 */ "HWR9\0"
  /* 2317 */ "T9\0"
  /* 2320 */ "W9\0"
  /* 2323 */ "RA\0"
  /* 2326 */ "PC\0"
  /* 2329 */ "DSPEFI\0"
  /* 2336 */ "ZERO\0"
  /* 2341 */ "FP\0"
  /* 2344 */ "GP\0"
  /* 2347 */ "SP\0"
  /* 2350 */ "MSAIR\0"
  /* 2356 */ "MSACSR\0"
  /* 2363 */ "AT\0"
  /* 2366 */ "DSPCCond\0"
  /* 2375 */ "MSASave\0"
  /* 2383 */ "DSPOutFlag\0"
  /* 2394 */ "MSAMap\0"
  /* 2401 */ "MSAUnmap\0"
  /* 2410 */ "DSPPos\0"
  /* 2417 */ "MSAAccess\0"
  /* 2427 */ "DSPSCount\0"
  /* 2437 */ "MSARequest\0"
  /* 2448 */ "MSAModify\0"
  /* 2458 */ "DSPCarry\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

static const MCRegisterDesc MipsRegDesc[] = { // Descriptors
  { 5, 0, 0, 0, 0, 0 },
  { 2363, 1, 82, 1, 4017, 4 },
  { 2366, 1, 1, 1, 4017, 4 },
  { 2458, 1, 1, 1, 4017, 4 },
  { 2329, 1, 1, 1, 4017, 4 },
  { 2383, 8, 1, 2, 32, 556 },
  { 2410, 1, 1, 1, 1089, 4 },
  { 2427, 1, 1, 1, 1089, 4 },
  { 2341, 1, 102, 1, 1089, 220 },
  { 2344, 1, 104, 1, 1089, 119 },
  { 2417, 1, 1, 1, 1089, 516 },
  { 2356, 1, 1, 1, 1089, 79 },
  { 2350, 1, 1, 1, 1089, 124 },
  { 2394, 1, 1, 1, 1089, 124 },
  { 2448, 1, 1, 1, 1089, 63 },
  { 2437, 1, 1, 1, 1089, 4 },
  { 2375, 1, 1, 1, 1089, 124 },
  { 2401, 1, 1, 1, 1089, 143 },
  { 2326, 1, 1, 1, 1089, 459 },
  { 2323, 1, 106, 1, 1089, 160 },
  { 2347, 1, 108, 1, 1089, 236 },
  { 2336, 1, 110, 1, 1089, 1 },
  { 197, 1, 110, 1, 1089, 143 },
  { 455, 1, 110, 1, 1089, 1 },
  { 659, 1, 110, 1, 1089, 119 },
  { 857, 1, 110, 1, 1089, 1 },
  { 200, 190, 110, 9, 1042, 0 },
  { 458, 190, 1, 9, 1042, 202 },
  { 662, 190, 1, 9, 1042, 209 },
  { 860, 190, 1, 9, 1042, 68 },
  { 1457, 237, 1, 0, 0, 1 },
  { 0, 1, 1, 1, 1153, 35 },
  { 258, 1, 1, 1, 1153, 361 },
  { 516, 1, 1, 1, 1153, 218 },
  { 714, 1, 1, 1, 1153, 357 },
  { 904, 1, 1, 1, 1153, 359 },
  { 1499, 1, 1, 1, 1153, 4 },
  { 1665, 1, 1, 1, 1153, 119 },
  { 1827, 1, 1, 1, 1153, 550 },
  { 1989, 1, 1, 1, 1153, 512 },
  { 2148, 1, 1, 1, 1153, 119 },
  { 102, 1, 1, 1, 1153, 377 },
  { 360, 1, 1, 1, 1153, 61 },
  { 618, 1, 1, 1, 1153, 381 },
  { 816, 1, 1, 1, 1153, 35 },
  { 1006, 1, 1, 1, 1153, 1 },
  { 1601, 1, 1, 1, 1153, 1 },
  { 1763, 1, 1, 1, 1153, 1 },
  { 1925, 1, 1, 1, 1153, 124 },
  { 2087, 1, 1, 1, 1153, 1 },
  { 2262, 1, 1, 1, 1153, 498 },
  { 175, 1, 1, 1, 1153, 1 },
  { 433, 1, 1, 1, 1153, 79 },
  { 653, 1, 1, 1, 1153, 351 },
  { 851, 1, 1, 1, 1153, 510 },
  { 1028, 1, 1, 1, 1153, 124 },
  { 1623, 1, 1, 1, 1153, 79 },
  { 1785, 1, 1, 1, 1153, 1 },
  { 1947, 1, 1, 1, 1153, 99 },
  { 2109, 1, 1, 1, 1153, 506 },
  { 2284, 1, 1, 1, 1153, 1 },
  { 6, 1, 1, 1, 1153, 508 },
  { 264, 1, 1, 1, 1153, 81 },
  { 522, 1, 1, 1, 1153, 139 },
  { 720, 1, 1, 1, 1153, 156 },
  { 910, 1, 1, 1, 1153, 124 },
  { 1505, 1, 1, 1, 1153, 119 },
  { 1671, 1, 1, 1, 1153, 305 },
  { 1833, 1, 1, 1, 1153, 496 },
  { 1995, 1, 1, 1, 1153, 1 },
  { 2154, 1, 1, 1, 1153, 124 },
  { 64, 1, 1, 1, 1153, 121 },
  { 322, 1, 1, 1, 1153, 119 },
  { 580, 1, 1, 1, 1153, 494 },
  { 778, 1, 1, 1, 1153, 26 },
  { 968, 1, 1, 1, 1153, 500 },
  { 1563, 1, 1, 1, 1153, 1 },
  { 1725, 1, 1, 1, 1153, 502 },
  { 1887, 1, 1, 1, 1153, 30 },
  { 2049, 1, 1, 1, 1153, 471 },
  { 2224, 1, 1, 1, 1153, 124 },
  { 137, 1, 1, 1, 1153, 473 },
  { 395, 1, 1, 1, 1153, 478 },
  { 13, 1, 1, 1, 1153, 480 },
  { 271, 1, 1, 1, 1153, 124 },
  { 529, 1, 1, 1, 1153, 79 },
  { 727, 1, 1, 1, 1153, 482 },
  { 917, 1, 1, 1, 1153, 66 },
  { 1512, 1, 1, 1, 1153, 30 },
  { 1678, 1, 1, 1, 1153, 4 },
  { 1840, 1, 1, 1, 1153, 14 },
  { 2002, 1, 1, 1, 1153, 32 },
  { 2161, 1, 1, 1, 1153, 124 },
  { 71, 1, 1, 1, 1153, 1 },
  { 329, 1, 1, 1, 1153, 465 },
  { 587, 1, 1, 1, 1153, 20 },
  { 785, 1, 1, 1, 1153, 467 },
  { 975, 1, 1, 1, 1153, 1 },
  { 1570, 1, 1, 1, 1153, 469 },
  { 1732, 1, 1, 1, 1153, 216 },
  { 1894, 1, 1, 1, 1153, 198 },
  { 2056, 1, 1, 1, 1153, 214 },
  { 2231, 1, 1, 1, 1153, 193 },
  { 144, 1, 1, 1, 1153, 1 },
  { 402, 1, 1, 1, 1153, 1 },
  { 20, 1, 1, 1, 1153, 1 },
  { 278, 1, 1, 1, 1153, 1 },
  { 536, 1, 1, 1, 1153, 222 },
  { 734, 1, 1, 1, 1153, 560 },
  { 924, 1, 1, 1, 1153, 560 },
  { 1519, 1, 1, 1, 1153, 560 },
  { 1685, 1, 1, 1, 1153, 560 },
  { 1847, 1, 1, 1, 1153, 560 },
  { 2009, 1, 1, 1, 1153, 560 },
  { 2168, 1, 1, 1, 1153, 560 },
  { 78, 1, 1, 1, 1153, 560 },
  { 336, 1, 1, 1, 1153, 20 },
  { 594, 1, 1, 1, 1153, 1 },
  { 792, 1, 1, 1, 1153, 514 },
  { 982, 1, 1, 1, 1153, 114 },
  { 1577, 1, 1, 1, 1153, 124 },
  { 1739, 1, 1, 1, 1153, 35 },
  { 1901, 1, 1, 1, 1153, 88 },
  { 2063, 1, 1, 1, 1153, 35 },
  { 2238, 1, 1, 1, 1153, 35 },
  { 151, 1, 1, 1, 1153, 1 },
  { 409, 1, 1, 1, 1153, 463 },
  { 209, 14, 1, 9, 994, 83 },
  { 467, 17, 1, 9, 994, 116 },
  { 671, 20, 1, 9, 994, 149 },
  { 869, 23, 1, 9, 994, 172 },
  { 1468, 26, 1, 9, 994, 175 },
  { 1634, 29, 1, 9, 994, 181 },
  { 1796, 32, 1, 9, 994, 184 },
  { 1958, 35, 1, 9, 994, 187 },
  { 2120, 38, 1, 9, 994, 190 },
  { 2295, 41, 1, 9, 994, 195 },
  { 33, 44, 1, 9, 994, 178 },
  { 291, 47, 1, 9, 994, 540 },
  { 549, 50, 1, 9, 994, 543 },
  { 747, 53, 1, 9, 994, 537 },
  { 937, 56, 1, 9, 994, 531 },
  { 1532, 59, 1, 9, 994, 534 },
  { 124, 1, 148, 1, 2369, 1 },
  { 382, 1, 146, 1, 2369, 486 },
  { 640, 1, 144, 1, 2369, 1 },
  { 838, 1, 142, 1, 2369, 124 },
  { 212, 1, 161, 1, 3985, 14 },
  { 470, 1, 165, 1, 3985, 119 },
  { 674, 1, 165, 1, 3985, 484 },
  { 872, 1, 169, 1, 3985, 20 },
  { 1471, 1, 169, 1, 3985, 488 },
  { 1637, 1, 173, 1, 3985, 1 },
  { 1799, 1, 173, 1, 3985, 490 },
  { 1961, 1, 177, 1, 3985, 101 },
  { 2123, 1, 177, 1, 3985, 119 },
  { 2298, 1, 181, 1, 3985, 124 },
  { 37, 1, 181, 1, 3985, 124 },
  { 295, 1, 185, 1, 3985, 119 },
  { 553, 1, 185, 1, 3985, 226 },
  { 751, 1, 189, 1, 3985, 35 },
  { 941, 1, 189, 1, 3985, 228 },
  { 1536, 1, 193, 1, 3985, 1 },
  { 1698, 1, 193, 1, 3985, 230 },
  { 1860, 1, 197, 1, 3985, 77 },
  { 2022, 1, 197, 1, 3985, 145 },
  { 2181, 1, 201, 1, 3985, 1 },
  { 91, 1, 201, 1, 3985, 347 },
  { 349, 1, 205, 1, 3985, 119 },
  { 607, 1, 205, 1, 3985, 124 },
  { 805, 1, 209, 1, 3985, 1 },
  { 995, 1, 209, 1, 3985, 232 },
  { 1590, 1, 213, 1, 3985, 79 },
  { 1752, 1, 213, 1, 3985, 529 },
  { 1914, 1, 217, 1, 3985, 238 },
  { 2076, 1, 217, 1, 3985, 135 },
  { 2251, 1, 221, 1, 3985, 141 },
  { 164, 1, 221, 1, 3985, 147 },
  { 422, 1, 225, 1, 3985, 152 },
  { 204, 1, 1, 1, 3985, 158 },
  { 462, 1, 1, 1, 3985, 170 },
  { 666, 1, 1, 1, 3985, 365 },
  { 864, 1, 1, 1, 3985, 371 },
  { 1463, 1, 1, 1, 3985, 373 },
  { 1629, 1, 1, 1, 3985, 367 },
  { 1791, 1, 1, 1, 3985, 363 },
  { 1953, 1, 1, 1, 3985, 1 },
  { 236, 1, 1, 1, 3985, 349 },
  { 494, 1, 1, 1, 3985, 12 },
  { 695, 1, 1, 1, 3985, 4 },
  { 885, 1, 1, 1, 3985, 24 },
  { 1480, 1, 1, 1, 3985, 375 },
  { 1646, 1, 1, 1, 3985, 1 },
  { 1808, 1, 1, 1, 3985, 492 },
  { 1970, 1, 1, 1, 3985, 529 },
  { 2132, 1, 1, 1, 3985, 216 },
  { 2307, 1, 1, 1, 3985, 212 },
  { 48, 1, 1, 1, 3985, 205 },
  { 306, 1, 1, 1, 3985, 560 },
  { 564, 1, 1, 1, 3985, 200 },
  { 762, 1, 1, 1, 3985, 207 },
  { 952, 1, 1, 1, 3985, 345 },
  { 1547, 1, 1, 1, 3985, 109 },
  { 1709, 1, 1, 1, 3985, 111 },
  { 1871, 1, 1, 1, 3985, 334 },
  { 2033, 1, 1, 1, 3985, 1 },
  { 2192, 1, 1, 1, 3985, 332 },
  { 108, 1, 1, 1, 3985, 388 },
  { 366, 1, 1, 1, 3985, 124 },
  { 624, 1, 1, 1, 3985, 124 },
  { 822, 1, 1, 1, 3985, 4 },
  { 1012, 1, 1, 1, 3985, 79 },
  { 1607, 1, 1, 1, 3985, 1 },
  { 1769, 1, 1, 1, 3985, 124 },
  { 1931, 1, 1, 1, 3985, 124 },
  { 2093, 1, 1, 1, 3985, 224 },
  { 2268, 1, 1, 1, 3985, 560 },
  { 181, 1, 1, 1, 3985, 379 },
  { 439, 1, 1, 1, 3985, 461 },
  { 1439, 136, 1, 0, 1184, 121 },
  { 215, 1, 158, 1, 3953, 240 },
  { 473, 1, 158, 1, 3953, 94 },
  { 677, 1, 158, 1, 3953, 234 },
  { 875, 1, 158, 1, 3953, 28 },
  { 1474, 1, 158, 1, 3953, 1 },
  { 1640, 1, 158, 1, 3953, 137 },
  { 1802, 1, 158, 1, 3953, 1 },
  { 1964, 1, 158, 1, 3953, 166 },
  { 2126, 1, 158, 1, 3953, 162 },
  { 2301, 1, 158, 1, 3953, 124 },
  { 41, 1, 158, 1, 3953, 154 },
  { 299, 1, 158, 1, 3953, 168 },
  { 557, 1, 158, 1, 3953, 1 },
  { 755, 1, 158, 1, 3953, 353 },
  { 945, 1, 158, 1, 3953, 244 },
  { 1540, 1, 158, 1, 3953, 1 },
  { 1702, 1, 158, 1, 3953, 18 },
  { 1864, 1, 158, 1, 3953, 1 },
  { 2026, 1, 158, 1, 3953, 246 },
  { 2185, 1, 158, 1, 3953, 529 },
  { 95, 1, 158, 1, 3953, 119 },
  { 353, 1, 158, 1, 3953, 252 },
  { 611, 1, 158, 1, 3953, 248 },
  { 809, 1, 158, 1, 3953, 4 },
  { 999, 1, 158, 1, 3953, 260 },
  { 1594, 1, 158, 1, 3953, 103 },
  { 1756, 1, 158, 1, 3953, 256 },
  { 1918, 1, 158, 1, 3953, 1 },
  { 2080, 1, 158, 1, 3953, 250 },
  { 2255, 1, 158, 1, 3953, 388 },
  { 168, 1, 158, 1, 3953, 124 },
  { 426, 1, 158, 1, 3953, 124 },
  { 1445, 128, 1, 0, 1216, 114 },
  { 217, 1, 233, 1, 1826, 79 },
  { 475, 1, 134, 1, 1826, 1 },
  { 679, 1, 134, 1, 1826, 107 },
  { 877, 1, 134, 1, 1826, 258 },
  { 241, 1, 1, 1, 3921, 124 },
  { 499, 1, 1, 1, 3921, 546 },
  { 700, 1, 1, 1, 3921, 552 },
  { 890, 1, 1, 1, 3921, 554 },
  { 1485, 1, 1, 1, 3921, 548 },
  { 1651, 1, 1, 1, 3921, 1 },
  { 1813, 1, 1, 1, 3921, 267 },
  { 1975, 1, 1, 1, 3921, 22 },
  { 2137, 1, 1, 1, 3921, 269 },
  { 2312, 1, 1, 1, 3921, 1 },
  { 54, 1, 1, 1, 3921, 274 },
  { 312, 1, 1, 1, 3921, 529 },
  { 570, 1, 1, 1, 3921, 119 },
  { 768, 1, 1, 1, 3921, 124 },
  { 958, 1, 1, 1, 3921, 121 },
  { 1553, 1, 1, 1, 3921, 1 },
  { 1715, 1, 1, 1, 3921, 386 },
  { 1877, 1, 1, 1, 3921, 90 },
  { 2039, 1, 1, 1, 3921, 262 },
  { 2198, 1, 1, 1, 3921, 529 },
  { 114, 1, 1, 1, 3921, 124 },
  { 372, 1, 1, 1, 3921, 283 },
  { 630, 1, 1, 1, 3921, 1 },
  { 828, 1, 1, 1, 3921, 278 },
  { 1018, 1, 1, 1, 3921, 35 },
  { 1613, 1, 1, 1, 3921, 1 },
  { 1775, 1, 1, 1, 3921, 86 },
  { 1937, 1, 1, 1, 3921, 1 },
  { 2099, 1, 1, 1, 3921, 529 },
  { 2274, 1, 1, 1, 3921, 289 },
  { 187, 1, 1, 1, 3921, 4 },
  { 445, 1, 1, 1, 3921, 287 },
  { 221, 1, 100, 1, 3921, 285 },
  { 479, 1, 100, 1, 3921, 1 },
  { 229, 1, 229, 1, 1794, 124 },
  { 487, 1, 126, 1, 1794, 92 },
  { 688, 1, 126, 1, 1794, 291 },
  { 881, 1, 126, 1, 1794, 121 },
  { 224, 1, 1, 1, 3889, 124 },
  { 482, 1, 1, 1, 3889, 1 },
  { 683, 1, 1, 1, 3889, 293 },
  { 2115, 1, 1, 1, 3889, 124 },
  { 2290, 1, 1, 1, 3889, 254 },
  { 27, 1, 1, 1, 3889, 79 },
  { 285, 1, 1, 1, 3889, 26 },
  { 543, 1, 1, 1, 3889, 119 },
  { 741, 1, 1, 1, 3889, 1 },
  { 931, 1, 1, 1, 3889, 1 },
  { 1526, 1, 1, 1, 3889, 388 },
  { 1692, 1, 1, 1, 3889, 529 },
  { 1854, 1, 1, 1, 3889, 124 },
  { 2016, 1, 1, 1, 3889, 124 },
  { 2175, 1, 1, 1, 3889, 242 },
  { 85, 1, 1, 1, 3889, 1 },
  { 343, 1, 1, 1, 3889, 295 },
  { 601, 1, 1, 1, 3889, 1 },
  { 799, 1, 1, 1, 3889, 299 },
  { 989, 1, 1, 1, 3889, 1 },
  { 1584, 1, 1, 1, 3889, 297 },
  { 1746, 1, 1, 1, 3889, 301 },
  { 1908, 1, 1, 1, 3889, 81 },
  { 2070, 1, 1, 1, 3889, 303 },
  { 2245, 1, 1, 1, 3889, 4 },
  { 158, 1, 1, 1, 3889, 504 },
  { 416, 1, 1, 1, 3889, 79 },
  { 233, 1, 1, 1, 3889, 309 },
  { 491, 1, 1, 1, 3889, 307 },
  { 692, 1, 1, 1, 3889, 164 },
  { 1425, 124, 1, 0, 1248, 114 },
  { 246, 1, 98, 1, 3857, 1 },
  { 504, 1, 98, 1, 3857, 4 },
  { 705, 1, 98, 1, 3857, 319 },
  { 895, 1, 98, 1, 3857, 1 },
  { 1490, 1, 98, 1, 3857, 313 },
  { 1656, 1, 98, 1, 3857, 1 },
  { 1818, 1, 98, 1, 3857, 317 },
  { 1980, 1, 98, 1, 3857, 1 },
  { 1451, 122, 1, 0, 1280, 311 },
  { 249, 1, 96, 1, 3825, 388 },
  { 507, 1, 96, 1, 3825, 124 },
  { 708, 1, 96, 1, 3825, 124 },
  { 898, 1, 96, 1, 3825, 114 },
  { 1493, 1, 96, 1, 3825, 79 },
  { 1659, 1, 96, 1, 3825, 321 },
  { 1821, 1, 96, 1, 3825, 105 },
  { 1983, 1, 96, 1, 3825, 315 },
  { 2142, 1, 96, 1, 3825, 1 },
  { 2317, 1, 96, 1, 3825, 311 },
  { 252, 1, 96, 1, 3825, 388 },
  { 510, 1, 96, 1, 3825, 124 },
  { 255, 92, 1, 8, 1425, 123 },
  { 513, 92, 1, 8, 1425, 329 },
  { 711, 92, 1, 8, 1425, 0 },
  { 901, 92, 1, 8, 1425, 393 },
  { 1496, 92, 1, 8, 1425, 390 },
  { 1662, 92, 1, 8, 1425, 396 },
  { 1824, 92, 1, 8, 1425, 399 },
  { 1986, 92, 1, 8, 1425, 129 },
  { 2145, 92, 1, 8, 1425, 404 },
  { 2320, 92, 1, 8, 1425, 123 },
  { 60, 92, 1, 8, 1425, 123 },
  { 318, 92, 1, 8, 1425, 6 },
  { 576, 92, 1, 8, 1425, 65 },
  { 774, 92, 1, 8, 1425, 0 },
  { 964, 92, 1, 8, 1425, 71 },
  { 1559, 92, 1, 8, 1425, 520 },
  { 1721, 92, 1, 8, 1425, 410 },
  { 1883, 92, 1, 8, 1425, 129 },
  { 2045, 92, 1, 8, 1425, 413 },
  { 2204, 92, 1, 8, 1425, 123 },
  { 120, 92, 1, 8, 1425, 123 },
  { 378, 92, 1, 8, 1425, 3 },
  { 636, 92, 1, 8, 1425, 65 },
  { 834, 92, 1, 8, 1425, 34 },
  { 1024, 92, 1, 8, 1425, 43 },
  { 1619, 92, 1, 8, 1425, 49 },
  { 1781, 92, 1, 8, 1425, 37 },
  { 1943, 92, 1, 8, 1425, 113 },
  { 2105, 92, 1, 8, 1425, 419 },
  { 2280, 92, 1, 8, 1425, 416 },
  { 193, 92, 1, 8, 1425, 96 },
  { 451, 92, 1, 8, 1425, 0 },
  { 1431, 118, 1, 0, 1921, 422 },
  { 1055, 118, 1, 0, 1921, 529 },
  { 1133, 118, 1, 0, 1921, 119 },
  { 1183, 118, 1, 0, 1921, 124 },
  { 1221, 118, 1, 0, 1921, 1 },
  { 1061, 130, 1, 12, 656, 424 },
  { 1068, 93, 159, 9, 1377, 383 },
  { 1139, 93, 159, 9, 1377, 475 },
  { 1189, 93, 159, 9, 1377, 323 },
  { 1227, 93, 159, 9, 1377, 336 },
  { 1259, 93, 159, 9, 1377, 339 },
  { 1291, 93, 159, 9, 1377, 342 },
  { 1323, 93, 159, 9, 1377, 280 },
  { 1355, 93, 159, 9, 1377, 526 },
  { 1387, 93, 159, 9, 1377, 271 },
  { 1413, 93, 159, 9, 1377, 326 },
  { 1034, 93, 159, 9, 1377, 407 },
  { 1112, 93, 159, 9, 1377, 264 },
  { 1169, 93, 159, 9, 1377, 427 },
  { 1207, 93, 159, 9, 1377, 123 },
  { 1245, 93, 159, 9, 1377, 123 },
  { 1277, 93, 159, 9, 1377, 9 },
  { 1309, 93, 159, 9, 1377, 65 },
  { 1341, 93, 159, 9, 1377, 430 },
  { 1373, 93, 159, 9, 1377, 74 },
  { 1399, 93, 159, 9, 1377, 523 },
  { 1041, 93, 159, 9, 1377, 433 },
  { 1119, 93, 159, 9, 1377, 132 },
  { 1176, 93, 159, 9, 1377, 436 },
  { 1214, 93, 159, 9, 1377, 126 },
  { 1252, 93, 159, 9, 1377, 58 },
  { 1284, 93, 159, 9, 1377, 55 },
  { 1316, 93, 159, 9, 1377, 40 },
  { 1348, 93, 159, 9, 1377, 52 },
  { 1380, 93, 159, 9, 1377, 46 },
  { 1406, 93, 159, 9, 1377, 113 },
  { 1048, 93, 159, 9, 1377, 442 },
  { 1126, 93, 159, 9, 1377, 439 },
  { 2208, 1, 116, 1, 1120, 445 },
  { 1074, 138, 235, 0, 1344, 1 },
  { 1081, 150, 1, 0, 2241, 447 },
  { 1145, 150, 1, 0, 2241, 529 },
  { 1087, 150, 231, 0, 1312, 114 },
  { 1094, 154, 1, 0, 2433, 124 },
  { 1151, 154, 1, 0, 2433, 121 },
  { 1195, 154, 1, 0, 2433, 1 },
  { 1233, 154, 1, 0, 2433, 449 },
  { 1265, 154, 1, 0, 2433, 32 },
  { 1297, 154, 1, 0, 2433, 1 },
  { 1329, 154, 1, 0, 2433, 1 },
  { 1361, 154, 1, 0, 2433, 355 },
  { 1100, 156, 1, 0, 2433, 518 },
  { 1157, 156, 1, 0, 2433, 369 },
  { 1201, 156, 1, 0, 2433, 276 },
  { 1239, 156, 1, 0, 2433, 402 },
  { 1271, 156, 1, 0, 2433, 451 },
  { 1303, 156, 1, 0, 2433, 451 },
  { 1335, 156, 1, 0, 2433, 453 },
  { 1367, 156, 1, 0, 2433, 1 },
  { 1393, 156, 1, 0, 2433, 455 },
  { 1419, 156, 1, 0, 2433, 16 },
  { 1106, 156, 1, 0, 2433, 457 },
  { 1163, 156, 1, 0, 2433, 1 },
};

  // MSA128F16 Register Class...
  static const MCPhysReg MSA128F16[] = {
    Mips_W0, Mips_W1, Mips_W2, Mips_W3, Mips_W4, Mips_W5, Mips_W6, Mips_W7, Mips_W8, Mips_W9, Mips_W10, Mips_W11, Mips_W12, Mips_W13, Mips_W14, Mips_W15, Mips_W16, Mips_W17, Mips_W18, Mips_W19, Mips_W20, Mips_W21, Mips_W22, Mips_W23, Mips_W24, Mips_W25, Mips_W26, Mips_W27, Mips_W28, Mips_W29, Mips_W30, Mips_W31, 
  };

  // MSA128F16 Bit set.
  static const uint8_t MSA128F16Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // CCR Register Class...
  static const MCPhysReg CCR[] = {
    Mips_FCR0, Mips_FCR1, Mips_FCR2, Mips_FCR3, Mips_FCR4, Mips_FCR5, Mips_FCR6, Mips_FCR7, Mips_FCR8, Mips_FCR9, Mips_FCR10, Mips_FCR11, Mips_FCR12, Mips_FCR13, Mips_FCR14, Mips_FCR15, Mips_FCR16, Mips_FCR17, Mips_FCR18, Mips_FCR19, Mips_FCR20, Mips_FCR21, Mips_FCR22, Mips_FCR23, Mips_FCR24, Mips_FCR25, Mips_FCR26, Mips_FCR27, Mips_FCR28, Mips_FCR29, Mips_FCR30, Mips_FCR31, 
  };

  // CCR Bit set.
  static const uint8_t CCRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // COP0 Register Class...
  static const MCPhysReg COP0[] = {
    Mips_COP00, Mips_COP01, Mips_COP02, Mips_COP03, Mips_COP04, Mips_COP05, Mips_COP06, Mips_COP07, Mips_COP08, Mips_COP09, Mips_COP010, Mips_COP011, Mips_COP012, Mips_COP013, Mips_COP014, Mips_COP015, Mips_COP016, Mips_COP017, Mips_COP018, Mips_COP019, Mips_COP020, Mips_COP021, Mips_COP022, Mips_COP023, Mips_COP024, Mips_COP025, Mips_COP026, Mips_COP027, Mips_COP028, Mips_COP029, Mips_COP030, Mips_COP031, 
  };

  // COP0 Bit set.
  static const uint8_t COP0Bits[] = {
    0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0xe0, 0xff, 0xff, 0x07, 
  };

  // COP2 Register Class...
  static const MCPhysReg COP2[] = {
    Mips_COP20, Mips_COP21, Mips_COP22, Mips_COP23, Mips_COP24, Mips_COP25, Mips_COP26, Mips_COP27, Mips_COP28, Mips_COP29, Mips_COP210, Mips_COP211, Mips_COP212, Mips_COP213, Mips_COP214, Mips_COP215, Mips_COP216, Mips_COP217, Mips_COP218, Mips_COP219, Mips_COP220, Mips_COP221, Mips_COP222, Mips_COP223, Mips_COP224, Mips_COP225, Mips_COP226, Mips_COP227, Mips_COP228, Mips_COP229, Mips_COP230, Mips_COP231, 
  };

  // COP2 Bit set.
  static const uint8_t COP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x01, 
  };

  // COP3 Register Class...
  static const MCPhysReg COP3[] = {
    Mips_COP30, Mips_COP31, Mips_COP32, Mips_COP33, Mips_COP34, Mips_COP35, Mips_COP36, Mips_COP37, Mips_COP38, Mips_COP39, Mips_COP310, Mips_COP311, Mips_COP312, Mips_COP313, Mips_COP314, Mips_COP315, Mips_COP316, Mips_COP317, Mips_COP318, Mips_COP319, Mips_COP320, Mips_COP321, Mips_COP322, Mips_COP323, Mips_COP324, Mips_COP325, Mips_COP326, Mips_COP327, Mips_COP328, Mips_COP329, Mips_COP330, Mips_COP331, 
  };

  // COP3 Bit set.
  static const uint8_t COP3Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 
  };

  // DSPR Register Class...
  static const MCPhysReg DSPR[] = {
    Mips_ZERO, Mips_AT, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, Mips_T0, Mips_T1, Mips_T2, Mips_T3, Mips_T4, Mips_T5, Mips_T6, Mips_T7, Mips_S0, Mips_S1, Mips_S2, Mips_S3, Mips_S4, Mips_S5, Mips_S6, Mips_S7, Mips_T8, Mips_T9, Mips_K0, Mips_K1, Mips_GP, Mips_SP, Mips_FP, Mips_RA, 
  };

  // DSPR Bit set.
  static const uint8_t DSPRBits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xbf, 0xff, 0x07, 
  };

  // FGR32 Register Class...
  static const MCPhysReg FGR32[] = {
    Mips_F0, Mips_F1, Mips_F2, Mips_F3, Mips_F4, Mips_F5, Mips_F6, Mips_F7, Mips_F8, Mips_F9, Mips_F10, Mips_F11, Mips_F12, Mips_F13, Mips_F14, Mips_F15, Mips_F16, Mips_F17, Mips_F18, Mips_F19, Mips_F20, Mips_F21, Mips_F22, Mips_F23, Mips_F24, Mips_F25, Mips_F26, Mips_F27, Mips_F28, Mips_F29, Mips_F30, Mips_F31, 
  };

  // FGR32 Bit set.
  static const uint8_t FGR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // FGRCC Register Class...
  static const MCPhysReg FGRCC[] = {
    Mips_F0, Mips_F1, Mips_F2, Mips_F3, Mips_F4, Mips_F5, Mips_F6, Mips_F7, Mips_F8, Mips_F9, Mips_F10, Mips_F11, Mips_F12, Mips_F13, Mips_F14, Mips_F15, Mips_F16, Mips_F17, Mips_F18, Mips_F19, Mips_F20, Mips_F21, Mips_F22, Mips_F23, Mips_F24, Mips_F25, Mips_F26, Mips_F27, Mips_F28, Mips_F29, Mips_F30, Mips_F31, 
  };

  // FGRCC Bit set.
  static const uint8_t FGRCCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // GPR32 Register Class...
  static const MCPhysReg GPR32[] = {
    Mips_ZERO, Mips_AT, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, Mips_T0, Mips_T1, Mips_T2, Mips_T3, Mips_T4, Mips_T5, Mips_T6, Mips_T7, Mips_S0, Mips_S1, Mips_S2, Mips_S3, Mips_S4, Mips_S5, Mips_S6, Mips_S7, Mips_T8, Mips_T9, Mips_K0, Mips_K1, Mips_GP, Mips_SP, Mips_FP, Mips_RA, 
  };

  // GPR32 Bit set.
  static const uint8_t GPR32Bits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xbf, 0xff, 0x07, 
  };

  // HWRegs Register Class...
  static const MCPhysReg HWRegs[] = {
    Mips_HWR0, Mips_HWR1, Mips_HWR2, Mips_HWR3, Mips_HWR4, Mips_HWR5, Mips_HWR6, Mips_HWR7, Mips_HWR8, Mips_HWR9, Mips_HWR10, Mips_HWR11, Mips_HWR12, Mips_HWR13, Mips_HWR14, Mips_HWR15, Mips_HWR16, Mips_HWR17, Mips_HWR18, Mips_HWR19, Mips_HWR20, Mips_HWR21, Mips_HWR22, Mips_HWR23, Mips_HWR24, Mips_HWR25, Mips_HWR26, Mips_HWR27, Mips_HWR28, Mips_HWR29, Mips_HWR30, Mips_HWR31, 
  };

  // HWRegs Bit set.
  static const uint8_t HWRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // MSACtrl Register Class...
  static const MCPhysReg MSACtrl[] = {
    Mips_MSAIR, Mips_MSACSR, Mips_MSAAccess, Mips_MSASave, Mips_MSAModify, Mips_MSARequest, Mips_MSAMap, Mips_MSAUnmap, Mips_MSA8, Mips_MSA9, Mips_MSA10, Mips_MSA11, Mips_MSA12, Mips_MSA13, Mips_MSA14, Mips_MSA15, Mips_MSA16, Mips_MSA17, Mips_MSA18, Mips_MSA19, Mips_MSA20, Mips_MSA21, Mips_MSA22, Mips_MSA23, Mips_MSA24, Mips_MSA25, Mips_MSA26, Mips_MSA27, Mips_MSA28, Mips_MSA29, Mips_MSA30, Mips_MSA31, 
  };

  // MSACtrl Bit set.
  static const uint8_t MSACtrlBits[] = {
    0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x03, 
  };

  // GPR32NONZERO Register Class...
  static const MCPhysReg GPR32NONZERO[] = {
    Mips_AT, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, Mips_T0, Mips_T1, Mips_T2, Mips_T3, Mips_T4, Mips_T5, Mips_T6, Mips_T7, Mips_S0, Mips_S1, Mips_S2, Mips_S3, Mips_S4, Mips_S5, Mips_S6, Mips_S7, Mips_T8, Mips_T9, Mips_K0, Mips_K1, Mips_GP, Mips_SP, Mips_FP, Mips_RA, 
  };

  // GPR32NONZERO Bit set.
  static const uint8_t GPR32NONZEROBits[] = {
    0x02, 0x03, 0xd8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc0, 0xbf, 0xff, 0x07, 
  };

  // CPU16RegsPlusSP Register Class...
  static const MCPhysReg CPU16RegsPlusSP[] = {
    Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, Mips_S0, Mips_S1, Mips_SP, 
  };

  // CPU16RegsPlusSP Bit set.
  static const uint8_t CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // CPU16Regs Register Class...
  static const MCPhysReg CPU16Regs[] = {
    Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, Mips_S0, Mips_S1, 
  };

  // CPU16Regs Bit set.
  static const uint8_t CPU16RegsBits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // FCC Register Class...
  static const MCPhysReg FCC[] = {
    Mips_FCC0, Mips_FCC1, Mips_FCC2, Mips_FCC3, Mips_FCC4, Mips_FCC5, Mips_FCC6, Mips_FCC7, 
  };

  // FCC Bit set.
  static const uint8_t FCCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // GPRMM16 Register Class...
  static const MCPhysReg GPRMM16[] = {
    Mips_S0, Mips_S1, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, 
  };

  // GPRMM16 Bit set.
  static const uint8_t GPRMM16Bits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // GPRMM16MoveP Register Class...
  static const MCPhysReg GPRMM16MoveP[] = {
    Mips_ZERO, Mips_S1, Mips_V0, Mips_V1, Mips_S0, Mips_S2, Mips_S3, Mips_S4, 
  };

  // GPRMM16MoveP Bit set.
  static const uint8_t GPRMM16MovePBits[] = {
    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x06, 
  };

  // GPRMM16Zero Register Class...
  static const MCPhysReg GPRMM16Zero[] = {
    Mips_ZERO, Mips_S1, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, 
  };

  // GPRMM16Zero Bit set.
  static const uint8_t GPRMM16ZeroBits[] = {
    0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06, 
  };

  // CPU16Regs_and_GPRMM16Zero Register Class...
  static const MCPhysReg CPU16Regs_and_GPRMM16Zero[] = {
    Mips_S1, Mips_V0, Mips_V1, Mips_A0, Mips_A1, Mips_A2, Mips_A3, 
  };

  // CPU16Regs_and_GPRMM16Zero Bit set.
  static const uint8_t CPU16Regs_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06, 
  };

  // GPR32NONZERO_and_GPRMM16MoveP Register Class...
  static const MCPhysReg GPR32NONZERO_and_GPRMM16MoveP[] = {
    Mips_S1, Mips_V0, Mips_V1, Mips_S0, Mips_S2, Mips_S3, Mips_S4, 
  };

  // GPR32NONZERO_and_GPRMM16MoveP Bit set.
  static const uint8_t GPR32NONZERO_and_GPRMM16MovePBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x06, 
  };

  // GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg GPRMM16MovePPairSecond[] = {
    Mips_A1, Mips_A2, Mips_A3, Mips_S5, Mips_S6, 
  };

  // GPRMM16MovePPairSecond Bit set.
  static const uint8_t GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  };

  // CPU16Regs_and_GPRMM16MoveP Register Class...
  static const MCPhysReg CPU16Regs_and_GPRMM16MoveP[] = {
    Mips_S1, Mips_V0, Mips_V1, Mips_S0, 
  };

  // CPU16Regs_and_GPRMM16MoveP Bit set.
  static const uint8_t CPU16Regs_and_GPRMM16MovePBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // GPRMM16MoveP_and_GPRMM16Zero Register Class...
  static const MCPhysReg GPRMM16MoveP_and_GPRMM16Zero[] = {
    Mips_ZERO, Mips_S1, Mips_V0, Mips_V1, 
  };

  // GPRMM16MoveP_and_GPRMM16Zero Bit set.
  static const uint8_t GPRMM16MoveP_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06, 
  };

  // HI32DSP Register Class...
  static const MCPhysReg HI32DSP[] = {
    Mips_HI0, Mips_HI1, Mips_HI2, Mips_HI3, 
  };

  // HI32DSP Bit set.
  static const uint8_t HI32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // LO32DSP Register Class...
  static const MCPhysReg LO32DSP[] = {
    Mips_LO0, Mips_LO1, Mips_LO2, Mips_LO3, 
  };

  // LO32DSP Bit set.
  static const uint8_t LO32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  };

  // CPU16Regs_and_GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg CPU16Regs_and_GPRMM16MovePPairSecond[] = {
    Mips_A1, Mips_A2, Mips_A3, 
  };

  // CPU16Regs_and_GPRMM16MovePPairSecond Bit set.
  static const uint8_t CPU16Regs_and_GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x80, 0x03, 
  };

  // GPRMM16MovePPairFirst Register Class...
  static const MCPhysReg GPRMM16MovePPairFirst[] = {
    Mips_A0, Mips_A1, Mips_A2, 
  };

  // GPRMM16MovePPairFirst Bit set.
  static const uint8_t GPRMM16MovePPairFirstBits[] = {
    0x00, 0x00, 0xc0, 0x01, 
  };

  // GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero Register Class...
  static const MCPhysReg GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero[] = {
    Mips_S1, Mips_V0, Mips_V1, 
  };

  // GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero Bit set.
  static const uint8_t GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06, 
  };

  // GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond[] = {
    Mips_A1, Mips_A2, 
  };

  // GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond Bit set.
  static const uint8_t GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x80, 0x01, 
  };

  // CPURAReg Register Class...
  static const MCPhysReg CPURAReg[] = {
    Mips_RA, 
  };

  // CPURAReg Bit set.
  static const uint8_t CPURARegBits[] = {
    0x00, 0x00, 0x08, 
  };

  // CPUSPReg Register Class...
  static const MCPhysReg CPUSPReg[] = {
    Mips_SP, 
  };

  // CPUSPReg Bit set.
  static const uint8_t CPUSPRegBits[] = {
    0x00, 0x00, 0x10, 
  };

  // DSPCC Register Class...
  static const MCPhysReg DSPCC[] = {
    Mips_DSPCCond, 
  };

  // DSPCC Bit set.
  static const uint8_t DSPCCBits[] = {
    0x04, 
  };

  // GP32 Register Class...
  static const MCPhysReg GP32[] = {
    Mips_GP, 
  };

  // GP32 Bit set.
  static const uint8_t GP32Bits[] = {
    0x00, 0x02, 
  };

  // GPR32ZERO Register Class...
  static const MCPhysReg GPR32ZERO[] = {
    Mips_ZERO, 
  };

  // GPR32ZERO Bit set.
  static const uint8_t GPR32ZEROBits[] = {
    0x00, 0x00, 0x20, 
  };

  // HI32 Register Class...
  static const MCPhysReg HI32[] = {
    Mips_HI0, 
  };

  // HI32 Bit set.
  static const uint8_t HI32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // LO32 Register Class...
  static const MCPhysReg LO32[] = {
    Mips_LO0, 
  };

  // LO32 Bit set.
  static const uint8_t LO32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

  // SP32 Register Class...
  static const MCPhysReg SP32[] = {
    Mips_SP, 
  };

  // SP32 Bit set.
  static const uint8_t SP32Bits[] = {
    0x00, 0x00, 0x10, 
  };

  // FGR64 Register Class...
  static const MCPhysReg FGR64[] = {
    Mips_D0_64, Mips_D1_64, Mips_D2_64, Mips_D3_64, Mips_D4_64, Mips_D5_64, Mips_D6_64, Mips_D7_64, Mips_D8_64, Mips_D9_64, Mips_D10_64, Mips_D11_64, Mips_D12_64, Mips_D13_64, Mips_D14_64, Mips_D15_64, Mips_D16_64, Mips_D17_64, Mips_D18_64, Mips_D19_64, Mips_D20_64, Mips_D21_64, Mips_D22_64, Mips_D23_64, Mips_D24_64, Mips_D25_64, Mips_D26_64, Mips_D27_64, Mips_D28_64, Mips_D29_64, Mips_D30_64, Mips_D31_64, 
  };

  // FGR64 Bit set.
  static const uint8_t FGR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // GPR64 Register Class...
  static const MCPhysReg GPR64[] = {
    Mips_ZERO_64, Mips_AT_64, Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_T0_64, Mips_T1_64, Mips_T2_64, Mips_T3_64, Mips_T4_64, Mips_T5_64, Mips_T6_64, Mips_T7_64, Mips_S0_64, Mips_S1_64, Mips_S2_64, Mips_S3_64, Mips_S4_64, Mips_S5_64, Mips_S6_64, Mips_S7_64, Mips_T8_64, Mips_T9_64, Mips_K0_64, Mips_K1_64, Mips_GP_64, Mips_SP_64, Mips_FP_64, Mips_RA_64, 
  };

  // GPR64 Bit set.
  static const uint8_t GPR64Bits[] = {
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0x03, 
  };

  // GPR64_with_sub_32_in_GPR32NONZERO Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPR32NONZERO[] = {
    Mips_AT_64, Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_T0_64, Mips_T1_64, Mips_T2_64, Mips_T3_64, Mips_T4_64, Mips_T5_64, Mips_T6_64, Mips_T7_64, Mips_S0_64, Mips_S1_64, Mips_S2_64, Mips_S3_64, Mips_S4_64, Mips_S5_64, Mips_S6_64, Mips_S7_64, Mips_T8_64, Mips_T9_64, Mips_K0_64, Mips_K1_64, Mips_GP_64, Mips_SP_64, Mips_FP_64, Mips_RA_64, 
  };

  // GPR64_with_sub_32_in_GPR32NONZERO Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPR32NONZEROBits[] = {
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0x03, 
  };

  // AFGR64 Register Class...
  static const MCPhysReg AFGR64[] = {
    Mips_D0, Mips_D1, Mips_D2, Mips_D3, Mips_D4, Mips_D5, Mips_D6, Mips_D7, Mips_D8, Mips_D9, Mips_D10, Mips_D11, Mips_D12, Mips_D13, Mips_D14, Mips_D15, 
  };

  // AFGR64 Bit set.
  static const uint8_t AFGR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPU16RegsPlusSP[] = {
    Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_S0_64, Mips_S1_64, Mips_SP_64, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPU16Regs[] = {
    Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_S0_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPU16RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MoveP[] = {
    Mips_ZERO_64, Mips_V0_64, Mips_V1_64, Mips_S0_64, Mips_S1_64, Mips_S2_64, Mips_S3_64, Mips_S4_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MovePBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_GPRMM16Zero Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16Zero[] = {
    Mips_ZERO_64, Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16Zero Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16Zero Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16Zero[] = {
    Mips_V0_64, Mips_V1_64, Mips_A0_64, Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16Zero Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MoveP Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MoveP[] = {
    Mips_V0_64, Mips_V1_64, Mips_S0_64, Mips_S1_64, Mips_S2_64, Mips_S3_64, Mips_S4_64, 
  };

  // GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MoveP Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MovePBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MovePPairSecond[] = {
    Mips_A1_64, Mips_A2_64, Mips_A3_64, Mips_S5_64, Mips_S6_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairSecond Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  };

  // ACC64DSP Register Class...
  static const MCPhysReg ACC64DSP[] = {
    Mips_AC0, Mips_AC1, Mips_AC2, Mips_AC3, 
  };

  // ACC64DSP Bit set.
  static const uint8_t ACC64DSPBits[] = {
    0x00, 0x00, 0x00, 0x3c, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MoveP Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MoveP[] = {
    Mips_V0_64, Mips_V1_64, Mips_S0_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MoveP Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16Zero Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16Zero[] = {
    Mips_ZERO_64, Mips_V0_64, Mips_V1_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16Zero Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecond[] = {
    Mips_A1_64, Mips_A2_64, Mips_A3_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecond Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairFirst Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MovePPairFirst[] = {
    Mips_A0_64, Mips_A1_64, Mips_A2_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairFirst Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MovePPairFirstBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero[] = {
    Mips_V0_64, Mips_V1_64, Mips_S1_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 
  };

  // OCTEON_MPL Register Class...
  static const MCPhysReg OCTEON_MPL[] = {
    Mips_MPL0, Mips_MPL1, Mips_MPL2, 
  };

  // OCTEON_MPL Bit set.
  static const uint8_t OCTEON_MPLBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

  // OCTEON_P Register Class...
  static const MCPhysReg OCTEON_P[] = {
    Mips_P0, Mips_P1, Mips_P2, 
  };

  // OCTEON_P Bit set.
  static const uint8_t OCTEON_PBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond[] = {
    Mips_A1_64, Mips_A2_64, 
  };

  // GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
  };

  // ACC64 Register Class...
  static const MCPhysReg ACC64[] = {
    Mips_AC0, 
  };

  // ACC64 Bit set.
  static const uint8_t ACC64Bits[] = {
    0x00, 0x00, 0x00, 0x04, 
  };

  // GP64 Register Class...
  static const MCPhysReg GP64[] = {
    Mips_GP_64, 
  };

  // GP64 Bit set.
  static const uint8_t GP64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // GPR64_with_sub_32_in_CPURAReg Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_CPURAReg[] = {
    Mips_RA_64, 
  };

  // GPR64_with_sub_32_in_CPURAReg Bit set.
  static const uint8_t GPR64_with_sub_32_in_CPURARegBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // GPR64_with_sub_32_in_GPR32ZERO Register Class...
  static const MCPhysReg GPR64_with_sub_32_in_GPR32ZERO[] = {
    Mips_ZERO_64, 
  };

  // GPR64_with_sub_32_in_GPR32ZERO Bit set.
  static const uint8_t GPR64_with_sub_32_in_GPR32ZEROBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

  // HI64 Register Class...
  static const MCPhysReg HI64[] = {
    Mips_HI0_64, 
  };

  // HI64 Bit set.
  static const uint8_t HI64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };

  // LO64 Register Class...
  static const MCPhysReg LO64[] = {
    Mips_LO0_64, 
  };

  // LO64 Bit set.
  static const uint8_t LO64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // SP64 Register Class...
  static const MCPhysReg SP64[] = {
    Mips_SP_64, 
  };

  // SP64 Bit set.
  static const uint8_t SP64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // MSA128B Register Class...
  static const MCPhysReg MSA128B[] = {
    Mips_W0, Mips_W1, Mips_W2, Mips_W3, Mips_W4, Mips_W5, Mips_W6, Mips_W7, Mips_W8, Mips_W9, Mips_W10, Mips_W11, Mips_W12, Mips_W13, Mips_W14, Mips_W15, Mips_W16, Mips_W17, Mips_W18, Mips_W19, Mips_W20, Mips_W21, Mips_W22, Mips_W23, Mips_W24, Mips_W25, Mips_W26, Mips_W27, Mips_W28, Mips_W29, Mips_W30, Mips_W31, 
  };

  // MSA128B Bit set.
  static const uint8_t MSA128BBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128D Register Class...
  static const MCPhysReg MSA128D[] = {
    Mips_W0, Mips_W1, Mips_W2, Mips_W3, Mips_W4, Mips_W5, Mips_W6, Mips_W7, Mips_W8, Mips_W9, Mips_W10, Mips_W11, Mips_W12, Mips_W13, Mips_W14, Mips_W15, Mips_W16, Mips_W17, Mips_W18, Mips_W19, Mips_W20, Mips_W21, Mips_W22, Mips_W23, Mips_W24, Mips_W25, Mips_W26, Mips_W27, Mips_W28, Mips_W29, Mips_W30, Mips_W31, 
  };

  // MSA128D Bit set.
  static const uint8_t MSA128DBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128H Register Class...
  static const MCPhysReg MSA128H[] = {
    Mips_W0, Mips_W1, Mips_W2, Mips_W3, Mips_W4, Mips_W5, Mips_W6, Mips_W7, Mips_W8, Mips_W9, Mips_W10, Mips_W11, Mips_W12, Mips_W13, Mips_W14, Mips_W15, Mips_W16, Mips_W17, Mips_W18, Mips_W19, Mips_W20, Mips_W21, Mips_W22, Mips_W23, Mips_W24, Mips_W25, Mips_W26, Mips_W27, Mips_W28, Mips_W29, Mips_W30, Mips_W31, 
  };

  // MSA128H Bit set.
  static const uint8_t MSA128HBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128W Register Class...
  static const MCPhysReg MSA128W[] = {
    Mips_W0, Mips_W1, Mips_W2, Mips_W3, Mips_W4, Mips_W5, Mips_W6, Mips_W7, Mips_W8, Mips_W9, Mips_W10, Mips_W11, Mips_W12, Mips_W13, Mips_W14, Mips_W15, Mips_W16, Mips_W17, Mips_W18, Mips_W19, Mips_W20, Mips_W21, Mips_W22, Mips_W23, Mips_W24, Mips_W25, Mips_W26, Mips_W27, Mips_W28, Mips_W29, Mips_W30, Mips_W31, 
  };

  // MSA128W Bit set.
  static const uint8_t MSA128WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128WEvens Register Class...
  static const MCPhysReg MSA128WEvens[] = {
    Mips_W0, Mips_W2, Mips_W4, Mips_W6, Mips_W8, Mips_W10, Mips_W12, Mips_W14, Mips_W16, Mips_W18, Mips_W20, Mips_W22, Mips_W24, Mips_W26, Mips_W28, Mips_W30, 
  };

  // MSA128WEvens Bit set.
  static const uint8_t MSA128WEvensBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xaa, 0xaa, 0xaa, 0x02, 
  };

  // ACC128 Register Class...
  static const MCPhysReg ACC128[] = {
    Mips_AC0_64, 
  };

  // ACC128 Bit set.
  static const uint8_t ACC128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

// end of register classes misc


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
static const char MipsRegClassStrings[] = {
  /* 0 */ "COP0\0"
  /* 5 */ "HI32\0"
  /* 10 */ "LO32\0"
  /* 15 */ "GP32\0"
  /* 20 */ "SP32\0"
  /* 25 */ "FGR32\0"
  /* 31 */ "GPR32\0"
  /* 37 */ "COP2\0"
  /* 42 */ "COP3\0"
  /* 47 */ "ACC64\0"
  /* 53 */ "HI64\0"
  /* 58 */ "LO64\0"
  /* 63 */ "GP64\0"
  /* 68 */ "SP64\0"
  /* 73 */ "AFGR64\0"
  /* 80 */ "GPR64\0"
  /* 86 */ "MSA128F16\0"
  /* 96 */ "GPRMM16\0"
  /* 104 */ "ACC128\0"
  /* 111 */ "MSA128B\0"
  /* 119 */ "FCC\0"
  /* 123 */ "DSPCC\0"
  /* 129 */ "FGRCC\0"
  /* 135 */ "MSA128D\0"
  /* 143 */ "MSA128H\0"
  /* 151 */ "OCTEON_MPL\0"
  /* 162 */ "GPR64_with_sub_32_in_GPR32ZERO\0"
  /* 193 */ "GPR64_with_sub_32_in_GPR32NONZERO\0"
  /* 227 */ "HI32DSP\0"
  /* 235 */ "LO32DSP\0"
  /* 243 */ "ACC64DSP\0"
  /* 252 */ "GPR64_with_sub_32_in_CPU16RegsPlusSP\0"
  /* 289 */ "OCTEON_P\0"
  /* 298 */ "GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MoveP\0"
  /* 349 */ "GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MoveP\0"
  /* 397 */ "GPR64_with_sub_32_in_GPRMM16MoveP\0"
  /* 431 */ "CCR\0"
  /* 435 */ "DSPR\0"
  /* 440 */ "MSA128W\0"
  /* 448 */ "GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecond\0"
  /* 506 */ "GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond\0"
  /* 576 */ "GPR64_with_sub_32_in_GPRMM16MovePPairSecond\0"
  /* 620 */ "GPR64_with_sub_32_in_CPURAReg\0"
  /* 650 */ "CPUSPReg\0"
  /* 659 */ "MSACtrl\0"
  /* 667 */ "GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16Zero\0"
  /* 717 */ "GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero\0"
  /* 781 */ "GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16Zero\0"
  /* 828 */ "GPR64_with_sub_32_in_GPRMM16Zero\0"
  /* 861 */ "GPR64_with_sub_32_in_CPU16Regs\0"
  /* 892 */ "HWRegs\0"
  /* 899 */ "MSA128WEvens\0"
  /* 912 */ "GPR64_with_sub_32_in_GPRMM16MovePPairFirst\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

static const MCRegisterClass MipsMCRegisterClasses[] = {
  { MSA128F16, MSA128F16Bits, sizeof(MSA128F16Bits) },
  { CCR, CCRBits, sizeof(CCRBits) },
  { COP0, COP0Bits, sizeof(COP0Bits) },
  { COP2, COP2Bits, sizeof(COP2Bits) },
  { COP3, COP3Bits, sizeof(COP3Bits) },
  { DSPR, DSPRBits, sizeof(DSPRBits) },
  { FGR32, FGR32Bits, sizeof(FGR32Bits) },
  { FGRCC, FGRCCBits, sizeof(FGRCCBits) },
  { GPR32, GPR32Bits, sizeof(GPR32Bits) },
  { HWRegs, HWRegsBits, sizeof(HWRegsBits) },
  { MSACtrl, MSACtrlBits, sizeof(MSACtrlBits) },
  { GPR32NONZERO, GPR32NONZEROBits, sizeof(GPR32NONZEROBits) },
  { CPU16RegsPlusSP, CPU16RegsPlusSPBits, sizeof(CPU16RegsPlusSPBits) },
  { CPU16Regs, CPU16RegsBits, sizeof(CPU16RegsBits) },
  { FCC, FCCBits, sizeof(FCCBits) },
  { GPRMM16, GPRMM16Bits, sizeof(GPRMM16Bits) },
  { GPRMM16MoveP, GPRMM16MovePBits, sizeof(GPRMM16MovePBits) },
  { GPRMM16Zero, GPRMM16ZeroBits, sizeof(GPRMM16ZeroBits) },
  { CPU16Regs_and_GPRMM16Zero, CPU16Regs_and_GPRMM16ZeroBits, sizeof(CPU16Regs_and_GPRMM16ZeroBits) },
  { GPR32NONZERO_and_GPRMM16MoveP, GPR32NONZERO_and_GPRMM16MovePBits, sizeof(GPR32NONZERO_and_GPRMM16MovePBits) },
  { GPRMM16MovePPairSecond, GPRMM16MovePPairSecondBits, sizeof(GPRMM16MovePPairSecondBits) },
  { CPU16Regs_and_GPRMM16MoveP, CPU16Regs_and_GPRMM16MovePBits, sizeof(CPU16Regs_and_GPRMM16MovePBits) },
  { GPRMM16MoveP_and_GPRMM16Zero, GPRMM16MoveP_and_GPRMM16ZeroBits, sizeof(GPRMM16MoveP_and_GPRMM16ZeroBits) },
  { HI32DSP, HI32DSPBits, sizeof(HI32DSPBits) },
  { LO32DSP, LO32DSPBits, sizeof(LO32DSPBits) },
  { CPU16Regs_and_GPRMM16MovePPairSecond, CPU16Regs_and_GPRMM16MovePPairSecondBits, sizeof(CPU16Regs_and_GPRMM16MovePPairSecondBits) },
  { GPRMM16MovePPairFirst, GPRMM16MovePPairFirstBits, sizeof(GPRMM16MovePPairFirstBits) },
  { GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero, GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits, sizeof(GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits) },
  { GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond, GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits, sizeof(GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits) },
  { CPURAReg, CPURARegBits, sizeof(CPURARegBits) },
  { CPUSPReg, CPUSPRegBits, sizeof(CPUSPRegBits) },
  { DSPCC, DSPCCBits, sizeof(DSPCCBits) },
  { GP32, GP32Bits, sizeof(GP32Bits) },
  { GPR32ZERO, GPR32ZEROBits, sizeof(GPR32ZEROBits) },
  { HI32, HI32Bits, sizeof(HI32Bits) },
  { LO32, LO32Bits, sizeof(LO32Bits) },
  { SP32, SP32Bits, sizeof(SP32Bits) },
  { FGR64, FGR64Bits, sizeof(FGR64Bits) },
  { GPR64, GPR64Bits, sizeof(GPR64Bits) },
  { GPR64_with_sub_32_in_GPR32NONZERO, GPR64_with_sub_32_in_GPR32NONZEROBits, sizeof(GPR64_with_sub_32_in_GPR32NONZEROBits) },
  { AFGR64, AFGR64Bits, sizeof(AFGR64Bits) },
  { GPR64_with_sub_32_in_CPU16RegsPlusSP, GPR64_with_sub_32_in_CPU16RegsPlusSPBits, sizeof(GPR64_with_sub_32_in_CPU16RegsPlusSPBits) },
  { GPR64_with_sub_32_in_CPU16Regs, GPR64_with_sub_32_in_CPU16RegsBits, sizeof(GPR64_with_sub_32_in_CPU16RegsBits) },
  { GPR64_with_sub_32_in_GPRMM16MoveP, GPR64_with_sub_32_in_GPRMM16MovePBits, sizeof(GPR64_with_sub_32_in_GPRMM16MovePBits) },
  { GPR64_with_sub_32_in_GPRMM16Zero, GPR64_with_sub_32_in_GPRMM16ZeroBits, sizeof(GPR64_with_sub_32_in_GPRMM16ZeroBits) },
  { GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16Zero, GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16ZeroBits, sizeof(GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16ZeroBits) },
  { GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MoveP, GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MovePBits, sizeof(GPR64_with_sub_32_in_GPR32NONZERO_and_GPRMM16MovePBits) },
  { GPR64_with_sub_32_in_GPRMM16MovePPairSecond, GPR64_with_sub_32_in_GPRMM16MovePPairSecondBits, sizeof(GPR64_with_sub_32_in_GPRMM16MovePPairSecondBits) },
  { ACC64DSP, ACC64DSPBits, sizeof(ACC64DSPBits) },
  { GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MoveP, GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePBits, sizeof(GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePBits) },
  { GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16Zero, GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16ZeroBits, sizeof(GPR64_with_sub_32_in_GPRMM16MoveP_and_GPRMM16ZeroBits) },
  { GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecond, GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecondBits, sizeof(GPR64_with_sub_32_in_CPU16Regs_and_GPRMM16MovePPairSecondBits) },
  { GPR64_with_sub_32_in_GPRMM16MovePPairFirst, GPR64_with_sub_32_in_GPRMM16MovePPairFirstBits, sizeof(GPR64_with_sub_32_in_GPRMM16MovePPairFirstBits) },
  { GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16Zero, GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits, sizeof(GPR64_with_sub_32_in_GPRMM16MoveP_and_CPU16Regs_and_GPRMM16ZeroBits) },
  { OCTEON_MPL, OCTEON_MPLBits, sizeof(OCTEON_MPLBits) },
  { OCTEON_P, OCTEON_PBits, sizeof(OCTEON_PBits) },
  { GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecond, GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits, sizeof(GPR64_with_sub_32_in_GPRMM16MovePPairFirst_and_GPRMM16MovePPairSecondBits) },
  { ACC64, ACC64Bits, sizeof(ACC64Bits) },
  { GP64, GP64Bits, sizeof(GP64Bits) },
  { GPR64_with_sub_32_in_CPURAReg, GPR64_with_sub_32_in_CPURARegBits, sizeof(GPR64_with_sub_32_in_CPURARegBits) },
  { GPR64_with_sub_32_in_GPR32ZERO, GPR64_with_sub_32_in_GPR32ZEROBits, sizeof(GPR64_with_sub_32_in_GPR32ZEROBits) },
  { HI64, HI64Bits, sizeof(HI64Bits) },
  { LO64, LO64Bits, sizeof(LO64Bits) },
  { SP64, SP64Bits, sizeof(SP64Bits) },
  { MSA128B, MSA128BBits, sizeof(MSA128BBits) },
  { MSA128D, MSA128DBits, sizeof(MSA128DBits) },
  { MSA128H, MSA128HBits, sizeof(MSA128HBits) },
  { MSA128W, MSA128WBits, sizeof(MSA128WBits) },
  { MSA128WEvens, MSA128WEvensBits, sizeof(MSA128WEvensBits) },
  { ACC128, ACC128Bits, sizeof(ACC128Bits) },
};

#endif // GET_REGINFO_MC_DESC

#ifdef GET_ASM_WRITER
#undef GET_ASM_WRITER

static void llvm_unreachable(const char * info) {}
static void assert(int val) {}
typedef struct MCMnemonic {
    const char *first;
    uint64_t second;
} MCMnemonic;

static MCMnemonic createMnemonic(const char* first, uint64_t second) {
    MCMnemonic mnemonic;
    mnemonic.first = first;
    mnemonic.second = second;
    return mnemonic;
}

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MCMnemonic Mips_getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "dmfc0\t\0"
  /* 7 */ "dmfgc0\t\0"
  /* 15 */ "mfhgc0\t\0"
  /* 23 */ "mthgc0\t\0"
  /* 31 */ "dmtgc0\t\0"
  /* 39 */ "mfhc0\t\0"
  /* 46 */ "mthc0\t\0"
  /* 53 */ "dmtc0\t\0"
  /* 60 */ "vmm0\t\0"
  /* 66 */ "mtm0\t\0"
  /* 72 */ "mtp0\t\0"
  /* 78 */ "bbit0\t\0"
  /* 85 */ "ldc1\t\0"
  /* 91 */ "sdc1\t\0"
  /* 97 */ "cfc1\t\0"
  /* 103 */ "dmfc1\t\0"
  /* 110 */ "mfhc1\t\0"
  /* 117 */ "mthc1\t\0"
  /* 124 */ "ctc1\t\0"
  /* 130 */ "dmtc1\t\0"
  /* 137 */ "lwc1\t\0"
  /* 143 */ "swc1\t\0"
  /* 149 */ "ldxc1\t\0"
  /* 156 */ "sdxc1\t\0"
  /* 163 */ "luxc1\t\0"
  /* 170 */ "suxc1\t\0"
  /* 177 */ "lwxc1\t\0"
  /* 184 */ "swxc1\t\0"
  /* 191 */ "mtm1\t\0"
  /* 197 */ "mtp1\t\0"
  /* 203 */ "bbit1\t\0"
  /* 210 */ "bbit032\t\0"
  /* 219 */ "bbit132\t\0"
  /* 228 */ "dsra32\t\0"
  /* 236 */ "bposge32\t\0"
  /* 246 */ "dsll32\t\0"
  /* 254 */ "dsrl32\t\0"
  /* 262 */ "lwm32\t\0"
  /* 269 */ "swm32\t\0"
  /* 276 */ "drotr32\t\0"
  /* 285 */ "cins32\t\0"
  /* 293 */ "exts32\t\0"
  /* 301 */ "ldc2\t\0"
  /* 307 */ "sdc2\t\0"
  /* 313 */ "cfc2\t\0"
  /* 319 */ "dmfc2\t\0"
  /* 326 */ "mfhc2\t\0"
  /* 333 */ "mthc2\t\0"
  /* 340 */ "ctc2\t\0"
  /* 346 */ "dmtc2\t\0"
  /* 353 */ "lwc2\t\0"
  /* 359 */ "swc2\t\0"
  /* 365 */ "mtm2\t\0"
  /* 371 */ "mtp2\t\0"
  /* 377 */ "addiur2\t\0"
  /* 386 */ "ldc3\t\0"
  /* 392 */ "sdc3\t\0"
  /* 398 */ "lwc3\t\0"
  /* 404 */ "swc3\t\0"
  /* 410 */ "addius5\t\0"
  /* 419 */ "sb16\t\0"
  /* 425 */ "bc16\t\0"
  /* 431 */ "jrc16\t\0"
  /* 438 */ "bnezc16\t\0"
  /* 447 */ "beqzc16\t\0"
  /* 456 */ "and16\t\0"
  /* 463 */ "move16\t\0"
  /* 471 */ "sh16\t\0"
  /* 477 */ "andi16\t\0"
  /* 485 */ "mfhi16\t\0"
  /* 493 */ "li16\t\0"
  /* 499 */ "break16\t\0"
  /* 508 */ "sll16\t\0"
  /* 515 */ "srl16\t\0"
  /* 522 */ "lwm16\t\0"
  /* 529 */ "swm16\t\0"
  /* 536 */ "mflo16\t\0"
  /* 544 */ "sdbbp16\t\0"
  /* 553 */ "jr16\t\0"
  /* 559 */ "xor16\t\0"
  /* 566 */ "jalrs16\t\0"
  /* 575 */ "not16\t\0"
  /* 582 */ "lbu16\t\0"
  /* 589 */ "subu16\t\0"
  /* 597 */ "addu16\t\0"
  /* 605 */ "lhu16\t\0"
  /* 612 */ "lw16\t\0"
  /* 618 */ "sw16\t\0"
  /* 624 */ "bnez16\t\0"
  /* 632 */ "beqz16\t\0"
  /* 640 */ "saa\t\0"
  /* 645 */ "preceu.ph.qbla\t\0"
  /* 661 */ "precequ.ph.qbla\t\0"
  /* 678 */ "dla\t\0"
  /* 683 */ "preceu.ph.qbra\t\0"
  /* 699 */ "precequ.ph.qbra\t\0"
  /* 716 */ "dsra\t\0"
  /* 722 */ "dlsa\t\0"
  /* 728 */ "cfcmsa\t\0"
  /* 736 */ "ctcmsa\t\0"
  /* 744 */ "add_a.b\t\0"
  /* 753 */ "min_a.b\t\0"
  /* 762 */ "adds_a.b\t\0"
  /* 772 */ "max_a.b\t\0"
  /* 781 */ "sra.b\t\0"
  /* 788 */ "nloc.b\t\0"
  /* 796 */ "nlzc.b\t\0"
  /* 804 */ "sld.b\t\0"
  /* 811 */ "pckod.b\t\0"
  /* 820 */ "ilvod.b\t\0"
  /* 829 */ "insve.b\t\0"
  /* 838 */ "vshf.b\t\0"
  /* 846 */ "bneg.b\t\0"
  /* 854 */ "srai.b\t\0"
  /* 862 */ "sldi.b\t\0"
  /* 870 */ "andi.b\t\0"
  /* 878 */ "bnegi.b\t\0"
  /* 887 */ "bseli.b\t\0"
  /* 896 */ "slli.b\t\0"
  /* 904 */ "srli.b\t\0"
  /* 912 */ "binsli.b\t\0"
  /* 922 */ "ceqi.b\t\0"
  /* 930 */ "srari.b\t\0"
  /* 939 */ "bclri.b\t\0"
  /* 948 */ "srlri.b\t\0"
  /* 957 */ "nori.b\t\0"
  /* 965 */ "xori.b\t\0"
  /* 973 */ "binsri.b\t\0"
  /* 983 */ "splati.b\t\0"
  /* 993 */ "bseti.b\t\0"
  /* 1002 */ "subvi.b\t\0"
  /* 1011 */ "addvi.b\t\0"
  /* 1020 */ "bmzi.b\t\0"
  /* 1028 */ "bmnzi.b\t\0"
  /* 1037 */ "fill.b\t\0"
  /* 1045 */ "sll.b\t\0"
  /* 1052 */ "srl.b\t\0"
  /* 1059 */ "binsl.b\t\0"
  /* 1068 */ "ilvl.b\t\0"
  /* 1076 */ "ceq.b\t\0"
  /* 1083 */ "srar.b\t\0"
  /* 1091 */ "bclr.b\t\0"
  /* 1099 */ "srlr.b\t\0"
  /* 1107 */ "binsr.b\t\0"
  /* 1116 */ "ilvr.b\t\0"
  /* 1124 */ "asub_s.b\t\0"
  /* 1134 */ "mod_s.b\t\0"
  /* 1143 */ "cle_s.b\t\0"
  /* 1152 */ "ave_s.b\t\0"
  /* 1161 */ "clei_s.b\t\0"
  /* 1171 */ "mini_s.b\t\0"
  /* 1181 */ "clti_s.b\t\0"
  /* 1191 */ "maxi_s.b\t\0"
  /* 1201 */ "min_s.b\t\0"
  /* 1210 */ "aver_s.b\t\0"
  /* 1220 */ "subs_s.b\t\0"
  /* 1230 */ "adds_s.b\t\0"
  /* 1240 */ "sat_s.b\t\0"
  /* 1249 */ "clt_s.b\t\0"
  /* 1258 */ "subsuu_s.b\t\0"
  /* 1270 */ "div_s.b\t\0"
  /* 1279 */ "max_s.b\t\0"
  /* 1288 */ "copy_s.b\t\0"
  /* 1298 */ "splat.b\t\0"
  /* 1307 */ "bset.b\t\0"
  /* 1315 */ "pcnt.b\t\0"
  /* 1323 */ "insert.b\t\0"
  /* 1333 */ "st.b\t\0"
  /* 1339 */ "asub_u.b\t\0"
  /* 1349 */ "mod_u.b\t\0"
  /* 1358 */ "cle_u.b\t\0"
  /* 1367 */ "ave_u.b\t\0"
  /* 1376 */ "clei_u.b\t\0"
  /* 1386 */ "mini_u.b\t\0"
  /* 1396 */ "clti_u.b\t\0"
  /* 1406 */ "maxi_u.b\t\0"
  /* 1416 */ "min_u.b\t\0"
  /* 1425 */ "aver_u.b\t\0"
  /* 1435 */ "subs_u.b\t\0"
  /* 1445 */ "adds_u.b\t\0"
  /* 1455 */ "subsus_u.b\t\0"
  /* 1467 */ "sat_u.b\t\0"
  /* 1476 */ "clt_u.b\t\0"
  /* 1485 */ "div_u.b\t\0"
  /* 1494 */ "max_u.b\t\0"
  /* 1503 */ "copy_u.b\t\0"
  /* 1513 */ "msubv.b\t\0"
  /* 1522 */ "maddv.b\t\0"
  /* 1531 */ "pckev.b\t\0"
  /* 1540 */ "ilvev.b\t\0"
  /* 1549 */ "mulv.b\t\0"
  /* 1557 */ "bz.b\t\0"
  /* 1563 */ "bnz.b\t\0"
  /* 1570 */ "crc32b\t\0"
  /* 1578 */ "crc32cb\t\0"
  /* 1587 */ "seb\t\0"
  /* 1592 */ "jalrc.hb\t\0"
  /* 1602 */ "jr.hb\t\0"
  /* 1609 */ "jalr.hb\t\0"
  /* 1618 */ "lb\t\0"
  /* 1622 */ "shra.qb\t\0"
  /* 1631 */ "cmpgdu.le.qb\t\0"
  /* 1645 */ "cmpgu.le.qb\t\0"
  /* 1658 */ "cmpu.le.qb\t\0"
  /* 1670 */ "subuh.qb\t\0"
  /* 1680 */ "adduh.qb\t\0"
  /* 1690 */ "pick.qb\t\0"
  /* 1699 */ "shll.qb\t\0"
  /* 1708 */ "repl.qb\t\0"
  /* 1717 */ "shrl.qb\t\0"
  /* 1726 */ "cmpgdu.eq.qb\t\0"
  /* 1740 */ "cmpgu.eq.qb\t\0"
  /* 1753 */ "cmpu.eq.qb\t\0"
  /* 1765 */ "shra_r.qb\t\0"
  /* 1776 */ "subuh_r.qb\t\0"
  /* 1788 */ "adduh_r.qb\t\0"
  /* 1800 */ "shrav_r.qb\t\0"
  /* 1812 */ "absq_s.qb\t\0"
  /* 1823 */ "subu_s.qb\t\0"
  /* 1834 */ "addu_s.qb\t\0"
  /* 1845 */ "cmpgdu.lt.qb\t\0"
  /* 1859 */ "cmpgu.lt.qb\t\0"
  /* 1872 */ "cmpu.lt.qb\t\0"
  /* 1884 */ "subu.qb\t\0"
  /* 1893 */ "addu.qb\t\0"
  /* 1902 */ "shrav.qb\t\0"
  /* 1912 */ "shllv.qb\t\0"
  /* 1922 */ "replv.qb\t\0"
  /* 1932 */ "shrlv.qb\t\0"
  /* 1942 */ "raddu.w.qb\t\0"
  /* 1954 */ "sb\t\0"
  /* 1958 */ "modsub\t\0"
  /* 1966 */ "msub\t\0"
  /* 1972 */ "bposge32c\t\0"
  /* 1983 */ "bc\t\0"
  /* 1987 */ "bgec\t\0"
  /* 1993 */ "bnec\t\0"
  /* 1999 */ "jic\t\0"
  /* 2004 */ "balc\t\0"
  /* 2010 */ "jialc\t\0"
  /* 2017 */ "bgezalc\t\0"
  /* 2026 */ "blezalc\t\0"
  /* 2035 */ "bnezalc\t\0"
  /* 2044 */ "beqzalc\t\0"
  /* 2053 */ "bgtzalc\t\0"
  /* 2062 */ "bltzalc\t\0"
  /* 2071 */ "sync\t\0"
  /* 2077 */ "ldpc\t\0"
  /* 2083 */ "auipc\t\0"
  /* 2090 */ "aluipc\t\0"
  /* 2098 */ "addiupc\t\0"
  /* 2107 */ "lwupc\t\0"
  /* 2114 */ "lwpc\t\0"
  /* 2120 */ "beqc\t\0"
  /* 2126 */ "jrc\t\0"
  /* 2131 */ "jalrc\t\0"
  /* 2138 */ "addsc\t\0"
  /* 2145 */ "bltc\t\0"
  /* 2151 */ "bgeuc\t\0"
  /* 2158 */ "bltuc\t\0"
  /* 2165 */ "bnvc\t\0"
  /* 2171 */ "bovc\t\0"
  /* 2177 */ "addwc\t\0"
  /* 2184 */ "bgezc\t\0"
  /* 2191 */ "blezc\t\0"
  /* 2198 */ "bc1nezc\t\0"
  /* 2207 */ "bc2nezc\t\0"
  /* 2216 */ "bnezc\t\0"
  /* 2223 */ "bc1eqzc\t\0"
  /* 2232 */ "bc2eqzc\t\0"
  /* 2241 */ "beqzc\t\0"
  /* 2248 */ "bgtzc\t\0"
  /* 2255 */ "bltzc\t\0"
  /* 2262 */ "flog2.d\t\0"
  /* 2271 */ "fexp2.d\t\0"
  /* 2280 */ "add_a.d\t\0"
  /* 2289 */ "fmin_a.d\t\0"
  /* 2299 */ "adds_a.d\t\0"
  /* 2309 */ "fmax_a.d\t\0"
  /* 2319 */ "mina.d\t\0"
  /* 2327 */ "sra.d\t\0"
  /* 2334 */ "maxa.d\t\0"
  /* 2342 */ "fsub.d\t\0"
  /* 2350 */ "fmsub.d\t\0"
  /* 2359 */ "nmsub.d\t\0"
  /* 2368 */ "nloc.d\t\0"
  /* 2376 */ "nlzc.d\t\0"
  /* 2384 */ "fadd.d\t\0"
  /* 2392 */ "fmadd.d\t\0"
  /* 2401 */ "nmadd.d\t\0"
  /* 2410 */ "sld.d\t\0"
  /* 2417 */ "pckod.d\t\0"
  /* 2426 */ "ilvod.d\t\0"
  /* 2435 */ "c.nge.d\t\0"
  /* 2444 */ "c.le.d\t\0"
  /* 2452 */ "cmp.le.d\t\0"
  /* 2462 */ "fcle.d\t\0"
  /* 2470 */ "c.ngle.d\t\0"
  /* 2480 */ "c.ole.d\t\0"
  /* 2489 */ "cmp.sle.d\t\0"
  /* 2500 */ "fsle.d\t\0"
  /* 2508 */ "c.ule.d\t\0"
  /* 2517 */ "cmp.ule.d\t\0"
  /* 2528 */ "fcule.d\t\0"
  /* 2537 */ "cmp.sule.d\t\0"
  /* 2549 */ "fsule.d\t\0"
  /* 2558 */ "fcne.d\t\0"
  /* 2566 */ "fsne.d\t\0"
  /* 2574 */ "fcune.d\t\0"
  /* 2583 */ "fsune.d\t\0"
  /* 2592 */ "insve.d\t\0"
  /* 2601 */ "c.f.d\t\0"
  /* 2608 */ "cmp.af.d\t\0"
  /* 2618 */ "fcaf.d\t\0"
  /* 2626 */ "cmp.saf.d\t\0"
  /* 2637 */ "fsaf.d\t\0"
  /* 2645 */ "msubf.d\t\0"
  /* 2654 */ "maddf.d\t\0"
  /* 2663 */ "vshf.d\t\0"
  /* 2671 */ "c.sf.d\t\0"
  /* 2679 */ "movf.d\t\0"
  /* 2687 */ "bneg.d\t\0"
  /* 2695 */ "srai.d\t\0"
  /* 2703 */ "sldi.d\t\0"
  /* 2711 */ "bnegi.d\t\0"
  /* 2720 */ "slli.d\t\0"
  /* 2728 */ "srli.d\t\0"
  /* 2736 */ "binsli.d\t\0"
  /* 2746 */ "ceqi.d\t\0"
  /* 2754 */ "srari.d\t\0"
  /* 2763 */ "bclri.d\t\0"
  /* 2772 */ "srlri.d\t\0"
  /* 2781 */ "binsri.d\t\0"
  /* 2791 */ "splati.d\t\0"
  /* 2801 */ "bseti.d\t\0"
  /* 2810 */ "subvi.d\t\0"
  /* 2819 */ "addvi.d\t\0"
  /* 2828 */ "trunc.l.d\t\0"
  /* 2839 */ "round.l.d\t\0"
  /* 2850 */ "ceil.l.d\t\0"
  /* 2860 */ "floor.l.d\t\0"
  /* 2871 */ "cvt.l.d\t\0"
  /* 2880 */ "sel.d\t\0"
  /* 2887 */ "c.ngl.d\t\0"
  /* 2896 */ "fill.d\t\0"
  /* 2904 */ "sll.d\t\0"
  /* 2911 */ "fexupl.d\t\0"
  /* 2921 */ "ffql.d\t\0"
  /* 2929 */ "srl.d\t\0"
  /* 2936 */ "binsl.d\t\0"
  /* 2945 */ "fmul.d\t\0"
  /* 2953 */ "ilvl.d\t\0"
  /* 2961 */ "fmin.d\t\0"
  /* 2969 */ "c.un.d\t\0"
  /* 2977 */ "cmp.un.d\t\0"
  /* 2987 */ "fcun.d\t\0"
  /* 2995 */ "cmp.sun.d\t\0"
  /* 3006 */ "fsun.d\t\0"
  /* 3014 */ "movn.d\t\0"
  /* 3022 */ "frcp.d\t\0"
  /* 3030 */ "recip.d\t\0"
  /* 3039 */ "c.eq.d\t\0"
  /* 3047 */ "cmp.eq.d\t\0"
  /* 3057 */ "fceq.d\t\0"
  /* 3065 */ "c.seq.d\t\0"
  /* 3074 */ "cmp.seq.d\t\0"
  /* 3085 */ "fseq.d\t\0"
  /* 3093 */ "c.ueq.d\t\0"
  /* 3102 */ "cmp.ueq.d\t\0"
  /* 3113 */ "fcueq.d\t\0"
  /* 3122 */ "cmp.sueq.d\t\0"
  /* 3134 */ "fsueq.d\t\0"
  /* 3143 */ "srar.d\t\0"
  /* 3151 */ "bclr.d\t\0"
  /* 3159 */ "srlr.d\t\0"
  /* 3167 */ "fcor.d\t\0"
  /* 3175 */ "fsor.d\t\0"
  /* 3183 */ "fexupr.d\t\0"
  /* 3193 */ "ffqr.d\t\0"
  /* 3201 */ "binsr.d\t\0"
  /* 3210 */ "ilvr.d\t\0"
  /* 3218 */ "cvt.s.d\t\0"
  /* 3227 */ "asub_s.d\t\0"
  /* 3237 */ "hsub_s.d\t\0"
  /* 3247 */ "dpsub_s.d\t\0"
  /* 3258 */ "ftrunc_s.d\t\0"
  /* 3270 */ "hadd_s.d\t\0"
  /* 3280 */ "dpadd_s.d\t\0"
  /* 3291 */ "mod_s.d\t\0"
  /* 3300 */ "cle_s.d\t\0"
  /* 3309 */ "ave_s.d\t\0"
  /* 3318 */ "clei_s.d\t\0"
  /* 3328 */ "mini_s.d\t\0"
  /* 3338 */ "clti_s.d\t\0"
  /* 3348 */ "maxi_s.d\t\0"
  /* 3358 */ "min_s.d\t\0"
  /* 3367 */ "dotp_s.d\t\0"
  /* 3377 */ "aver_s.d\t\0"
  /* 3387 */ "subs_s.d\t\0"
  /* 3397 */ "adds_s.d\t\0"
  /* 3407 */ "sat_s.d\t\0"
  /* 3416 */ "clt_s.d\t\0"
  /* 3425 */ "ffint_s.d\t\0"
  /* 3436 */ "ftint_s.d\t\0"
  /* 3447 */ "subsuu_s.d\t\0"
  /* 3459 */ "div_s.d\t\0"
  /* 3468 */ "max_s.d\t\0"
  /* 3477 */ "copy_s.d\t\0"
  /* 3487 */ "abs.d\t\0"
  /* 3494 */ "fclass.d\t\0"
  /* 3504 */ "splat.d\t\0"
  /* 3513 */ "bset.d\t\0"
  /* 3521 */ "c.ngt.d\t\0"
  /* 3530 */ "c.lt.d\t\0"
  /* 3538 */ "cmp.lt.d\t\0"
  /* 3548 */ "fclt.d\t\0"
  /* 3556 */ "c.olt.d\t\0"
  /* 3565 */ "cmp.slt.d\t\0"
  /* 3576 */ "fslt.d\t\0"
  /* 3584 */ "c.ult.d\t\0"
  /* 3593 */ "cmp.ult.d\t\0"
  /* 3604 */ "fcult.d\t\0"
  /* 3613 */ "cmp.sult.d\t\0"
  /* 3625 */ "fsult.d\t\0"
  /* 3634 */ "pcnt.d\t\0"
  /* 3642 */ "frint.d\t\0"
  /* 3651 */ "insert.d\t\0"
  /* 3661 */ "fsqrt.d\t\0"
  /* 3670 */ "frsqrt.d\t\0"
  /* 3680 */ "st.d\t\0"
  /* 3686 */ "movt.d\t\0"
  /* 3694 */ "asub_u.d\t\0"
  /* 3704 */ "hsub_u.d\t\0"
  /* 3714 */ "dpsub_u.d\t\0"
  /* 3725 */ "ftrunc_u.d\t\0"
  /* 3737 */ "hadd_u.d\t\0"
  /* 3747 */ "dpadd_u.d\t\0"
  /* 3758 */ "mod_u.d\t\0"
  /* 3767 */ "cle_u.d\t\0"
  /* 3776 */ "ave_u.d\t\0"
  /* 3785 */ "clei_u.d\t\0"
  /* 3795 */ "mini_u.d\t\0"
  /* 3805 */ "clti_u.d\t\0"
  /* 3815 */ "maxi_u.d\t\0"
  /* 3825 */ "min_u.d\t\0"
  /* 3834 */ "dotp_u.d\t\0"
  /* 3844 */ "aver_u.d\t\0"
  /* 3854 */ "subs_u.d\t\0"
  /* 3864 */ "adds_u.d\t\0"
  /* 3874 */ "subsus_u.d\t\0"
  /* 3886 */ "sat_u.d\t\0"
  /* 3895 */ "clt_u.d\t\0"
  /* 3904 */ "ffint_u.d\t\0"
  /* 3915 */ "ftint_u.d\t\0"
  /* 3926 */ "div_u.d\t\0"
  /* 3935 */ "max_u.d\t\0"
  /* 3944 */ "msubv.d\t\0"
  /* 3953 */ "maddv.d\t\0"
  /* 3962 */ "pckev.d\t\0"
  /* 3971 */ "ilvev.d\t\0"
  /* 3980 */ "fdiv.d\t\0"
  /* 3988 */ "mulv.d\t\0"
  /* 3996 */ "mov.d\t\0"
  /* 4003 */ "trunc.w.d\t\0"
  /* 4014 */ "round.w.d\t\0"
  /* 4025 */ "ceil.w.d\t\0"
  /* 4035 */ "floor.w.d\t\0"
  /* 4046 */ "cvt.w.d\t\0"
  /* 4055 */ "fmax.d\t\0"
  /* 4063 */ "bz.d\t\0"
  /* 4069 */ "selnez.d\t\0"
  /* 4079 */ "bnz.d\t\0"
  /* 4086 */ "seleqz.d\t\0"
  /* 4096 */ "movz.d\t\0"
  /* 4104 */ "crc32d\t\0"
  /* 4112 */ "saad\t\0"
  /* 4118 */ "crc32cd\t\0"
  /* 4127 */ "scd\t\0"
  /* 4132 */ "dadd\t\0"
  /* 4138 */ "madd\t\0"
  /* 4144 */ "dshd\t\0"
  /* 4150 */ "yield\t\0"
  /* 4157 */ "lld\t\0"
  /* 4162 */ "and\t\0"
  /* 4167 */ "prepend\t\0"
  /* 4176 */ "append\t\0"
  /* 4184 */ "dmod\t\0"
  /* 4190 */ "sd\t\0"
  /* 4194 */ "lbe\t\0"
  /* 4199 */ "sbe\t\0"
  /* 4204 */ "sce\t\0"
  /* 4209 */ "cachee\t\0"
  /* 4217 */ "prefe\t\0"
  /* 4224 */ "bge\t\0"
  /* 4229 */ "sge\t\0"
  /* 4234 */ "tge\t\0"
  /* 4239 */ "cache\t\0"
  /* 4246 */ "lhe\t\0"
  /* 4251 */ "she\t\0"
  /* 4256 */ "sigrie\t\0"
  /* 4264 */ "ble\t\0"
  /* 4269 */ "lle\t\0"
  /* 4274 */ "sle\t\0"
  /* 4279 */ "lwle\t\0"
  /* 4285 */ "swle\t\0"
  /* 4291 */ "bne\t\0"
  /* 4296 */ "sne\t\0"
  /* 4301 */ "tne\t\0"
  /* 4306 */ "dvpe\t\0"
  /* 4312 */ "evpe\t\0"
  /* 4318 */ "lwre\t\0"
  /* 4324 */ "swre\t\0"
  /* 4330 */ "lbue\t\0"
  /* 4336 */ "lhue\t\0"
  /* 4342 */ "move\t\0"
  /* 4348 */ "lwe\t\0"
  /* 4353 */ "swe\t\0"
  /* 4358 */ "bc1f\t\0"
  /* 4364 */ "pref\t\0"
  /* 4370 */ "movf\t\0"
  /* 4376 */ "neg\t\0"
  /* 4381 */ "add_a.h\t\0"
  /* 4390 */ "min_a.h\t\0"
  /* 4399 */ "adds_a.h\t\0"
  /* 4409 */ "max_a.h\t\0"
  /* 4418 */ "sra.h\t\0"
  /* 4425 */ "nloc.h\t\0"
  /* 4433 */ "nlzc.h\t\0"
  /* 4441 */ "sld.h\t\0"
  /* 4448 */ "pckod.h\t\0"
  /* 4457 */ "ilvod.h\t\0"
  /* 4466 */ "insve.h\t\0"
  /* 4475 */ "vshf.h\t\0"
  /* 4483 */ "bneg.h\t\0"
  /* 4491 */ "srai.h\t\0"
  /* 4499 */ "sldi.h\t\0"
  /* 4507 */ "bnegi.h\t\0"
  /* 4516 */ "slli.h\t\0"
  /* 4524 */ "srli.h\t\0"
  /* 4532 */ "binsli.h\t\0"
  /* 4542 */ "ceqi.h\t\0"
  /* 4550 */ "srari.h\t\0"
  /* 4559 */ "bclri.h\t\0"
  /* 4568 */ "srlri.h\t\0"
  /* 4577 */ "binsri.h\t\0"
  /* 4587 */ "splati.h\t\0"
  /* 4597 */ "bseti.h\t\0"
  /* 4606 */ "subvi.h\t\0"
  /* 4615 */ "addvi.h\t\0"
  /* 4624 */ "fill.h\t\0"
  /* 4632 */ "sll.h\t\0"
  /* 4639 */ "srl.h\t\0"
  /* 4646 */ "binsl.h\t\0"
  /* 4655 */ "ilvl.h\t\0"
  /* 4663 */ "fexdo.h\t\0"
  /* 4672 */ "msub_q.h\t\0"
  /* 4682 */ "madd_q.h\t\0"
  /* 4692 */ "mul_q.h\t\0"
  /* 4701 */ "msubr_q.h\t\0"
  /* 4712 */ "maddr_q.h\t\0"
  /* 4723 */ "mulr_q.h\t\0"
  /* 4733 */ "ceq.h\t\0"
  /* 4740 */ "ftq.h\t\0"
  /* 4747 */ "srar.h\t\0"
  /* 4755 */ "bclr.h\t\0"
  /* 4763 */ "srlr.h\t\0"
  /* 4771 */ "binsr.h\t\0"
  /* 4780 */ "ilvr.h\t\0"
  /* 4788 */ "asub_s.h\t\0"
  /* 4798 */ "hsub_s.h\t\0"
  /* 4808 */ "dpsub_s.h\t\0"
  /* 4819 */ "hadd_s.h\t\0"
  /* 4829 */ "dpadd_s.h\t\0"
  /* 4840 */ "mod_s.h\t\0"
  /* 4849 */ "cle_s.h\t\0"
  /* 4858 */ "ave_s.h\t\0"
  /* 4867 */ "clei_s.h\t\0"
  /* 4877 */ "mini_s.h\t\0"
  /* 4887 */ "clti_s.h\t\0"
  /* 4897 */ "maxi_s.h\t\0"
  /* 4907 */ "min_s.h\t\0"
  /* 4916 */ "dotp_s.h\t\0"
  /* 4926 */ "aver_s.h\t\0"
  /* 4936 */ "extr_s.h\t\0"
  /* 4946 */ "subs_s.h\t\0"
  /* 4956 */ "adds_s.h\t\0"
  /* 4966 */ "sat_s.h\t\0"
  /* 4975 */ "clt_s.h\t\0"
  /* 4984 */ "subsuu_s.h\t\0"
  /* 4996 */ "div_s.h\t\0"
  /* 5005 */ "extrv_s.h\t\0"
  /* 5016 */ "max_s.h\t\0"
  /* 5025 */ "copy_s.h\t\0"
  /* 5035 */ "splat.h\t\0"
  /* 5044 */ "bset.h\t\0"
  /* 5052 */ "pcnt.h\t\0"
  /* 5060 */ "insert.h\t\0"
  /* 5070 */ "st.h\t\0"
  /* 5076 */ "asub_u.h\t\0"
  /* 5086 */ "hsub_u.h\t\0"
  /* 5096 */ "dpsub_u.h\t\0"
  /* 5107 */ "hadd_u.h\t\0"
  /* 5117 */ "dpadd_u.h\t\0"
  /* 5128 */ "mod_u.h\t\0"
  /* 5137 */ "cle_u.h\t\0"
  /* 5146 */ "ave_u.h\t\0"
  /* 5155 */ "clei_u.h\t\0"
  /* 5165 */ "mini_u.h\t\0"
  /* 5175 */ "clti_u.h\t\0"
  /* 5185 */ "maxi_u.h\t\0"
  /* 5195 */ "min_u.h\t\0"
  /* 5204 */ "dotp_u.h\t\0"
  /* 5214 */ "aver_u.h\t\0"
  /* 5224 */ "subs_u.h\t\0"
  /* 5234 */ "adds_u.h\t\0"
  /* 5244 */ "subsus_u.h\t\0"
  /* 5256 */ "sat_u.h\t\0"
  /* 5265 */ "clt_u.h\t\0"
  /* 5274 */ "div_u.h\t\0"
  /* 5283 */ "max_u.h\t\0"
  /* 5292 */ "copy_u.h\t\0"
  /* 5302 */ "msubv.h\t\0"
  /* 5311 */ "maddv.h\t\0"
  /* 5320 */ "pckev.h\t\0"
  /* 5329 */ "ilvev.h\t\0"
  /* 5338 */ "mulv.h\t\0"
  /* 5346 */ "bz.h\t\0"
  /* 5352 */ "bnz.h\t\0"
  /* 5359 */ "crc32h\t\0"
  /* 5367 */ "dsbh\t\0"
  /* 5373 */ "wsbh\t\0"
  /* 5379 */ "crc32ch\t\0"
  /* 5388 */ "seh\t\0"
  /* 5393 */ "ulh\t\0"
  /* 5398 */ "shra.ph\t\0"
  /* 5407 */ "precrq.qb.ph\t\0"
  /* 5421 */ "precr.qb.ph\t\0"
  /* 5434 */ "precrqu_s.qb.ph\t\0"
  /* 5451 */ "cmp.le.ph\t\0"
  /* 5462 */ "subqh.ph\t\0"
  /* 5472 */ "addqh.ph\t\0"
  /* 5482 */ "pick.ph\t\0"
  /* 5491 */ "shll.ph\t\0"
  /* 5500 */ "repl.ph\t\0"
  /* 5509 */ "shrl.ph\t\0"
  /* 5518 */ "packrl.ph\t\0"
  /* 5529 */ "mul.ph\t\0"
  /* 5537 */ "subq.ph\t\0"
  /* 5546 */ "addq.ph\t\0"
  /* 5555 */ "cmp.eq.ph\t\0"
  /* 5566 */ "shra_r.ph\t\0"
  /* 5577 */ "subqh_r.ph\t\0"
  /* 5589 */ "addqh_r.ph\t\0"
  /* 5601 */ "shrav_r.ph\t\0"
  /* 5613 */ "shll_s.ph\t\0"
  /* 5624 */ "mul_s.ph\t\0"
  /* 5634 */ "subq_s.ph\t\0"
  /* 5645 */ "addq_s.ph\t\0"
  /* 5656 */ "mulq_s.ph\t\0"
  /* 5667 */ "absq_s.ph\t\0"
  /* 5678 */ "subu_s.ph\t\0"
  /* 5689 */ "addu_s.ph\t\0"
  /* 5700 */ "shllv_s.ph\t\0"
  /* 5712 */ "mulq_rs.ph\t\0"
  /* 5724 */ "cmp.lt.ph\t\0"
  /* 5735 */ "subu.ph\t\0"
  /* 5744 */ "addu.ph\t\0"
  /* 5753 */ "shrav.ph\t\0"
  /* 5763 */ "shllv.ph\t\0"
  /* 5773 */ "replv.ph\t\0"
  /* 5783 */ "shrlv.ph\t\0"
  /* 5793 */ "dpa.w.ph\t\0"
  /* 5803 */ "dpaqx_sa.w.ph\t\0"
  /* 5818 */ "dpsqx_sa.w.ph\t\0"
  /* 5833 */ "mulsa.w.ph\t\0"
  /* 5845 */ "dpaq_s.w.ph\t\0"
  /* 5858 */ "mulsaq_s.w.ph\t\0"
  /* 5873 */ "dpsq_s.w.ph\t\0"
  /* 5886 */ "dpaqx_s.w.ph\t\0"
  /* 5900 */ "dpsqx_s.w.ph\t\0"
  /* 5914 */ "dps.w.ph\t\0"
  /* 5924 */ "dpax.w.ph\t\0"
  /* 5935 */ "dpsx.w.ph\t\0"
  /* 5946 */ "ush\t\0"
  /* 5951 */ "dmuh\t\0"
  /* 5957 */ "synci\t\0"
  /* 5964 */ "daddi\t\0"
  /* 5971 */ "andi\t\0"
  /* 5977 */ "tgei\t\0"
  /* 5983 */ "snei\t\0"
  /* 5989 */ "tnei\t\0"
  /* 5995 */ "dahi\t\0"
  /* 6001 */ "mfhi\t\0"
  /* 6007 */ "mthi\t\0"
  /* 6013 */ ".align 2\n\tli\t\0"
  /* 6027 */ "dli\t\0"
  /* 6032 */ "cmpi\t\0"
  /* 6038 */ "seqi\t\0"
  /* 6044 */ "teqi\t\0"
  /* 6050 */ "xori\t\0"
  /* 6056 */ "dati\t\0"
  /* 6062 */ "slti\t\0"
  /* 6068 */ "tlti\t\0"
  /* 6074 */ "daui\t\0"
  /* 6080 */ "lui\t\0"
  /* 6085 */ "ginvi\t\0"
  /* 6092 */ "j\t\0"
  /* 6095 */ "break\t\0"
  /* 6102 */ "fork\t\0"
  /* 6108 */ "cvt.d.l\t\0"
  /* 6117 */ "cvt.s.l\t\0"
  /* 6126 */ "bal\t\0"
  /* 6131 */ "jal\t\0"
  /* 6136 */ "bgezal\t\0"
  /* 6144 */ "bltzal\t\0"
  /* 6152 */ "dpau.h.qbl\t\0"
  /* 6164 */ "dpsu.h.qbl\t\0"
  /* 6176 */ "muleu_s.ph.qbl\t\0"
  /* 6192 */ "preceu.ph.qbl\t\0"
  /* 6207 */ "precequ.ph.qbl\t\0"
  /* 6223 */ "ldl\t\0"
  /* 6228 */ "sdl\t\0"
  /* 6233 */ "bgel\t\0"
  /* 6239 */ "blel\t\0"
  /* 6245 */ "bnel\t\0"
  /* 6251 */ "bc1fl\t\0"
  /* 6258 */ "maq_sa.w.phl\t\0"
  /* 6272 */ "preceq.w.phl\t\0"
  /* 6286 */ "maq_s.w.phl\t\0"
  /* 6299 */ "muleq_s.w.phl\t\0"
  /* 6314 */ "hypcall\t\0"
  /* 6323 */ "syscall\t\0"
  /* 6332 */ "bgezall\t\0"
  /* 6341 */ "bltzall\t\0"
  /* 6350 */ "dsll\t\0"
  /* 6356 */ "drol\t\0"
  /* 6362 */ "cvt.s.pl\t\0"
  /* 6372 */ "beql\t\0"
  /* 6378 */ "dsrl\t\0"
  /* 6384 */ "bc1tl\t\0"
  /* 6391 */ "bgtl\t\0"
  /* 6397 */ "bltl\t\0"
  /* 6403 */ "bgeul\t\0"
  /* 6410 */ "bleul\t\0"
  /* 6417 */ "dmul\t\0"
  /* 6423 */ "bgtul\t\0"
  /* 6430 */ "bltul\t\0"
  /* 6437 */ "lwl\t\0"
  /* 6442 */ "swl\t\0"
  /* 6447 */ "bgezl\t\0"
  /* 6454 */ "blezl\t\0"
  /* 6461 */ "bgtzl\t\0"
  /* 6468 */ "bltzl\t\0"
  /* 6475 */ "drem\t\0"
  /* 6481 */ "dinsm\t\0"
  /* 6488 */ "dextm\t\0"
  /* 6495 */ "lwm\t\0"
  /* 6500 */ "swm\t\0"
  /* 6505 */ "balign\t\0"
  /* 6513 */ "dalign\t\0"
  /* 6521 */ "movn\t\0"
  /* 6527 */ "dclo\t\0"
  /* 6533 */ "mflo\t\0"
  /* 6539 */ "shilo\t\0"
  /* 6546 */ "mtlo\t\0"
  /* 6552 */ "dmulo\t\0"
  /* 6559 */ "dbitswap\t\0"
  /* 6569 */ "sdbbp\t\0"
  /* 6576 */ "extpdp\t\0"
  /* 6584 */ "movep\t\0"
  /* 6591 */ "mthlip\t\0"
  /* 6599 */ "cmp\t\0"
  /* 6604 */ "dpop\t\0"
  /* 6610 */ "addiur1sp\t\0"
  /* 6621 */ "load_ccond_dsp\t\0"
  /* 6637 */ "store_ccond_dsp\t\0"
  /* 6654 */ "rddsp\t\0"
  /* 6661 */ "wrdsp\t\0"
  /* 6668 */ "jrcaddiusp\t\0"
  /* 6680 */ "jraddiusp\t\0"
  /* 6691 */ "swsp\t\0"
  /* 6697 */ "extp\t\0"
  /* 6703 */ "dvp\t\0"
  /* 6708 */ "evp\t\0"
  /* 6713 */ "lwp\t\0"
  /* 6718 */ "swp\t\0"
  /* 6723 */ "beq\t\0"
  /* 6728 */ "seq\t\0"
  /* 6733 */ "teq\t\0"
  /* 6738 */ "dpau.h.qbr\t\0"
  /* 6750 */ "dpsu.h.qbr\t\0"
  /* 6762 */ "muleu_s.ph.qbr\t\0"
  /* 6778 */ "preceu.ph.qbr\t\0"
  /* 6793 */ "precequ.ph.qbr\t\0"
  /* 6809 */ "ldr\t\0"
  /* 6814 */ "sdr\t\0"
  /* 6819 */ "maq_sa.w.phr\t\0"
  /* 6833 */ "preceq.w.phr\t\0"
  /* 6847 */ "maq_s.w.phr\t\0"
  /* 6860 */ "muleq_s.w.phr\t\0"
  /* 6875 */ "jr\t\0"
  /* 6879 */ "jalr\t\0"
  /* 6885 */ "nor\t\0"
  /* 6890 */ "dror\t\0"
  /* 6896 */ "xor\t\0"
  /* 6901 */ "rdpgpr\t\0"
  /* 6909 */ "wrpgpr\t\0"
  /* 6917 */ "mftr\t\0"
  /* 6923 */ "drotr\t\0"
  /* 6930 */ "mttr\t\0"
  /* 6936 */ "rdhwr\t\0"
  /* 6943 */ "lwr\t\0"
  /* 6948 */ "swr\t\0"
  /* 6953 */ "mina.s\t\0"
  /* 6961 */ "maxa.s\t\0"
  /* 6969 */ "nmsub.s\t\0"
  /* 6978 */ "cvt.d.s\t\0"
  /* 6987 */ "nmadd.s\t\0"
  /* 6996 */ "c.nge.s\t\0"
  /* 7005 */ "c.le.s\t\0"
  /* 7013 */ "cmp.le.s\t\0"
  /* 7023 */ "c.ngle.s\t\0"
  /* 7033 */ "c.ole.s\t\0"
  /* 7042 */ "cmp.sle.s\t\0"
  /* 7053 */ "c.ule.s\t\0"
  /* 7062 */ "cmp.ule.s\t\0"
  /* 7073 */ "cmp.sule.s\t\0"
  /* 7085 */ "c.f.s\t\0"
  /* 7092 */ "cmp.af.s\t\0"
  /* 7102 */ "cmp.saf.s\t\0"
  /* 7113 */ "msubf.s\t\0"
  /* 7122 */ "maddf.s\t\0"
  /* 7131 */ "c.sf.s\t\0"
  /* 7139 */ "movf.s\t\0"
  /* 7147 */ "neg.s\t\0"
  /* 7154 */ "li.s\t\0"
  /* 7160 */ "trunc.l.s\t\0"
  /* 7171 */ "round.l.s\t\0"
  /* 7182 */ "ceil.l.s\t\0"
  /* 7192 */ "floor.l.s\t\0"
  /* 7203 */ "cvt.l.s\t\0"
  /* 7212 */ "sel.s\t\0"
  /* 7219 */ "c.ngl.s\t\0"
  /* 7228 */ "mul.s\t\0"
  /* 7235 */ "min.s\t\0"
  /* 7242 */ "c.un.s\t\0"
  /* 7250 */ "cmp.un.s\t\0"
  /* 7260 */ "cmp.sun.s\t\0"
  /* 7271 */ "movn.s\t\0"
  /* 7279 */ "recip.s\t\0"
  /* 7288 */ "c.eq.s\t\0"
  /* 7296 */ "cmp.eq.s\t\0"
  /* 7306 */ "c.seq.s\t\0"
  /* 7315 */ "cmp.seq.s\t\0"
  /* 7326 */ "c.ueq.s\t\0"
  /* 7335 */ "cmp.ueq.s\t\0"
  /* 7346 */ "cmp.sueq.s\t\0"
  /* 7358 */ "abs.s\t\0"
  /* 7365 */ "cvt.ps.s\t\0"
  /* 7375 */ "class.s\t\0"
  /* 7384 */ "c.ngt.s\t\0"
  /* 7393 */ "c.lt.s\t\0"
  /* 7401 */ "cmp.lt.s\t\0"
  /* 7411 */ "c.olt.s\t\0"
  /* 7420 */ "cmp.slt.s\t\0"
  /* 7431 */ "c.ult.s\t\0"
  /* 7440 */ "cmp.ult.s\t\0"
  /* 7451 */ "cmp.sult.s\t\0"
  /* 7463 */ "rint.s\t\0"
  /* 7471 */ "rsqrt.s\t\0"
  /* 7480 */ "movt.s\t\0"
  /* 7488 */ "div.s\t\0"
  /* 7495 */ "mov.s\t\0"
  /* 7502 */ "trunc.w.s\t\0"
  /* 7513 */ "round.w.s\t\0"
  /* 7524 */ "ceil.w.s\t\0"
  /* 7534 */ "floor.w.s\t\0"
  /* 7545 */ "cvt.w.s\t\0"
  /* 7554 */ "max.s\t\0"
  /* 7561 */ "selnez.s\t\0"
  /* 7571 */ "seleqz.s\t\0"
  /* 7581 */ "movz.s\t\0"
  /* 7589 */ "abs\t\0"
  /* 7594 */ "jals\t\0"
  /* 7600 */ "bgezals\t\0"
  /* 7609 */ "bltzals\t\0"
  /* 7618 */ "cins\t\0"
  /* 7624 */ "dins\t\0"
  /* 7630 */ "sub.ps\t\0"
  /* 7638 */ "add.ps\t\0"
  /* 7646 */ "pll.ps\t\0"
  /* 7654 */ "mul.ps\t\0"
  /* 7662 */ "pul.ps\t\0"
  /* 7670 */ "addr.ps\t\0"
  /* 7679 */ "mulr.ps\t\0"
  /* 7688 */ "plu.ps\t\0"
  /* 7696 */ "puu.ps\t\0"
  /* 7704 */ "cvt.pw.ps\t\0"
  /* 7715 */ "jalrs\t\0"
  /* 7722 */ "exts\t\0"
  /* 7728 */ "lwxs\t\0"
  /* 7734 */ "bc1t\t\0"
  /* 7740 */ "bgt\t\0"
  /* 7745 */ "sgt\t\0"
  /* 7750 */ "wait\t\0"
  /* 7756 */ "blt\t\0"
  /* 7761 */ "slt\t\0"
  /* 7766 */ "tlt\t\0"
  /* 7771 */ "dmult\t\0"
  /* 7778 */ "dmt\t\0"
  /* 7783 */ "emt\t\0"
  /* 7788 */ "not\t\0"
  /* 7793 */ "ginvt\t\0"
  /* 7800 */ "movt\t\0"
  /* 7806 */ "dext\t\0"
  /* 7812 */ "lbu\t\0"
  /* 7817 */ "dsubu\t\0"
  /* 7824 */ "msubu\t\0"
  /* 7831 */ "baddu\t\0"
  /* 7838 */ "daddu\t\0"
  /* 7845 */ "maddu\t\0"
  /* 7852 */ "dmodu\t\0"
  /* 7859 */ "bgeu\t\0"
  /* 7865 */ "sgeu\t\0"
  /* 7871 */ "tgeu\t\0"
  /* 7877 */ "bleu\t\0"
  /* 7883 */ "sleu\t\0"
  /* 7889 */ "ulhu\t\0"
  /* 7895 */ "dmuhu\t\0"
  /* 7902 */ "daddiu\t\0"
  /* 7910 */ "tgeiu\t\0"
  /* 7917 */ "sltiu\t\0"
  /* 7924 */ "tltiu\t\0"
  /* 7931 */ "v3mulu\t\0"
  /* 7939 */ "dmulu\t\0"
  /* 7946 */ "vmulu\t\0"
  /* 7953 */ "dremu\t\0"
  /* 7960 */ "dmulou\t\0"
  /* 7968 */ "cvt.s.pu\t\0"
  /* 7978 */ "dinsu\t\0"
  /* 7985 */ "bgtu\t\0"
  /* 7991 */ "sgtu\t\0"
  /* 7997 */ "bltu\t\0"
  /* 8003 */ "sltu\t\0"
  /* 8009 */ "tltu\t\0"
  /* 8015 */ "dmultu\t\0"
  /* 8023 */ "dextu\t\0"
  /* 8030 */ "ddivu\t\0"
  /* 8037 */ "lwu\t\0"
  /* 8042 */ "and.v\t\0"
  /* 8049 */ "move.v\t\0"
  /* 8057 */ "bsel.v\t\0"
  /* 8065 */ "nor.v\t\0"
  /* 8072 */ "xor.v\t\0"
  /* 8079 */ "bz.v\t\0"
  /* 8085 */ "bmz.v\t\0"
  /* 8092 */ "bnz.v\t\0"
  /* 8099 */ "bmnz.v\t\0"
  /* 8107 */ "dsrav\t\0"
  /* 8114 */ "bitrev\t\0"
  /* 8122 */ "ddiv\t\0"
  /* 8128 */ "dsllv\t\0"
  /* 8135 */ "dsrlv\t\0"
  /* 8142 */ "shilov\t\0"
  /* 8150 */ "extpdpv\t\0"
  /* 8159 */ "extpv\t\0"
  /* 8166 */ "drotrv\t\0"
  /* 8174 */ "insv\t\0"
  /* 8180 */ "flog2.w\t\0"
  /* 8189 */ "fexp2.w\t\0"
  /* 8198 */ "add_a.w\t\0"
  /* 8207 */ "fmin_a.w\t\0"
  /* 8217 */ "adds_a.w\t\0"
  /* 8227 */ "fmax_a.w\t\0"
  /* 8237 */ "sra.w\t\0"
  /* 8244 */ "fsub.w\t\0"
  /* 8252 */ "fmsub.w\t\0"
  /* 8261 */ "nloc.w\t\0"
  /* 8269 */ "nlzc.w\t\0"
  /* 8277 */ "cvt.d.w\t\0"
  /* 8286 */ "fadd.w\t\0"
  /* 8294 */ "fmadd.w\t\0"
  /* 8303 */ "sld.w\t\0"
  /* 8310 */ "pckod.w\t\0"
  /* 8319 */ "ilvod.w\t\0"
  /* 8328 */ "fcle.w\t\0"
  /* 8336 */ "fsle.w\t\0"
  /* 8344 */ "fcule.w\t\0"
  /* 8353 */ "fsule.w\t\0"
  /* 8362 */ "fcne.w\t\0"
  /* 8370 */ "fsne.w\t\0"
  /* 8378 */ "fcune.w\t\0"
  /* 8387 */ "fsune.w\t\0"
  /* 8396 */ "insve.w\t\0"
  /* 8405 */ "fcaf.w\t\0"
  /* 8413 */ "fsaf.w\t\0"
  /* 8421 */ "vshf.w\t\0"
  /* 8429 */ "bneg.w\t\0"
  /* 8437 */ "precr_sra.ph.w\t\0"
  /* 8453 */ "precrq.ph.w\t\0"
  /* 8466 */ "precr_sra_r.ph.w\t\0"
  /* 8484 */ "precrq_rs.ph.w\t\0"
  /* 8500 */ "subqh.w\t\0"
  /* 8509 */ "addqh.w\t\0"
  /* 8518 */ "srai.w\t\0"
  /* 8526 */ "sldi.w\t\0"
  /* 8534 */ "bnegi.w\t\0"
  /* 8543 */ "slli.w\t\0"
  /* 8551 */ "srli.w\t\0"
  /* 8559 */ "binsli.w\t\0"
  /* 8569 */ "ceqi.w\t\0"
  /* 8577 */ "srari.w\t\0"
  /* 8586 */ "bclri.w\t\0"
  /* 8595 */ "srlri.w\t\0"
  /* 8604 */ "binsri.w\t\0"
  /* 8614 */ "splati.w\t\0"
  /* 8624 */ "bseti.w\t\0"
  /* 8633 */ "subvi.w\t\0"
  /* 8642 */ "addvi.w\t\0"
  /* 8651 */ "dpaq_sa.l.w\t\0"
  /* 8664 */ "dpsq_sa.l.w\t\0"
  /* 8677 */ "fill.w\t\0"
  /* 8685 */ "sll.w\t\0"
  /* 8692 */ "fexupl.w\t\0"
  /* 8702 */ "ffql.w\t\0"
  /* 8710 */ "srl.w\t\0"
  /* 8717 */ "binsl.w\t\0"
  /* 8726 */ "fmul.w\t\0"
  /* 8734 */ "ilvl.w\t\0"
  /* 8742 */ "fmin.w\t\0"
  /* 8750 */ "fcun.w\t\0"
  /* 8758 */ "fsun.w\t\0"
  /* 8766 */ "fexdo.w\t\0"
  /* 8775 */ "frcp.w\t\0"
  /* 8783 */ "msub_q.w\t\0"
  /* 8793 */ "madd_q.w\t\0"
  /* 8803 */ "mul_q.w\t\0"
  /* 8812 */ "msubr_q.w\t\0"
  /* 8823 */ "maddr_q.w\t\0"
  /* 8834 */ "mulr_q.w\t\0"
  /* 8844 */ "fceq.w\t\0"
  /* 8852 */ "fseq.w\t\0"
  /* 8860 */ "fcueq.w\t\0"
  /* 8869 */ "fsueq.w\t\0"
  /* 8878 */ "ftq.w\t\0"
  /* 8885 */ "shra_r.w\t\0"
  /* 8895 */ "subqh_r.w\t\0"
  /* 8906 */ "addqh_r.w\t\0"
  /* 8917 */ "extr_r.w\t\0"
  /* 8927 */ "shrav_r.w\t\0"
  /* 8938 */ "extrv_r.w\t\0"
  /* 8949 */ "srar.w\t\0"
  /* 8957 */ "bclr.w\t\0"
  /* 8965 */ "srlr.w\t\0"
  /* 8973 */ "fcor.w\t\0"
  /* 8981 */ "fsor.w\t\0"
  /* 8989 */ "fexupr.w\t\0"
  /* 8999 */ "ffqr.w\t\0"
  /* 9007 */ "binsr.w\t\0"
  /* 9016 */ "extr.w\t\0"
  /* 9024 */ "ilvr.w\t\0"
  /* 9032 */ "cvt.s.w\t\0"
  /* 9041 */ "asub_s.w\t\0"
  /* 9051 */ "hsub_s.w\t\0"
  /* 9061 */ "dpsub_s.w\t\0"
  /* 9072 */ "ftrunc_s.w\t\0"
  /* 9084 */ "hadd_s.w\t\0"
  /* 9094 */ "dpadd_s.w\t\0"
  /* 9105 */ "mod_s.w\t\0"
  /* 9114 */ "cle_s.w\t\0"
  /* 9123 */ "ave_s.w\t\0"
  /* 9132 */ "clei_s.w\t\0"
  /* 9142 */ "mini_s.w\t\0"
  /* 9152 */ "clti_s.w\t\0"
  /* 9162 */ "maxi_s.w\t\0"
  /* 9172 */ "shll_s.w\t\0"
  /* 9182 */ "min_s.w\t\0"
  /* 9191 */ "dotp_s.w\t\0"
  /* 9201 */ "subq_s.w\t\0"
  /* 9211 */ "addq_s.w\t\0"
  /* 9221 */ "mulq_s.w\t\0"
  /* 9231 */ "absq_s.w\t\0"
  /* 9241 */ "aver_s.w\t\0"
  /* 9251 */ "subs_s.w\t\0"
  /* 9261 */ "adds_s.w\t\0"
  /* 9271 */ "sat_s.w\t\0"
  /* 9280 */ "clt_s.w\t\0"
  /* 9289 */ "ffint_s.w\t\0"
  /* 9300 */ "ftint_s.w\t\0"
  /* 9311 */ "subsuu_s.w\t\0"
  /* 9323 */ "div_s.w\t\0"
  /* 9332 */ "shllv_s.w\t\0"
  /* 9343 */ "max_s.w\t\0"
  /* 9352 */ "copy_s.w\t\0"
  /* 9362 */ "mulq_rs.w\t\0"
  /* 9373 */ "extr_rs.w\t\0"
  /* 9384 */ "extrv_rs.w\t\0"
  /* 9396 */ "fclass.w\t\0"
  /* 9406 */ "splat.w\t\0"
  /* 9415 */ "bset.w\t\0"
  /* 9423 */ "fclt.w\t\0"
  /* 9431 */ "fslt.w\t\0"
  /* 9439 */ "fcult.w\t\0"
  /* 9448 */ "fsult.w\t\0"
  /* 9457 */ "pcnt.w\t\0"
  /* 9465 */ "frint.w\t\0"
  /* 9474 */ "insert.w\t\0"
  /* 9484 */ "fsqrt.w\t\0"
  /* 9493 */ "frsqrt.w\t\0"
  /* 9503 */ "st.w\t\0"
  /* 9509 */ "asub_u.w\t\0"
  /* 9519 */ "hsub_u.w\t\0"
  /* 9529 */ "dpsub_u.w\t\0"
  /* 9540 */ "ftrunc_u.w\t\0"
  /* 9552 */ "hadd_u.w\t\0"
  /* 9562 */ "dpadd_u.w\t\0"
  /* 9573 */ "mod_u.w\t\0"
  /* 9582 */ "cle_u.w\t\0"
  /* 9591 */ "ave_u.w\t\0"
  /* 9600 */ "clei_u.w\t\0"
  /* 9610 */ "mini_u.w\t\0"
  /* 9620 */ "clti_u.w\t\0"
  /* 9630 */ "maxi_u.w\t\0"
  /* 9640 */ "min_u.w\t\0"
  /* 9649 */ "dotp_u.w\t\0"
  /* 9659 */ "aver_u.w\t\0"
  /* 9669 */ "subs_u.w\t\0"
  /* 9679 */ "adds_u.w\t\0"
  /* 9689 */ "subsus_u.w\t\0"
  /* 9701 */ "sat_u.w\t\0"
  /* 9710 */ "clt_u.w\t\0"
  /* 9719 */ "ffint_u.w\t\0"
  /* 9730 */ "ftint_u.w\t\0"
  /* 9741 */ "div_u.w\t\0"
  /* 9750 */ "max_u.w\t\0"
  /* 9759 */ "copy_u.w\t\0"
  /* 9769 */ "msubv.w\t\0"
  /* 9778 */ "maddv.w\t\0"
  /* 9787 */ "pckev.w\t\0"
  /* 9796 */ "ilvev.w\t\0"
  /* 9805 */ "fdiv.w\t\0"
  /* 9813 */ "mulv.w\t\0"
  /* 9821 */ "extrv.w\t\0"
  /* 9830 */ "fmax.w\t\0"
  /* 9838 */ "bz.w\t\0"
  /* 9844 */ "bnz.w\t\0"
  /* 9851 */ "crc32w\t\0"
  /* 9859 */ "crc32cw\t\0"
  /* 9868 */ "ulw\t\0"
  /* 9873 */ "cvt.ps.pw\t\0"
  /* 9884 */ "usw\t\0"
  /* 9889 */ "prefx\t\0"
  /* 9896 */ "lhx\t\0"
  /* 9901 */ "jalx\t\0"
  /* 9907 */ "lbux\t\0"
  /* 9913 */ "lwx\t\0"
  /* 9918 */ "bgez\t\0"
  /* 9924 */ "blez\t\0"
  /* 9930 */ "bnez\t\0"
  /* 9936 */ "selnez\t\0"
  /* 9944 */ "btnez\t\0"
  /* 9951 */ "dclz\t\0"
  /* 9957 */ "beqz\t\0"
  /* 9963 */ "seleqz\t\0"
  /* 9971 */ "bteqz\t\0"
  /* 9978 */ "bgtz\t\0"
  /* 9984 */ "bltz\t\0"
  /* 9990 */ "movz\t\0"
  /* 9996 */ "seb\t \0"
  /* 10002 */ "seh\t \0"
  /* 10008 */ "ddivu\t$zero, \0"
  /* 10022 */ "ddiv\t$zero, \0"
  /* 10035 */ "addiu\t$sp, \0"
  /* 10047 */ "mftc0 \0"
  /* 10054 */ "mttc0 \0"
  /* 10061 */ "mfthc1 \0"
  /* 10069 */ "mtthc1 \0"
  /* 10077 */ "cftc1 \0"
  /* 10084 */ "mftc1 \0"
  /* 10091 */ "cttc1 \0"
  /* 10098 */ "mttc1 \0"
  /* 10105 */ "sync \0"
  /* 10111 */ "ld \0"
  /* 10115 */ "\t.word \0"
  /* 10123 */ "sd \0"
  /* 10127 */ "sne \0"
  /* 10132 */ "mfthi \0"
  /* 10139 */ "mtthi \0"
  /* 10146 */ "mftlo \0"
  /* 10153 */ "mttlo \0"
  /* 10160 */ "mftdsp \0"
  /* 10168 */ "mttdsp \0"
  /* 10176 */ "seq \0"
  /* 10181 */ "mftgpr \0"
  /* 10189 */ "mttgpr \0"
  /* 10197 */ "dext \0"
  /* 10203 */ "mftacx \0"
  /* 10211 */ "mttacx \0"
  /* 10219 */ "bc1nez \0"
  /* 10227 */ "bc2nez \0"
  /* 10235 */ "bc1eqz \0"
  /* 10243 */ "bc2eqz \0"
  /* 10251 */ "# XRay Function Patchable RET.\0"
  /* 10282 */ "c.\0"
  /* 10285 */ "# XRay Typed Event Log.\0"
  /* 10309 */ "# XRay Custom Event Log.\0"
  /* 10334 */ "# XRay Function Enter.\0"
  /* 10357 */ "# XRay Tail Call Exit.\0"
  /* 10380 */ "# XRay Function Exit.\0"
  /* 10402 */ "break 0\0"
  /* 10410 */ "LIFETIME_END\0"
  /* 10423 */ "PSEUDO_PROBE\0"
  /* 10436 */ "BUNDLE\0"
  /* 10443 */ "DBG_VALUE\0"
  /* 10453 */ "DBG_INSTR_REF\0"
  /* 10467 */ "DBG_PHI\0"
  /* 10475 */ "DBG_LABEL\0"
  /* 10485 */ "LIFETIME_START\0"
  /* 10500 */ "DBG_VALUE_LIST\0"
  /* 10515 */ "jrc\t$ra\0"
  /* 10523 */ "jr\t$ra\0"
  /* 10530 */ "ehb\0"
  /* 10534 */ "eretnc\0"
  /* 10541 */ "pause\0"
  /* 10547 */ "tlbinvf\0"
  /* 10555 */ "tlbginvf\0"
  /* 10564 */ "tlbwi\0"
  /* 10570 */ "tlbgwi\0"
  /* 10577 */ "# FEntry call\0"
  /* 10591 */ "foo\0"
  /* 10595 */ "tlbp\0"
  /* 10600 */ "tlbgp\0"
  /* 10606 */ "ssnop\0"
  /* 10612 */ "tlbr\0"
  /* 10617 */ "tlbgr\0"
  /* 10623 */ "tlbwr\0"
  /* 10629 */ "tlbgwr\0"
  /* 10636 */ "deret\0"
  /* 10642 */ "wait\0"
  /* 10647 */ "tlbinv\0"
  /* 10654 */ "tlbginv\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    10444U,	// DBG_VALUE
    10501U,	// DBG_VALUE_LIST
    10454U,	// DBG_INSTR_REF
    10468U,	// DBG_PHI
    10476U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    10437U,	// BUNDLE
    10486U,	// LIFETIME_START
    10411U,	// LIFETIME_END
    10424U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    10578U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    10335U,	// PATCHABLE_FUNCTION_ENTER
    10252U,	// PATCHABLE_RET
    10381U,	// PATCHABLE_FUNCTION_EXIT
    10358U,	// PATCHABLE_TAIL_CALL
    10310U,	// PATCHABLE_EVENT_CALL
    10286U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    23974U,	// ABSMacro
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_POSTRA
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_POSTRA
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_POSTRA
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_POSTRA
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I16_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I32_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I64_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MAX_I8_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I16_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I32_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I64_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_MIN_I8_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_POSTRA
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_POSTRA
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_POSTRA
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_POSTRA
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I16_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I32_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I64_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMAX_I8_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I16_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I32_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I64_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_UMIN_I8_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_POSTRA
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_POSTRA
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_POSTRA
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_POSTRA
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_POSTRA
    0U,	// B
    0U,	// BAL_BR
    0U,	// BAL_BR_MM
    134240485U,	// BEQLImmMacro
    134238337U,	// BGE
    134238337U,	// BGEImmMacro
    134240346U,	// BGEL
    134240346U,	// BGELImmMacro
    134241972U,	// BGEU
    134241972U,	// BGEUImmMacro
    134240516U,	// BGEUL
    134240516U,	// BGEULImmMacro
    134241853U,	// BGT
    134241853U,	// BGTImmMacro
    134240504U,	// BGTL
    134240504U,	// BGTLImmMacro
    134242098U,	// BGTU
    134242098U,	// BGTUImmMacro
    134240536U,	// BGTUL
    134240536U,	// BGTULImmMacro
    134238377U,	// BLE
    134238377U,	// BLEImmMacro
    134240352U,	// BLEL
    134240352U,	// BLELImmMacro
    134241990U,	// BLEU
    134241990U,	// BLEUImmMacro
    134240523U,	// BLEUL
    134240523U,	// BLEULImmMacro
    134241869U,	// BLT
    134241869U,	// BLTImmMacro
    134240510U,	// BLTL
    134240510U,	// BLTLImmMacro
    134242110U,	// BLTU
    134242110U,	// BLTUImmMacro
    134240543U,	// BLTUL
    134240543U,	// BLTULImmMacro
    134240358U,	// BNELImmMacro
    0U,	// BPOSGE32_PSEUDO
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    0U,	// BSEL_W_PSEUDO
    0U,	// B_MM
    279279U,	// B_MMR6_Pseudo
    279279U,	// B_MM_Pseudo
    134240836U,	// BeqImm
    134238404U,	// BneImm
    268458440U,	// BteqzT8CmpX16
    268457873U,	// BteqzT8CmpiX16
    268459602U,	// BteqzT8SltX16
    268457903U,	// BteqzT8SltiX16
    268459758U,	// BteqzT8SltiuX16
    268459844U,	// BteqzT8SltuX16
    402676168U,	// BtnezT8CmpX16
    402675601U,	// BtnezT8CmpiX16
    402677330U,	// BtnezT8SltX16
    402675631U,	// BtnezT8SltiX16
    402677486U,	// BtnezT8SltiuX16
    402677572U,	// BtnezT8SltuX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    26462U,	// CFTC1
    10592U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    8955756U,	// CTTC1
    288644U,	// Constant32
    134240530U,	// DMULImmMacro
    134240530U,	// DMULMacro
    134240665U,	// DMULOMacro
    134242073U,	// DMULOUMacro
    134240469U,	// DROL
    134240469U,	// DROLImm
    134241003U,	// DROR
    134241003U,	// DRORImm
    134242235U,	// DSDivIMacro
    134242235U,	// DSDivMacro
    134240588U,	// DSRemIMacro
    134240588U,	// DSRemMacro
    134242143U,	// DUDivIMacro
    134242143U,	// DUDivMacro
    134242066U,	// DURemIMacro
    134242066U,	// DURemMacro
    0U,	// ERet
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_W
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    553670536U,	// GotPrologue16
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// JALR64Pseudo
    0U,	// JALRHB64Pseudo
    0U,	// JALRHBPseudo
    0U,	// JALRPseudo
    0U,	// JAL_MMR6
    284660U,	// JalOneReg
    22516U,	// JalTwoReg
    25192320U,	// LDMacro
    0U,	// LDR_D
    0U,	// LDR_W
    0U,	// LD_F16
    25182214U,	// LOAD_ACC128
    25182214U,	// LOAD_ACC64
    25182214U,	// LOAD_ACC64DSP
    25188830U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_ADDiu2Op
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_DADDiu2Op
    0U,	// LONG_BRANCH_LUi
    0U,	// LONG_BRANCH_LUi2Op
    0U,	// LONG_BRANCH_LUi2Op_64
    55648U,	// LWM_MM
    17042U,	// LoadAddrImm32
    17063U,	// LoadAddrImm64
    25182866U,	// LoadAddrReg32
    25182887U,	// LoadAddrReg64
    22408U,	// LoadImm32
    22412U,	// LoadImm64
    19107U,	// LoadImmDoubleFGR
    19107U,	// LoadImmDoubleFGR_32
    19107U,	// LoadImmDoubleGPR
    23539U,	// LoadImmSingleFGR
    23539U,	// LoadImmSingleGPR
    812686U,	// LwConstant32
    26588U,	// MFTACX
    134244160U,	// MFTC0
    26469U,	// MFTC1
    288689U,	// MFTDSP
    26566U,	// MFTGPR
    26446U,	// MFTHC1
    26517U,	// MFTHI
    26531U,	// MFTLO
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    8955876U,	// MTTACX
    705210183U,	// MTTC0
    8955763U,	// MTTC1
    288697U,	// MTTDSP
    8955854U,	// MTTGPR
    8955734U,	// MTTHC1
    8955804U,	// MTTHI
    8955818U,	// MTTLO
    134240531U,	// MULImmMacro
    134240666U,	// MULOMacro
    134242074U,	// MULOUMacro
    24157U,	// MultRxRy16
    43032157U,	// MultRxRyRz16
    24401U,	// MultuRxRy16
    43032401U,	// MultuRxRyRz16
    0U,	// NOP
    134240998U,	// NORImm
    134240998U,	// NORImm64
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16390U,	// PseudoCVT_D32_W
    16390U,	// PseudoCVT_D64_L
    16390U,	// PseudoCVT_D64_W
    16390U,	// PseudoCVT_S_L
    16390U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoD_SELECT_I
    0U,	// PseudoD_SELECT_I64
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoIndirectBranch64R6
    0U,	// PseudoIndirectBranchR6
    0U,	// PseudoIndirectBranch_MM
    0U,	// PseudoIndirectBranch_MMR6
    0U,	// PseudoIndirectHazardBranch
    0U,	// PseudoIndirectHazardBranch64
    0U,	// PseudoIndrectHazardBranch64R6
    0U,	// PseudoIndrectHazardBranchR6
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMADDU_MM
    0U,	// PseudoMADD_MM
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFHI_MM
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMFLO_MM
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMSUBU_MM
    0U,	// PseudoMSUB_MM
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMTLOHI_MM
    0U,	// PseudoMULT
    0U,	// PseudoMULT_MM
    0U,	// PseudoMULTu
    0U,	// PseudoMULTu_MM
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    134238116U,	// PseudoTRUNC_W_D
    134238116U,	// PseudoTRUNC_W_D32
    134241615U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    134240470U,	// ROL
    134240470U,	// ROLImm
    134241004U,	// ROR
    134241004U,	// RORImm
    0U,	// RetRA
    0U,	// RetRA16
    25185431U,	// SDC1_M1
    0U,	// SDIV_MM_Pseudo
    25192332U,	// SDMacro
    134242236U,	// SDivIMacro
    134242236U,	// SDivMacro
    134244289U,	// SEQIMacro
    134244289U,	// SEQMacro
    134238342U,	// SGE
    134238342U,	// SGEImm
    134238342U,	// SGEImm64
    134241978U,	// SGEU
    134241978U,	// SGEUImm
    134241978U,	// SGEUImm64
    134241858U,	// SGTImm
    134241858U,	// SGTImm64
    134242104U,	// SGTUImm
    134242104U,	// SGTUImm64
    134238387U,	// SLE
    134238387U,	// SLEImm
    134238387U,	// SLEImm64
    134241996U,	// SLEU
    134241996U,	// SLEUImm
    134241996U,	// SLEUImm64
    134241874U,	// SLTImm64
    134242116U,	// SLTUImm64
    134244240U,	// SNEIMacro
    134244240U,	// SNEMacro
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    134240589U,	// SRemIMacro
    134240589U,	// SRemMacro
    25182214U,	// STORE_ACC128
    25182214U,	// STORE_ACC64
    25182214U,	// STORE_ACC64DSP
    25188846U,	// STORE_CCOND_DSP
    0U,	// STR_D
    0U,	// STR_W
    0U,	// ST_F16
    55653U,	// SWM_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    25182849U,	// SaaAddr
    25186321U,	// SaadAddr
    1386214U,	// SelBeqZ
    1386187U,	// SelBneZ
    855710152U,	// SelTBteqZCmp
    855709585U,	// SelTBteqZCmpi
    855711314U,	// SelTBteqZSlt
    855709615U,	// SelTBteqZSlti
    855711470U,	// SelTBteqZSltiu
    855711556U,	// SelTBteqZSltu
    989927880U,	// SelTBtneZCmp
    989927313U,	// SelTBtneZCmpi
    989929042U,	// SelTBtneZSlt
    989927343U,	// SelTBtneZSlti
    989929198U,	// SelTBtneZSltiu
    989929284U,	// SelTBtneZSltu
    59809362U,	// SltCCRxRy16
    59807663U,	// SltiCCRxImmX16
    59809518U,	// SltiuCCRxImmX16
    59809604U,	// SltuCCRxRy16
    59809604U,	// SltuRxRyRz16
    0U,	// TAILCALL
    0U,	// TAILCALL64R6REG
    0U,	// TAILCALLHB64R6REG
    0U,	// TAILCALLHBR6REG
    0U,	// TAILCALLR6REG
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALLREGHB
    0U,	// TAILCALLREGHB64
    0U,	// TAILCALLREG_MM
    0U,	// TAILCALLREG_MMR6
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    0U,	// TRAP
    0U,	// TRAP_MM
    0U,	// UDIV_MM_Pseudo
    134242144U,	// UDivIMacro
    134242144U,	// UDivMacro
    134242067U,	// URemIMacro
    134242067U,	// URemMacro
    25187602U,	// Ulh
    25190098U,	// Ulhu
    25192077U,	// Ulw
    25188155U,	// Ush
    25192093U,	// Usw
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    22052U,	// ABSQ_S_PH
    22052U,	// ABSQ_S_PH_MM
    18197U,	// ABSQ_S_QB
    18197U,	// ABSQ_S_QB_MMR2
    25616U,	// ABSQ_S_W
    25616U,	// ABSQ_S_W_MM
    134238246U,	// ADD
    18483U,	// ADDIUPC
    18483U,	// ADDIUPC_MM
    18483U,	// ADDIUPC_MMR6
    22995U,	// ADDIUR1SP_MM
    134234490U,	// ADDIUR2_MM
    9470363U,	// ADDIUS5_MM
    285200U,	// ADDIUSP_MM
    134242016U,	// ADDIU_MMR6
    134239585U,	// ADDQH_PH
    134239585U,	// ADDQH_PH_MMR2
    134239702U,	// ADDQH_R_PH
    134239702U,	// ADDQH_R_PH_MMR2
    134243019U,	// ADDQH_R_W
    134243019U,	// ADDQH_R_W_MMR2
    134242622U,	// ADDQH_W
    134242622U,	// ADDQH_W_MMR2
    134239659U,	// ADDQ_PH
    134239659U,	// ADDQ_PH_MM
    134239758U,	// ADDQ_S_PH
    134239758U,	// ADDQ_S_PH_MM
    134243324U,	// ADDQ_S_W
    134243324U,	// ADDQ_S_W_MM
    134241783U,	// ADDR_PS64
    134236251U,	// ADDSC
    134236251U,	// ADDSC_MM
    134234875U,	// ADDS_A_B
    134236412U,	// ADDS_A_D
    134238512U,	// ADDS_A_H
    134242330U,	// ADDS_A_W
    134235343U,	// ADDS_S_B
    134237510U,	// ADDS_S_D
    134239069U,	// ADDS_S_H
    134243374U,	// ADDS_S_W
    134235558U,	// ADDS_U_B
    134237977U,	// ADDS_U_D
    134239347U,	// ADDS_U_H
    134243792U,	// ADDS_U_W
    134234710U,	// ADDU16_MM
    134234710U,	// ADDU16_MMR6
    134235793U,	// ADDUH_QB
    134235793U,	// ADDUH_QB_MMR2
    134235901U,	// ADDUH_R_QB
    134235901U,	// ADDUH_R_QB_MMR2
    134241945U,	// ADDU_MMR6
    134239857U,	// ADDU_PH
    134239857U,	// ADDU_PH_MMR2
    134236006U,	// ADDU_QB
    134236006U,	// ADDU_QB_MM
    134239802U,	// ADDU_S_PH
    134239802U,	// ADDU_S_PH_MMR2
    134235947U,	// ADDU_S_QB
    134235947U,	// ADDU_S_QB_MM
    134235124U,	// ADDVI_B
    134236932U,	// ADDVI_D
    134238728U,	// ADDVI_H
    134242755U,	// ADDVI_W
    134235636U,	// ADDV_B
    134238067U,	// ADDV_D
    134239425U,	// ADDV_H
    134243892U,	// ADDV_W
    134236290U,	// ADDWC
    134236290U,	// ADDWC_MM
    134234857U,	// ADD_A_B
    134236393U,	// ADD_A_D
    134238494U,	// ADD_A_H
    134242311U,	// ADD_A_W
    134238246U,	// ADD_MM
    134238246U,	// ADD_MMR6
    134240078U,	// ADDi
    134240078U,	// ADDi_MM
    134242016U,	// ADDiu
    134242016U,	// ADDiu_MM
    134241945U,	// ADDu
    134241945U,	// ADDu_MM
    134240619U,	// ALIGN
    134240619U,	// ALIGN_MMR6
    18475U,	// ALUIPC
    18475U,	// ALUIPC_MMR6
    134238275U,	// AND
    10043849U,	// AND16_MM
    10043849U,	// AND16_MMR6
    134238275U,	// AND64
    134234590U,	// ANDI16_MM
    134234590U,	// ANDI16_MMR6
    134234983U,	// ANDI_B
    134240084U,	// ANDI_MMR6
    134238275U,	// AND_MM
    134238275U,	// AND_MMR6
    134242155U,	// AND_V
    134240084U,	// ANDi
    134240084U,	// ANDi64
    134240084U,	// ANDi_MM
    134238289U,	// APPEND
    134238289U,	// APPEND_MMR2
    134235237U,	// ASUB_S_B
    134237340U,	// ASUB_S_D
    134238901U,	// ASUB_S_H
    134243154U,	// ASUB_S_W
    134235452U,	// ASUB_U_B
    134237807U,	// ASUB_U_D
    134239189U,	// ASUB_U_H
    134243622U,	// ASUB_U_W
    134240188U,	// AUI
    18468U,	// AUIPC
    18468U,	// AUIPC_MMR6
    134240188U,	// AUI_MMR6
    134235323U,	// AVER_S_B
    134237490U,	// AVER_S_D
    134239039U,	// AVER_S_H
    134243354U,	// AVER_S_W
    134235538U,	// AVER_U_B
    134237957U,	// AVER_U_D
    134239327U,	// AVER_U_H
    134243772U,	// AVER_U_W
    134235265U,	// AVE_S_B
    134237422U,	// AVE_S_D
    134238971U,	// AVE_S_H
    134243236U,	// AVE_S_W
    134235480U,	// AVE_U_B
    134237889U,	// AVE_U_D
    134239259U,	// AVE_U_H
    134243704U,	// AVE_U_W
    24288U,	// AddiuRxImmX16
    1859296U,	// AddiuRxPcImmX16
    1090543328U,	// AddiuRxRxImm16
    16801504U,	// AddiuRxRxImmX16
    67133152U,	// AddiuRxRyOffMemX16
    2123572U,	// AddiuSpImm16
    288564U,	// AddiuSpImmX16
    134241945U,	// AdduRxRyRz16
    16797763U,	// AndRxRxRy16
    278949U,	// B16_MM
    134241944U,	// BADDu
    284655U,	// BAL
    280533U,	// BALC
    280533U,	// BALC_MMR6
    134240618U,	// BALIGN
    134240618U,	// BALIGN_MMR2
    209731663U,	// BBIT0
    209731795U,	// BBIT032
    209731788U,	// BBIT1
    209731804U,	// BBIT132
    280512U,	// BC
    278954U,	// BC16_MMR6
    26620U,	// BC1EQZ
    18608U,	// BC1EQZC_MMR6
    20743U,	// BC1F
    22636U,	// BC1FL
    20743U,	// BC1F_MM
    26604U,	// BC1NEZ
    18583U,	// BC1NEZC_MMR6
    24119U,	// BC1T
    22769U,	// BC1TL
    24119U,	// BC1T_MM
    26628U,	// BC2EQZ
    18617U,	// BC2EQZC_MMR6
    26612U,	// BC2NEZ
    18592U,	// BC2NEZC_MMR6
    134235052U,	// BCLRI_B
    134236876U,	// BCLRI_D
    134238672U,	// BCLRI_H
    134242699U,	// BCLRI_W
    134235204U,	// BCLR_B
    134237264U,	// BCLR_D
    134238868U,	// BCLR_H
    134243070U,	// BCLR_W
    280512U,	// BC_MMR6
    134240836U,	// BEQ
    134240836U,	// BEQ64
    134236233U,	// BEQC
    134236233U,	// BEQC64
    134236233U,	// BEQC_MMR6
    134240485U,	// BEQL
    17017U,	// BEQZ16_MM
    18429U,	// BEQZALC
    18429U,	// BEQZALC_MMR6
    18626U,	// BEQZC
    16832U,	// BEQZC16_MMR6
    18626U,	// BEQZC64
    18626U,	// BEQZC_MM
    18626U,	// BEQZC_MMR6
    134240836U,	// BEQ_MM
    134236100U,	// BGEC
    134236100U,	// BGEC64
    134236100U,	// BGEC_MMR6
    134236264U,	// BGEUC
    134236264U,	// BGEUC64
    134236264U,	// BGEUC_MMR6
    26303U,	// BGEZ
    26303U,	// BGEZ64
    22521U,	// BGEZAL
    18402U,	// BGEZALC
    18402U,	// BGEZALC_MMR6
    22717U,	// BGEZALL
    23985U,	// BGEZALS_MM
    22521U,	// BGEZAL_MM
    18569U,	// BGEZC
    18569U,	// BGEZC64
    18569U,	// BGEZC_MMR6
    22832U,	// BGEZL
    26303U,	// BGEZ_MM
    26363U,	// BGTZ
    26363U,	// BGTZ64
    18438U,	// BGTZALC
    18438U,	// BGTZALC_MMR6
    18633U,	// BGTZC
    18633U,	// BGTZC64
    18633U,	// BGTZC_MMR6
    22846U,	// BGTZL
    26363U,	// BGTZ_MM
    151012241U,	// BINSLI_B
    151014065U,	// BINSLI_D
    151015861U,	// BINSLI_H
    151019888U,	// BINSLI_W
    151012388U,	// BINSL_B
    151014265U,	// BINSL_D
    151015975U,	// BINSL_H
    151020046U,	// BINSL_W
    151012302U,	// BINSRI_B
    151014110U,	// BINSRI_D
    151015906U,	// BINSRI_H
    151019933U,	// BINSRI_W
    151012436U,	// BINSR_B
    151014530U,	// BINSR_D
    151016100U,	// BINSR_H
    151020336U,	// BINSR_W
    24499U,	// BITREV
    24499U,	// BITREV_MM
    22945U,	// BITSWAP
    22945U,	// BITSWAP_MMR6
    26309U,	// BLEZ
    26309U,	// BLEZ64
    18411U,	// BLEZALC
    18411U,	// BLEZALC_MMR6
    18576U,	// BLEZC
    18576U,	// BLEZC64
    18576U,	// BLEZC_MMR6
    22839U,	// BLEZL
    26309U,	// BLEZ_MM
    134236258U,	// BLTC
    134236258U,	// BLTC64
    134236258U,	// BLTC_MMR6
    134236271U,	// BLTUC
    134236271U,	// BLTUC64
    134236271U,	// BLTUC_MMR6
    26369U,	// BLTZ
    26369U,	// BLTZ64
    22529U,	// BLTZAL
    18447U,	// BLTZALC
    18447U,	// BLTZALC_MMR6
    22726U,	// BLTZALL
    23994U,	// BLTZALS_MM
    22529U,	// BLTZAL_MM
    18640U,	// BLTZC
    18640U,	// BLTZC64
    18640U,	// BLTZC_MMR6
    22853U,	// BLTZL
    26369U,	// BLTZ_MM
    151012357U,	// BMNZI_B
    151019428U,	// BMNZ_V
    151012349U,	// BMZI_B
    151019414U,	// BMZ_V
    134238404U,	// BNE
    134238404U,	// BNE64
    134236106U,	// BNEC
    134236106U,	// BNEC64
    134236106U,	// BNEC_MMR6
    134234991U,	// BNEGI_B
    134236824U,	// BNEGI_D
    134238620U,	// BNEGI_H
    134242647U,	// BNEGI_W
    134234959U,	// BNEG_B
    134236800U,	// BNEG_D
    134238596U,	// BNEG_H
    134242542U,	// BNEG_W
    134240358U,	// BNEL
    17009U,	// BNEZ16_MM
    18420U,	// BNEZALC
    18420U,	// BNEZALC_MMR6
    18601U,	// BNEZC
    16823U,	// BNEZC16_MMR6
    18601U,	// BNEZC64
    18601U,	// BNEZC_MM
    18601U,	// BNEZC_MMR6
    134238404U,	// BNE_MM
    134236278U,	// BNVC
    134236278U,	// BNVC_MMR6
    17948U,	// BNZ_B
    20464U,	// BNZ_D
    21737U,	// BNZ_H
    24477U,	// BNZ_V
    26229U,	// BNZ_W
    134236284U,	// BOVC
    134236284U,	// BOVC_MMR6
    278765U,	// BPOSGE32
    280501U,	// BPOSGE32C_MMR3
    278765U,	// BPOSGE32_MM
    75601872U,	// BREAK
    360948U,	// BREAK16_MM
    360948U,	// BREAK16_MMR6
    75601872U,	// BREAK_MM
    75601872U,	// BREAK_MMR6
    151012216U,	// BSELI_B
    151019386U,	// BSEL_V
    134235106U,	// BSETI_B
    134236914U,	// BSETI_D
    134238710U,	// BSETI_H
    134242737U,	// BSETI_W
    134235420U,	// BSET_B
    134237626U,	// BSET_D
    134239157U,	// BSET_H
    134243528U,	// BSET_W
    17942U,	// BZ_B
    20448U,	// BZ_D
    21731U,	// BZ_H
    24464U,	// BZ_V
    26223U,	// BZ_W
    1207985894U,	// BeqzRxImm16
    26342U,	// BeqzRxImmX16
    2114287U,	// Bimm16
    279279U,	// BimmX16
    1207985867U,	// BnezRxImm16
    26315U,	// BnezRxImmX16
    10403U,	// Break16
    2385652U,	// Bteqz16
    288500U,	// BteqzX16
    2385625U,	// Btnez16
    288473U,	// BtnezX16
    2740368U,	// CACHE
    2740338U,	// CACHEE
    2740338U,	// CACHEE_MM
    2740368U,	// CACHE_MM
    2740368U,	// CACHE_MMR6
    2740368U,	// CACHE_R6
    19235U,	// CEIL_L_D64
    19235U,	// CEIL_L_D_MMR6
    23567U,	// CEIL_L_S
    23567U,	// CEIL_L_S_MMR6
    20410U,	// CEIL_W_D32
    20410U,	// CEIL_W_D64
    20410U,	// CEIL_W_D_MMR6
    20410U,	// CEIL_W_MM
    23909U,	// CEIL_W_S
    23909U,	// CEIL_W_S_MM
    23909U,	// CEIL_W_S_MMR6
    134235035U,	// CEQI_B
    134236859U,	// CEQI_D
    134238655U,	// CEQI_H
    134242682U,	// CEQI_W
    134235189U,	// CEQ_B
    134237171U,	// CEQ_D
    134238846U,	// CEQ_H
    134242958U,	// CEQ_W
    16482U,	// CFC1
    16482U,	// CFC1_MM
    16698U,	// CFC2_MM
    17113U,	// CFCMSA
    134241731U,	// CINS
    134234398U,	// CINS32
    134241731U,	// CINS64_32
    134241731U,	// CINS_i32
    19880U,	// CLASS_D
    19880U,	// CLASS_D_MMR6
    23760U,	// CLASS_S
    23760U,	// CLASS_S_MMR6
    134235274U,	// CLEI_S_B
    134237431U,	// CLEI_S_D
    134238980U,	// CLEI_S_H
    134243245U,	// CLEI_S_W
    134235489U,	// CLEI_U_B
    134237898U,	// CLEI_U_D
    134239268U,	// CLEI_U_H
    134243713U,	// CLEI_U_W
    134235256U,	// CLE_S_B
    134237413U,	// CLE_S_D
    134238962U,	// CLE_S_H
    134243227U,	// CLE_S_W
    134235471U,	// CLE_U_B
    134237880U,	// CLE_U_D
    134239250U,	// CLE_U_H
    134243695U,	// CLE_U_W
    22913U,	// CLO
    22913U,	// CLO_MM
    22913U,	// CLO_MMR6
    22913U,	// CLO_R6
    134235294U,	// CLTI_S_B
    134237451U,	// CLTI_S_D
    134239000U,	// CLTI_S_H
    134243265U,	// CLTI_S_W
    134235509U,	// CLTI_U_B
    134237918U,	// CLTI_U_D
    134239288U,	// CLTI_U_H
    134243733U,	// CLTI_U_W
    134235362U,	// CLT_S_B
    134237529U,	// CLT_S_D
    134239088U,	// CLT_S_H
    134243393U,	// CLT_S_W
    134235589U,	// CLT_U_B
    134238008U,	// CLT_U_D
    134239378U,	// CLT_U_H
    134243823U,	// CLT_U_W
    26337U,	// CLZ
    26337U,	// CLZ_MM
    26337U,	// CLZ_MMR6
    26337U,	// CLZ_R6
    134235839U,	// CMPGDU_EQ_QB
    134235839U,	// CMPGDU_EQ_QB_MMR2
    134235744U,	// CMPGDU_LE_QB
    134235744U,	// CMPGDU_LE_QB_MMR2
    134235958U,	// CMPGDU_LT_QB
    134235958U,	// CMPGDU_LT_QB_MMR2
    134235853U,	// CMPGU_EQ_QB
    134235853U,	// CMPGU_EQ_QB_MM
    134235758U,	// CMPGU_LE_QB
    134235758U,	// CMPGU_LE_QB_MM
    134235972U,	// CMPGU_LT_QB
    134235972U,	// CMPGU_LT_QB_MM
    18138U,	// CMPU_EQ_QB
    18138U,	// CMPU_EQ_QB_MM
    18043U,	// CMPU_LE_QB
    18043U,	// CMPU_LE_QB_MM
    18257U,	// CMPU_LT_QB
    18257U,	// CMPU_LT_QB_MM
    134236721U,	// CMP_AF_D_MMR6
    134241205U,	// CMP_AF_S_MMR6
    134237160U,	// CMP_EQ_D
    134237160U,	// CMP_EQ_D_MMR6
    21940U,	// CMP_EQ_PH
    21940U,	// CMP_EQ_PH_MM
    134241409U,	// CMP_EQ_S
    134241409U,	// CMP_EQ_S_MMR6
    134236721U,	// CMP_F_D
    134241205U,	// CMP_F_S
    134236565U,	// CMP_LE_D
    134236565U,	// CMP_LE_D_MMR6
    21836U,	// CMP_LE_PH
    21836U,	// CMP_LE_PH_MM
    134241126U,	// CMP_LE_S
    134241126U,	// CMP_LE_S_MMR6
    134237651U,	// CMP_LT_D
    134237651U,	// CMP_LT_D_MMR6
    22109U,	// CMP_LT_PH
    22109U,	// CMP_LT_PH_MM
    134241514U,	// CMP_LT_S
    134241514U,	// CMP_LT_S_MMR6
    134236739U,	// CMP_SAF_D
    134236739U,	// CMP_SAF_D_MMR6
    134241215U,	// CMP_SAF_S
    134241215U,	// CMP_SAF_S_MMR6
    134237187U,	// CMP_SEQ_D
    134237187U,	// CMP_SEQ_D_MMR6
    134241428U,	// CMP_SEQ_S
    134241428U,	// CMP_SEQ_S_MMR6
    134236602U,	// CMP_SLE_D
    134236602U,	// CMP_SLE_D_MMR6
    134241155U,	// CMP_SLE_S
    134241155U,	// CMP_SLE_S_MMR6
    134237678U,	// CMP_SLT_D
    134237678U,	// CMP_SLT_D_MMR6
    134241533U,	// CMP_SLT_S
    134241533U,	// CMP_SLT_S_MMR6
    134237235U,	// CMP_SUEQ_D
    134237235U,	// CMP_SUEQ_D_MMR6
    134241459U,	// CMP_SUEQ_S
    134241459U,	// CMP_SUEQ_S_MMR6
    134236650U,	// CMP_SULE_D
    134236650U,	// CMP_SULE_D_MMR6
    134241186U,	// CMP_SULE_S
    134241186U,	// CMP_SULE_S_MMR6
    134237726U,	// CMP_SULT_D
    134237726U,	// CMP_SULT_D_MMR6
    134241564U,	// CMP_SULT_S
    134241564U,	// CMP_SULT_S_MMR6
    134237108U,	// CMP_SUN_D
    134237108U,	// CMP_SUN_D_MMR6
    134241373U,	// CMP_SUN_S
    134241373U,	// CMP_SUN_S_MMR6
    134237215U,	// CMP_UEQ_D
    134237215U,	// CMP_UEQ_D_MMR6
    134241448U,	// CMP_UEQ_S
    134241448U,	// CMP_UEQ_S_MMR6
    134236630U,	// CMP_ULE_D
    134236630U,	// CMP_ULE_D_MMR6
    134241175U,	// CMP_ULE_S
    134241175U,	// CMP_ULE_S_MMR6
    134237706U,	// CMP_ULT_D
    134237706U,	// CMP_ULT_D_MMR6
    134241553U,	// CMP_ULT_S
    134241553U,	// CMP_ULT_S_MMR6
    134237090U,	// CMP_UN_D
    134237090U,	// CMP_UN_D_MMR6
    134241363U,	// CMP_UN_S
    134241363U,	// CMP_UN_S_MMR6
    1342194953U,	// COPY_S_B
    1342197142U,	// COPY_S_D
    1342198690U,	// COPY_S_H
    1342203017U,	// COPY_S_W
    1342195168U,	// COPY_U_B
    1342198957U,	// COPY_U_H
    1342203424U,	// COPY_U_W
    134235683U,	// CRC32B
    134235691U,	// CRC32CB
    134238231U,	// CRC32CD
    134239492U,	// CRC32CH
    134243972U,	// CRC32CW
    134238217U,	// CRC32D
    134239472U,	// CRC32H
    134243964U,	// CRC32W
    8945789U,	// CTC1
    8945789U,	// CTC1_MM
    8946005U,	// CTC2_MM
    17121U,	// CTCMSA
    23363U,	// CVT_D32_S
    23363U,	// CVT_D32_S_MM
    24662U,	// CVT_D32_W
    24662U,	// CVT_D32_W_MM
    22493U,	// CVT_D64_L
    23363U,	// CVT_D64_S
    23363U,	// CVT_D64_S_MM
    24662U,	// CVT_D64_W
    24662U,	// CVT_D64_W_MM
    22493U,	// CVT_D_L_MMR6
    19256U,	// CVT_L_D64
    19256U,	// CVT_L_D64_MM
    19256U,	// CVT_L_D_MMR6
    23588U,	// CVT_L_S
    23588U,	// CVT_L_S_MM
    23588U,	// CVT_L_S_MMR6
    26258U,	// CVT_PS_PW64
    134241478U,	// CVT_PS_S64
    24089U,	// CVT_PW_PS64
    19603U,	// CVT_S_D32
    19603U,	// CVT_S_D32_MM
    19603U,	// CVT_S_D64
    19603U,	// CVT_S_D64_MM
    22502U,	// CVT_S_L
    22502U,	// CVT_S_L_MMR6
    22747U,	// CVT_S_PL64
    24353U,	// CVT_S_PU64
    25417U,	// CVT_S_W
    25417U,	// CVT_S_W_MM
    25417U,	// CVT_S_W_MMR6
    20431U,	// CVT_W_D32
    20431U,	// CVT_W_D32_MM
    20431U,	// CVT_W_D64
    20431U,	// CVT_W_D64_MM
    23930U,	// CVT_W_S
    23930U,	// CVT_W_S_MM
    23930U,	// CVT_W_S_MMR6
    134237152U,	// C_EQ_D32
    134237152U,	// C_EQ_D32_MM
    134237152U,	// C_EQ_D64
    134237152U,	// C_EQ_D64_MM
    134241401U,	// C_EQ_S
    134241401U,	// C_EQ_S_MM
    134236714U,	// C_F_D32
    134236714U,	// C_F_D32_MM
    134236714U,	// C_F_D64
    134236714U,	// C_F_D64_MM
    134241198U,	// C_F_S
    134241198U,	// C_F_S_MM
    134236557U,	// C_LE_D32
    134236557U,	// C_LE_D32_MM
    134236557U,	// C_LE_D64
    134236557U,	// C_LE_D64_MM
    134241118U,	// C_LE_S
    134241118U,	// C_LE_S_MM
    134237643U,	// C_LT_D32
    134237643U,	// C_LT_D32_MM
    134237643U,	// C_LT_D64
    134237643U,	// C_LT_D64_MM
    134241506U,	// C_LT_S
    134241506U,	// C_LT_S_MM
    134236548U,	// C_NGE_D32
    134236548U,	// C_NGE_D32_MM
    134236548U,	// C_NGE_D64
    134236548U,	// C_NGE_D64_MM
    134241109U,	// C_NGE_S
    134241109U,	// C_NGE_S_MM
    134236583U,	// C_NGLE_D32
    134236583U,	// C_NGLE_D32_MM
    134236583U,	// C_NGLE_D64
    134236583U,	// C_NGLE_D64_MM
    134241136U,	// C_NGLE_S
    134241136U,	// C_NGLE_S_MM
    134237000U,	// C_NGL_D32
    134237000U,	// C_NGL_D32_MM
    134237000U,	// C_NGL_D64
    134237000U,	// C_NGL_D64_MM
    134241332U,	// C_NGL_S
    134241332U,	// C_NGL_S_MM
    134237634U,	// C_NGT_D32
    134237634U,	// C_NGT_D32_MM
    134237634U,	// C_NGT_D64
    134237634U,	// C_NGT_D64_MM
    134241497U,	// C_NGT_S
    134241497U,	// C_NGT_S_MM
    134236593U,	// C_OLE_D32
    134236593U,	// C_OLE_D32_MM
    134236593U,	// C_OLE_D64
    134236593U,	// C_OLE_D64_MM
    134241146U,	// C_OLE_S
    134241146U,	// C_OLE_S_MM
    134237669U,	// C_OLT_D32
    134237669U,	// C_OLT_D32_MM
    134237669U,	// C_OLT_D64
    134237669U,	// C_OLT_D64_MM
    134241524U,	// C_OLT_S
    134241524U,	// C_OLT_S_MM
    134237178U,	// C_SEQ_D32
    134237178U,	// C_SEQ_D32_MM
    134237178U,	// C_SEQ_D64
    134237178U,	// C_SEQ_D64_MM
    134241419U,	// C_SEQ_S
    134241419U,	// C_SEQ_S_MM
    134236784U,	// C_SF_D32
    134236784U,	// C_SF_D32_MM
    134236784U,	// C_SF_D64
    134236784U,	// C_SF_D64_MM
    134241244U,	// C_SF_S
    134241244U,	// C_SF_S_MM
    134237206U,	// C_UEQ_D32
    134237206U,	// C_UEQ_D32_MM
    134237206U,	// C_UEQ_D64
    134237206U,	// C_UEQ_D64_MM
    134241439U,	// C_UEQ_S
    134241439U,	// C_UEQ_S_MM
    134236621U,	// C_ULE_D32
    134236621U,	// C_ULE_D32_MM
    134236621U,	// C_ULE_D64
    134236621U,	// C_ULE_D64_MM
    134241166U,	// C_ULE_S
    134241166U,	// C_ULE_S_MM
    134237697U,	// C_ULT_D32
    134237697U,	// C_ULT_D32_MM
    134237697U,	// C_ULT_D64
    134237697U,	// C_ULT_D64_MM
    134241544U,	// C_ULT_S
    134241544U,	// C_ULT_S_MM
    134237082U,	// C_UN_D32
    134237082U,	// C_UN_D32_MM
    134237082U,	// C_UN_D64
    134237082U,	// C_UN_D64_MM
    134241355U,	// C_UN_S
    134241355U,	// C_UN_S_MM
    22984U,	// CmpRxRy16
    1476417425U,	// CmpiRxImm16
    22417U,	// CmpiRxImmX16
    134238245U,	// DADD
    134240077U,	// DADDi
    134242015U,	// DADDiu
    134241951U,	// DADDu
    134240108U,	// DAHI
    134240626U,	// DALIGN
    134240169U,	// DATI
    134240187U,	// DAUI
    22944U,	// DBITSWAP
    22912U,	// DCLO
    22912U,	// DCLO_R6
    26336U,	// DCLZ
    26336U,	// DCLZ_R6
    134242235U,	// DDIV
    134242143U,	// DDIVU
    10637U,	// DERET
    10637U,	// DERET_MM
    10637U,	// DERET_MMR6
    134241919U,	// DEXT
    134244310U,	// DEXT64_32
    134240601U,	// DEXTM
    134242136U,	// DEXTU
    284496U,	// DI
    134241737U,	// DINS
    134240594U,	// DINSM
    134242091U,	// DINSU
    134242236U,	// DIV
    134242144U,	// DIVU
    134242144U,	// DIVU_MMR6
    134242236U,	// DIV_MMR6
    134235383U,	// DIV_S_B
    134237572U,	// DIV_S_D
    134239109U,	// DIV_S_H
    134243436U,	// DIV_S_W
    134235598U,	// DIV_U_B
    134238039U,	// DIV_U_D
    134239387U,	// DIV_U_H
    134243854U,	// DIV_U_W
    284496U,	// DI_MM
    284496U,	// DI_MMR6
    134234835U,	// DLSA
    134234835U,	// DLSA_R6
    134234113U,	// DMFC0
    16488U,	// DMFC1
    134234432U,	// DMFC2
    75514176U,	// DMFC2_OCTEON
    134234120U,	// DMFGC0
    134238297U,	// DMOD
    134241965U,	// DMODU
    286307U,	// DMT
    705200182U,	// DMTC0
    8945795U,	// DMTC1
    705200475U,	// DMTC2
    75514203U,	// DMTC2_OCTEON
    705200160U,	// DMTGC0
    134240064U,	// DMUH
    134242008U,	// DMUHU
    134240530U,	// DMUL
    24156U,	// DMULT
    24400U,	// DMULTu
    134242052U,	// DMULU
    134240530U,	// DMUL_R6
    134237480U,	// DOTP_S_D
    134239029U,	// DOTP_S_H
    134243304U,	// DOTP_S_W
    134237947U,	// DOTP_U_D
    134239317U,	// DOTP_U_H
    134243762U,	// DOTP_U_W
    151014609U,	// DPADD_S_D
    151016158U,	// DPADD_S_H
    151020423U,	// DPADD_S_W
    151015076U,	// DPADD_U_D
    151016446U,	// DPADD_U_H
    151020891U,	// DPADD_U_W
    134239916U,	// DPAQX_SA_W_PH
    134239916U,	// DPAQX_SA_W_PH_MMR2
    134239999U,	// DPAQX_S_W_PH
    134239999U,	// DPAQX_S_W_PH_MMR2
    134242764U,	// DPAQ_SA_L_W
    134242764U,	// DPAQ_SA_L_W_MM
    134239958U,	// DPAQ_S_W_PH
    134239958U,	// DPAQ_S_W_PH_MM
    134240265U,	// DPAU_H_QBL
    134240265U,	// DPAU_H_QBL_MM
    134240851U,	// DPAU_H_QBR
    134240851U,	// DPAU_H_QBR_MM
    134240037U,	// DPAX_W_PH
    134240037U,	// DPAX_W_PH_MMR2
    134239906U,	// DPA_W_PH
    134239906U,	// DPA_W_PH_MMR2
    22989U,	// DPOP
    134239931U,	// DPSQX_SA_W_PH
    134239931U,	// DPSQX_SA_W_PH_MMR2
    134240013U,	// DPSQX_S_W_PH
    134240013U,	// DPSQX_S_W_PH_MMR2
    134242777U,	// DPSQ_SA_L_W
    134242777U,	// DPSQ_SA_L_W_MM
    134239986U,	// DPSQ_S_W_PH
    134239986U,	// DPSQ_S_W_PH_MM
    151014576U,	// DPSUB_S_D
    151016137U,	// DPSUB_S_H
    151020390U,	// DPSUB_S_W
    151015043U,	// DPSUB_U_D
    151016425U,	// DPSUB_U_H
    151020858U,	// DPSUB_U_W
    134240277U,	// DPSU_H_QBL
    134240277U,	// DPSU_H_QBL_MM
    134240863U,	// DPSU_H_QBR
    134240863U,	// DPSU_H_QBR_MM
    134240048U,	// DPSX_W_PH
    134240048U,	// DPSX_W_PH_MMR2
    134240027U,	// DPS_W_PH
    134240027U,	// DPS_W_PH_MMR2
    134241036U,	// DROTR
    134234389U,	// DROTR32
    134242279U,	// DROTRV
    21752U,	// DSBH
    26407U,	// DSDIV
    20529U,	// DSHD
    134240463U,	// DSLL
    134234359U,	// DSLL32
    1610635471U,	// DSLL64_32
    134242241U,	// DSLLV
    134234829U,	// DSRA
    134234341U,	// DSRA32
    134242220U,	// DSRAV
    134240491U,	// DSRL
    134234367U,	// DSRL32
    134242248U,	// DSRLV
    134236073U,	// DSUB
    134241930U,	// DSUBu
    26393U,	// DUDIV
    285232U,	// DVP
    282835U,	// DVPE
    285232U,	// DVP_MMR6
    26408U,	// DivRxRy16
    26394U,	// DivuRxRy16
    10531U,	// EHB
    10531U,	// EHB_MM
    10531U,	// EHB_MMR6
    284508U,	// EI
    284508U,	// EI_MM
    284508U,	// EI_MMR6
    286312U,	// EMT
    10638U,	// ERET
    10535U,	// ERETNC
    10535U,	// ERETNC_MMR6
    10638U,	// ERET_MM
    10638U,	// ERET_MMR6
    285237U,	// EVP
    282841U,	// EVPE
    285237U,	// EVP_MMR6
    134241920U,	// EXT
    134240810U,	// EXTP
    134240689U,	// EXTPDP
    134242263U,	// EXTPDPV
    134242263U,	// EXTPDPV_MM
    134240689U,	// EXTPDP_MM
    134242272U,	// EXTPV
    134242272U,	// EXTPV_MM
    134240810U,	// EXTP_MM
    134243497U,	// EXTRV_RS_W
    134243497U,	// EXTRV_RS_W_MM
    134243051U,	// EXTRV_R_W
    134243051U,	// EXTRV_R_W_MM
    134239118U,	// EXTRV_S_H
    134239118U,	// EXTRV_S_H_MM
    134243934U,	// EXTRV_W
    134243934U,	// EXTRV_W_MM
    134243486U,	// EXTR_RS_W
    134243486U,	// EXTR_RS_W_MM
    134243030U,	// EXTR_R_W
    134243030U,	// EXTR_R_W_MM
    134239049U,	// EXTR_S_H
    134239049U,	// EXTR_S_H_MM
    134243129U,	// EXTR_W
    134243129U,	// EXTR_W_MM
    134241835U,	// EXTS
    134234406U,	// EXTS32
    134241920U,	// EXT_MM
    134241920U,	// EXT_MMR6
    19872U,	// FABS_D32
    19872U,	// FABS_D32_MM
    19872U,	// FABS_D64
    19872U,	// FABS_D64_MM
    23743U,	// FABS_S
    23743U,	// FABS_S_MM
    134236497U,	// FADD_D
    134236498U,	// FADD_D32
    134236498U,	// FADD_D32_MM
    134236498U,	// FADD_D64
    134236498U,	// FADD_D64_MM
    134241751U,	// FADD_PS64
    134241102U,	// FADD_S
    134241102U,	// FADD_S_MM
    151018318U,	// FADD_S_MMR6
    134242399U,	// FADD_W
    134236731U,	// FCAF_D
    134242518U,	// FCAF_W
    134237170U,	// FCEQ_D
    134242957U,	// FCEQ_W
    19879U,	// FCLASS_D
    25781U,	// FCLASS_W
    134236575U,	// FCLE_D
    134242441U,	// FCLE_W
    134237661U,	// FCLT_D
    134243536U,	// FCLT_W
    3024939U,	// FCMP_D32
    3024939U,	// FCMP_D32_MM
    3024939U,	// FCMP_D64
    3287083U,	// FCMP_S32
    3287083U,	// FCMP_S32_MM
    134236671U,	// FCNE_D
    134242475U,	// FCNE_W
    134237280U,	// FCOR_D
    134243086U,	// FCOR_W
    134237226U,	// FCUEQ_D
    134242973U,	// FCUEQ_W
    134236641U,	// FCULE_D
    134242457U,	// FCULE_W
    134237717U,	// FCULT_D
    134243552U,	// FCULT_W
    134236687U,	// FCUNE_D
    134242491U,	// FCUNE_W
    134237100U,	// FCUN_D
    134242863U,	// FCUN_W
    134238093U,	// FDIV_D
    134238094U,	// FDIV_D32
    134238094U,	// FDIV_D32_MM
    134238094U,	// FDIV_D64
    134238094U,	// FDIV_D64_MM
    134241601U,	// FDIV_S
    134241601U,	// FDIV_S_MM
    151018817U,	// FDIV_S_MMR6
    134243918U,	// FDIV_W
    134238776U,	// FEXDO_H
    134242879U,	// FEXDO_W
    134236384U,	// FEXP2_D
    134242302U,	// FEXP2_W
    19296U,	// FEXUPL_D
    25077U,	// FEXUPL_W
    19568U,	// FEXUPR_D
    25374U,	// FEXUPR_W
    19810U,	// FFINT_S_D
    25674U,	// FFINT_S_W
    20289U,	// FFINT_U_D
    26104U,	// FFINT_U_W
    19306U,	// FFQL_D
    25087U,	// FFQL_W
    19578U,	// FFQR_D
    25384U,	// FFQR_W
    17422U,	// FILL_B
    19281U,	// FILL_D
    21009U,	// FILL_H
    25062U,	// FILL_W
    18647U,	// FLOG2_D
    24565U,	// FLOG2_W
    19245U,	// FLOOR_L_D64
    19245U,	// FLOOR_L_D_MMR6
    23577U,	// FLOOR_L_S
    23577U,	// FLOOR_L_S_MMR6
    20420U,	// FLOOR_W_D32
    20420U,	// FLOOR_W_D64
    20420U,	// FLOOR_W_D_MMR6
    20420U,	// FLOOR_W_MM
    23919U,	// FLOOR_W_S
    23919U,	// FLOOR_W_S_MM
    23919U,	// FLOOR_W_S_MMR6
    151013721U,	// FMADD_D
    151019623U,	// FMADD_W
    134236422U,	// FMAX_A_D
    134242340U,	// FMAX_A_W
    134238168U,	// FMAX_D
    134243943U,	// FMAX_W
    134236402U,	// FMIN_A_D
    134242320U,	// FMIN_A_W
    134237074U,	// FMIN_D
    134242855U,	// FMIN_W
    20381U,	// FMOV_D32
    20381U,	// FMOV_D32_MM
    20381U,	// FMOV_D64
    20381U,	// FMOV_D64_MM
    20381U,	// FMOV_D_MMR6
    23880U,	// FMOV_S
    23880U,	// FMOV_S_MM
    23880U,	// FMOV_S_MMR6
    151013679U,	// FMSUB_D
    151019581U,	// FMSUB_W
    134237058U,	// FMUL_D
    134237059U,	// FMUL_D32
    134237059U,	// FMUL_D32_MM
    134237059U,	// FMUL_D64
    134237059U,	// FMUL_D64_MM
    134241767U,	// FMUL_PS64
    134241341U,	// FMUL_S
    134241341U,	// FMUL_S_MM
    151018557U,	// FMUL_S_MMR6
    134242839U,	// FMUL_W
    19073U,	// FNEG_D32
    19073U,	// FNEG_D32_MM
    19073U,	// FNEG_D64
    19073U,	// FNEG_D64_MM
    23532U,	// FNEG_S
    23532U,	// FNEG_S_MM
    23532U,	// FNEG_S_MMR6
    1778948055U,	// FORK
    19407U,	// FRCP_D
    25160U,	// FRCP_W
    20027U,	// FRINT_D
    25850U,	// FRINT_W
    20055U,	// FRSQRT_D
    25878U,	// FRSQRT_W
    134236750U,	// FSAF_D
    134242526U,	// FSAF_W
    134237198U,	// FSEQ_D
    134242965U,	// FSEQ_W
    134236613U,	// FSLE_D
    134242449U,	// FSLE_W
    134237689U,	// FSLT_D
    134243544U,	// FSLT_W
    134236679U,	// FSNE_D
    134242483U,	// FSNE_W
    134237288U,	// FSOR_D
    134243094U,	// FSOR_W
    20046U,	// FSQRT_D
    20047U,	// FSQRT_D32
    20047U,	// FSQRT_D32_MM
    20047U,	// FSQRT_D64
    20047U,	// FSQRT_D64_MM
    23857U,	// FSQRT_S
    23857U,	// FSQRT_S_MM
    25869U,	// FSQRT_W
    134236455U,	// FSUB_D
    134236456U,	// FSUB_D32
    134236456U,	// FSUB_D32_MM
    134236456U,	// FSUB_D64
    134236456U,	// FSUB_D64_MM
    134241743U,	// FSUB_PS64
    134241084U,	// FSUB_S
    134241084U,	// FSUB_S_MM
    151018300U,	// FSUB_S_MMR6
    134242357U,	// FSUB_W
    134237247U,	// FSUEQ_D
    134242982U,	// FSUEQ_W
    134236662U,	// FSULE_D
    134242466U,	// FSULE_W
    134237738U,	// FSULT_D
    134243561U,	// FSULT_W
    134236696U,	// FSUNE_D
    134242500U,	// FSUNE_W
    134237119U,	// FSUN_D
    134242871U,	// FSUN_W
    19821U,	// FTINT_S_D
    25685U,	// FTINT_S_W
    20300U,	// FTINT_U_D
    26115U,	// FTINT_U_W
    134238853U,	// FTQ_H
    134242991U,	// FTQ_W
    19643U,	// FTRUNC_S_D
    25457U,	// FTRUNC_S_W
    20110U,	// FTRUNC_U_D
    25925U,	// FTRUNC_U_W
    284614U,	// GINVI
    284614U,	// GINVI_MMR6
    75521650U,	// GINVT
    75521650U,	// GINVT_MMR6
    134237383U,	// HADD_S_D
    134238932U,	// HADD_S_H
    134243197U,	// HADD_S_W
    134237850U,	// HADD_U_D
    134239220U,	// HADD_U_H
    134243665U,	// HADD_U_W
    134237350U,	// HSUB_S_D
    134238911U,	// HSUB_S_H
    134243164U,	// HSUB_S_W
    134237817U,	// HSUB_U_D
    134239199U,	// HSUB_U_H
    134243632U,	// HSUB_U_W
    366763U,	// HYPCALL
    366763U,	// HYPCALL_MM
    134235653U,	// ILVEV_B
    134238084U,	// ILVEV_D
    134239442U,	// ILVEV_H
    134243909U,	// ILVEV_W
    134235181U,	// ILVL_B
    134237066U,	// ILVL_D
    134238768U,	// ILVL_H
    134242847U,	// ILVL_W
    134234933U,	// ILVOD_B
    134236539U,	// ILVOD_D
    134238570U,	// ILVOD_H
    134242432U,	// ILVOD_W
    134235229U,	// ILVR_B
    134237323U,	// ILVR_D
    134238893U,	// ILVR_H
    134243137U,	// ILVR_W
    134241732U,	// INS
    87311660U,	// INSERT_B
    87313988U,	// INSERT_D
    87315397U,	// INSERT_H
    87319811U,	// INSERT_W
    16801775U,	// INSV
    95699774U,	// INSVE_B
    95701537U,	// INSVE_D
    95703411U,	// INSVE_H
    95707341U,	// INSVE_W
    16801775U,	// INSV_MM
    134241732U,	// INS_MM
    134241732U,	// INS_MMR6
    284621U,	// J
    284660U,	// JAL
    23264U,	// JALR
    285408U,	// JALR16_MM
    23264U,	// JALR64
    285408U,	// JALRC16_MMR6
    17977U,	// JALRC_HB_MMR6
    18516U,	// JALRC_MMR6
    279095U,	// JALRS16_MM
    24100U,	// JALRS_MM
    17994U,	// JALR_HB
    17994U,	// JALR_HB64
    23264U,	// JALR_MM
    286123U,	// JALS_MM
    288430U,	// JALX
    288430U,	// JALX_MM
    284660U,	// JAL_MM
    18395U,	// JIALC
    18395U,	// JIALC64
    18395U,	// JIALC_MMR6
    18384U,	// JIC
    18384U,	// JIC64
    18384U,	// JIC_MMR6
    285404U,	// JR
    279082U,	// JR16_MM
    285404U,	// JR64
    285209U,	// JRADDIUSP
    280655U,	// JRC16_MM
    278960U,	// JRC16_MMR6
    285197U,	// JRCADDIUSP_MMR6
    280131U,	// JR_HB
    280131U,	// JR_HB64
    280131U,	// JR_HB64_R6
    280131U,	// JR_HB_R6
    285404U,	// JR_MM
    284621U,	// J_MM
    3774452U,	// Jal16
    4036596U,	// JalB16
    10524U,	// JrRa16
    10516U,	// JrcRa16
    280655U,	// JrcRx16
    280660U,	// JumpLinkReg16
    25183827U,	// LB
    25183827U,	// LB64
    25186403U,	// LBE
    25186403U,	// LBE_MM
    25182791U,	// LBU16_MM
    1895851700U,	// LBUX
    1895851700U,	// LBUX_MM
    25190021U,	// LBU_MMR6
    25183827U,	// LB_MM
    25183827U,	// LB_MMR6
    25190021U,	// LBu
    25190021U,	// LBu64
    25186539U,	// LBuE
    25186539U,	// LBuE_MM
    25190021U,	// LBu_MM
    25186362U,	// LD
    25182294U,	// LDC1
    25182294U,	// LDC164
    25182294U,	// LDC1_D64_MMR6
    25182294U,	// LDC1_MM
    25182510U,	// LDC2
    25182510U,	// LDC2_MMR6
    25182510U,	// LDC2_R6
    25182595U,	// LDC3
    17248U,	// LDI_B
    19089U,	// LDI_D
    20885U,	// LDI_H
    24912U,	// LDI_W
    25188432U,	// LDL
    18462U,	// LDPC
    25189018U,	// LDR
    1895841942U,	// LDXC1
    1895841942U,	// LDXC164
    25183014U,	// LD_B
    25184620U,	// LD_D
    25186651U,	// LD_H
    25190513U,	// LD_W
    67133152U,	// LEA_ADDiu
    67133151U,	// LEA_ADDiu64
    67133152U,	// LEA_ADDiu_MM
    25187603U,	// LH
    25187603U,	// LH64
    25186455U,	// LHE
    25186455U,	// LHE_MM
    25182814U,	// LHU16_MM
    1895851689U,	// LHX
    1895851689U,	// LHX_MM
    25187603U,	// LH_MM
    25190099U,	// LHu
    25190099U,	// LHu64
    25186545U,	// LHuE
    25186545U,	// LHuE_MM
    25190099U,	// LHu_MM
    16878U,	// LI16_MM
    16878U,	// LI16_MMR6
    25188528U,	// LL
    25188528U,	// LL64
    25188528U,	// LL64_R6
    25186366U,	// LLD
    25186366U,	// LLD_R6
    25186478U,	// LLE
    25186478U,	// LLE_MM
    25188528U,	// LL_MM
    25188528U,	// LL_MMR6
    25188528U,	// LL_R6
    134234836U,	// LSA
    2048475860U,	// LSA_MMR6
    134234836U,	// LSA_R6
    75519937U,	// LUI_MMR6
    1895841956U,	// LUXC1
    1895841956U,	// LUXC164
    1895841956U,	// LUXC1_MM
    75519937U,	// LUi
    75519937U,	// LUi64
    75519937U,	// LUi_MM
    25192078U,	// LW
    25182821U,	// LW16_MM
    25192078U,	// LW64
    25182346U,	// LWC1
    25182346U,	// LWC1_MM
    25182562U,	// LWC2
    25182562U,	// LWC2_MMR6
    25182562U,	// LWC2_R6
    25182607U,	// LWC3
    25192078U,	// LWDSP
    25192078U,	// LWDSP_MM
    25186557U,	// LWE
    25186557U,	// LWE_MM
    25192078U,	// LWGP_MM
    25188646U,	// LWL
    25188646U,	// LWL64
    25186488U,	// LWLE
    25186488U,	// LWLE_MM
    25188646U,	// LWL_MM
    49675U,	// LWM16_MM
    49675U,	// LWM16_MMR6
    49415U,	// LWM32_MM
    18499U,	// LWPC
    18499U,	// LWPC_MMR6
    100686394U,	// LWP_MM
    25189152U,	// LWR
    25189152U,	// LWR64
    25186527U,	// LWRE
    25186527U,	// LWRE_MM
    25189152U,	// LWR_MM
    25192078U,	// LWSP_MM
    18492U,	// LWUPC
    25190246U,	// LWU_MM
    1895851706U,	// LWX
    1895841970U,	// LWXC1
    1895841970U,	// LWXC1_MM
    1895849521U,	// LWXS_MM
    1895851706U,	// LWX_MM
    25192078U,	// LW_MM
    25192078U,	// LW_MMR6
    25190246U,	// LWu
    25183827U,	// LbRxRyOffMemX16
    25190021U,	// LbuRxRyOffMemX16
    25187603U,	// LhRxRyOffMemX16
    25190099U,	// LhuRxRyOffMemX16
    1476417416U,	// LiRxImm16
    22398U,	// LiRxImmAlignX16
    22408U,	// LiRxImmX16
    1073768078U,	// LwRxPcTcp16
    26254U,	// LwRxPcTcpX16
    25192078U,	// LwRxRyOffMemX16
    25192078U,	// LwRxSpImmX16
    20523U,	// MADD
    151013983U,	// MADDF_D
    151013983U,	// MADDF_D_MMR6
    151018451U,	// MADDF_S
    151018451U,	// MADDF_S_MMR6
    151016041U,	// MADDR_Q_H
    151020152U,	// MADDR_Q_W
    24230U,	// MADDU
    134241958U,	// MADDU_DSP
    134241958U,	// MADDU_DSP_MM
    24230U,	// MADDU_MM
    151012851U,	// MADDV_B
    151015282U,	// MADDV_D
    151016640U,	// MADDV_H
    151021107U,	// MADDV_W
    134236506U,	// MADD_D32
    134236506U,	// MADD_D32_MM
    134236506U,	// MADD_D64
    134238251U,	// MADD_DSP
    134238251U,	// MADD_DSP_MM
    20523U,	// MADD_MM
    151016011U,	// MADD_Q_H
    151020122U,	// MADD_Q_W
    134241101U,	// MADD_S
    134241101U,	// MADD_S_MM
    134240371U,	// MAQ_SA_W_PHL
    134240371U,	// MAQ_SA_W_PHL_MM
    134240932U,	// MAQ_SA_W_PHR
    134240932U,	// MAQ_SA_W_PHR_MM
    134240399U,	// MAQ_S_W_PHL
    134240399U,	// MAQ_S_W_PHL_MM
    134240960U,	// MAQ_S_W_PHR
    134240960U,	// MAQ_S_W_PHR_MM
    134236447U,	// MAXA_D
    134236447U,	// MAXA_D_MMR6
    134241074U,	// MAXA_S
    134241074U,	// MAXA_S_MMR6
    134235304U,	// MAXI_S_B
    134237461U,	// MAXI_S_D
    134239010U,	// MAXI_S_H
    134243275U,	// MAXI_S_W
    134235519U,	// MAXI_U_B
    134237928U,	// MAXI_U_D
    134239298U,	// MAXI_U_H
    134243743U,	// MAXI_U_W
    134234885U,	// MAX_A_B
    134236423U,	// MAX_A_D
    134238522U,	// MAX_A_H
    134242341U,	// MAX_A_W
    134238169U,	// MAX_D
    134238169U,	// MAX_D_MMR6
    134241667U,	// MAX_S
    134235392U,	// MAX_S_B
    134237581U,	// MAX_S_D
    134239129U,	// MAX_S_H
    134241667U,	// MAX_S_MMR6
    134243456U,	// MAX_S_W
    134235607U,	// MAX_U_B
    134238048U,	// MAX_U_D
    134239396U,	// MAX_U_H
    134243863U,	// MAX_U_W
    134234114U,	// MFC0
    134234114U,	// MFC0_MMR6
    16489U,	// MFC1
    16489U,	// MFC1_D64
    16489U,	// MFC1_MM
    16489U,	// MFC1_MMR6
    134234433U,	// MFC2
    16705U,	// MFC2_MMR6
    134234121U,	// MFGC0
    134234121U,	// MFGC0_MM
    134234152U,	// MFHC0_MMR6
    16495U,	// MFHC1_D32
    16495U,	// MFHC1_D32_MM
    16495U,	// MFHC1_D64
    16495U,	// MFHC1_D64_MM
    16711U,	// MFHC2_MMR6
    134234128U,	// MFHGC0
    134234128U,	// MFHGC0_MM
    284530U,	// MFHI
    279014U,	// MFHI16_MM
    284530U,	// MFHI64
    22386U,	// MFHI_DSP
    22386U,	// MFHI_DSP_MM
    284530U,	// MFHI_MM
    285062U,	// MFLO
    279065U,	// MFLO16_MM
    285062U,	// MFLO64
    22918U,	// MFLO_DSP
    22918U,	// MFLO_DSP_MM
    285062U,	// MFLO_MM
    134241030U,	// MFTR
    134236432U,	// MINA_D
    134236432U,	// MINA_D_MMR6
    134241066U,	// MINA_S
    134241066U,	// MINA_S_MMR6
    134235284U,	// MINI_S_B
    134237441U,	// MINI_S_D
    134238990U,	// MINI_S_H
    134243255U,	// MINI_S_W
    134235499U,	// MINI_U_B
    134237908U,	// MINI_U_D
    134239278U,	// MINI_U_H
    134243723U,	// MINI_U_W
    134234866U,	// MIN_A_B
    134236403U,	// MIN_A_D
    134238503U,	// MIN_A_H
    134242321U,	// MIN_A_W
    134237075U,	// MIN_D
    134237075U,	// MIN_D_MMR6
    134241348U,	// MIN_S
    134235314U,	// MIN_S_B
    134237471U,	// MIN_S_D
    134239020U,	// MIN_S_H
    134241348U,	// MIN_S_MMR6
    134243295U,	// MIN_S_W
    134235529U,	// MIN_U_B
    134237938U,	// MIN_U_D
    134239308U,	// MIN_U_H
    134243753U,	// MIN_U_W
    134238298U,	// MOD
    134236071U,	// MODSUB
    134236071U,	// MODSUB_MM
    134241966U,	// MODU
    134241966U,	// MODU_MMR6
    134238298U,	// MOD_MMR6
    134235247U,	// MOD_S_B
    134237404U,	// MOD_S_D
    134238953U,	// MOD_S_H
    134243218U,	// MOD_S_W
    134235462U,	// MOD_U_B
    134237871U,	// MOD_U_D
    134239241U,	// MOD_U_H
    134243686U,	// MOD_U_W
    20727U,	// MOVE16_MM
    16848U,	// MOVE16_MMR6
    134240697U,	// MOVEP_MM
    134240697U,	// MOVEP_MMR6
    24434U,	// MOVE_V
    134236792U,	// MOVF_D32
    134236792U,	// MOVF_D32_MM
    134236792U,	// MOVF_D64
    134238483U,	// MOVF_I
    134238483U,	// MOVF_I64
    134238483U,	// MOVF_I_MM
    134241252U,	// MOVF_S
    134241252U,	// MOVF_S_MM
    134237127U,	// MOVN_I64_D64
    134240634U,	// MOVN_I64_I
    134240634U,	// MOVN_I64_I64
    134241384U,	// MOVN_I64_S
    134237127U,	// MOVN_I_D32
    134237127U,	// MOVN_I_D32_MM
    134237127U,	// MOVN_I_D64
    134240634U,	// MOVN_I_I
    134240634U,	// MOVN_I_I64
    134240634U,	// MOVN_I_MM
    134241384U,	// MOVN_I_S
    134241384U,	// MOVN_I_S_MM
    134237799U,	// MOVT_D32
    134237799U,	// MOVT_D32_MM
    134237799U,	// MOVT_D64
    134241913U,	// MOVT_I
    134241913U,	// MOVT_I64
    134241913U,	// MOVT_I_MM
    134241593U,	// MOVT_S
    134241593U,	// MOVT_S_MM
    134238209U,	// MOVZ_I64_D64
    134244103U,	// MOVZ_I64_I
    134244103U,	// MOVZ_I64_I64
    134241694U,	// MOVZ_I64_S
    134238209U,	// MOVZ_I_D32
    134238209U,	// MOVZ_I_D32_MM
    134238209U,	// MOVZ_I_D64
    134244103U,	// MOVZ_I_I
    134244103U,	// MOVZ_I_I64
    134244103U,	// MOVZ_I_MM
    134241694U,	// MOVZ_I_S
    134241694U,	// MOVZ_I_S_MM
    18351U,	// MSUB
    151013974U,	// MSUBF_D
    151013974U,	// MSUBF_D_MMR6
    151018442U,	// MSUBF_S
    151018442U,	// MSUBF_S_MMR6
    151016030U,	// MSUBR_Q_H
    151020141U,	// MSUBR_Q_W
    24209U,	// MSUBU
    134241937U,	// MSUBU_DSP
    134241937U,	// MSUBU_DSP_MM
    24209U,	// MSUBU_MM
    151012842U,	// MSUBV_B
    151015273U,	// MSUBV_D
    151016631U,	// MSUBV_H
    151021098U,	// MSUBV_W
    134236464U,	// MSUB_D32
    134236464U,	// MSUB_D32_MM
    134236464U,	// MSUB_D64
    134236079U,	// MSUB_DSP
    134236079U,	// MSUB_DSP_MM
    18351U,	// MSUB_MM
    151016001U,	// MSUB_Q_H
    151020112U,	// MSUB_Q_W
    134241083U,	// MSUB_S
    134241083U,	// MSUB_S_MM
    705200183U,	// MTC0
    705200183U,	// MTC0_MMR6
    8945796U,	// MTC1
    8945796U,	// MTC1_D64
    8945796U,	// MTC1_D64_MM
    8945796U,	// MTC1_MM
    8945796U,	// MTC1_MMR6
    705200476U,	// MTC2
    8946012U,	// MTC2_MMR6
    705200161U,	// MTGC0
    705200161U,	// MTGC0_MM
    705200175U,	// MTHC0_MMR6
    8994934U,	// MTHC1_D32
    8994934U,	// MTHC1_D32_MM
    8994934U,	// MTHC1_D64
    8994934U,	// MTHC1_D64_MM
    8945998U,	// MTHC2_MMR6
    705200152U,	// MTHGC0
    705200152U,	// MTHGC0_MM
    284536U,	// MTHI
    284536U,	// MTHI64
    8951672U,	// MTHI_DSP
    8951672U,	// MTHI_DSP_MM
    284536U,	// MTHI_MM
    8952256U,	// MTHLIP
    8952256U,	// MTHLIP_MM
    285075U,	// MTLO
    285075U,	// MTLO64
    8952211U,	// MTLO_DSP
    8952211U,	// MTLO_DSP_MM
    285075U,	// MTLO_MM
    278595U,	// MTM0
    278720U,	// MTM1
    278894U,	// MTM2
    278601U,	// MTP0
    278726U,	// MTP1
    278900U,	// MTP2
    705207059U,	// MTTR
    134240065U,	// MUH
    134242009U,	// MUHU
    134242009U,	// MUHU_MMR6
    134240065U,	// MUH_MMR6
    134240531U,	// MUL
    134240412U,	// MULEQ_S_W_PHL
    134240412U,	// MULEQ_S_W_PHL_MM
    134240973U,	// MULEQ_S_W_PHR
    134240973U,	// MULEQ_S_W_PHR_MM
    134240289U,	// MULEU_S_PH_QBL
    134240289U,	// MULEU_S_PH_QBL_MM
    134240875U,	// MULEU_S_PH_QBR
    134240875U,	// MULEU_S_PH_QBR_MM
    134239825U,	// MULQ_RS_PH
    134239825U,	// MULQ_RS_PH_MM
    134243475U,	// MULQ_RS_W
    134243475U,	// MULQ_RS_W_MMR2
    134239769U,	// MULQ_S_PH
    134239769U,	// MULQ_S_PH_MMR2
    134243334U,	// MULQ_S_W
    134243334U,	// MULQ_S_W_MMR2
    134241792U,	// MULR_PS64
    134238836U,	// MULR_Q_H
    134242947U,	// MULR_Q_W
    134239971U,	// MULSAQ_S_W_PH
    134239971U,	// MULSAQ_S_W_PH_MM
    134239946U,	// MULSA_W_PH
    134239946U,	// MULSA_W_PH_MMR2
    24157U,	// MULT
    134242129U,	// MULTU_DSP
    134242129U,	// MULTU_DSP_MM
    134241885U,	// MULT_DSP
    134241885U,	// MULT_DSP_MM
    24157U,	// MULT_MM
    24401U,	// MULTu
    24401U,	// MULTu_MM
    134242046U,	// MULU
    134242046U,	// MULU_MMR6
    134235662U,	// MULV_B
    134238101U,	// MULV_D
    134239451U,	// MULV_H
    134243926U,	// MULV_W
    134240531U,	// MUL_MM
    134240531U,	// MUL_MMR6
    134239642U,	// MUL_PH
    134239642U,	// MUL_PH_MMR2
    134238805U,	// MUL_Q_H
    134242916U,	// MUL_Q_W
    134240531U,	// MUL_R6
    134239737U,	// MUL_S_PH
    134239737U,	// MUL_S_PH_MMR2
    284530U,	// Mfhi16
    285062U,	// Mflo16
    20727U,	// Move32R16
    20727U,	// MoveR3216
    17173U,	// NLOC_B
    18753U,	// NLOC_D
    20810U,	// NLOC_H
    24646U,	// NLOC_W
    17181U,	// NLZC_B
    18761U,	// NLZC_D
    20818U,	// NLZC_H
    24654U,	// NLZC_W
    134236514U,	// NMADD_D32
    134236514U,	// NMADD_D32_MM
    134236514U,	// NMADD_D64
    134241100U,	// NMADD_S
    134241100U,	// NMADD_S_MM
    134236472U,	// NMSUB_D32
    134236472U,	// NMSUB_D32_MM
    134236472U,	// NMSUB_D64
    134241082U,	// NMSUB_S
    134241082U,	// NMSUB_S_MM
    134240998U,	// NOR
    134240998U,	// NOR64
    134235070U,	// NORI_B
    134240998U,	// NOR_MM
    134240998U,	// NOR_MMR6
    134242178U,	// NOR_V
    16960U,	// NOT16_MM
    16960U,	// NOT16_MMR6
    20761U,	// NegRxRy16
    24173U,	// NotRxRy16
    134240999U,	// OR
    10043953U,	// OR16_MM
    10043953U,	// OR16_MMR6
    134240999U,	// OR64
    134235071U,	// ORI_B
    134240164U,	// ORI_MMR6
    134240999U,	// OR_MM
    134240999U,	// OR_MMR6
    134242179U,	// OR_V
    134240164U,	// ORi
    134240164U,	// ORi64
    134240164U,	// ORi_MM
    16800487U,	// OrRxRxRy16
    134239631U,	// PACKRL_PH
    134239631U,	// PACKRL_PH_MM
    10542U,	// PAUSE
    10542U,	// PAUSE_MM
    10542U,	// PAUSE_MMR6
    134235644U,	// PCKEV_B
    134238075U,	// PCKEV_D
    134239433U,	// PCKEV_H
    134243900U,	// PCKEV_W
    134234924U,	// PCKOD_B
    134236530U,	// PCKOD_D
    134238561U,	// PCKOD_H
    134242423U,	// PCKOD_W
    17700U,	// PCNT_B
    20019U,	// PCNT_D
    21437U,	// PCNT_H
    25842U,	// PCNT_W
    134239595U,	// PICK_PH
    134239595U,	// PICK_PH_MM
    134235803U,	// PICK_QB
    134235803U,	// PICK_QB_MM
    134241759U,	// PLL_PS64
    134241801U,	// PLU_PS64
    22990U,	// POP
    22592U,	// PRECEQU_PH_QBL
    17046U,	// PRECEQU_PH_QBLA
    17046U,	// PRECEQU_PH_QBLA_MM
    22592U,	// PRECEQU_PH_QBL_MM
    23178U,	// PRECEQU_PH_QBR
    17084U,	// PRECEQU_PH_QBRA
    17084U,	// PRECEQU_PH_QBRA_MM
    23178U,	// PRECEQU_PH_QBR_MM
    22657U,	// PRECEQ_W_PHL
    22657U,	// PRECEQ_W_PHL_MM
    23218U,	// PRECEQ_W_PHR
    23218U,	// PRECEQ_W_PHR_MM
    22577U,	// PRECEU_PH_QBL
    17030U,	// PRECEU_PH_QBLA
    17030U,	// PRECEU_PH_QBLA_MM
    22577U,	// PRECEU_PH_QBL_MM
    23163U,	// PRECEU_PH_QBR
    17068U,	// PRECEU_PH_QBRA
    17068U,	// PRECEU_PH_QBRA_MM
    23163U,	// PRECEU_PH_QBR_MM
    134239547U,	// PRECRQU_S_QB_PH
    134239547U,	// PRECRQU_S_QB_PH_MM
    134242566U,	// PRECRQ_PH_W
    134242566U,	// PRECRQ_PH_W_MM
    134239520U,	// PRECRQ_QB_PH
    134239520U,	// PRECRQ_QB_PH_MM
    134242597U,	// PRECRQ_RS_PH_W
    134242597U,	// PRECRQ_RS_PH_W_MM
    134239534U,	// PRECR_QB_PH
    134239534U,	// PRECR_QB_PH_MMR2
    134242550U,	// PRECR_SRA_PH_W
    134242550U,	// PRECR_SRA_PH_W_MMR2
    134242579U,	// PRECR_SRA_R_PH_W
    134242579U,	// PRECR_SRA_R_PH_W_MMR2
    2740493U,	// PREF
    2740346U,	// PREFE
    2740346U,	// PREFE_MM
    110749346U,	// PREFX_MM
    2740493U,	// PREF_MM
    2740493U,	// PREF_MMR6
    2740493U,	// PREF_R6
    134238280U,	// PREPEND
    134238280U,	// PREPEND_MMR2
    134241775U,	// PUL_PS64
    134241809U,	// PUU_PS64
    18327U,	// RADDU_W_QB
    18327U,	// RADDU_W_QB_MM
    75520511U,	// RDDSP
    75520511U,	// RDDSP_MM
    134241049U,	// RDHWR
    134241049U,	// RDHWR64
    134241049U,	// RDHWR_MM
    134241049U,	// RDHWR_MMR6
    23286U,	// RDPGPR_MMR6
    19415U,	// RECIP_D32
    19415U,	// RECIP_D32_MM
    19415U,	// RECIP_D64
    19415U,	// RECIP_D64_MM
    23664U,	// RECIP_S
    23664U,	// RECIP_S_MM
    22158U,	// REPLV_PH
    22158U,	// REPLV_PH_MM
    18307U,	// REPLV_QB
    18307U,	// REPLV_QB_MM
    21885U,	// REPL_PH
    21885U,	// REPL_PH_MM
    75515565U,	// REPL_QB
    75515565U,	// REPL_QB_MM
    20028U,	// RINT_D
    20028U,	// RINT_D_MMR6
    23848U,	// RINT_S
    23848U,	// RINT_S_MMR6
    134241037U,	// ROTR
    134242280U,	// ROTRV
    134242280U,	// ROTRV_MM
    134241037U,	// ROTR_MM
    19224U,	// ROUND_L_D64
    19224U,	// ROUND_L_D_MMR6
    23556U,	// ROUND_L_S
    23556U,	// ROUND_L_S_MMR6
    20399U,	// ROUND_W_D32
    20399U,	// ROUND_W_D64
    20399U,	// ROUND_W_D_MMR6
    20399U,	// ROUND_W_MM
    23898U,	// ROUND_W_S
    23898U,	// ROUND_W_S_MM
    23898U,	// ROUND_W_S_MMR6
    20056U,	// RSQRT_D32
    20056U,	// RSQRT_D32_MM
    20056U,	// RSQRT_D64
    20056U,	// RSQRT_D64_MM
    23856U,	// RSQRT_S
    23856U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    4211329U,	// SAA
    4214801U,	// SAAD
    134235353U,	// SAT_S_B
    134237520U,	// SAT_S_D
    134239079U,	// SAT_S_H
    134243384U,	// SAT_S_W
    134235580U,	// SAT_U_B
    134237999U,	// SAT_U_D
    134239369U,	// SAT_U_H
    134243814U,	// SAT_U_W
    25184163U,	// SB
    25182628U,	// SB16_MM
    25182628U,	// SB16_MMR6
    25184163U,	// SB64
    25186408U,	// SBE
    25186408U,	// SBE_MM
    25184163U,	// SB_MM
    25184163U,	// SB_MMR6
    4491358U,	// SC
    4491358U,	// SC64
    4491358U,	// SC64_R6
    4493344U,	// SCD
    4493344U,	// SCD_R6
    4493421U,	// SCE
    4493421U,	// SCE_MM
    4491358U,	// SC_MM
    4491358U,	// SC_MMR6
    4491358U,	// SC_R6
    25186399U,	// SD
    367018U,	// SDBBP
    360993U,	// SDBBP16_MM
    360993U,	// SDBBP16_MMR6
    367018U,	// SDBBP_MM
    367018U,	// SDBBP_MMR6
    367018U,	// SDBBP_R6
    25182300U,	// SDC1
    25182300U,	// SDC164
    25182300U,	// SDC1_D64_MMR6
    25182300U,	// SDC1_MM
    25182516U,	// SDC2
    25182516U,	// SDC2_MMR6
    25182516U,	// SDC2_R6
    25182601U,	// SDC3
    26408U,	// SDIV
    26408U,	// SDIV_MM
    25188437U,	// SDL
    25189023U,	// SDR
    1895841949U,	// SDXC1
    1895841949U,	// SDXC164
    17972U,	// SEB
    17972U,	// SEB64
    17972U,	// SEB_MM
    21773U,	// SEH
    21773U,	// SEH64
    21773U,	// SEH_MM
    134244076U,	// SELEQZ
    134244076U,	// SELEQZ64
    134238199U,	// SELEQZ_D
    134238199U,	// SELEQZ_D_MMR6
    134244076U,	// SELEQZ_MMR6
    134241684U,	// SELEQZ_S
    134241684U,	// SELEQZ_S_MMR6
    134244049U,	// SELNEZ
    134244049U,	// SELNEZ64
    134238182U,	// SELNEZ_D
    134238182U,	// SELNEZ_D_MMR6
    134244049U,	// SELNEZ_MMR6
    134241674U,	// SELNEZ_S
    134241674U,	// SELNEZ_S_MMR6
    151014209U,	// SEL_D
    151014209U,	// SEL_D_MMR6
    151018541U,	// SEL_S
    151018541U,	// SEL_S_MMR6
    134240841U,	// SEQ
    134240151U,	// SEQi
    25188156U,	// SH
    25182680U,	// SH16_MM
    25182680U,	// SH16_MMR6
    25188156U,	// SH64
    25186460U,	// SHE
    25186460U,	// SHE_MM
    134234952U,	// SHF_B
    134238589U,	// SHF_H
    134242535U,	// SHF_W
    22924U,	// SHILO
    24527U,	// SHILOV
    24527U,	// SHILOV_MM
    22924U,	// SHILO_MM
    134239876U,	// SHLLV_PH
    134239876U,	// SHLLV_PH_MM
    134236025U,	// SHLLV_QB
    134236025U,	// SHLLV_QB_MM
    134239813U,	// SHLLV_S_PH
    134239813U,	// SHLLV_S_PH_MM
    134243445U,	// SHLLV_S_W
    134243445U,	// SHLLV_S_W_MM
    134239604U,	// SHLL_PH
    134239604U,	// SHLL_PH_MM
    134235812U,	// SHLL_QB
    134235812U,	// SHLL_QB_MM
    134239726U,	// SHLL_S_PH
    134239726U,	// SHLL_S_PH_MM
    134243285U,	// SHLL_S_W
    134243285U,	// SHLL_S_W_MM
    134239866U,	// SHRAV_PH
    134239866U,	// SHRAV_PH_MM
    134236015U,	// SHRAV_QB
    134236015U,	// SHRAV_QB_MMR2
    134239714U,	// SHRAV_R_PH
    134239714U,	// SHRAV_R_PH_MM
    134235913U,	// SHRAV_R_QB
    134235913U,	// SHRAV_R_QB_MMR2
    134243040U,	// SHRAV_R_W
    134243040U,	// SHRAV_R_W_MM
    134239511U,	// SHRA_PH
    134239511U,	// SHRA_PH_MM
    134235735U,	// SHRA_QB
    134235735U,	// SHRA_QB_MMR2
    134239679U,	// SHRA_R_PH
    134239679U,	// SHRA_R_PH_MM
    134235878U,	// SHRA_R_QB
    134235878U,	// SHRA_R_QB_MMR2
    134242998U,	// SHRA_R_W
    134242998U,	// SHRA_R_W_MM
    134239896U,	// SHRLV_PH
    134239896U,	// SHRLV_PH_MMR2
    134236045U,	// SHRLV_QB
    134236045U,	// SHRLV_QB_MM
    134239622U,	// SHRL_PH
    134239622U,	// SHRL_PH_MMR2
    134235830U,	// SHRL_QB
    134235830U,	// SHRL_QB_MM
    25188156U,	// SH_MM
    25188156U,	// SH_MMR6
    364705U,	// SIGRIE
    364705U,	// SIGRIE_MMR6
    1358971743U,	// SLDI_B
    1358973584U,	// SLDI_D
    1358975380U,	// SLDI_H
    1358979407U,	// SLDI_W
    1358971685U,	// SLD_B
    1358973291U,	// SLD_D
    1358975322U,	// SLD_H
    1358979184U,	// SLD_W
    134240464U,	// SLL
    134234621U,	// SLL16_MM
    134234621U,	// SLL16_MMR6
    2147506384U,	// SLL64_32
    2147506384U,	// SLL64_64
    134235009U,	// SLLI_B
    134236833U,	// SLLI_D
    134238629U,	// SLLI_H
    134242656U,	// SLLI_W
    134242242U,	// SLLV
    134242242U,	// SLLV_MM
    134235158U,	// SLL_B
    134237017U,	// SLL_D
    134238745U,	// SLL_H
    134240464U,	// SLL_MM
    134240464U,	// SLL_MMR6
    134242798U,	// SLL_W
    134241874U,	// SLT
    134241874U,	// SLT64
    134241874U,	// SLT_MM
    134240175U,	// SLTi
    134240175U,	// SLTi64
    134240175U,	// SLTi_MM
    134242030U,	// SLTiu
    134242030U,	// SLTiu64
    134242030U,	// SLTiu_MM
    134242116U,	// SLTu
    134242116U,	// SLTu64
    134242116U,	// SLTu_MM
    134238409U,	// SNE
    134240096U,	// SNEi
    1342194648U,	// SPLATI_B
    1342196456U,	// SPLATI_D
    1342198252U,	// SPLATI_H
    1342202279U,	// SPLATI_W
    1342194963U,	// SPLAT_B
    1342197169U,	// SPLAT_D
    1342198700U,	// SPLAT_H
    1342203071U,	// SPLAT_W
    134234830U,	// SRA
    134234967U,	// SRAI_B
    134236808U,	// SRAI_D
    134238604U,	// SRAI_H
    134242631U,	// SRAI_W
    134235043U,	// SRARI_B
    134236867U,	// SRARI_D
    134238663U,	// SRARI_H
    134242690U,	// SRARI_W
    134235196U,	// SRAR_B
    134237256U,	// SRAR_D
    134238860U,	// SRAR_H
    134243062U,	// SRAR_W
    134242221U,	// SRAV
    134242221U,	// SRAV_MM
    134234894U,	// SRA_B
    134236440U,	// SRA_D
    134238531U,	// SRA_H
    134234830U,	// SRA_MM
    134242350U,	// SRA_W
    134240492U,	// SRL
    134234628U,	// SRL16_MM
    134234628U,	// SRL16_MMR6
    134235017U,	// SRLI_B
    134236841U,	// SRLI_D
    134238637U,	// SRLI_H
    134242664U,	// SRLI_W
    134235061U,	// SRLRI_B
    134236885U,	// SRLRI_D
    134238681U,	// SRLRI_H
    134242708U,	// SRLRI_W
    134235212U,	// SRLR_B
    134237272U,	// SRLR_D
    134238876U,	// SRLR_H
    134243078U,	// SRLR_W
    134242249U,	// SRLV
    134242249U,	// SRLV_MM
    134235165U,	// SRL_B
    134237042U,	// SRL_D
    134238752U,	// SRL_H
    134240492U,	// SRL_MM
    134242823U,	// SRL_W
    10607U,	// SSNOP
    10607U,	// SSNOP_MM
    10607U,	// SSNOP_MMR6
    25183542U,	// ST_B
    25185889U,	// ST_D
    25187279U,	// ST_H
    25191712U,	// ST_W
    134236074U,	// SUB
    134239575U,	// SUBQH_PH
    134239575U,	// SUBQH_PH_MMR2
    134239690U,	// SUBQH_R_PH
    134239690U,	// SUBQH_R_PH_MMR2
    134243008U,	// SUBQH_R_W
    134243008U,	// SUBQH_R_W_MMR2
    134242613U,	// SUBQH_W
    134242613U,	// SUBQH_W_MMR2
    134239650U,	// SUBQ_PH
    134239650U,	// SUBQ_PH_MM
    134239747U,	// SUBQ_S_PH
    134239747U,	// SUBQ_S_PH_MM
    134243314U,	// SUBQ_S_W
    134243314U,	// SUBQ_S_W_MM
    134235568U,	// SUBSUS_U_B
    134237987U,	// SUBSUS_U_D
    134239357U,	// SUBSUS_U_H
    134243802U,	// SUBSUS_U_W
    134235371U,	// SUBSUU_S_B
    134237560U,	// SUBSUU_S_D
    134239097U,	// SUBSUU_S_H
    134243424U,	// SUBSUU_S_W
    134235333U,	// SUBS_S_B
    134237500U,	// SUBS_S_D
    134239059U,	// SUBS_S_H
    134243364U,	// SUBS_S_W
    134235548U,	// SUBS_U_B
    134237967U,	// SUBS_U_D
    134239337U,	// SUBS_U_H
    134243782U,	// SUBS_U_W
    134234702U,	// SUBU16_MM
    134234702U,	// SUBU16_MMR6
    134235783U,	// SUBUH_QB
    134235783U,	// SUBUH_QB_MMR2
    134235889U,	// SUBUH_R_QB
    134235889U,	// SUBUH_R_QB_MMR2
    134241931U,	// SUBU_MMR6
    134239848U,	// SUBU_PH
    134239848U,	// SUBU_PH_MMR2
    134235997U,	// SUBU_QB
    134235997U,	// SUBU_QB_MM
    134239791U,	// SUBU_S_PH
    134239791U,	// SUBU_S_PH_MMR2
    134235936U,	// SUBU_S_QB
    134235936U,	// SUBU_S_QB_MM
    134235115U,	// SUBVI_B
    134236923U,	// SUBVI_D
    134238719U,	// SUBVI_H
    134242746U,	// SUBVI_W
    134235627U,	// SUBV_B
    134238058U,	// SUBV_D
    134239416U,	// SUBV_H
    134243883U,	// SUBV_W
    134236074U,	// SUB_MM
    134236074U,	// SUB_MMR6
    134241931U,	// SUBu
    134241931U,	// SUBu_MM
    1895841963U,	// SUXC1
    1895841963U,	// SUXC164
    1895841963U,	// SUXC1_MM
    25192094U,	// SW
    25182827U,	// SW16_MM
    25182827U,	// SW16_MMR6
    25192094U,	// SW64
    25182352U,	// SWC1
    25182352U,	// SWC1_MM
    25182568U,	// SWC2
    25182568U,	// SWC2_MMR6
    25182568U,	// SWC2_R6
    25182613U,	// SWC3
    25192094U,	// SWDSP
    25192094U,	// SWDSP_MM
    25186562U,	// SWE
    25186562U,	// SWE_MM
    25188651U,	// SWL
    25188651U,	// SWL64
    25186494U,	// SWLE
    25186494U,	// SWLE_MM
    25188651U,	// SWL_MM
    49682U,	// SWM16_MM
    49682U,	// SWM16_MMR6
    49422U,	// SWM32_MM
    100686399U,	// SWP_MM
    25189157U,	// SWR
    25189157U,	// SWR64
    25186533U,	// SWRE
    25186533U,	// SWRE_MM
    25189157U,	// SWR_MM
    25188900U,	// SWSP_MM
    25192094U,	// SWSP_MMR6
    1895841977U,	// SWXC1
    1895841977U,	// SWXC1_MM
    25192094U,	// SW_MM
    25192094U,	// SW_MMR6
    370554U,	// SYNC
    153414U,	// SYNCI
    153414U,	// SYNCI_MM
    153414U,	// SYNCI_MMR6
    370554U,	// SYNC_MM
    362520U,	// SYNC_MMR6
    366772U,	// SYSCALL
    366772U,	// SYSCALL_MM
    0U,	// Save16
    0U,	// SaveX16
    25184163U,	// SbRxRyOffMemX16
    288525U,	// SebRx16
    288531U,	// SehRx16
    25188156U,	// ShRxRyOffMemX16
    134240464U,	// SllX16
    16801730U,	// SllvRxRy16
    24146U,	// SltRxRy16
    1476417455U,	// SltiRxImm16
    22447U,	// SltiRxImmX16
    1476419310U,	// SltiuRxImm16
    24302U,	// SltiuRxImmX16
    24388U,	// SltuRxRy16
    134234830U,	// SraX16
    16801709U,	// SravRxRy16
    134240492U,	// SrlX16
    16801737U,	// SrlvRxRy16
    134241931U,	// SubuRxRyRz16
    25192094U,	// SwRxRyOffMemX16
    25192094U,	// SwRxSpImmX16
    134240846U,	// TEQ
    22429U,	// TEQI
    22429U,	// TEQI_MM
    134240846U,	// TEQ_MM
    134238347U,	// TGE
    22362U,	// TGEI
    24295U,	// TGEIU
    24295U,	// TGEIU_MM
    22362U,	// TGEI_MM
    134241984U,	// TGEU
    134241984U,	// TGEU_MM
    134238347U,	// TGE_MM
    10655U,	// TLBGINV
    10556U,	// TLBGINVF
    10556U,	// TLBGINVF_MM
    10655U,	// TLBGINV_MM
    10601U,	// TLBGP
    10601U,	// TLBGP_MM
    10618U,	// TLBGR
    10618U,	// TLBGR_MM
    10571U,	// TLBGWI
    10571U,	// TLBGWI_MM
    10630U,	// TLBGWR
    10630U,	// TLBGWR_MM
    10648U,	// TLBINV
    10548U,	// TLBINVF
    10548U,	// TLBINVF_MMR6
    10648U,	// TLBINV_MMR6
    10596U,	// TLBP
    10596U,	// TLBP_MM
    10613U,	// TLBR
    10613U,	// TLBR_MM
    10565U,	// TLBWI
    10565U,	// TLBWI_MM
    10624U,	// TLBWR
    10624U,	// TLBWR_MM
    134241879U,	// TLT
    22453U,	// TLTI
    24309U,	// TLTIU_MM
    22453U,	// TLTI_MM
    134242122U,	// TLTU
    134242122U,	// TLTU_MM
    134241879U,	// TLT_MM
    134238414U,	// TNE
    22374U,	// TNEI
    22374U,	// TNEI_MM
    134238414U,	// TNE_MM
    19213U,	// TRUNC_L_D64
    19213U,	// TRUNC_L_D_MMR6
    23545U,	// TRUNC_L_S
    23545U,	// TRUNC_L_S_MMR6
    20388U,	// TRUNC_W_D32
    20388U,	// TRUNC_W_D64
    20388U,	// TRUNC_W_D_MMR6
    20388U,	// TRUNC_W_MM
    23887U,	// TRUNC_W_S
    23887U,	// TRUNC_W_S_MM
    23887U,	// TRUNC_W_S_MMR6
    24309U,	// TTLTIU
    26394U,	// UDIV
    26394U,	// UDIV_MM
    134242044U,	// V3MULU
    134234173U,	// VMM0
    134242059U,	// VMULU
    151012167U,	// VSHF_B
    151013992U,	// VSHF_D
    151015804U,	// VSHF_H
    151019750U,	// VSHF_W
    10643U,	// WAIT
    368199U,	// WAIT_MM
    368199U,	// WAIT_MMR6
    75520518U,	// WRDSP
    75520518U,	// WRDSP_MM
    23294U,	// WRPGPR_MMR6
    21758U,	// WSBH
    21758U,	// WSBH_MM
    21758U,	// WSBH_MMR6
    134241009U,	// XOR
    10043952U,	// XOR16_MM
    10043952U,	// XOR16_MMR6
    134241009U,	// XOR64
    134235078U,	// XORI_B
    134240163U,	// XORI_MMR6
    134241009U,	// XOR_MM
    134241009U,	// XOR_MMR6
    134242185U,	// XOR_V
    134240163U,	// XORi
    134240163U,	// XORi64
    134240163U,	// XORi_MM
    16800497U,	// XorRxRxRy16
    20535U,	// YIELD
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSMacro
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_POSTRA
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_POSTRA
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_POSTRA
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_POSTRA
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I16_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I32_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I64_POSTRA
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MAX_I8_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I16_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I32_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I64_POSTRA
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_MIN_I8_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_POSTRA
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_POSTRA
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_POSTRA
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_POSTRA
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I16_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I32_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I64_POSTRA
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMAX_I8_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I16_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I32_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I64_POSTRA
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_UMIN_I8_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_POSTRA
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_POSTRA
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_POSTRA
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_POSTRA
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_POSTRA
    0U,	// B
    0U,	// BAL_BR
    0U,	// BAL_BR_MM
    0U,	// BEQLImmMacro
    0U,	// BGE
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLT
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BNELImmMacro
    0U,	// BPOSGE32_PSEUDO
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    0U,	// BSEL_W_PSEUDO
    0U,	// B_MM
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BneImm
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CFTC1
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    0U,	// CTTC1
    0U,	// Constant32
    0U,	// DMULImmMacro
    0U,	// DMULMacro
    0U,	// DMULOMacro
    0U,	// DMULOUMacro
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    0U,	// DSDivIMacro
    0U,	// DSDivMacro
    0U,	// DSRemIMacro
    0U,	// DSRemMacro
    0U,	// DUDivIMacro
    0U,	// DUDivMacro
    0U,	// DURemIMacro
    0U,	// DURemMacro
    0U,	// ERet
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_W
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// GotPrologue16
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// JALR64Pseudo
    0U,	// JALRHB64Pseudo
    0U,	// JALRHBPseudo
    0U,	// JALRPseudo
    0U,	// JAL_MMR6
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// LDMacro
    0U,	// LDR_D
    0U,	// LDR_W
    0U,	// LD_F16
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_ADDiu2Op
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_DADDiu2Op
    0U,	// LONG_BRANCH_LUi
    0U,	// LONG_BRANCH_LUi2Op
    0U,	// LONG_BRANCH_LUi2Op_64
    0U,	// LWM_MM
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LoadImmDoubleFGR
    0U,	// LoadImmDoubleFGR_32
    0U,	// LoadImmDoubleGPR
    0U,	// LoadImmSingleFGR
    0U,	// LoadImmSingleGPR
    0U,	// LwConstant32
    0U,	// MFTACX
    1U,	// MFTC0
    0U,	// MFTC1
    0U,	// MFTDSP
    0U,	// MFTGPR
    0U,	// MFTHC1
    0U,	// MFTHI
    0U,	// MFTLO
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    0U,	// MTTACX
    2U,	// MTTC0
    0U,	// MTTC1
    0U,	// MTTDSP
    0U,	// MTTGPR
    0U,	// MTTHC1
    0U,	// MTTHI
    0U,	// MTTLO
    0U,	// MULImmMacro
    0U,	// MULOMacro
    0U,	// MULOUMacro
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NOP
    0U,	// NORImm
    0U,	// NORImm64
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoD_SELECT_I
    0U,	// PseudoD_SELECT_I64
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoIndirectBranch64R6
    0U,	// PseudoIndirectBranchR6
    0U,	// PseudoIndirectBranch_MM
    0U,	// PseudoIndirectBranch_MMR6
    0U,	// PseudoIndirectHazardBranch
    0U,	// PseudoIndirectHazardBranch64
    0U,	// PseudoIndrectHazardBranch64R6
    0U,	// PseudoIndrectHazardBranchR6
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMADDU_MM
    0U,	// PseudoMADD_MM
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFHI_MM
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMFLO_MM
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMSUBU_MM
    0U,	// PseudoMSUB_MM
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMTLOHI_MM
    0U,	// PseudoMULT
    0U,	// PseudoMULT_MM
    0U,	// PseudoMULTu
    0U,	// PseudoMULTu_MM
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    0U,	// RetRA
    0U,	// RetRA16
    0U,	// SDC1_M1
    0U,	// SDIV_MM_Pseudo
    0U,	// SDMacro
    0U,	// SDivIMacro
    0U,	// SDivMacro
    0U,	// SEQIMacro
    0U,	// SEQMacro
    0U,	// SGE
    0U,	// SGEImm
    0U,	// SGEImm64
    0U,	// SGEU
    0U,	// SGEUImm
    0U,	// SGEUImm64
    0U,	// SGTImm
    0U,	// SGTImm64
    0U,	// SGTUImm
    0U,	// SGTUImm64
    0U,	// SLE
    0U,	// SLEImm
    0U,	// SLEImm64
    0U,	// SLEU
    0U,	// SLEUImm
    0U,	// SLEUImm64
    0U,	// SLTImm64
    0U,	// SLTUImm64
    0U,	// SNEIMacro
    0U,	// SNEMacro
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    0U,	// SRemIMacro
    0U,	// SRemMacro
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// STR_D
    0U,	// STR_W
    0U,	// ST_F16
    0U,	// SWM_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// SaaAddr
    0U,	// SaadAddr
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// SltCCRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRyRz16
    0U,	// TAILCALL
    0U,	// TAILCALL64R6REG
    0U,	// TAILCALLHB64R6REG
    0U,	// TAILCALLHBR6REG
    0U,	// TAILCALLR6REG
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALLREGHB
    0U,	// TAILCALLREGHB64
    0U,	// TAILCALLREG_MM
    0U,	// TAILCALLREG_MMR6
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    0U,	// TRAP
    0U,	// TRAP_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivIMacro
    0U,	// UDivMacro
    0U,	// URemIMacro
    0U,	// URemMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// Ush
    0U,	// Usw
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDR_PS64
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    1U,	// ADDVI_B
    1U,	// ADDVI_D
    1U,	// ADDVI_H
    1U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    8U,	// ALIGN
    8U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    1U,	// ANDI_B
    1U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    1U,	// ANDi
    1U,	// ANDi64
    1U,	// ANDi_MM
    1U,	// APPEND
    1U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    1U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    1U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    1U,	// BALIGN
    1U,	// BALIGN_MMR2
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    1U,	// BCLRI_B
    1U,	// BCLRI_D
    1U,	// BCLRI_H
    1U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC64
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC64
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGEC
    0U,	// BGEC64
    0U,	// BGEC_MMR6
    0U,	// BGEUC
    0U,	// BGEUC64
    0U,	// BGEUC_MMR6
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZC64
    0U,	// BGEZC_MMR6
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZC64
    0U,	// BGTZC_MMR6
    0U,	// BGTZL
    0U,	// BGTZ_MM
    3U,	// BINSLI_B
    3U,	// BINSLI_D
    3U,	// BINSLI_H
    3U,	// BINSLI_W
    4U,	// BINSL_B
    4U,	// BINSL_D
    4U,	// BINSL_H
    4U,	// BINSL_W
    3U,	// BINSRI_B
    3U,	// BINSRI_D
    3U,	// BINSRI_H
    3U,	// BINSRI_W
    4U,	// BINSR_B
    4U,	// BINSR_D
    4U,	// BINSR_H
    4U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZC64
    0U,	// BLEZC_MMR6
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLTC
    0U,	// BLTC64
    0U,	// BLTC_MMR6
    0U,	// BLTUC
    0U,	// BLTUC64
    0U,	// BLTUC_MMR6
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZC64
    0U,	// BLTZC_MMR6
    0U,	// BLTZL
    0U,	// BLTZ_MM
    3U,	// BMNZI_B
    4U,	// BMNZ_V
    3U,	// BMZI_B
    4U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC64
    0U,	// BNEC_MMR6
    1U,	// BNEGI_B
    1U,	// BNEGI_D
    1U,	// BNEGI_H
    1U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC64
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    3U,	// BSELI_B
    4U,	// BSEL_V
    1U,	// BSETI_B
    1U,	// BSETI_D
    1U,	// BSETI_H
    1U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezX16
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFC2_MM
    0U,	// CFCMSA
    9U,	// CINS
    9U,	// CINS32
    9U,	// CINS64_32
    9U,	// CINS_i32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    1U,	// CLEI_U_B
    1U,	// CLEI_U_D
    1U,	// CLEI_U_H
    1U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    1U,	// CLTI_U_B
    1U,	// CLTI_U_D
    1U,	// CLTI_U_H
    1U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    17U,	// COPY_S_B
    17U,	// COPY_S_D
    17U,	// COPY_S_H
    17U,	// COPY_S_W
    17U,	// COPY_U_B
    17U,	// COPY_U_H
    17U,	// COPY_U_W
    0U,	// CRC32B
    0U,	// CRC32CB
    0U,	// CRC32CD
    0U,	// CRC32CH
    0U,	// CRC32CW
    0U,	// CRC32D
    0U,	// CRC32H
    0U,	// CRC32W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTC2_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_S_MM
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_S_MM
    0U,	// CVT_D64_W
    0U,	// CVT_D64_W_MM
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_PS_PW64
    0U,	// CVT_PS_S64
    0U,	// CVT_PW_PS64
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D64_MM
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_PL64
    0U,	// CVT_S_PU64
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D32_MM
    0U,	// CVT_W_D64
    0U,	// CVT_W_D64_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D32_MM
    0U,	// C_EQ_D64
    0U,	// C_EQ_D64_MM
    0U,	// C_EQ_S
    0U,	// C_EQ_S_MM
    0U,	// C_F_D32
    0U,	// C_F_D32_MM
    0U,	// C_F_D64
    0U,	// C_F_D64_MM
    0U,	// C_F_S
    0U,	// C_F_S_MM
    0U,	// C_LE_D32
    0U,	// C_LE_D32_MM
    0U,	// C_LE_D64
    0U,	// C_LE_D64_MM
    0U,	// C_LE_S
    0U,	// C_LE_S_MM
    0U,	// C_LT_D32
    0U,	// C_LT_D32_MM
    0U,	// C_LT_D64
    0U,	// C_LT_D64_MM
    0U,	// C_LT_S
    0U,	// C_LT_S_MM
    0U,	// C_NGE_D32
    0U,	// C_NGE_D32_MM
    0U,	// C_NGE_D64
    0U,	// C_NGE_D64_MM
    0U,	// C_NGE_S
    0U,	// C_NGE_S_MM
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D32_MM
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_D64_MM
    0U,	// C_NGLE_S
    0U,	// C_NGLE_S_MM
    0U,	// C_NGL_D32
    0U,	// C_NGL_D32_MM
    0U,	// C_NGL_D64
    0U,	// C_NGL_D64_MM
    0U,	// C_NGL_S
    0U,	// C_NGL_S_MM
    0U,	// C_NGT_D32
    0U,	// C_NGT_D32_MM
    0U,	// C_NGT_D64
    0U,	// C_NGT_D64_MM
    0U,	// C_NGT_S
    0U,	// C_NGT_S_MM
    0U,	// C_OLE_D32
    0U,	// C_OLE_D32_MM
    0U,	// C_OLE_D64
    0U,	// C_OLE_D64_MM
    0U,	// C_OLE_S
    0U,	// C_OLE_S_MM
    0U,	// C_OLT_D32
    0U,	// C_OLT_D32_MM
    0U,	// C_OLT_D64
    0U,	// C_OLT_D64_MM
    0U,	// C_OLT_S
    0U,	// C_OLT_S_MM
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D32_MM
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_D64_MM
    0U,	// C_SEQ_S
    0U,	// C_SEQ_S_MM
    0U,	// C_SF_D32
    0U,	// C_SF_D32_MM
    0U,	// C_SF_D64
    0U,	// C_SF_D64_MM
    0U,	// C_SF_S
    0U,	// C_SF_S_MM
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D32_MM
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_D64_MM
    0U,	// C_UEQ_S
    0U,	// C_UEQ_S_MM
    0U,	// C_ULE_D32
    0U,	// C_ULE_D32_MM
    0U,	// C_ULE_D64
    0U,	// C_ULE_D64_MM
    0U,	// C_ULE_S
    0U,	// C_ULE_S_MM
    0U,	// C_ULT_D32
    0U,	// C_ULT_D32_MM
    0U,	// C_ULT_D64
    0U,	// C_ULT_D64_MM
    0U,	// C_ULT_S
    0U,	// C_ULT_S_MM
    0U,	// C_UN_D32
    0U,	// C_UN_D32_MM
    0U,	// C_UN_D64
    0U,	// C_UN_D64_MM
    0U,	// C_UN_S
    0U,	// C_UN_S_MM
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    1U,	// DAHI
    8U,	// DALIGN
    1U,	// DATI
    1U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    9U,	// DEXT
    9U,	// DEXT64_32
    9U,	// DEXTM
    9U,	// DEXTU
    0U,	// DI
    9U,	// DINS
    9U,	// DINSM
    9U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    8U,	// DLSA
    8U,	// DLSA_R6
    1U,	// DMFC0
    0U,	// DMFC1
    1U,	// DMFC2
    0U,	// DMFC2_OCTEON
    1U,	// DMFGC0
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMT
    2U,	// DMTC0
    0U,	// DMTC1
    2U,	// DMTC2
    0U,	// DMTC2_OCTEON
    2U,	// DMTGC0
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    4U,	// DPADD_S_D
    4U,	// DPADD_S_H
    4U,	// DPADD_S_W
    4U,	// DPADD_U_D
    4U,	// DPADD_U_H
    4U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    4U,	// DPSUB_S_D
    4U,	// DPSUB_S_H
    4U,	// DPSUB_S_W
    4U,	// DPSUB_U_D
    4U,	// DPSUB_U_H
    4U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    1U,	// DROTR
    1U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    1U,	// DSLL
    1U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    1U,	// DSRA
    1U,	// DSRA32
    0U,	// DSRAV
    1U,	// DSRL
    1U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DVP
    0U,	// DVPE
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// EMT
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// EVP
    0U,	// EVPE
    0U,	// EVP_MMR6
    9U,	// EXT
    1U,	// EXTP
    1U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    1U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    1U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    1U,	// EXTR_RS_W
    1U,	// EXTR_RS_W_MM
    1U,	// EXTR_R_W
    1U,	// EXTR_R_W_MM
    1U,	// EXTR_S_H
    1U,	// EXTR_S_H_MM
    1U,	// EXTR_W
    1U,	// EXTR_W_MM
    9U,	// EXTS
    9U,	// EXTS32
    9U,	// EXT_MM
    9U,	// EXT_MMR6
    0U,	// FABS_D32
    0U,	// FABS_D32_MM
    0U,	// FABS_D64
    0U,	// FABS_D64_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D32_MM
    0U,	// FADD_D64
    0U,	// FADD_D64_MM
    0U,	// FADD_PS64
    0U,	// FADD_S
    0U,	// FADD_S_MM
    5U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D32_MM
    0U,	// FDIV_D64
    0U,	// FDIV_D64_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    5U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_W
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    4U,	// FMADD_D
    4U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D64_MM
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    4U,	// FMSUB_D
    4U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D32_MM
    0U,	// FMUL_D64
    0U,	// FMUL_D64_MM
    0U,	// FMUL_PS64
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    5U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D32_MM
    0U,	// FNEG_D64
    0U,	// FNEG_D64_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FORK
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D32_MM
    0U,	// FSQRT_D64
    0U,	// FSQRT_D64_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D32_MM
    0U,	// FSUB_D64
    0U,	// FSUB_D64_MM
    0U,	// FSUB_PS64
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    5U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GINVI
    0U,	// GINVI_MMR6
    0U,	// GINVT
    0U,	// GINVT_MMR6
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// HYPCALL
    0U,	// HYPCALL_MM
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    9U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_D
    0U,	// INSERT_H
    0U,	// INSERT_W
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    9U,	// INS_MM
    9U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_HB64
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB64
    0U,	// JR_HB64_R6
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBU16_MM
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LL_MM
    0U,	// LL_MMR6
    0U,	// LL_R6
    8U,	// LSA
    0U,	// LSA_MMR6
    8U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWDSP
    0U,	// LWDSP_MM
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    4U,	// MADDF_D
    4U,	// MADDF_D_MMR6
    4U,	// MADDF_S
    4U,	// MADDF_S_MMR6
    4U,	// MADDR_Q_H
    4U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    4U,	// MADDV_B
    4U,	// MADDV_D
    4U,	// MADDV_H
    4U,	// MADDV_W
    40U,	// MADD_D32
    40U,	// MADD_D32_MM
    40U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    4U,	// MADD_Q_H
    4U,	// MADD_Q_W
    40U,	// MADD_S
    40U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    1U,	// MAXI_U_B
    1U,	// MAXI_U_D
    1U,	// MAXI_U_H
    1U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    1U,	// MFC0
    1U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_D64
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    1U,	// MFC2
    0U,	// MFC2_MMR6
    1U,	// MFGC0
    1U,	// MFGC0_MM
    1U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MM
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MM
    0U,	// MFHC2_MMR6
    1U,	// MFHGC0
    1U,	// MFHGC0_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    73U,	// MFTR
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    1U,	// MINI_U_B
    1U,	// MINI_U_D
    1U,	// MINI_U_H
    1U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    40U,	// MOVEP_MM
    40U,	// MOVEP_MMR6
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    4U,	// MSUBF_D
    4U,	// MSUBF_D_MMR6
    4U,	// MSUBF_S
    4U,	// MSUBF_S_MMR6
    4U,	// MSUBR_Q_H
    4U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    4U,	// MSUBV_B
    4U,	// MSUBV_D
    4U,	// MSUBV_H
    4U,	// MSUBV_W
    40U,	// MSUB_D32
    40U,	// MSUB_D32_MM
    40U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    4U,	// MSUB_Q_H
    4U,	// MSUB_Q_W
    40U,	// MSUB_S
    40U,	// MSUB_S_MM
    2U,	// MTC0
    2U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_D64
    0U,	// MTC1_D64_MM
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    2U,	// MTC2
    0U,	// MTC2_MMR6
    2U,	// MTGC0
    2U,	// MTGC0_MM
    2U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MM
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MM
    0U,	// MTHC2_MMR6
    2U,	// MTHGC0
    2U,	// MTHGC0_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    6U,	// MTTR
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_PS64
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    40U,	// NMADD_D32
    40U,	// NMADD_D32_MM
    40U,	// NMADD_D64
    40U,	// NMADD_S
    40U,	// NMADD_S_MM
    40U,	// NMSUB_D32
    40U,	// NMSUB_D32_MM
    40U,	// NMSUB_D64
    40U,	// NMSUB_S
    40U,	// NMSUB_S_MM
    0U,	// NOR
    0U,	// NOR64
    1U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    1U,	// ORI_B
    1U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    1U,	// ORi
    1U,	// ORi64
    1U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// PLL_PS64
    0U,	// PLU_PS64
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    1U,	// PRECR_SRA_PH_W
    1U,	// PRECR_SRA_PH_W_MMR2
    1U,	// PRECR_SRA_R_PH_W
    1U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    1U,	// PREPEND
    1U,	// PREPEND_MMR2
    0U,	// PUL_PS64
    0U,	// PUU_PS64
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    1U,	// RDHWR
    1U,	// RDHWR64
    1U,	// RDHWR_MM
    1U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D32
    0U,	// RECIP_D32_MM
    0U,	// RECIP_D64
    0U,	// RECIP_D64_MM
    0U,	// RECIP_S
    0U,	// RECIP_S_MM
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    1U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    1U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D32
    0U,	// RSQRT_D32_MM
    0U,	// RSQRT_D64
    0U,	// RSQRT_D64_MM
    0U,	// RSQRT_S
    0U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// SAA
    0U,	// SAAD
    1U,	// SAT_S_B
    1U,	// SAT_S_D
    1U,	// SAT_S_H
    1U,	// SAT_S_W
    1U,	// SAT_U_B
    1U,	// SAT_U_D
    1U,	// SAT_U_H
    1U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SC_MM
    0U,	// SC_MMR6
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    4U,	// SEL_D
    4U,	// SEL_D_MMR6
    4U,	// SEL_S
    4U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    1U,	// SHF_B
    1U,	// SHF_H
    1U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    1U,	// SHLL_PH
    1U,	// SHLL_PH_MM
    1U,	// SHLL_QB
    1U,	// SHLL_QB_MM
    1U,	// SHLL_S_PH
    1U,	// SHLL_S_PH_MM
    1U,	// SHLL_S_W
    1U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    1U,	// SHRA_PH
    1U,	// SHRA_PH_MM
    1U,	// SHRA_QB
    1U,	// SHRA_QB_MMR2
    1U,	// SHRA_R_PH
    1U,	// SHRA_R_PH_MM
    1U,	// SHRA_R_QB
    1U,	// SHRA_R_QB_MMR2
    1U,	// SHRA_R_W
    1U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    1U,	// SHRL_PH
    1U,	// SHRL_PH_MMR2
    1U,	// SHRL_QB
    1U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    0U,	// SIGRIE
    0U,	// SIGRIE_MMR6
    19U,	// SLDI_B
    19U,	// SLDI_D
    19U,	// SLDI_H
    19U,	// SLDI_W
    20U,	// SLD_B
    20U,	// SLD_D
    20U,	// SLD_H
    20U,	// SLD_W
    1U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    0U,	// SLL64_32
    0U,	// SLL64_64
    1U,	// SLLI_B
    1U,	// SLLI_D
    1U,	// SLLI_H
    1U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    1U,	// SLL_MM
    1U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    17U,	// SPLATI_B
    17U,	// SPLATI_D
    17U,	// SPLATI_H
    17U,	// SPLATI_W
    16U,	// SPLAT_B
    16U,	// SPLAT_D
    16U,	// SPLAT_H
    16U,	// SPLAT_W
    1U,	// SRA
    1U,	// SRAI_B
    1U,	// SRAI_D
    1U,	// SRAI_H
    1U,	// SRAI_W
    1U,	// SRARI_B
    1U,	// SRARI_D
    1U,	// SRARI_H
    1U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    1U,	// SRA_MM
    0U,	// SRA_W
    1U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    1U,	// SRLI_B
    1U,	// SRLI_D
    1U,	// SRLI_H
    1U,	// SRLI_W
    1U,	// SRLRI_B
    1U,	// SRLRI_D
    1U,	// SRLRI_H
    1U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    1U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    1U,	// SUBVI_B
    1U,	// SUBVI_D
    1U,	// SUBVI_H
    1U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWDSP
    0U,	// SWDSP_MM
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MM
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// ShRxRyOffMemX16
    1U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltRxRy16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuRxRy16
    1U,	// SraX16
    0U,	// SravRxRy16
    1U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    1U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    1U,	// TEQ_MM
    1U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    1U,	// TGEU
    1U,	// TGEU_MM
    1U,	// TGE_MM
    0U,	// TLBGINV
    0U,	// TLBGINVF
    0U,	// TLBGINVF_MM
    0U,	// TLBGINV_MM
    0U,	// TLBGP
    0U,	// TLBGP_MM
    0U,	// TLBGR
    0U,	// TLBGR_MM
    0U,	// TLBGWI
    0U,	// TLBGWI_MM
    0U,	// TLBGWR
    0U,	// TLBGWR_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    1U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    1U,	// TLTU
    1U,	// TLTU_MM
    1U,	// TLT_MM
    1U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    1U,	// TNE_MM
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    4U,	// VSHF_B
    4U,	// VSHF_D
    4U,	// VSHF_H
    4U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    1U,	// XORI_B
    1U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    1U,	// XORi
    1U,	// XORi64
    1U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U,	// YIELD
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  return createMnemonic(AsmStrs+(Bits & 16383)-1, Bits);

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O) {
  MCMnemonic MnemonicInfo =Mips_getMnemonic(MI);

#ifndef CAPSTONE_DIET

  SStream_concat0(O, MnemonicInfo.first);
#endif

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    printOperand/* printOperand (+ ) */(MI, 0, O);
    break;
  case 2:
    // CTTC1, MTTACX, MTTC0, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, MultRxRyRz1...
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    break;
  case 3:
    // LWM_MM, SWM_MM, LWM16_MM, LWM16_MMR6, LWM32_MM, SWM16_MM, SWM16_MMR6, ...
    printRegisterList/* printRegisterList (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printMemOperand/* printMemOperand (+ ) */(MI, 1, O, "");
    return;
    break;
  case 4:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand/* printOperand (+ ) */(MI, 3, O);
    break;
  case 5:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MM, MTHC1_D64, MT...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 6:
    // BREAK, BREAK16_MM, BREAK16_MMR6, BREAK_MM, BREAK_MMR6, HYPCALL, HYPCAL...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 0, O);
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREFE,...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 8:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand/* printFCCOperand (+ ) */(MI, 2, O);
    break;
  case 9:
    // SYNCI, SYNCI_MM, SYNCI_MMR6
    printMemOperand/* printMemOperand (+ ) */(MI, 0, O, "");
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // B_MMR6_Pseudo, B_MM_Pseudo, Constant32, JalOneReg, MFTDSP, MTTDSP, ADD...
    return;
    break;
  case 2:
    // CTTC1, MTTACX, MTTC0, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, CTC1, CTC1_...
    printOperand/* printOperand (+ ) */(MI, 0, O);
    break;
  case 3:
    // LwConstant32
    SStream_concat0(O, ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, "\n2:");
    return;
    break;
  case 4:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    break;
  case 5:
    // SelBeqZ, SelBneZ
    SStream_concat0(O, ", .+4\n\t\n\tmove ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 6:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand/* printOperand (+ ) */(MI, 1, O);
    break;
  case 7:
    // AddiuRxPcImmX16
    SStream_concat0(O, ", $pc, ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 8:
    // AddiuSpImm16, Bimm16
    SStream_concat0(O, " # 16 bit inst");
    return;
    break;
  case 9:
    // Bteqz16, Btnez16
    SStream_concat0(O, "  # 16 bit inst");
    return;
    break;
  case 10:
    // CACHE, CACHEE, CACHEE_MM, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREFE,...
    printMemOperand/* printMemOperand (+ ) */(MI, 0, O, "");
    return;
    break;
  case 11:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    SStream_concat0(O, ".d\t");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 12:
    // FCMP_S32, FCMP_S32_MM
    SStream_concat0(O, ".s\t");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 13:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    SStream_concat0(O, "[");
    break;
  case 14:
    // Jal16
    SStream_concat0(O, "\n\tnop");
    return;
    break;
  case 15:
    // JalB16
    SStream_concat0(O, "\t# branch\n\tnop");
    return;
    break;
  case 16:
    // SAA, SAAD
    SStream_concat0(O, ", (");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ")");
    return;
    break;
  case 17:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_MMR6, SC_R6
    printMemOperand/* printMemOperand (+ ) */(MI, 2, O, "");
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 23) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    printOperand/* printOperand (+ ) */(MI, 1, O);
    break;
  case 1:
    // CTTC1, MTTACX, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, ADDIUS5_MM, AND16_...
    return;
    break;
  case 2:
    // GotPrologue16, AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B,...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    break;
  case 3:
    // LDMacro, LOAD_ACC128, LOAD_ACC64, LOAD_ACC64DSP, LOAD_CCOND_DSP, LoadA...
    printMemOperand/* printMemOperand (+ ) */(MI, 1, O, "");
    return;
    break;
  case 4:
    // MTTC0, DMTC0, DMTC2, DMTGC0, FORK, LSA_MMR6, MTC0, MTC0_MMR6, MTC2, MT...
    SStream_concat0(O, ", ");
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16
    SStream_concat0(O, "\n\tmflo\t");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand/* printOperand (+ ) */(MI, 4, O);
    break;
  case 7:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    SStream_concat0(O, "\n\tmove\t");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", $t8");
    return;
    break;
  case 8:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA/* printMemOperandEA (+ ) */(MI, 1, O, "");
    return;
    break;
  case 9:
    // BBIT0, BBIT032, BBIT1, BBIT132, BREAK, BREAK_MM, BREAK_MMR6, DMFC2_OCT...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 1, O);
    break;
  case 10:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 3, O);
    SStream_concat0(O, "], ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 11:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 2, O);
    SStream_concat0(O, "], ");
    printOperand/* printOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, "[");
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 4, O);
    SStream_concat0(O, "]");
    return;
    break;
  case 12:
    // LWP_MM, SWP_MM
    printMemOperand/* printMemOperand (+ ) */(MI, 2, O, "");
    return;
    break;
  case 13:
    // PREFX_MM
    SStream_concat0(O, "(");
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ")");
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 27) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, CFTC1, JalTwoReg, LoadAddrImm32, LoadAddrImm64, LoadImm32, L...
    return;
    break;
  case 1:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    SStream_concat0(O, "\n\tbteqz\t");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 3:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    SStream_concat0(O, "\n\tbtnez\t");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 4:
    // GotPrologue16
    SStream_concat0(O, "\n\taddiu\t");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", $pc, ");
    printOperand/* printOperand (+ ) */(MI, 3, O);
    SStream_concat0(O, "\n ");
    return;
    break;
  case 5:
    // MTTC0, DMTC0, DMTC2, DMTGC0, MTC0, MTC0_MMR6, MTC2, MTGC0, MTGC0_MM, M...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 2, O);
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    SStream_concat0(O, "\n\tbteqz\t.+4\n\tmove ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 7:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    SStream_concat0(O, "\n\tbtnez\t.+4\n\tmove ");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 8:
    // AddiuRxRxImm16, LwRxPcTcp16
    SStream_concat0(O, "\t# 16 bit inst");
    return;
    break;
  case 9:
    // BeqzRxImm16, BnezRxImm16
    SStream_concat0(O, "  # 16 bit inst");
    return;
    break;
  case 10:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    SStream_concat0(O, "[");
    break;
  case 11:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    SStream_concat0(O, " \t# 16 bit inst");
    return;
    break;
  case 12:
    // DSLL64_32
    SStream_concat0(O, ", 32");
    return;
    break;
  case 13:
    // FORK
    printOperand/* printOperand (+ ) */(MI, 2, O);
    return;
    break;
  case 14:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    SStream_concat0(O, "(");
    printOperand/* printOperand (+ ) */(MI, 1, O);
    SStream_concat0(O, ")");
    return;
    break;
  case 15:
    // LSA_MMR6
    printOperand/* printOperand (+ ) */(MI, 0, O);
    SStream_concat0(O, ", ");
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 3, O);
    return;
    break;
  case 16:
    // SLL64_32, SLL64_64
    SStream_concat0(O, ", 0");
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 32) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    printOperand/* printOperand (+ ) */(MI, 2, O);
    break;
  case 1:
    // MFTC0, ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, ANDI_MMR6, ANDi, AN...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 2, O);
    break;
  case 2:
    // MTTC0, DMTC0, DMTC2, DMTGC0, MTC0, MTC0_MMR6, MTC2, MTGC0, MTGC0_MM, M...
    return;
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 3, O);
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand/* printOperand (+ ) */(MI, 3, O);
    break;
  case 5:
    // FADD_S_MMR6, FDIV_S_MMR6, FMUL_S_MMR6, FSUB_S_MMR6
    printOperand/* printOperand (+ ) */(MI, 1, O);
    return;
    break;
  case 6:
    // MTTR
    SStream_concat0(O, ", ");
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 3, O);
    SStream_concat0(O, ", ");
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 4, O);
    return;
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 35) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DEXT, DE...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    SStream_concat0(O, "]");
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MOVEP_MM, MOVEP_MM...
    printOperand/* printOperand (+ ) */(MI, 3, O);
    return;
  } else {
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DEXT, DE...
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 3, O);
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // MFTR
    SStream_concat0(O, ", ");
    printUnsignedImm/* printUnsignedImm (+ ) */(MI, 4, O);
    return;
  } else {
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DEXT, DE...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 442 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "f10\0"
  /* 4 */ "w10\0"
  /* 8 */ "f20\0"
  /* 12 */ "DSPOutFlag20\0"
  /* 25 */ "w20\0"
  /* 29 */ "f30\0"
  /* 33 */ "w30\0"
  /* 37 */ "ac0\0"
  /* 41 */ "fcc0\0"
  /* 46 */ "f0\0"
  /* 49 */ "mpl0\0"
  /* 54 */ "p0\0"
  /* 57 */ "w0\0"
  /* 60 */ "f11\0"
  /* 64 */ "w11\0"
  /* 68 */ "f21\0"
  /* 72 */ "DSPOutFlag21\0"
  /* 85 */ "w21\0"
  /* 89 */ "f31\0"
  /* 93 */ "w31\0"
  /* 97 */ "ac1\0"
  /* 101 */ "fcc1\0"
  /* 106 */ "f1\0"
  /* 109 */ "mpl1\0"
  /* 114 */ "p1\0"
  /* 117 */ "w1\0"
  /* 120 */ "f12\0"
  /* 124 */ "w12\0"
  /* 128 */ "f22\0"
  /* 132 */ "DSPOutFlag22\0"
  /* 145 */ "w22\0"
  /* 149 */ "ac2\0"
  /* 153 */ "fcc2\0"
  /* 158 */ "f2\0"
  /* 161 */ "mpl2\0"
  /* 166 */ "p2\0"
  /* 169 */ "w2\0"
  /* 172 */ "f13\0"
  /* 176 */ "w13\0"
  /* 180 */ "f23\0"
  /* 184 */ "DSPOutFlag23\0"
  /* 197 */ "w23\0"
  /* 201 */ "ac3\0"
  /* 205 */ "fcc3\0"
  /* 210 */ "f3\0"
  /* 213 */ "w3\0"
  /* 216 */ "f14\0"
  /* 220 */ "w14\0"
  /* 224 */ "f24\0"
  /* 228 */ "w24\0"
  /* 232 */ "fcc4\0"
  /* 237 */ "f4\0"
  /* 240 */ "w4\0"
  /* 243 */ "f15\0"
  /* 247 */ "w15\0"
  /* 251 */ "f25\0"
  /* 255 */ "w25\0"
  /* 259 */ "fcc5\0"
  /* 264 */ "f5\0"
  /* 267 */ "w5\0"
  /* 270 */ "f16\0"
  /* 274 */ "w16\0"
  /* 278 */ "f26\0"
  /* 282 */ "w26\0"
  /* 286 */ "fcc6\0"
  /* 291 */ "f6\0"
  /* 294 */ "w6\0"
  /* 297 */ "f17\0"
  /* 301 */ "w17\0"
  /* 305 */ "f27\0"
  /* 309 */ "w27\0"
  /* 313 */ "fcc7\0"
  /* 318 */ "f7\0"
  /* 321 */ "w7\0"
  /* 324 */ "f18\0"
  /* 328 */ "w18\0"
  /* 332 */ "f28\0"
  /* 336 */ "w28\0"
  /* 340 */ "f8\0"
  /* 343 */ "w8\0"
  /* 346 */ "DSPOutFlag16_19\0"
  /* 362 */ "f19\0"
  /* 366 */ "w19\0"
  /* 370 */ "f29\0"
  /* 374 */ "w29\0"
  /* 378 */ "f9\0"
  /* 381 */ "w9\0"
  /* 384 */ "DSPEFI\0"
  /* 391 */ "ra\0"
  /* 394 */ "hwr_cc\0"
  /* 401 */ "pc\0"
  /* 404 */ "DSPCCond\0"
  /* 413 */ "DSPOutFlag\0"
  /* 424 */ "hi\0"
  /* 427 */ "hwr_cpunum\0"
  /* 438 */ "lo\0"
  /* 441 */ "zero\0"
  /* 446 */ "hwr_synci_step\0"
  /* 461 */ "fp\0"
  /* 464 */ "gp\0"
  /* 467 */ "sp\0"
  /* 470 */ "hwr_ccres\0"
  /* 480 */ "DSPPos\0"
  /* 487 */ "DSPSCount\0"
  /* 497 */ "DSPCarry\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 
    359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 54, 
    114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 181, 467, 326, 360, 
    1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 57, 117, 169, 213, 
    240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 220, 247, 274, 301, 
    328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 336, 374, 33, 93, 
    441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 346, 424, 279, 306, 
    438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 360, 1, 61, 121, 
    173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#endif
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

void printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         SStream *OS);

static char* printAliasInstr(MCInst *MI, SStream *OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {Mips_MFTACX, 0, 1 },
    {Mips_MFTC0, 1, 1 },
    {Mips_MFTHI, 2, 1 },
    {Mips_MFTLO, 3, 1 },
    {Mips_MTTACX, 4, 1 },
    {Mips_MTTC0, 5, 1 },
    {Mips_MTTHI, 6, 1 },
    {Mips_MTTLO, 7, 1 },
    {Mips_NORImm, 8, 1 },
    {Mips_NORImm64, 9, 1 },
    {Mips_SLTImm64, 10, 1 },
    {Mips_SLTUImm64, 11, 1 },
    {Mips_ADDIUPC, 12, 1 },
    {Mips_ADDIUPC_MMR6, 13, 1 },
    {Mips_ADDu, 14, 1 },
    {Mips_BC1F, 15, 1 },
    {Mips_BC1FL, 16, 1 },
    {Mips_BC1F_MM, 17, 1 },
    {Mips_BC1T, 18, 1 },
    {Mips_BC1TL, 19, 1 },
    {Mips_BC1T_MM, 20, 1 },
    {Mips_BEQL, 21, 1 },
    {Mips_BGEZAL, 22, 1 },
    {Mips_BGEZAL_MM, 23, 1 },
    {Mips_BNEL, 24, 1 },
    {Mips_BREAK, 25, 2 },
    {Mips_BREAK_MM, 27, 2 },
    {Mips_C_EQ_D32, 29, 1 },
    {Mips_C_EQ_D32_MM, 30, 1 },
    {Mips_C_EQ_D64, 31, 1 },
    {Mips_C_EQ_D64_MM, 32, 1 },
    {Mips_C_EQ_S, 33, 1 },
    {Mips_C_EQ_S_MM, 34, 1 },
    {Mips_C_F_D32, 35, 1 },
    {Mips_C_F_D32_MM, 36, 1 },
    {Mips_C_F_D64, 37, 1 },
    {Mips_C_F_D64_MM, 38, 1 },
    {Mips_C_F_S, 39, 1 },
    {Mips_C_F_S_MM, 40, 1 },
    {Mips_C_LE_D32, 41, 1 },
    {Mips_C_LE_D32_MM, 42, 1 },
    {Mips_C_LE_D64, 43, 1 },
    {Mips_C_LE_D64_MM, 44, 1 },
    {Mips_C_LE_S, 45, 1 },
    {Mips_C_LE_S_MM, 46, 1 },
    {Mips_C_LT_D32, 47, 1 },
    {Mips_C_LT_D32_MM, 48, 1 },
    {Mips_C_LT_D64, 49, 1 },
    {Mips_C_LT_D64_MM, 50, 1 },
    {Mips_C_LT_S, 51, 1 },
    {Mips_C_LT_S_MM, 52, 1 },
    {Mips_C_NGE_D32, 53, 1 },
    {Mips_C_NGE_D32_MM, 54, 1 },
    {Mips_C_NGE_D64, 55, 1 },
    {Mips_C_NGE_D64_MM, 56, 1 },
    {Mips_C_NGE_S, 57, 1 },
    {Mips_C_NGE_S_MM, 58, 1 },
    {Mips_C_NGLE_D32, 59, 1 },
    {Mips_C_NGLE_D32_MM, 60, 1 },
    {Mips_C_NGLE_D64, 61, 1 },
    {Mips_C_NGLE_D64_MM, 62, 1 },
    {Mips_C_NGLE_S, 63, 1 },
    {Mips_C_NGLE_S_MM, 64, 1 },
    {Mips_C_NGL_D32, 65, 1 },
    {Mips_C_NGL_D32_MM, 66, 1 },
    {Mips_C_NGL_D64, 67, 1 },
    {Mips_C_NGL_D64_MM, 68, 1 },
    {Mips_C_NGL_S, 69, 1 },
    {Mips_C_NGL_S_MM, 70, 1 },
    {Mips_C_NGT_D32, 71, 1 },
    {Mips_C_NGT_D32_MM, 72, 1 },
    {Mips_C_NGT_D64, 73, 1 },
    {Mips_C_NGT_D64_MM, 74, 1 },
    {Mips_C_NGT_S, 75, 1 },
    {Mips_C_NGT_S_MM, 76, 1 },
    {Mips_C_OLE_D32, 77, 1 },
    {Mips_C_OLE_D32_MM, 78, 1 },
    {Mips_C_OLE_D64, 79, 1 },
    {Mips_C_OLE_D64_MM, 80, 1 },
    {Mips_C_OLE_S, 81, 1 },
    {Mips_C_OLE_S_MM, 82, 1 },
    {Mips_C_OLT_D32, 83, 1 },
    {Mips_C_OLT_D32_MM, 84, 1 },
    {Mips_C_OLT_D64, 85, 1 },
    {Mips_C_OLT_D64_MM, 86, 1 },
    {Mips_C_OLT_S, 87, 1 },
    {Mips_C_OLT_S_MM, 88, 1 },
    {Mips_C_SEQ_D32, 89, 1 },
    {Mips_C_SEQ_D32_MM, 90, 1 },
    {Mips_C_SEQ_D64, 91, 1 },
    {Mips_C_SEQ_D64_MM, 92, 1 },
    {Mips_C_SEQ_S, 93, 1 },
    {Mips_C_SEQ_S_MM, 94, 1 },
    {Mips_C_SF_D32, 95, 1 },
    {Mips_C_SF_D32_MM, 96, 1 },
    {Mips_C_SF_D64, 97, 1 },
    {Mips_C_SF_D64_MM, 98, 1 },
    {Mips_C_SF_S, 99, 1 },
    {Mips_C_SF_S_MM, 100, 1 },
    {Mips_C_UEQ_D32, 101, 1 },
    {Mips_C_UEQ_D32_MM, 102, 1 },
    {Mips_C_UEQ_D64, 103, 1 },
    {Mips_C_UEQ_D64_MM, 104, 1 },
    {Mips_C_UEQ_S, 105, 1 },
    {Mips_C_UEQ_S_MM, 106, 1 },
    {Mips_C_ULE_D32, 107, 1 },
    {Mips_C_ULE_D32_MM, 108, 1 },
    {Mips_C_ULE_D64, 109, 1 },
    {Mips_C_ULE_D64_MM, 110, 1 },
    {Mips_C_ULE_S, 111, 1 },
    {Mips_C_ULE_S_MM, 112, 1 },
    {Mips_C_ULT_D32, 113, 1 },
    {Mips_C_ULT_D32_MM, 114, 1 },
    {Mips_C_ULT_D64, 115, 1 },
    {Mips_C_ULT_D64_MM, 116, 1 },
    {Mips_C_ULT_S, 117, 1 },
    {Mips_C_ULT_S_MM, 118, 1 },
    {Mips_C_UN_D32, 119, 1 },
    {Mips_C_UN_D32_MM, 120, 1 },
    {Mips_C_UN_D64, 121, 1 },
    {Mips_C_UN_D64_MM, 122, 1 },
    {Mips_C_UN_S, 123, 1 },
    {Mips_C_UN_S_MM, 124, 1 },
    {Mips_DADDu, 125, 1 },
    {Mips_DI, 126, 1 },
    {Mips_DIV, 127, 1 },
    {Mips_DIVU, 128, 1 },
    {Mips_DI_MM, 129, 1 },
    {Mips_DI_MMR6, 130, 1 },
    {Mips_DMT, 131, 1 },
    {Mips_DSUB, 132, 2 },
    {Mips_DSUBu, 134, 2 },
    {Mips_DVPE, 136, 1 },
    {Mips_EI, 137, 1 },
    {Mips_EI_MM, 138, 1 },
    {Mips_EI_MMR6, 139, 1 },
    {Mips_EMT, 140, 1 },
    {Mips_EVPE, 141, 1 },
    {Mips_HYPCALL, 142, 1 },
    {Mips_HYPCALL_MM, 143, 1 },
    {Mips_JALR, 144, 1 },
    {Mips_JALR64, 145, 1 },
    {Mips_JALRC_HB_MMR6, 146, 1 },
    {Mips_JALRC_MMR6, 147, 1 },
    {Mips_JALR_HB, 148, 1 },
    {Mips_JALR_HB64, 149, 1 },
    {Mips_JIALC, 150, 1 },
    {Mips_JIALC64, 151, 1 },
    {Mips_JIC, 152, 1 },
    {Mips_JIC64, 153, 1 },
    {Mips_MOVE16_MM, 154, 1 },
    {Mips_Move32R16, 155, 1 },
    {Mips_OR, 156, 1 },
    {Mips_OR64, 157, 1 },
    {Mips_RDHWR, 158, 1 },
    {Mips_RDHWR64, 159, 1 },
    {Mips_RDHWR_MM, 160, 1 },
    {Mips_RDHWR_MMR6, 161, 1 },
    {Mips_SDBBP, 162, 1 },
    {Mips_SDBBP_MMR6, 163, 1 },
    {Mips_SDBBP_R6, 164, 1 },
    {Mips_SIGRIE, 165, 1 },
    {Mips_SIGRIE_MMR6, 166, 1 },
    {Mips_SLL, 167, 1 },
    {Mips_SLL_MM, 168, 1 },
    {Mips_SLL_MMR6, 169, 1 },
    {Mips_SUB, 170, 2 },
    {Mips_SUBU_MMR6, 172, 2 },
    {Mips_SUB_MM, 174, 2 },
    {Mips_SUB_MMR6, 176, 2 },
    {Mips_SUBu, 178, 2 },
    {Mips_SUBu_MM, 180, 2 },
    {Mips_SWSP_MM, 182, 1 },
    {Mips_SYNC, 183, 1 },
    {Mips_SYNC_MM, 184, 1 },
    {Mips_SYNC_MMR6, 185, 1 },
    {Mips_SYSCALL, 186, 1 },
    {Mips_SYSCALL_MM, 187, 1 },
    {Mips_TEQ, 188, 1 },
    {Mips_TEQ_MM, 189, 1 },
    {Mips_TGE, 190, 1 },
    {Mips_TGEU, 191, 1 },
    {Mips_TGEU_MM, 192, 1 },
    {Mips_TGE_MM, 193, 1 },
    {Mips_TLT, 194, 1 },
    {Mips_TLTU, 195, 1 },
    {Mips_TLTU_MM, 196, 1 },
    {Mips_TLT_MM, 197, 1 },
    {Mips_TNE, 198, 1 },
    {Mips_TNE_MM, 199, 1 },
    {Mips_WAIT_MM, 200, 1 },
    {Mips_WRDSP, 201, 1 },
    {Mips_WRDSP_MM, 202, 1 },
    {Mips_YIELD, 203, 1 },
  };

  static const AliasPattern Patterns[] = {
    // Mips::MFTACX - 0
    {0, 0, 2, 2 },
    // Mips::MFTC0 - 1
    {10, 2, 3, 3 },
    // Mips::MFTHI - 2
    {23, 5, 2, 2 },
    // Mips::MFTLO - 3
    {32, 7, 2, 2 },
    // Mips::MTTACX - 4
    {41, 9, 2, 2 },
    // Mips::MTTC0 - 5
    {51, 11, 3, 3 },
    // Mips::MTTHI - 6
    {64, 14, 2, 2 },
    // Mips::MTTLO - 7
    {73, 16, 2, 2 },
    // Mips::NORImm - 8
    {82, 18, 3, 2 },
    // Mips::NORImm64 - 9
    {82, 20, 3, 2 },
    // Mips::SLTImm64 - 10
    {93, 22, 3, 2 },
    // Mips::SLTUImm64 - 11
    {104, 24, 3, 2 },
    // Mips::ADDIUPC - 12
    {116, 26, 2, 1 },
    // Mips::ADDIUPC_MMR6 - 13
    {116, 27, 2, 1 },
    // Mips::ADDu - 14
    {128, 28, 3, 3 },
    // Mips::BC1F - 15
    {140, 31, 2, 1 },
    // Mips::BC1FL - 16
    {148, 32, 2, 1 },
    // Mips::BC1F_MM - 17
    {140, 33, 2, 1 },
    // Mips::BC1T - 18
    {157, 34, 2, 1 },
    // Mips::BC1TL - 19
    {165, 35, 2, 1 },
    // Mips::BC1T_MM - 20
    {157, 36, 2, 1 },
    // Mips::BEQL - 21
    {174, 37, 3, 2 },
    // Mips::BGEZAL - 22
    {187, 39, 2, 1 },
    // Mips::BGEZAL_MM - 23
    {187, 40, 2, 1 },
    // Mips::BNEL - 24
    {194, 41, 3, 2 },
    // Mips::BREAK - 25
    {207, 43, 2, 2 },
    {213, 45, 2, 2 },
    // Mips::BREAK_MM - 27
    {207, 47, 2, 2 },
    {213, 49, 2, 2 },
    // Mips::C_EQ_D32 - 29
    {224, 51, 3, 3 },
    // Mips::C_EQ_D32_MM - 30
    {224, 54, 3, 3 },
    // Mips::C_EQ_D64 - 31
    {224, 57, 3, 3 },
    // Mips::C_EQ_D64_MM - 32
    {224, 60, 3, 3 },
    // Mips::C_EQ_S - 33
    {238, 63, 3, 3 },
    // Mips::C_EQ_S_MM - 34
    {238, 66, 3, 3 },
    // Mips::C_F_D32 - 35
    {252, 69, 3, 3 },
    // Mips::C_F_D32_MM - 36
    {252, 72, 3, 3 },
    // Mips::C_F_D64 - 37
    {252, 75, 3, 3 },
    // Mips::C_F_D64_MM - 38
    {252, 78, 3, 3 },
    // Mips::C_F_S - 39
    {265, 81, 3, 3 },
    // Mips::C_F_S_MM - 40
    {265, 84, 3, 3 },
    // Mips::C_LE_D32 - 41
    {278, 87, 3, 3 },
    // Mips::C_LE_D32_MM - 42
    {278, 90, 3, 3 },
    // Mips::C_LE_D64 - 43
    {278, 93, 3, 3 },
    // Mips::C_LE_D64_MM - 44
    {278, 96, 3, 3 },
    // Mips::C_LE_S - 45
    {292, 99, 3, 3 },
    // Mips::C_LE_S_MM - 46
    {292, 102, 3, 3 },
    // Mips::C_LT_D32 - 47
    {306, 105, 3, 3 },
    // Mips::C_LT_D32_MM - 48
    {306, 108, 3, 3 },
    // Mips::C_LT_D64 - 49
    {306, 111, 3, 3 },
    // Mips::C_LT_D64_MM - 50
    {306, 114, 3, 3 },
    // Mips::C_LT_S - 51
    {320, 117, 3, 3 },
    // Mips::C_LT_S_MM - 52
    {320, 120, 3, 3 },
    // Mips::C_NGE_D32 - 53
    {334, 123, 3, 3 },
    // Mips::C_NGE_D32_MM - 54
    {334, 126, 3, 3 },
    // Mips::C_NGE_D64 - 55
    {334, 129, 3, 3 },
    // Mips::C_NGE_D64_MM - 56
    {334, 132, 3, 3 },
    // Mips::C_NGE_S - 57
    {349, 135, 3, 3 },
    // Mips::C_NGE_S_MM - 58
    {349, 138, 3, 3 },
    // Mips::C_NGLE_D32 - 59
    {364, 141, 3, 3 },
    // Mips::C_NGLE_D32_MM - 60
    {364, 144, 3, 3 },
    // Mips::C_NGLE_D64 - 61
    {364, 147, 3, 3 },
    // Mips::C_NGLE_D64_MM - 62
    {364, 150, 3, 3 },
    // Mips::C_NGLE_S - 63
    {380, 153, 3, 3 },
    // Mips::C_NGLE_S_MM - 64
    {380, 156, 3, 3 },
    // Mips::C_NGL_D32 - 65
    {396, 159, 3, 3 },
    // Mips::C_NGL_D32_MM - 66
    {396, 162, 3, 3 },
    // Mips::C_NGL_D64 - 67
    {396, 165, 3, 3 },
    // Mips::C_NGL_D64_MM - 68
    {396, 168, 3, 3 },
    // Mips::C_NGL_S - 69
    {411, 171, 3, 3 },
    // Mips::C_NGL_S_MM - 70
    {411, 174, 3, 3 },
    // Mips::C_NGT_D32 - 71
    {426, 177, 3, 3 },
    // Mips::C_NGT_D32_MM - 72
    {426, 180, 3, 3 },
    // Mips::C_NGT_D64 - 73
    {426, 183, 3, 3 },
    // Mips::C_NGT_D64_MM - 74
    {426, 186, 3, 3 },
    // Mips::C_NGT_S - 75
    {441, 189, 3, 3 },
    // Mips::C_NGT_S_MM - 76
    {441, 192, 3, 3 },
    // Mips::C_OLE_D32 - 77
    {456, 195, 3, 3 },
    // Mips::C_OLE_D32_MM - 78
    {456, 198, 3, 3 },
    // Mips::C_OLE_D64 - 79
    {456, 201, 3, 3 },
    // Mips::C_OLE_D64_MM - 80
    {456, 204, 3, 3 },
    // Mips::C_OLE_S - 81
    {471, 207, 3, 3 },
    // Mips::C_OLE_S_MM - 82
    {471, 210, 3, 3 },
    // Mips::C_OLT_D32 - 83
    {486, 213, 3, 3 },
    // Mips::C_OLT_D32_MM - 84
    {486, 216, 3, 3 },
    // Mips::C_OLT_D64 - 85
    {486, 219, 3, 3 },
    // Mips::C_OLT_D64_MM - 86
    {486, 222, 3, 3 },
    // Mips::C_OLT_S - 87
    {501, 225, 3, 3 },
    // Mips::C_OLT_S_MM - 88
    {501, 228, 3, 3 },
    // Mips::C_SEQ_D32 - 89
    {516, 231, 3, 3 },
    // Mips::C_SEQ_D32_MM - 90
    {516, 234, 3, 3 },
    // Mips::C_SEQ_D64 - 91
    {516, 237, 3, 3 },
    // Mips::C_SEQ_D64_MM - 92
    {516, 240, 3, 3 },
    // Mips::C_SEQ_S - 93
    {531, 243, 3, 3 },
    // Mips::C_SEQ_S_MM - 94
    {531, 246, 3, 3 },
    // Mips::C_SF_D32 - 95
    {546, 249, 3, 3 },
    // Mips::C_SF_D32_MM - 96
    {546, 252, 3, 3 },
    // Mips::C_SF_D64 - 97
    {546, 255, 3, 3 },
    // Mips::C_SF_D64_MM - 98
    {546, 258, 3, 3 },
    // Mips::C_SF_S - 99
    {560, 261, 3, 3 },
    // Mips::C_SF_S_MM - 100
    {560, 264, 3, 3 },
    // Mips::C_UEQ_D32 - 101
    {574, 267, 3, 3 },
    // Mips::C_UEQ_D32_MM - 102
    {574, 270, 3, 3 },
    // Mips::C_UEQ_D64 - 103
    {574, 273, 3, 3 },
    // Mips::C_UEQ_D64_MM - 104
    {574, 276, 3, 3 },
    // Mips::C_UEQ_S - 105
    {589, 279, 3, 3 },
    // Mips::C_UEQ_S_MM - 106
    {589, 282, 3, 3 },
    // Mips::C_ULE_D32 - 107
    {604, 285, 3, 3 },
    // Mips::C_ULE_D32_MM - 108
    {604, 288, 3, 3 },
    // Mips::C_ULE_D64 - 109
    {604, 291, 3, 3 },
    // Mips::C_ULE_D64_MM - 110
    {604, 294, 3, 3 },
    // Mips::C_ULE_S - 111
    {619, 297, 3, 3 },
    // Mips::C_ULE_S_MM - 112
    {619, 300, 3, 3 },
    // Mips::C_ULT_D32 - 113
    {634, 303, 3, 3 },
    // Mips::C_ULT_D32_MM - 114
    {634, 306, 3, 3 },
    // Mips::C_ULT_D64 - 115
    {634, 309, 3, 3 },
    // Mips::C_ULT_D64_MM - 116
    {634, 312, 3, 3 },
    // Mips::C_ULT_S - 117
    {649, 315, 3, 3 },
    // Mips::C_ULT_S_MM - 118
    {649, 318, 3, 3 },
    // Mips::C_UN_D32 - 119
    {664, 321, 3, 3 },
    // Mips::C_UN_D32_MM - 120
    {664, 324, 3, 3 },
    // Mips::C_UN_D64 - 121
    {664, 327, 3, 3 },
    // Mips::C_UN_D64_MM - 122
    {664, 330, 3, 3 },
    // Mips::C_UN_S - 123
    {678, 333, 3, 3 },
    // Mips::C_UN_S_MM - 124
    {678, 336, 3, 3 },
    // Mips::DADDu - 125
    {128, 339, 3, 3 },
    // Mips::DI - 126
    {692, 342, 1, 1 },
    // Mips::DIV - 127
    {695, 343, 3, 3 },
    // Mips::DIVU - 128
    {706, 346, 3, 3 },
    // Mips::DI_MM - 129
    {692, 349, 1, 1 },
    // Mips::DI_MMR6 - 130
    {692, 350, 1, 1 },
    // Mips::DMT - 131
    {718, 351, 1, 1 },
    // Mips::DSUB - 132
    {722, 352, 3, 3 },
    {734, 355, 3, 3 },
    // Mips::DSUBu - 134
    {742, 358, 3, 3 },
    {755, 361, 3, 3 },
    // Mips::DVPE - 136
    {764, 364, 1, 1 },
    // Mips::EI - 137
    {769, 365, 1, 1 },
    // Mips::EI_MM - 138
    {769, 366, 1, 1 },
    // Mips::EI_MMR6 - 139
    {769, 367, 1, 1 },
    // Mips::EMT - 140
    {772, 368, 1, 1 },
    // Mips::EVPE - 141
    {776, 369, 1, 1 },
    // Mips::HYPCALL - 142
    {781, 370, 1, 1 },
    // Mips::HYPCALL_MM - 143
    {781, 371, 1, 1 },
    // Mips::JALR - 144
    {789, 372, 2, 2 },
    // Mips::JALR64 - 145
    {789, 374, 2, 2 },
    // Mips::JALRC_HB_MMR6 - 146
    {795, 376, 2, 2 },
    // Mips::JALRC_MMR6 - 147
    {807, 378, 2, 2 },
    // Mips::JALR_HB - 148
    {816, 380, 2, 2 },
    // Mips::JALR_HB64 - 149
    {816, 382, 2, 2 },
    // Mips::JIALC - 150
    {827, 384, 2, 2 },
    // Mips::JIALC64 - 151
    {827, 386, 2, 2 },
    // Mips::JIC - 152
    {836, 388, 2, 2 },
    // Mips::JIC64 - 153
    {836, 390, 2, 2 },
    // Mips::MOVE16_MM - 154
    {843, 392, 2, 2 },
    // Mips::Move32R16 - 155
    {843, 394, 2, 2 },
    // Mips::OR - 156
    {128, 396, 3, 3 },
    // Mips::OR64 - 157
    {128, 399, 3, 3 },
    // Mips::RDHWR - 158
    {847, 402, 3, 3 },
    // Mips::RDHWR64 - 159
    {847, 405, 3, 3 },
    // Mips::RDHWR_MM - 160
    {847, 408, 3, 3 },
    // Mips::RDHWR_MMR6 - 161
    {847, 411, 3, 3 },
    // Mips::SDBBP - 162
    {860, 414, 1, 1 },
    // Mips::SDBBP_MMR6 - 163
    {860, 415, 1, 1 },
    // Mips::SDBBP_R6 - 164
    {860, 416, 1, 1 },
    // Mips::SIGRIE - 165
    {866, 417, 1, 1 },
    // Mips::SIGRIE_MMR6 - 166
    {866, 418, 1, 1 },
    // Mips::SLL - 167
    {843, 419, 3, 3 },
    // Mips::SLL_MM - 168
    {843, 422, 3, 3 },
    // Mips::SLL_MMR6 - 169
    {843, 425, 3, 3 },
    // Mips::SUB - 170
    {873, 428, 3, 3 },
    {884, 431, 3, 3 },
    // Mips::SUBU_MMR6 - 172
    {891, 434, 3, 3 },
    {903, 437, 3, 3 },
    // Mips::SUB_MM - 174
    {873, 440, 3, 3 },
    {884, 443, 3, 3 },
    // Mips::SUB_MMR6 - 176
    {873, 446, 3, 3 },
    {884, 449, 3, 3 },
    // Mips::SUBu - 178
    {891, 452, 3, 3 },
    {903, 455, 3, 3 },
    // Mips::SUBu_MM - 180
    {891, 458, 3, 3 },
    {903, 461, 3, 3 },
    // Mips::SWSP_MM - 182
    {911, 464, 3, 1 },
    // Mips::SYNC - 183
    {923, 465, 1, 1 },
    // Mips::SYNC_MM - 184
    {923, 466, 1, 1 },
    // Mips::SYNC_MMR6 - 185
    {923, 467, 1, 1 },
    // Mips::SYSCALL - 186
    {928, 468, 1, 1 },
    // Mips::SYSCALL_MM - 187
    {928, 469, 1, 1 },
    // Mips::TEQ - 188
    {936, 470, 3, 3 },
    // Mips::TEQ_MM - 189
    {936, 473, 3, 3 },
    // Mips::TGE - 190
    {947, 476, 3, 3 },
    // Mips::TGEU - 191
    {958, 479, 3, 3 },
    // Mips::TGEU_MM - 192
    {958, 482, 3, 3 },
    // Mips::TGE_MM - 193
    {947, 485, 3, 3 },
    // Mips::TLT - 194
    {970, 488, 3, 3 },
    // Mips::TLTU - 195
    {981, 491, 3, 3 },
    // Mips::TLTU_MM - 196
    {981, 494, 3, 3 },
    // Mips::TLT_MM - 197
    {970, 497, 3, 3 },
    // Mips::TNE - 198
    {993, 500, 3, 3 },
    // Mips::TNE_MM - 199
    {993, 503, 3, 3 },
    // Mips::WAIT_MM - 200
    {1004, 506, 1, 1 },
    // Mips::WRDSP - 201
    {1009, 507, 2, 2 },
    // Mips::WRDSP_MM - 202
    {1009, 509, 2, 2 },
    // Mips::YIELD - 203
    {1018, 511, 2, 2 },
  };

  static const AliasPatternCond Conds[] = {
    // (MFTACX GPR32Opnd:$rt, AC0) - 0
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_AC0},
    // (MFTC0 GPR32Opnd:$rd, COP0Opnd:$rt, 0) - 2
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_COP0RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MFTHI GPR32Opnd:$rt, AC0) - 5
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_AC0},
    // (MFTLO GPR32Opnd:$rt, AC0) - 7
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_AC0},
    // (MTTACX AC0, GPR32Opnd:$rt) - 9
    {AliasPatternCond_K_Reg, Mips_AC0},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (MTTC0 COP0Opnd:$rt, GPR32Opnd:$rd, 0) - 11
    {AliasPatternCond_K_RegClass, Mips_COP0RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MTTHI AC0, GPR32Opnd:$rt) - 14
    {AliasPatternCond_K_Reg, Mips_AC0},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (MTTLO AC0, GPR32Opnd:$rt) - 16
    {AliasPatternCond_K_Reg, Mips_AC0},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (NORImm GPR32Opnd:$rs, GPR32Opnd:$rs, simm32_relaxed:$imm) - 18
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    // (NORImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm) - 20
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    // (SLTImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm) - 22
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    // (SLTUImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm) - 24
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    // (ADDIUPC GPR32Opnd:$rd, simm19_lsl2:$imm) - 26
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (ADDIUPC_MMR6 GPR32Opnd:$rd, simm19_lsl2:$imm) - 27
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO) - 28
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (BC1F FCC0, brtarget:$offset) - 31
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BC1FL FCC0, brtarget:$offset) - 32
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BC1F_MM FCC0, brtarget:$offset) - 33
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BC1T FCC0, brtarget:$offset) - 34
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BC1TL FCC0, brtarget:$offset) - 35
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BC1T_MM FCC0, brtarget:$offset) - 36
    {AliasPatternCond_K_Reg, Mips_FCC0},
    // (BEQL GPR32Opnd:$rs, ZERO, brtarget:$offset) - 37
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (BGEZAL ZERO, brtarget:$offset) - 39
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (BGEZAL_MM ZERO, brtarget_mm:$offset) - 40
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (BNEL GPR32Opnd:$rs, ZERO, brtarget:$offset) - 41
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (BREAK 0, 0) - 43
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (BREAK uimm10:$imm, 0) - 45
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (BREAK_MM 0, 0) - 47
    {AliasPatternCond_K_Imm, (uint32_t)0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (BREAK_MM uimm10:$imm, 0) - 49
    {AliasPatternCond_K_Ignore, 0},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (C_EQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 51
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_EQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 54
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_EQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 57
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_EQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 60
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_EQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 63
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_EQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 66
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_F_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 69
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_F_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 72
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_F_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 75
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_F_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 78
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_F_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 81
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_F_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 84
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_LE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 87
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_LE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 90
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_LE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 93
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_LE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 96
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_LE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 99
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_LE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 102
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_LT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 105
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_LT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 108
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_LT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 111
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_LT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 114
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_LT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 117
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_LT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 120
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 123
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 126
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 129
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 132
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 135
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 138
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 141
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 144
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 147
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 150
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 153
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 156
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGL_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 159
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGL_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 162
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGL_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 165
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGL_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 168
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGL_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 171
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGL_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 174
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 177
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 180
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_NGT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 183
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 186
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_NGT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 189
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_NGT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 192
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_OLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 195
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_OLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 198
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_OLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 201
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_OLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 204
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_OLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 207
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_OLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 210
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_OLT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 213
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_OLT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 216
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_OLT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 219
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_OLT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 222
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_OLT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 225
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_OLT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 228
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_SEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 231
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_SEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 234
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_SEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 237
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_SEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 240
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_SEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 243
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_SEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 246
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_SF_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 249
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_SF_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 252
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_SF_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 255
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_SF_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 258
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_SF_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 261
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_SF_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 264
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_UEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 267
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_UEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 270
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_UEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 273
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_UEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 276
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_UEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 279
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_UEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 282
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_ULE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 285
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_ULE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 288
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_ULE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 291
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_ULE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 294
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_ULE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 297
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_ULE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 300
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_ULT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 303
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_ULT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 306
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_ULT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 309
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_ULT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 312
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_ULT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 315
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_ULT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 318
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_UN_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 321
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_UN_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft) - 324
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_AFGR64RegClassID},
    // (C_UN_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 327
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_UN_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft) - 330
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR64RegClassID},
    // (C_UN_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 333
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (C_UN_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft) - 336
    {AliasPatternCond_K_Reg, Mips_FCC0},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_FGR32RegClassID},
    // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64) - 339
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    // (DI ZERO) - 342
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (DIV GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt) - 343
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (DIVU GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt) - 346
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_TiedReg, 0},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (DI_MM ZERO) - 349
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (DI_MMR6 ZERO) - 350
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (DMT ZERO) - 351
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs) - 352
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt) - 355
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    {AliasPatternCond_K_TiedReg, 0},
    // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs) - 358
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt) - 361
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    {AliasPatternCond_K_TiedReg, 0},
    // (DVPE ZERO) - 364
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (EI ZERO) - 365
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (EI_MM ZERO) - 366
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (EI_MMR6 ZERO) - 367
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (EMT ZERO) - 368
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (EVPE ZERO) - 369
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (HYPCALL 0) - 370
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (HYPCALL_MM 0) - 371
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (JALR ZERO, GPR32Opnd:$rs) - 372
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (JALR64 ZERO_64, GPR64Opnd:$rs) - 374
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs) - 376
    {AliasPatternCond_K_Reg, Mips_RA},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (JALRC_MMR6 RA, GPR32Opnd:$rs) - 378
    {AliasPatternCond_K_Reg, Mips_RA},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (JALR_HB RA, GPR32Opnd:$rs) - 380
    {AliasPatternCond_K_Reg, Mips_RA},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (JALR_HB64 RA_64, GPR64Opnd:$rs) - 382
    {AliasPatternCond_K_Reg, Mips_RA_64},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    // (JIALC GPR32Opnd:$rs, 0) - 384
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (JIALC64 GPR64Opnd:$rs, 0) - 386
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (JIC GPR32Opnd:$rs, 0) - 388
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (JIC64 GPR64Opnd:$rs, 0) - 390
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (MOVE16_MM ZERO, ZERO) - 392
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (Move32R16 ZERO, S0) - 394
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Reg, Mips_S0},
    // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO) - 396
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64) - 399
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO_64},
    // (RDHWR GPR32Opnd:$rt, HWRegsOpnd:$rs, 0) - 402
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_HWRegsRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RDHWR64 GPR64Opnd:$rt, HWRegsOpnd:$rs, 0) - 405
    {AliasPatternCond_K_RegClass, Mips_GPR64RegClassID},
    {AliasPatternCond_K_RegClass, Mips_HWRegsRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RDHWR_MM GPR32Opnd:$rt, HWRegsOpnd:$rs, 0) - 408
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_HWRegsRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0) - 411
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_HWRegsRegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SDBBP 0) - 414
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SDBBP_MMR6 0) - 415
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SDBBP_R6 0) - 416
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SIGRIE 0) - 417
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SIGRIE_MMR6 0) - 418
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SLL ZERO, ZERO, 0) - 419
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SLL_MM ZERO, ZERO, 0) - 422
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SLL_MMR6 ZERO, ZERO, 0) - 425
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 428
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 431
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SUBU_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 434
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUBU_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 437
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SUB_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 440
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUB_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 443
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SUB_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 446
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUB_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 449
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 452
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 455
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SUBu_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs) - 458
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SUBu_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt) - 461
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_TiedReg, 0},
    // (SWSP_MM GPR32Opnd:$rt, mem_mm_sp_imm5_lsl2:$offset) - 464
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    // (SYNC 0) - 465
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SYNC_MM 0) - 466
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SYNC_MMR6 0) - 467
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SYSCALL 0) - 468
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (SYSCALL_MM 0) - 469
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 470
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 473
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 476
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 479
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 482
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 485
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 488
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 491
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 494
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 497
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 500
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0) - 503
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (WAIT_MM 0) - 506
    {AliasPatternCond_K_Imm, (uint32_t)0},
    // (WRDSP GPR32Opnd:$rt, 31) - 507
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (WRDSP_MM GPR32Opnd:$rt, 31) - 509
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
    {AliasPatternCond_K_Imm, (uint32_t)31},
    // (YIELD ZERO, GPR32Opnd:$rs) - 511
    {AliasPatternCond_K_Reg, Mips_ZERO},
    {AliasPatternCond_K_RegClass, Mips_GPR32RegClassID},
  };

  static const char *AsmStrings[] = {
    /* 0 */ "mftacx $\x01\0"
    /* 10 */ "mftc0 $\x01, $\x02\0"
    /* 23 */ "mfthi $\x01\0"
    /* 32 */ "mftlo $\x01\0"
    /* 41 */ "mttacx $\x02\0"
    /* 51 */ "mttc0 $\x02, $\x01\0"
    /* 64 */ "mtthi $\x02\0"
    /* 73 */ "mttlo $\x02\0"
    /* 82 */ "nor	$\x01, $\x03\0"
    /* 93 */ "slt	$\x01, $\x03\0"
    /* 104 */ "sltu	$\x01, $\x03\0"
    /* 116 */ "lapc $\x01, $\x02\0"
    /* 128 */ "move $\x01, $\x02\0"
    /* 140 */ "bc1f $\x02\0"
    /* 148 */ "bc1fl $\x02\0"
    /* 157 */ "bc1t $\x02\0"
    /* 165 */ "bc1tl $\x02\0"
    /* 174 */ "beqzl $\x01, $\x03\0"
    /* 187 */ "bal $\x02\0"
    /* 194 */ "bnezl $\x01, $\x03\0"
    /* 207 */ "break\0"
    /* 213 */ "break $\xFF\x01\x01\0"
    /* 224 */ "c.eq.d $\x02, $\x03\0"
    /* 238 */ "c.eq.s $\x02, $\x03\0"
    /* 252 */ "c.f.d $\x02, $\x03\0"
    /* 265 */ "c.f.s $\x02, $\x03\0"
    /* 278 */ "c.le.d $\x02, $\x03\0"
    /* 292 */ "c.le.s $\x02, $\x03\0"
    /* 306 */ "c.lt.d $\x02, $\x03\0"
    /* 320 */ "c.lt.s $\x02, $\x03\0"
    /* 334 */ "c.nge.d $\x02, $\x03\0"
    /* 349 */ "c.nge.s $\x02, $\x03\0"
    /* 364 */ "c.ngle.d $\x02, $\x03\0"
    /* 380 */ "c.ngle.s $\x02, $\x03\0"
    /* 396 */ "c.ngl.d $\x02, $\x03\0"
    /* 411 */ "c.ngl.s $\x02, $\x03\0"
    /* 426 */ "c.ngt.d $\x02, $\x03\0"
    /* 441 */ "c.ngt.s $\x02, $\x03\0"
    /* 456 */ "c.ole.d $\x02, $\x03\0"
    /* 471 */ "c.ole.s $\x02, $\x03\0"
    /* 486 */ "c.olt.d $\x02, $\x03\0"
    /* 501 */ "c.olt.s $\x02, $\x03\0"
    /* 516 */ "c.seq.d $\x02, $\x03\0"
    /* 531 */ "c.seq.s $\x02, $\x03\0"
    /* 546 */ "c.sf.d $\x02, $\x03\0"
    /* 560 */ "c.sf.s $\x02, $\x03\0"
    /* 574 */ "c.ueq.d $\x02, $\x03\0"
    /* 589 */ "c.ueq.s $\x02, $\x03\0"
    /* 604 */ "c.ule.d $\x02, $\x03\0"
    /* 619 */ "c.ule.s $\x02, $\x03\0"
    /* 634 */ "c.ult.d $\x02, $\x03\0"
    /* 649 */ "c.ult.s $\x02, $\x03\0"
    /* 664 */ "c.un.d $\x02, $\x03\0"
    /* 678 */ "c.un.s $\x02, $\x03\0"
    /* 692 */ "di\0"
    /* 695 */ "div $\x01, $\x03\0"
    /* 706 */ "divu $\x01, $\x03\0"
    /* 718 */ "dmt\0"
    /* 722 */ "dneg $\x01, $\x03\0"
    /* 734 */ "dneg $\x01\0"
    /* 742 */ "dnegu $\x01, $\x03\0"
    /* 755 */ "dnegu $\x01\0"
    /* 764 */ "dvpe\0"
    /* 769 */ "ei\0"
    /* 772 */ "emt\0"
    /* 776 */ "evpe\0"
    /* 781 */ "hypcall\0"
    /* 789 */ "jr $\x02\0"
    /* 795 */ "jalrc.hb $\x02\0"
    /* 807 */ "jalrc $\x02\0"
    /* 816 */ "jalr.hb $\x02\0"
    /* 827 */ "jalrc $\x01\0"
    /* 836 */ "jrc $\x01\0"
    /* 843 */ "nop\0"
    /* 847 */ "rdhwr $\x01, $\x02\0"
    /* 860 */ "sdbbp\0"
    /* 866 */ "sigrie\0"
    /* 873 */ "neg $\x01, $\x03\0"
    /* 884 */ "neg $\x01\0"
    /* 891 */ "negu $\x01, $\x03\0"
    /* 903 */ "negu $\x01\0"
    /* 911 */ "sw $\x01, $\xFF\x02\x02\0"
    /* 923 */ "sync\0"
    /* 928 */ "syscall\0"
    /* 936 */ "teq $\x01, $\x02\0"
    /* 947 */ "tge $\x01, $\x02\0"
    /* 958 */ "tgeu $\x01, $\x02\0"
    /* 970 */ "tlt $\x01, $\x02\0"
    /* 981 */ "tltu $\x01, $\x02\0"
    /* 993 */ "tne $\x01, $\x02\0"
    /* 1004 */ "wait\0"
    /* 1009 */ "wrdsp $\x01\0"
    /* 1018 */ "yield $\x02\0"
  };

  const char *AsmString = MCInstPrinter_matchAliasPatterns(MI, OpToPatterns, Patterns, Conds, AsmStrings, 194);
  if (!AsmString) return false;

  char* tmpString = cs_strdup(AsmString);

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;

  tmpString[I] = 0;
  SStream_concat0(OS, tmpString);

  SStream_concat0(OS, "\t");
  SStream_concat0(OS, AsmString + I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      SStream_concat0(OS, "\t");
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, ((unsigned)AsmString[I++]) - 1, OS);
      } else {
        SStream_concat0(OS, AsmString + (I++));
      }
    } while (AsmString[I] != '\0');
  }

  return tmpString;
}

void printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         SStream *OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
// printUImm<10>
  case 0:
    printUnsignedImm(MI, OpIdx, OS);
    break;
// printMemOperand
  case 1:
    printMemOperand(MI, OpIdx, OS, "");
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
